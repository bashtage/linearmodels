Search.setIndex({"alltitles": {"1-Step Estimation using Seemingly Unrelated Regression (SUR)": [[69, "1-Step-Estimation-using-Seemingly-Unrelated-Regression-(SUR)"]], "2-Step Estimation": [[69, "2-Step-Estimation"]], "2SLS Estimation": [[154, "sls-estimation"]], "2SLS and LIML Post-estimation Results": [[395, "sls-and-liml-post-estimation-results"]], "2SLS as OLS": [[150, "2SLS-as-OLS"]], "Absorbing Least Squares": [[396, "absorbing-least-squares"]], "Absorbing Regression": [[149, null]], "Alternative Covariance Estimators": [[715, "Alternative-Covariance-Estimators"]], "Alternative covariance estimators": [[150, "Alternative-covariance-estimators"]], "Asset Pricing": [[713, "asset-pricing"]], "Available Syntax": [[70, "Available-Syntax"]], "Basic Examples": [[151, null]], "Basic Notation": [[719, "basic-notation"], [719, "basic-notation-1"]], "Basic Statistics": [[395, "basic-statistics"]], "Basic Usage": [[152, "Basic-Usage"], [715, "Basic-Usage"]], "Basic regression on panel data": [[398, "Basic-regression-on-panel-data"]], "Berndt": [[719, "berndt"]], "Between Estimation (BetweenOLS)": [[403, "between-estimation-betweenols"]], "Between OLS": [[399, "Between-OLS"]], "Between R^{2}": [[403, "between-r-2"]], "BetweenR^{2} (correlation method)": [[403, "betweenr-2-correlation-method"]], "Categorical Variables": [[151, "Categorical-Variables"]], "Change Log": [[75, null]], "Changing the weighting matrix structure in GMM estimation": [[150, "Changing-the-weighting-matrix-structure-in-GMM-estimation"]], "Clustered (Rogers)": [[715, "Clustered-(Rogers)"]], "Clustered Covariance Estimator": [[403, "clustered-covariance-estimator"]], "Clustered Covariance with Fixed Effects": [[400, "clustered-covariance-with-fixed-effects"]], "Clustered by Entity": [[398, "Clustered-by-Entity"]], "Comparing models": [[398, "Comparing-models"]], "Comparing results": [[70, "Comparing-results"], [150, "Comparing-results"], [152, "Comparing-results"]], "Comparison with pandas PanelOLS and FamaMacBeth": [[404, null]], "Compatibility": [[81, null]], "Confidence Intervals": [[395, "confidence-intervals"]], "Constant Detection": [[395, "constant-detection"]], "Containers": [[868, "module-linearmodels.utility"]], "Continuously Updating Estimator": [[69, "Continuously-Updating-Estimator"]], "Continuously Updating Generalized Method of Moments (GMM-CUE)": [[395, "continuously-updating-generalized-method-of-moments-gmm-cue"]], "Continuously updating GMM": [[150, "Continuously-updating-GMM"]], "Contributing": [[90, null]], "Conversion of Categorical and Strings to Dummies": [[397, "Conversion-of-Categorical-and-Strings-to-Dummies"]], "Covariance Estimation": [[719, "covariance-estimation"], [868, "covariance-estimation"]], "Covariance Estimators": [[403, "covariance-estimators"]], "Covariance options": [[398, "Covariance-options"]], "Cross-Equation Restrictions": [[715, "Cross-Equation-Restrictions"]], "Curly Braces": [[716, "Curly-Braces"]], "Data": [[715, "Data"], [717, "Data"]], "Data Formats for Panel Data Analysis": [[397, null]], "Dhrymes": [[719, "dhrymes"]], "Diagonal Residual Covariance": [[715, "Diagonal-Residual-Covariance"]], "Dictionary": [[716, "Dictionary"]], "Direct Model Specification": [[717, "Direct-Model-Specification"]], "Driscoll-Kraay Covariance Estimator": [[403, "driscoll-kraay-covariance-estimator"]], "Dynamic Panel Data Models": [[713, "dynamic-panel-data-models"]], "Effects vs Dummies": [[398, "Effects-vs-Dummies"]], "Estimating a model with a formula": [[152, "Estimating-a-model-with-a-formula"]], "Estimating parameters with uncorrelated effects": [[398, "Estimating-parameters-with-uncorrelated-effects"]], "Estimation Options": [[715, "Estimation-Options"]], "Estimation Results": [[74, "module-linearmodels.asset_pricing.results"], [396, "module-linearmodels.iv.results"], [712, "module-linearmodels.panel.results"], [720, "module-linearmodels.system.results"]], "Estimation Weights": [[716, "Estimation-Weights"]], "Estimators": [[154, "estimators"]], "Examples": [[69, null], [398, null], [715, null]], "Excluding the constant": [[149, "Excluding-the-constant"]], "Exogeneity Testing": [[150, "Exogeneity-Testing"]], "Factors Only": [[70, "Factors-Only"]], "First Difference Estimation (FirstDifferenceOLS)": [[403, "first-difference-estimation-firstdifferenceols"]], "First Difference OLS": [[399, "First-Difference-OLS"]], "First Stage Diagnostics": [[150, "First-Stage-Diagnostics"]], "First Syntax": [[70, "First-Syntax"]], "First-stage Estimation Analysis": [[395, "first-stage-estimation-analysis"]], "Fixed Effect Estimation (PanelOLS)": [[403, "fixed-effect-estimation-panelols"]], "Formula interface": [[151, "Formula-interface"]], "Formulas": [[717, "Formulas"]], "Formulas and Mathematical Detail": [[73, null], [395, null], [403, null]], "Further Examples": [[150, null]], "GMM Covariance estimators": [[395, "gmm-covariance-estimators"]], "GMM Estimation": [[69, "GMM-Estimation"], [150, "GMM-Estimation"], [154, "gmm-estimation"]], "GMM Estimation of Linear Factor Models": [[73, "gmm-estimation-of-linear-factor-models"]], "GMM Moment Weighting": [[720, "module-linearmodels.system.gmm"]], "GMM Post-estimation Results": [[395, "gmm-post-estimation-results"]], "GMM Weight Estimators": [[395, "gmm-weight-estimators"]], "GMM Weight and Covariance Estimation": [[396, "module-linearmodels.iv.gmm"]], "GMM and GMM-CUE Estimation": [[154, "gmm-and-gmm-cue-estimation"]], "GMM-CUE Estimation": [[154, "gmm-cue-estimation"]], "General Setup": [[69, "General-Setup"]], "Generalized Method of Moments (GMM)": [[395, "generalized-method-of-moments-gmm"], [720, "generalized-method-of-moments-gmm"]], "Handling correlated effects": [[398, "Handling-correlated-effects"]], "Heteroskedastic Covariance Estimator (robust)": [[403, "heteroskedastic-covariance-estimator-robust"]], "Heteroskedastic Weighting": [[719, "heteroskedastic-weighting"]], "Heteroskedasticity Robust Covariance": [[398, "Heteroskedasticity-Robust-Covariance"]], "Heteroskedasticity Robust Covariance Estimation": [[715, "Heteroskedasticity-Robust-Covariance-Estimation"]], "Homoskedastic Weighting": [[719, "homoskedastic-weighting"]], "Hypothesis Testing": [[868, "hypothesis-testing"]], "IV Data Structures": [[396, "module-linearmodels.iv.data"]], "IV2SLS as OLS": [[150, "IV2SLS-as-OLS"]], "Implementation Choices": [[400, null]], "Import data": [[69, "Import-data"]], "Import data and transform to be excess returns": [[70, "Import-data-and-transform-to-be-excess-returns"]], "Importing data": [[150, "Importing-data"]], "Improved Specification using GLS": [[73, "improved-specification-using-gls"]], "Including a constant": [[149, "Including-a-constant"]], "Including fixed effects": [[398, "Including-fixed-effects"]], "Indices": [[91, "indices"]], "Instrumental Variable Covariance Estimation": [[396, "module-linearmodels.iv.covariance"]], "Instrumental Variable Estimation": [[153, null], [396, "module-linearmodels.iv.model"]], "Instrumental Variable Estimators": [[713, "instrumental-variable-estimators"]], "Introduction": [[72, null], [154, null], [402, null]], "Iterating until convergence": [[69, "Iterating-until-convergence"]], "Iterative GLS": [[715, "Iterative-GLS"]], "Judge": [[719, "judge"]], "Just identified 2SLS": [[150, "Just-identified-2SLS"]], "Kernel (HAC)": [[715, "Kernel-(HAC)"]], "Kernel Weight Generators": [[396, "kernel-weight-generators"]], "Kernel Weights and Bandwidth Selection": [[395, "kernel-weights-and-bandwidth-selection"]], "LIML": [[150, "LIML"]], "LIML Estimation": [[154, "liml-estimation"]], "Labeled Formulas": [[716, "Labeled-Formulas"]], "Least Squares Estimators": [[713, "least-squares-estimators"]], "Limited Information Maximum Likelihood and k-class Estimators": [[395, "limited-information-maximum-likelihood-and-k-class-estimators"]], "Linear Asset Pricing Model Covariance Estimators": [[74, "module-linearmodels.asset_pricing.covariance"]], "Linear Asset Pricing Models": [[74, "module-linearmodels.asset_pricing.model"]], "Linear Factor Model for Non-traded Factors": [[73, "linear-factor-model-for-non-traded-factors"]], "Linear Factor Model for Traded Factors": [[73, "linear-factor-model-for-traded-factors"]], "Linear Factor Models for Asset Pricing": [[71, null]], "Linear Hypothesis Tests": [[395, "linear-hypothesis-tests"]], "Linear Instrumental-Variables Regression": [[150, "Linear-Instrumental-Variables-Regression"]], "Loading and preparing data": [[399, "Loading-and-preparing-data"]], "Loading data": [[398, "Loading-data"]], "MEPS data": [[152, "MEPS-data"]], "Mathematical expression in formulas": [[152, "Mathematical-expression-in-formulas"]], "McElroy": [[719, "mcelroy"]], "Memory efficient calculations": [[719, "memory-efficient-calculations"]], "Model Estimation and Covariance Specification": [[154, "model-estimation-and-covariance-specification"]], "Models": [[403, "models"]], "Models for Panel Data": [[712, "module-linearmodels.panel.model"]], "Module Plans": [[713, null]], "Module Reference": [[74, null], [396, null], [712, null], [720, null]], "MultiIndex DataFrames": [[397, "MultiIndex-DataFrames"]], "Multiple Endogenous Variables": [[152, "Multiple-Endogenous-Variables"]], "Multiple Instruments": [[150, "Multiple-Instruments"]], "Multivariate OLS": [[715, "Multivariate-OLS"]], "Notation": [[395, "notation"]], "Note": [[79, null], [91, null]], "NumPy arrays": [[397, "NumPy-arrays"]], "OLS": [[152, "OLS"]], "Optimization Options": [[149, "Optimization-Options"]], "Optional Arguments": [[154, "optional-arguments"]], "Other Effects": [[398, "Other-Effects"]], "Other Options": [[398, "Other-Options"], [716, "Other-Options"]], "Other Statistics": [[719, "other-statistics"]], "Other clusters": [[398, "Other-clusters"]], "Other options": [[398, "Other-options"]], "Overall R^{2}": [[403, "overall-r-2"], [719, "overall-r-2"]], "Overall R^{2} (correlation method)": [[403, "overall-r-2-correlation-method"]], "P-values": [[395, "p-values"]], "Panel": [[713, "panel"]], "Panel Data Model Estimation": [[401, null]], "Panel Data Structures": [[712, "module-linearmodels.panel.data"]], "Panel IV": [[151, "Panel-IV"]], "Panel Instrumental Variable Estimators": [[713, "panel-instrumental-variable-estimators"]], "Panel Model Covariance Estimators": [[712, "module-linearmodels.panel.covariance"]], "Panel with Entity and Time Effects": [[399, "Panel-with-Entity-and-Time-Effects"]], "PanelOLS with Entity Effects": [[399, "PanelOLS-with-Entity-Effects"]], "PanelOLS with Entity Effects and a constant": [[399, "PanelOLS-with-Entity-Effects-and-a-constant"]], "Parameter Covariance": [[719, "parameter-covariance"]], "Parameter Covariance Estimation": [[395, "parameter-covariance-estimation"]], "Parameter Estimation": [[395, "parameter-estimation"]], "Past Releases": [[75, "past-releases"]], "Pooled Model Estimation (PooledOLS)": [[403, "pooled-model-estimation-pooledols"]], "Pooled OLS": [[399, "Pooled-OLS"]], "Pooling using constraints": [[715, "Pooling-using-constraints"]], "Post-estimation": [[395, "post-estimation"]], "Post-estimation diagnostics": [[151, "Post-estimation-diagnostics"]], "Prespecified Residual Covariance": [[716, "Prespecified-Residual-Covariance"]], "Prespecified Residual Covariance Estimators": [[715, "Prespecified-Residual-Covariance-Estimators"]], "Proximity and education": [[151, "Proximity-and-education"]], "R^2 definitions": [[400, "r-2-definitions"]], "R^{2} Calculation": [[403, "r-2-calculation"]], "Random Effect Estimation (RandomEffects)": [[403, "random-effect-estimation-randomeffects"]], "Random effects": [[398, "Random-effects"]], "References": [[714, null]], "SUR and 3SLS": [[720, "sur-and-3sls"]], "Second Syntax": [[70, "Second-Syntax"]], "See also": [[7, null], [92, null], [97, null], [173, null], [179, null], [199, null], [205, null], [212, null], [214, null], [223, null], [225, null], [234, null], [235, null], [236, null], [246, null], [248, null], [257, null], [259, null], [721, null], [744, null], [767, null], [793, null], [872, null], [877, null]], "Seemingly Unrelated Regression (SUR/SURE)": [[719, null]], "Simultaneous Equations": [[717, "Simultaneous-Equations"]], "Single Instrument Regressions": [[150, "Single-Instrument-Regressions"]], "Smoking and birth weight": [[151, "Smoking-and-birth-weight"]], "Standard Covariance Estimator (unadjusted)": [[403, "standard-covariance-estimator-unadjusted"]], "Standard Errors": [[395, "standard-errors"]], "Standard formulaic": [[152, "Standard-formulaic"]], "Summaries": [[81, "module-linearmodels.compat.statsmodels"]], "System Estimation": [[713, "system-estimation"]], "System GMM Estimation": [[717, "System-GMM-Estimation"]], "System Generalized Method of Moments (GMM)": [[719, "system-generalized-method-of-moments-gmm"]], "System Measures of Fit (R^{2})": [[719, "system-measures-of-fit-r-2"]], "System Regression Estimator Covariance Estimation": [[720, "module-linearmodels.system.covariance"]], "System Regression Estimators": [[720, "module-linearmodels.system.model"]], "System Regression Models": [[718, null]], "T-statistics": [[395, "t-statistics"]], "Test Data Generation": [[712, "module-linearmodels.panel.utility"]], "Test Portfolios and Factors": [[70, "Test-Portfolios-and-Factors"]], "Testing Covariance and Correlations": [[719, "testing-covariance-and-correlations"]], "Testing endogeneity": [[150, "Testing-endogeneity"]], "The J statistic": [[73, "the-j-statistic"], [73, "id1"]], "The between estimator": [[398, "The-between-estimator"]], "Three Stage Least Squares (3SLS)": [[719, "three-stage-least-squares-3sls"]], "Three-stage Least Squares (3SLS)": [[717, null]], "Time Effects": [[398, "Time-Effects"]], "Time-invariant Variables": [[398, "Time-invariant-Variables"]], "Todo": [[179, "id1"], [212, "id1"], [223, "id1"], [246, "id1"]], "Transform the portfolios to be excesses": [[69, "Transform-the-portfolios-to-be-excesses"]], "Two-stage LS, LIML and k-class estimators": [[395, "two-stage-ls-liml-and-k-class-estimators"]], "Two-stage Least Squares (2SLS)": [[395, "two-stage-least-squares-2sls"]], "Type Aliases": [[867, null]], "Univariate": [[713, "univariate"]], "Using Formulas": [[70, null]], "Using GLS with common regressors": [[715, "Using-GLS-with-common-regressors"]], "Using first differences": [[398, "Using-first-differences"]], "Using formulas to specify models": [[152, null], [399, null], [716, null]], "Utilities": [[868, null]], "Verison 5.4": [[78, "verison-5-4"]], "Verison 5.5": [[78, null]], "Version 1.0": [[76, "version-1-0"]], "Version 2.0": [[76, "version-2-0"]], "Version 3.0": [[76, null]], "Version 4": [[77, null]], "Version 4.0": [[77, "version-4-0"]], "Version 4.10": [[77, "version-4-10"]], "Version 4.11": [[77, "version-4-11"]], "Version 4.12": [[77, "version-4-12"]], "Version 4.13": [[77, "version-4-13"]], "Version 4.14": [[77, "version-4-14"]], "Version 4.15": [[77, "version-4-15"]], "Version 4.16": [[77, "version-4-16"]], "Version 4.17": [[77, "version-4-17"]], "Version 4.18": [[77, "version-4-18"]], "Version 4.19": [[77, "version-4-19"]], "Version 4.20": [[77, "version-4-20"]], "Version 4.21": [[77, "version-4-21"]], "Version 4.24": [[77, "version-4-24"]], "Version 4.25": [[77, "version-4-25"]], "Version 4.26": [[77, "version-4-26"]], "Version 4.27": [[77, "version-4-27"]], "Version 4.28": [[77, "version-4-28"]], "Version 4.29": [[77, "version-4-29"]], "Version 4.30": [[77, "version-4-30"]], "Version 4.31": [[77, "version-4-31"]], "Version 4.5": [[77, "version-4-5"]], "Version 4.6": [[77, "version-4-6"]], "Version 4.7": [[77, "version-4-7"]], "Version 4.8": [[77, "version-4-8"]], "Version 4.9": [[77, "version-4-9"]], "Version 5.0": [[78, "version-5-0"]], "Version 5.1": [[78, "version-5-1"]], "Version 5.2": [[78, "version-5-2"]], "Version 5.3": [[78, "version-5-3"]], "Version 6.0": [[79, null]], "Version 6.1": [[79, "version-6-1"]], "Version 7.0": [[75, "version-7-0"], [80, null]], "Wages of Married Women": [[151, "Wages-of-Married-Women"]], "Wages of Men": [[151, "Wages-of-Men"]], "Weighted IV": [[151, "Weighted-IV"]], "Within R^{2}": [[403, "within-r-2"]], "WithinR^{2} (correlation method)": [[403, "withinr-2-correlation-method"]], "linearmodels": [[91, "linearmodels"]], "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance": [[0, null]], "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.config": [[1, null]], "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.cov": [[2, null]], "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.inv_jacobian": [[3, null]], "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.jacobian": [[4, null]], "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.s": [[5, null]], "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.square": [[6, null]], "linearmodels.asset_pricing.covariance.KernelCovariance": [[7, null]], "linearmodels.asset_pricing.covariance.KernelCovariance.bandwidth": [[8, null]], "linearmodels.asset_pricing.covariance.KernelCovariance.config": [[9, null]], "linearmodels.asset_pricing.covariance.KernelCovariance.cov": [[10, null]], "linearmodels.asset_pricing.covariance.KernelCovariance.inv_jacobian": [[11, null]], "linearmodels.asset_pricing.covariance.KernelCovariance.jacobian": [[12, null]], "linearmodels.asset_pricing.covariance.KernelCovariance.kernel": [[13, null]], "linearmodels.asset_pricing.covariance.KernelCovariance.s": [[14, null]], "linearmodels.asset_pricing.covariance.KernelCovariance.square": [[15, null]], "linearmodels.asset_pricing.model.LinearFactorModel": [[16, null]], "linearmodels.asset_pricing.model.LinearFactorModel.fit": [[17, null]], "linearmodels.asset_pricing.model.LinearFactorModel.formula": [[18, null]], "linearmodels.asset_pricing.model.LinearFactorModel.from_formula": [[19, null]], "linearmodels.asset_pricing.model.LinearFactorModelGMM": [[20, null]], "linearmodels.asset_pricing.model.LinearFactorModelGMM.fit": [[21, null]], "linearmodels.asset_pricing.model.LinearFactorModelGMM.formula": [[22, null]], "linearmodels.asset_pricing.model.LinearFactorModelGMM.from_formula": [[23, null]], "linearmodels.asset_pricing.model.TradedFactorModel": [[24, null]], "linearmodels.asset_pricing.model.TradedFactorModel.fit": [[25, null]], "linearmodels.asset_pricing.model.TradedFactorModel.formula": [[26, null]], "linearmodels.asset_pricing.model.TradedFactorModel.from_formula": [[27, null]], "linearmodels.asset_pricing.results.GMMFactorModelResults": [[28, null]], "linearmodels.asset_pricing.results.GMMFactorModelResults.alphas": [[29, null]], "linearmodels.asset_pricing.results.GMMFactorModelResults.betas": [[30, null]], "linearmodels.asset_pricing.results.GMMFactorModelResults.cov": [[31, null]], "linearmodels.asset_pricing.results.GMMFactorModelResults.cov_estimator": [[32, null]], "linearmodels.asset_pricing.results.GMMFactorModelResults.full_summary": [[33, null]], "linearmodels.asset_pricing.results.GMMFactorModelResults.iterations": [[34, null]], "linearmodels.asset_pricing.results.GMMFactorModelResults.j_statistic": [[35, null]], "linearmodels.asset_pricing.results.GMMFactorModelResults.name": [[36, null]], "linearmodels.asset_pricing.results.GMMFactorModelResults.nobs": [[37, null]], "linearmodels.asset_pricing.results.GMMFactorModelResults.params": [[38, null]], "linearmodels.asset_pricing.results.GMMFactorModelResults.pvalues": [[39, null]], "linearmodels.asset_pricing.results.GMMFactorModelResults.residual_ss": [[40, null]], "linearmodels.asset_pricing.results.GMMFactorModelResults.risk_premia": [[41, null]], "linearmodels.asset_pricing.results.GMMFactorModelResults.risk_premia_se": [[42, null]], "linearmodels.asset_pricing.results.GMMFactorModelResults.risk_premia_tstats": [[43, null]], "linearmodels.asset_pricing.results.GMMFactorModelResults.rsquared": [[44, null]], "linearmodels.asset_pricing.results.GMMFactorModelResults.std_errors": [[45, null]], "linearmodels.asset_pricing.results.GMMFactorModelResults.summary": [[46, null]], "linearmodels.asset_pricing.results.GMMFactorModelResults.total_ss": [[47, null]], "linearmodels.asset_pricing.results.GMMFactorModelResults.tstats": [[48, null]], "linearmodels.asset_pricing.results.LinearFactorModelResults": [[49, null]], "linearmodels.asset_pricing.results.LinearFactorModelResults.alphas": [[50, null]], "linearmodels.asset_pricing.results.LinearFactorModelResults.betas": [[51, null]], "linearmodels.asset_pricing.results.LinearFactorModelResults.cov": [[52, null]], "linearmodels.asset_pricing.results.LinearFactorModelResults.cov_estimator": [[53, null]], "linearmodels.asset_pricing.results.LinearFactorModelResults.full_summary": [[54, null]], "linearmodels.asset_pricing.results.LinearFactorModelResults.j_statistic": [[55, null]], "linearmodels.asset_pricing.results.LinearFactorModelResults.name": [[56, null]], "linearmodels.asset_pricing.results.LinearFactorModelResults.nobs": [[57, null]], "linearmodels.asset_pricing.results.LinearFactorModelResults.params": [[58, null]], "linearmodels.asset_pricing.results.LinearFactorModelResults.pvalues": [[59, null]], "linearmodels.asset_pricing.results.LinearFactorModelResults.residual_ss": [[60, null]], "linearmodels.asset_pricing.results.LinearFactorModelResults.risk_premia": [[61, null]], "linearmodels.asset_pricing.results.LinearFactorModelResults.risk_premia_se": [[62, null]], "linearmodels.asset_pricing.results.LinearFactorModelResults.risk_premia_tstats": [[63, null]], "linearmodels.asset_pricing.results.LinearFactorModelResults.rsquared": [[64, null]], "linearmodels.asset_pricing.results.LinearFactorModelResults.std_errors": [[65, null]], "linearmodels.asset_pricing.results.LinearFactorModelResults.summary": [[66, null]], "linearmodels.asset_pricing.results.LinearFactorModelResults.total_ss": [[67, null]], "linearmodels.asset_pricing.results.LinearFactorModelResults.tstats": [[68, null]], "linearmodels.compat.statsmodels.Summary": [[82, null]], "linearmodels.compat.statsmodels.Summary.add_extra_txt": [[83, null]], "linearmodels.compat.statsmodels.Summary.add_table_2cols": [[84, null]], "linearmodels.compat.statsmodels.Summary.add_table_params": [[85, null]], "linearmodels.compat.statsmodels.Summary.as_csv": [[86, null]], "linearmodels.compat.statsmodels.Summary.as_html": [[87, null]], "linearmodels.compat.statsmodels.Summary.as_latex": [[88, null]], "linearmodels.compat.statsmodels.Summary.as_text": [[89, null]], "linearmodels.iv.absorbing.AbsorbingLS": [[92, null]], "linearmodels.iv.absorbing.AbsorbingLS.absorbed_dependent": [[93, null]], "linearmodels.iv.absorbing.AbsorbingLS.absorbed_exog": [[94, null]], "linearmodels.iv.absorbing.AbsorbingLS.dependent": [[95, null]], "linearmodels.iv.absorbing.AbsorbingLS.exog": [[96, null]], "linearmodels.iv.absorbing.AbsorbingLS.fit": [[97, null]], "linearmodels.iv.absorbing.AbsorbingLS.has_constant": [[98, null]], "linearmodels.iv.absorbing.AbsorbingLS.instruments": [[99, null]], "linearmodels.iv.absorbing.AbsorbingLS.resids": [[100, null]], "linearmodels.iv.absorbing.AbsorbingLS.weights": [[101, null]], "linearmodels.iv.absorbing.AbsorbingLS.wresids": [[102, null]], "linearmodels.iv.absorbing.AbsorbingLSResults": [[103, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.absorbed_effects": [[104, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.absorbed_rsquared": [[105, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.conf_int": [[106, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.cov": [[107, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.cov_config": [[108, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.cov_estimator": [[109, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.cov_type": [[110, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.debiased": [[111, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.df_absorbed": [[112, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.df_model": [[113, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.df_resid": [[114, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.f_statistic": [[115, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.fitted_values": [[116, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.has_constant": [[117, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.idiosyncratic": [[118, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.method": [[119, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.model_ss": [[120, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.nobs": [[121, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.params": [[122, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.pvalues": [[123, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.resid_ss": [[124, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.resids": [[125, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.rsquared": [[126, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.rsquared_adj": [[127, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.s2": [[128, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.std_errors": [[129, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.summary": [[130, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.total_ss": [[131, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.tstats": [[132, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.wald_test": [[133, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.wresids": [[134, null]], "linearmodels.iv.absorbing.AbsorbingRegressor": [[135, null]], "linearmodels.iv.absorbing.AbsorbingRegressor.approx_rank": [[136, null]], "linearmodels.iv.absorbing.AbsorbingRegressor.has_constant": [[137, null]], "linearmodels.iv.absorbing.AbsorbingRegressor.hash": [[138, null]], "linearmodels.iv.absorbing.AbsorbingRegressor.regressors": [[139, null]], "linearmodels.iv.absorbing.Interaction": [[140, null]], "linearmodels.iv.absorbing.Interaction.cat": [[141, null]], "linearmodels.iv.absorbing.Interaction.cont": [[142, null]], "linearmodels.iv.absorbing.Interaction.drop": [[143, null]], "linearmodels.iv.absorbing.Interaction.from_frame": [[144, null]], "linearmodels.iv.absorbing.Interaction.hash": [[145, null]], "linearmodels.iv.absorbing.Interaction.isnull": [[146, null]], "linearmodels.iv.absorbing.Interaction.nobs": [[147, null]], "linearmodels.iv.absorbing.Interaction.sparse": [[148, null]], "linearmodels.iv.covariance.ClusteredCovariance": [[155, null]], "linearmodels.iv.covariance.ClusteredCovariance.config": [[156, null]], "linearmodels.iv.covariance.ClusteredCovariance.cov": [[157, null]], "linearmodels.iv.covariance.ClusteredCovariance.debiased": [[158, null]], "linearmodels.iv.covariance.ClusteredCovariance.s": [[159, null]], "linearmodels.iv.covariance.ClusteredCovariance.s2": [[160, null]], "linearmodels.iv.covariance.HeteroskedasticCovariance": [[161, null]], "linearmodels.iv.covariance.HeteroskedasticCovariance.config": [[162, null]], "linearmodels.iv.covariance.HeteroskedasticCovariance.cov": [[163, null]], "linearmodels.iv.covariance.HeteroskedasticCovariance.debiased": [[164, null]], "linearmodels.iv.covariance.HeteroskedasticCovariance.s": [[165, null]], "linearmodels.iv.covariance.HeteroskedasticCovariance.s2": [[166, null]], "linearmodels.iv.covariance.HomoskedasticCovariance": [[167, null]], "linearmodels.iv.covariance.HomoskedasticCovariance.config": [[168, null]], "linearmodels.iv.covariance.HomoskedasticCovariance.cov": [[169, null]], "linearmodels.iv.covariance.HomoskedasticCovariance.debiased": [[170, null]], "linearmodels.iv.covariance.HomoskedasticCovariance.s": [[171, null]], "linearmodels.iv.covariance.HomoskedasticCovariance.s2": [[172, null]], "linearmodels.iv.covariance.KernelCovariance": [[173, null]], "linearmodels.iv.covariance.KernelCovariance.config": [[174, null]], "linearmodels.iv.covariance.KernelCovariance.cov": [[175, null]], "linearmodels.iv.covariance.KernelCovariance.debiased": [[176, null]], "linearmodels.iv.covariance.KernelCovariance.s": [[177, null]], "linearmodels.iv.covariance.KernelCovariance.s2": [[178, null]], "linearmodels.iv.covariance.kernel_optimal_bandwidth": [[179, null]], "linearmodels.iv.covariance.kernel_weight_bartlett": [[180, null]], "linearmodels.iv.covariance.kernel_weight_parzen": [[181, null]], "linearmodels.iv.covariance.kernel_weight_quadratic_spectral": [[182, null]], "linearmodels.iv.data.IVData": [[183, null]], "linearmodels.iv.data.IVData.cols": [[184, null]], "linearmodels.iv.data.IVData.drop": [[185, null]], "linearmodels.iv.data.IVData.isnull": [[186, null]], "linearmodels.iv.data.IVData.labels": [[187, null]], "linearmodels.iv.data.IVData.ndarray": [[188, null]], "linearmodels.iv.data.IVData.ndim": [[189, null]], "linearmodels.iv.data.IVData.pandas": [[190, null]], "linearmodels.iv.data.IVData.rows": [[191, null]], "linearmodels.iv.data.IVData.shape": [[192, null]], "linearmodels.iv.gmm.HeteroskedasticWeightMatrix": [[193, null]], "linearmodels.iv.gmm.HeteroskedasticWeightMatrix.config": [[194, null]], "linearmodels.iv.gmm.HeteroskedasticWeightMatrix.weight_matrix": [[195, null]], "linearmodels.iv.gmm.HomoskedasticWeightMatrix": [[196, null]], "linearmodels.iv.gmm.HomoskedasticWeightMatrix.config": [[197, null]], "linearmodels.iv.gmm.HomoskedasticWeightMatrix.weight_matrix": [[198, null]], "linearmodels.iv.gmm.IVGMMCovariance": [[199, null]], "linearmodels.iv.gmm.IVGMMCovariance.config": [[200, null]], "linearmodels.iv.gmm.IVGMMCovariance.cov": [[201, null]], "linearmodels.iv.gmm.IVGMMCovariance.debiased": [[202, null]], "linearmodels.iv.gmm.IVGMMCovariance.s": [[203, null]], "linearmodels.iv.gmm.IVGMMCovariance.s2": [[204, null]], "linearmodels.iv.gmm.KernelWeightMatrix": [[205, null]], "linearmodels.iv.gmm.KernelWeightMatrix.bandwidth": [[206, null]], "linearmodels.iv.gmm.KernelWeightMatrix.config": [[207, null]], "linearmodels.iv.gmm.KernelWeightMatrix.weight_matrix": [[208, null]], "linearmodels.iv.gmm.OneWayClusteredWeightMatrix": [[209, null]], "linearmodels.iv.gmm.OneWayClusteredWeightMatrix.config": [[210, null]], "linearmodels.iv.gmm.OneWayClusteredWeightMatrix.weight_matrix": [[211, null]], "linearmodels.iv.model.IV2SLS": [[212, null]], "linearmodels.iv.model.IV2SLS.estimate_parameters": [[213, null]], "linearmodels.iv.model.IV2SLS.fit": [[214, null]], "linearmodels.iv.model.IV2SLS.formula": [[215, null]], "linearmodels.iv.model.IV2SLS.from_formula": [[216, null]], "linearmodels.iv.model.IV2SLS.has_constant": [[217, null]], "linearmodels.iv.model.IV2SLS.isnull": [[218, null]], "linearmodels.iv.model.IV2SLS.notnull": [[219, null]], "linearmodels.iv.model.IV2SLS.predict": [[220, null]], "linearmodels.iv.model.IV2SLS.resids": [[221, null]], "linearmodels.iv.model.IV2SLS.wresids": [[222, null]], "linearmodels.iv.model.IVGMM": [[223, null]], "linearmodels.iv.model.IVGMM.estimate_parameters": [[224, null]], "linearmodels.iv.model.IVGMM.fit": [[225, null]], "linearmodels.iv.model.IVGMM.formula": [[226, null]], "linearmodels.iv.model.IVGMM.from_formula": [[227, null]], "linearmodels.iv.model.IVGMM.has_constant": [[228, null]], "linearmodels.iv.model.IVGMM.isnull": [[229, null]], "linearmodels.iv.model.IVGMM.notnull": [[230, null]], "linearmodels.iv.model.IVGMM.predict": [[231, null]], "linearmodels.iv.model.IVGMM.resids": [[232, null]], "linearmodels.iv.model.IVGMM.wresids": [[233, null]], "linearmodels.iv.model.IVGMMCUE": [[234, null]], "linearmodels.iv.model.IVGMMCUE.estimate_parameters": [[235, null]], "linearmodels.iv.model.IVGMMCUE.fit": [[236, null]], "linearmodels.iv.model.IVGMMCUE.formula": [[237, null]], "linearmodels.iv.model.IVGMMCUE.from_formula": [[238, null]], "linearmodels.iv.model.IVGMMCUE.has_constant": [[239, null]], "linearmodels.iv.model.IVGMMCUE.isnull": [[240, null]], "linearmodels.iv.model.IVGMMCUE.j": [[241, null]], "linearmodels.iv.model.IVGMMCUE.notnull": [[242, null]], "linearmodels.iv.model.IVGMMCUE.predict": [[243, null]], "linearmodels.iv.model.IVGMMCUE.resids": [[244, null]], "linearmodels.iv.model.IVGMMCUE.wresids": [[245, null]], "linearmodels.iv.model.IVLIML": [[246, null]], "linearmodels.iv.model.IVLIML.estimate_parameters": [[247, null]], "linearmodels.iv.model.IVLIML.fit": [[248, null]], "linearmodels.iv.model.IVLIML.formula": [[249, null]], "linearmodels.iv.model.IVLIML.from_formula": [[250, null]], "linearmodels.iv.model.IVLIML.has_constant": [[251, null]], "linearmodels.iv.model.IVLIML.isnull": [[252, null]], "linearmodels.iv.model.IVLIML.notnull": [[253, null]], "linearmodels.iv.model.IVLIML.predict": [[254, null]], "linearmodels.iv.model.IVLIML.resids": [[255, null]], "linearmodels.iv.model.IVLIML.wresids": [[256, null]], "linearmodels.iv.model._OLS": [[257, null]], "linearmodels.iv.model._OLS.estimate_parameters": [[258, null]], "linearmodels.iv.model._OLS.fit": [[259, null]], "linearmodels.iv.model._OLS.formula": [[260, null]], "linearmodels.iv.model._OLS.from_formula": [[261, null]], "linearmodels.iv.model._OLS.has_constant": [[262, null]], "linearmodels.iv.model._OLS.isnull": [[263, null]], "linearmodels.iv.model._OLS.notnull": [[264, null]], "linearmodels.iv.model._OLS.predict": [[265, null]], "linearmodels.iv.model._OLS.resids": [[266, null]], "linearmodels.iv.model._OLS.wresids": [[267, null]], "linearmodels.iv.results.FirstStageResults": [[268, null]], "linearmodels.iv.results.FirstStageResults.diagnostics": [[269, null]], "linearmodels.iv.results.FirstStageResults.individual": [[270, null]], "linearmodels.iv.results.FirstStageResults.summary": [[271, null]], "linearmodels.iv.results.IVGMMResults": [[272, null]], "linearmodels.iv.results.IVGMMResults.c_stat": [[273, null]], "linearmodels.iv.results.IVGMMResults.conf_int": [[274, null]], "linearmodels.iv.results.IVGMMResults.cov": [[275, null]], "linearmodels.iv.results.IVGMMResults.cov_config": [[276, null]], "linearmodels.iv.results.IVGMMResults.cov_estimator": [[277, null]], "linearmodels.iv.results.IVGMMResults.cov_type": [[278, null]], "linearmodels.iv.results.IVGMMResults.debiased": [[279, null]], "linearmodels.iv.results.IVGMMResults.df_model": [[280, null]], "linearmodels.iv.results.IVGMMResults.df_resid": [[281, null]], "linearmodels.iv.results.IVGMMResults.f_statistic": [[282, null]], "linearmodels.iv.results.IVGMMResults.first_stage": [[283, null]], "linearmodels.iv.results.IVGMMResults.fitted_values": [[284, null]], "linearmodels.iv.results.IVGMMResults.has_constant": [[285, null]], "linearmodels.iv.results.IVGMMResults.idiosyncratic": [[286, null]], "linearmodels.iv.results.IVGMMResults.iterations": [[287, null]], "linearmodels.iv.results.IVGMMResults.j_stat": [[288, null]], "linearmodels.iv.results.IVGMMResults.kappa": [[289, null]], "linearmodels.iv.results.IVGMMResults.method": [[290, null]], "linearmodels.iv.results.IVGMMResults.model_ss": [[291, null]], "linearmodels.iv.results.IVGMMResults.nobs": [[292, null]], "linearmodels.iv.results.IVGMMResults.params": [[293, null]], "linearmodels.iv.results.IVGMMResults.predict": [[294, null]], "linearmodels.iv.results.IVGMMResults.pvalues": [[295, null]], "linearmodels.iv.results.IVGMMResults.resid_ss": [[296, null]], "linearmodels.iv.results.IVGMMResults.resids": [[297, null]], "linearmodels.iv.results.IVGMMResults.rsquared": [[298, null]], "linearmodels.iv.results.IVGMMResults.rsquared_adj": [[299, null]], "linearmodels.iv.results.IVGMMResults.s2": [[300, null]], "linearmodels.iv.results.IVGMMResults.std_errors": [[301, null]], "linearmodels.iv.results.IVGMMResults.summary": [[302, null]], "linearmodels.iv.results.IVGMMResults.total_ss": [[303, null]], "linearmodels.iv.results.IVGMMResults.tstats": [[304, null]], "linearmodels.iv.results.IVGMMResults.wald_test": [[305, null]], "linearmodels.iv.results.IVGMMResults.weight_config": [[306, null]], "linearmodels.iv.results.IVGMMResults.weight_matrix": [[307, null]], "linearmodels.iv.results.IVGMMResults.weight_type": [[308, null]], "linearmodels.iv.results.IVGMMResults.wresids": [[309, null]], "linearmodels.iv.results.IVModelComparison": [[310, null]], "linearmodels.iv.results.IVModelComparison.cov_estimator": [[311, null]], "linearmodels.iv.results.IVModelComparison.estimator_method": [[312, null]], "linearmodels.iv.results.IVModelComparison.f_statistic": [[313, null]], "linearmodels.iv.results.IVModelComparison.nobs": [[314, null]], "linearmodels.iv.results.IVModelComparison.params": [[315, null]], "linearmodels.iv.results.IVModelComparison.pvalues": [[316, null]], "linearmodels.iv.results.IVModelComparison.rsquared": [[317, null]], "linearmodels.iv.results.IVModelComparison.rsquared_adj": [[318, null]], "linearmodels.iv.results.IVModelComparison.std_errors": [[319, null]], "linearmodels.iv.results.IVModelComparison.summary": [[320, null]], "linearmodels.iv.results.IVModelComparison.tstats": [[321, null]], "linearmodels.iv.results.IVResults": [[322, null]], "linearmodels.iv.results.IVResults.anderson_rubin": [[323, null]], "linearmodels.iv.results.IVResults.basmann": [[324, null]], "linearmodels.iv.results.IVResults.basmann_f": [[325, null]], "linearmodels.iv.results.IVResults.conf_int": [[326, null]], "linearmodels.iv.results.IVResults.cov": [[327, null]], "linearmodels.iv.results.IVResults.cov_config": [[328, null]], "linearmodels.iv.results.IVResults.cov_estimator": [[329, null]], "linearmodels.iv.results.IVResults.cov_type": [[330, null]], "linearmodels.iv.results.IVResults.debiased": [[331, null]], "linearmodels.iv.results.IVResults.df_model": [[332, null]], "linearmodels.iv.results.IVResults.df_resid": [[333, null]], "linearmodels.iv.results.IVResults.durbin": [[334, null]], "linearmodels.iv.results.IVResults.f_statistic": [[335, null]], "linearmodels.iv.results.IVResults.first_stage": [[336, null]], "linearmodels.iv.results.IVResults.fitted_values": [[337, null]], "linearmodels.iv.results.IVResults.has_constant": [[338, null]], "linearmodels.iv.results.IVResults.idiosyncratic": [[339, null]], "linearmodels.iv.results.IVResults.kappa": [[340, null]], "linearmodels.iv.results.IVResults.method": [[341, null]], "linearmodels.iv.results.IVResults.model_ss": [[342, null]], "linearmodels.iv.results.IVResults.nobs": [[343, null]], "linearmodels.iv.results.IVResults.params": [[344, null]], "linearmodels.iv.results.IVResults.predict": [[345, null]], "linearmodels.iv.results.IVResults.pvalues": [[346, null]], "linearmodels.iv.results.IVResults.resid_ss": [[347, null]], "linearmodels.iv.results.IVResults.resids": [[348, null]], "linearmodels.iv.results.IVResults.rsquared": [[349, null]], "linearmodels.iv.results.IVResults.rsquared_adj": [[350, null]], "linearmodels.iv.results.IVResults.s2": [[351, null]], "linearmodels.iv.results.IVResults.sargan": [[352, null]], "linearmodels.iv.results.IVResults.std_errors": [[353, null]], "linearmodels.iv.results.IVResults.summary": [[354, null]], "linearmodels.iv.results.IVResults.total_ss": [[355, null]], "linearmodels.iv.results.IVResults.tstats": [[356, null]], "linearmodels.iv.results.IVResults.wald_test": [[357, null]], "linearmodels.iv.results.IVResults.wooldridge_overid": [[358, null]], "linearmodels.iv.results.IVResults.wooldridge_regression": [[359, null]], "linearmodels.iv.results.IVResults.wooldridge_score": [[360, null]], "linearmodels.iv.results.IVResults.wresids": [[361, null]], "linearmodels.iv.results.IVResults.wu_hausman": [[362, null]], "linearmodels.iv.results.OLSResults": [[363, null]], "linearmodels.iv.results.OLSResults.conf_int": [[364, null]], "linearmodels.iv.results.OLSResults.cov": [[365, null]], "linearmodels.iv.results.OLSResults.cov_config": [[366, null]], "linearmodels.iv.results.OLSResults.cov_estimator": [[367, null]], "linearmodels.iv.results.OLSResults.cov_type": [[368, null]], "linearmodels.iv.results.OLSResults.debiased": [[369, null]], "linearmodels.iv.results.OLSResults.df_model": [[370, null]], "linearmodels.iv.results.OLSResults.df_resid": [[371, null]], "linearmodels.iv.results.OLSResults.f_statistic": [[372, null]], "linearmodels.iv.results.OLSResults.fitted_values": [[373, null]], "linearmodels.iv.results.OLSResults.has_constant": [[374, null]], "linearmodels.iv.results.OLSResults.idiosyncratic": [[375, null]], "linearmodels.iv.results.OLSResults.kappa": [[376, null]], "linearmodels.iv.results.OLSResults.method": [[377, null]], "linearmodels.iv.results.OLSResults.model_ss": [[378, null]], "linearmodels.iv.results.OLSResults.nobs": [[379, null]], "linearmodels.iv.results.OLSResults.params": [[380, null]], "linearmodels.iv.results.OLSResults.predict": [[381, null]], "linearmodels.iv.results.OLSResults.pvalues": [[382, null]], "linearmodels.iv.results.OLSResults.resid_ss": [[383, null]], "linearmodels.iv.results.OLSResults.resids": [[384, null]], "linearmodels.iv.results.OLSResults.rsquared": [[385, null]], "linearmodels.iv.results.OLSResults.rsquared_adj": [[386, null]], "linearmodels.iv.results.OLSResults.s2": [[387, null]], "linearmodels.iv.results.OLSResults.std_errors": [[388, null]], "linearmodels.iv.results.OLSResults.summary": [[389, null]], "linearmodels.iv.results.OLSResults.total_ss": [[390, null]], "linearmodels.iv.results.OLSResults.tstats": [[391, null]], "linearmodels.iv.results.OLSResults.wald_test": [[392, null]], "linearmodels.iv.results.OLSResults.wresids": [[393, null]], "linearmodels.iv.results.compare": [[394, null]], "linearmodels.panel.covariance.ACCovariance": [[405, null]], "linearmodels.panel.covariance.ACCovariance.ALLOWED_KWARGS": [[406, null]], "linearmodels.panel.covariance.ACCovariance.DEFAULT_KERNEL": [[407, null]], "linearmodels.panel.covariance.ACCovariance.cov": [[408, null]], "linearmodels.panel.covariance.ACCovariance.deferred_cov": [[409, null]], "linearmodels.panel.covariance.ACCovariance.eps": [[410, null]], "linearmodels.panel.covariance.ACCovariance.name": [[411, null]], "linearmodels.panel.covariance.ACCovariance.s2": [[412, null]], "linearmodels.panel.covariance.ClusteredCovariance": [[413, null]], "linearmodels.panel.covariance.ClusteredCovariance.ALLOWED_KWARGS": [[414, null]], "linearmodels.panel.covariance.ClusteredCovariance.DEFAULT_KERNEL": [[415, null]], "linearmodels.panel.covariance.ClusteredCovariance.cov": [[416, null]], "linearmodels.panel.covariance.ClusteredCovariance.deferred_cov": [[417, null]], "linearmodels.panel.covariance.ClusteredCovariance.eps": [[418, null]], "linearmodels.panel.covariance.ClusteredCovariance.name": [[419, null]], "linearmodels.panel.covariance.ClusteredCovariance.s2": [[420, null]], "linearmodels.panel.covariance.DriscollKraay": [[421, null]], "linearmodels.panel.covariance.DriscollKraay.ALLOWED_KWARGS": [[422, null]], "linearmodels.panel.covariance.DriscollKraay.DEFAULT_KERNEL": [[423, null]], "linearmodels.panel.covariance.DriscollKraay.cov": [[424, null]], "linearmodels.panel.covariance.DriscollKraay.deferred_cov": [[425, null]], "linearmodels.panel.covariance.DriscollKraay.eps": [[426, null]], "linearmodels.panel.covariance.DriscollKraay.name": [[427, null]], "linearmodels.panel.covariance.DriscollKraay.s2": [[428, null]], "linearmodels.panel.covariance.FamaMacBethCovariance": [[429, null]], "linearmodels.panel.covariance.FamaMacBethCovariance.ALLOWED_KWARGS": [[430, null]], "linearmodels.panel.covariance.FamaMacBethCovariance.DEFAULT_KERNEL": [[431, null]], "linearmodels.panel.covariance.FamaMacBethCovariance.all_params": [[432, null]], "linearmodels.panel.covariance.FamaMacBethCovariance.bandwidth": [[433, null]], "linearmodels.panel.covariance.FamaMacBethCovariance.cov": [[434, null]], "linearmodels.panel.covariance.FamaMacBethCovariance.deferred_cov": [[435, null]], "linearmodels.panel.covariance.FamaMacBethCovariance.eps": [[436, null]], "linearmodels.panel.covariance.FamaMacBethCovariance.name": [[437, null]], "linearmodels.panel.covariance.FamaMacBethCovariance.s2": [[438, null]], "linearmodels.panel.covariance.HeteroskedasticCovariance": [[439, null]], "linearmodels.panel.covariance.HeteroskedasticCovariance.ALLOWED_KWARGS": [[440, null]], "linearmodels.panel.covariance.HeteroskedasticCovariance.DEFAULT_KERNEL": [[441, null]], "linearmodels.panel.covariance.HeteroskedasticCovariance.cov": [[442, null]], "linearmodels.panel.covariance.HeteroskedasticCovariance.deferred_cov": [[443, null]], "linearmodels.panel.covariance.HeteroskedasticCovariance.eps": [[444, null]], "linearmodels.panel.covariance.HeteroskedasticCovariance.name": [[445, null]], "linearmodels.panel.covariance.HeteroskedasticCovariance.s2": [[446, null]], "linearmodels.panel.covariance.HomoskedasticCovariance": [[447, null]], "linearmodels.panel.covariance.HomoskedasticCovariance.ALLOWED_KWARGS": [[448, null]], "linearmodels.panel.covariance.HomoskedasticCovariance.DEFAULT_KERNEL": [[449, null]], "linearmodels.panel.covariance.HomoskedasticCovariance.cov": [[450, null]], "linearmodels.panel.covariance.HomoskedasticCovariance.deferred_cov": [[451, null]], "linearmodels.panel.covariance.HomoskedasticCovariance.eps": [[452, null]], "linearmodels.panel.covariance.HomoskedasticCovariance.name": [[453, null]], "linearmodels.panel.covariance.HomoskedasticCovariance.s2": [[454, null]], "linearmodels.panel.data.PanelData": [[455, null]], "linearmodels.panel.data.PanelData.copy": [[456, null]], "linearmodels.panel.data.PanelData.count": [[457, null]], "linearmodels.panel.data.PanelData.dataframe": [[458, null]], "linearmodels.panel.data.PanelData.demean": [[459, null]], "linearmodels.panel.data.PanelData.drop": [[460, null]], "linearmodels.panel.data.PanelData.dummies": [[461, null]], "linearmodels.panel.data.PanelData.entities": [[462, null]], "linearmodels.panel.data.PanelData.entity_ids": [[463, null]], "linearmodels.panel.data.PanelData.first_difference": [[464, null]], "linearmodels.panel.data.PanelData.general_demean": [[465, null]], "linearmodels.panel.data.PanelData.index": [[466, null]], "linearmodels.panel.data.PanelData.isnull": [[467, null]], "linearmodels.panel.data.PanelData.mean": [[468, null]], "linearmodels.panel.data.PanelData.ndim": [[469, null]], "linearmodels.panel.data.PanelData.nentity": [[470, null]], "linearmodels.panel.data.PanelData.nobs": [[471, null]], "linearmodels.panel.data.PanelData.nvar": [[472, null]], "linearmodels.panel.data.PanelData.panel": [[473, null]], "linearmodels.panel.data.PanelData.shape": [[474, null]], "linearmodels.panel.data.PanelData.time": [[475, null]], "linearmodels.panel.data.PanelData.time_ids": [[476, null]], "linearmodels.panel.data.PanelData.values2d": [[477, null]], "linearmodels.panel.data.PanelData.values3d": [[478, null]], "linearmodels.panel.data.PanelData.vars": [[479, null]], "linearmodels.panel.data._Panel": [[480, null]], "linearmodels.panel.data._Panel.from_array": [[481, null]], "linearmodels.panel.data._Panel.items": [[482, null]], "linearmodels.panel.data._Panel.major_axis": [[483, null]], "linearmodels.panel.data._Panel.minor_axis": [[484, null]], "linearmodels.panel.data._Panel.shape": [[485, null]], "linearmodels.panel.data._Panel.to_frame": [[486, null]], "linearmodels.panel.data._Panel.values": [[487, null]], "linearmodels.panel.model.BetweenOLS": [[488, null]], "linearmodels.panel.model.BetweenOLS.fit": [[489, null]], "linearmodels.panel.model.BetweenOLS.formula": [[490, null]], "linearmodels.panel.model.BetweenOLS.from_formula": [[491, null]], "linearmodels.panel.model.BetweenOLS.has_constant": [[492, null]], "linearmodels.panel.model.BetweenOLS.not_null": [[493, null]], "linearmodels.panel.model.BetweenOLS.predict": [[494, null]], "linearmodels.panel.model.BetweenOLS.reformat_clusters": [[495, null]], "linearmodels.panel.model.FamaMacBeth": [[496, null]], "linearmodels.panel.model.FamaMacBeth.fit": [[497, null]], "linearmodels.panel.model.FamaMacBeth.formula": [[498, null]], "linearmodels.panel.model.FamaMacBeth.from_formula": [[499, null]], "linearmodels.panel.model.FamaMacBeth.has_constant": [[500, null]], "linearmodels.panel.model.FamaMacBeth.not_null": [[501, null]], "linearmodels.panel.model.FamaMacBeth.predict": [[502, null]], "linearmodels.panel.model.FamaMacBeth.reformat_clusters": [[503, null]], "linearmodels.panel.model.FirstDifferenceOLS": [[504, null]], "linearmodels.panel.model.FirstDifferenceOLS.fit": [[505, null]], "linearmodels.panel.model.FirstDifferenceOLS.formula": [[506, null]], "linearmodels.panel.model.FirstDifferenceOLS.from_formula": [[507, null]], "linearmodels.panel.model.FirstDifferenceOLS.has_constant": [[508, null]], "linearmodels.panel.model.FirstDifferenceOLS.not_null": [[509, null]], "linearmodels.panel.model.FirstDifferenceOLS.predict": [[510, null]], "linearmodels.panel.model.FirstDifferenceOLS.reformat_clusters": [[511, null]], "linearmodels.panel.model.PanelOLS": [[512, null]], "linearmodels.panel.model.PanelOLS.entity_effects": [[513, null]], "linearmodels.panel.model.PanelOLS.fit": [[514, null]], "linearmodels.panel.model.PanelOLS.formula": [[515, null]], "linearmodels.panel.model.PanelOLS.from_formula": [[516, null]], "linearmodels.panel.model.PanelOLS.has_constant": [[517, null]], "linearmodels.panel.model.PanelOLS.not_null": [[518, null]], "linearmodels.panel.model.PanelOLS.other_effects": [[519, null]], "linearmodels.panel.model.PanelOLS.predict": [[520, null]], "linearmodels.panel.model.PanelOLS.reformat_clusters": [[521, null]], "linearmodels.panel.model.PanelOLS.time_effects": [[522, null]], "linearmodels.panel.model.PooledOLS": [[523, null]], "linearmodels.panel.model.PooledOLS.fit": [[524, null]], "linearmodels.panel.model.PooledOLS.formula": [[525, null]], "linearmodels.panel.model.PooledOLS.from_formula": [[526, null]], "linearmodels.panel.model.PooledOLS.has_constant": [[527, null]], "linearmodels.panel.model.PooledOLS.not_null": [[528, null]], "linearmodels.panel.model.PooledOLS.predict": [[529, null]], "linearmodels.panel.model.PooledOLS.reformat_clusters": [[530, null]], "linearmodels.panel.model.RandomEffects": [[531, null]], "linearmodels.panel.model.RandomEffects.fit": [[532, null]], "linearmodels.panel.model.RandomEffects.formula": [[533, null]], "linearmodels.panel.model.RandomEffects.from_formula": [[534, null]], "linearmodels.panel.model.RandomEffects.has_constant": [[535, null]], "linearmodels.panel.model.RandomEffects.not_null": [[536, null]], "linearmodels.panel.model.RandomEffects.predict": [[537, null]], "linearmodels.panel.model.RandomEffects.reformat_clusters": [[538, null]], "linearmodels.panel.results.FamaMacBethResults": [[539, null]], "linearmodels.panel.results.FamaMacBethResults.all_params": [[540, null]], "linearmodels.panel.results.FamaMacBethResults.avg_adj_rsquared": [[541, null]], "linearmodels.panel.results.FamaMacBethResults.avg_rsquared": [[542, null]], "linearmodels.panel.results.FamaMacBethResults.conf_int": [[543, null]], "linearmodels.panel.results.FamaMacBethResults.corr_squared_between": [[544, null]], "linearmodels.panel.results.FamaMacBethResults.corr_squared_overall": [[545, null]], "linearmodels.panel.results.FamaMacBethResults.corr_squared_within": [[546, null]], "linearmodels.panel.results.FamaMacBethResults.cov": [[547, null]], "linearmodels.panel.results.FamaMacBethResults.df_model": [[548, null]], "linearmodels.panel.results.FamaMacBethResults.df_resid": [[549, null]], "linearmodels.panel.results.FamaMacBethResults.entity_info": [[550, null]], "linearmodels.panel.results.FamaMacBethResults.estimated_effects": [[551, null]], "linearmodels.panel.results.FamaMacBethResults.f_statistic": [[552, null]], "linearmodels.panel.results.FamaMacBethResults.f_statistic_robust": [[553, null]], "linearmodels.panel.results.FamaMacBethResults.fitted_values": [[554, null]], "linearmodels.panel.results.FamaMacBethResults.idiosyncratic": [[555, null]], "linearmodels.panel.results.FamaMacBethResults.loglik": [[556, null]], "linearmodels.panel.results.FamaMacBethResults.model_ss": [[557, null]], "linearmodels.panel.results.FamaMacBethResults.name": [[558, null]], "linearmodels.panel.results.FamaMacBethResults.nobs": [[559, null]], "linearmodels.panel.results.FamaMacBethResults.params": [[560, null]], "linearmodels.panel.results.FamaMacBethResults.predict": [[561, null]], "linearmodels.panel.results.FamaMacBethResults.pvalues": [[562, null]], "linearmodels.panel.results.FamaMacBethResults.resid_ss": [[563, null]], "linearmodels.panel.results.FamaMacBethResults.resids": [[564, null]], "linearmodels.panel.results.FamaMacBethResults.rsquared": [[565, null]], "linearmodels.panel.results.FamaMacBethResults.rsquared_between": [[566, null]], "linearmodels.panel.results.FamaMacBethResults.rsquared_overall": [[567, null]], "linearmodels.panel.results.FamaMacBethResults.rsquared_within": [[568, null]], "linearmodels.panel.results.FamaMacBethResults.s2": [[569, null]], "linearmodels.panel.results.FamaMacBethResults.std_errors": [[570, null]], "linearmodels.panel.results.FamaMacBethResults.summary": [[571, null]], "linearmodels.panel.results.FamaMacBethResults.time_info": [[572, null]], "linearmodels.panel.results.FamaMacBethResults.total_ss": [[573, null]], "linearmodels.panel.results.FamaMacBethResults.tstats": [[574, null]], "linearmodels.panel.results.FamaMacBethResults.wald_test": [[575, null]], "linearmodels.panel.results.FamaMacBethResults.wresids": [[576, null]], "linearmodels.panel.results.PanelEffectsResults": [[577, null]], "linearmodels.panel.results.PanelEffectsResults.conf_int": [[578, null]], "linearmodels.panel.results.PanelEffectsResults.corr_squared_between": [[579, null]], "linearmodels.panel.results.PanelEffectsResults.corr_squared_overall": [[580, null]], "linearmodels.panel.results.PanelEffectsResults.corr_squared_within": [[581, null]], "linearmodels.panel.results.PanelEffectsResults.cov": [[582, null]], "linearmodels.panel.results.PanelEffectsResults.df_model": [[583, null]], "linearmodels.panel.results.PanelEffectsResults.df_resid": [[584, null]], "linearmodels.panel.results.PanelEffectsResults.entity_info": [[585, null]], "linearmodels.panel.results.PanelEffectsResults.estimated_effects": [[586, null]], "linearmodels.panel.results.PanelEffectsResults.f_pooled": [[587, null]], "linearmodels.panel.results.PanelEffectsResults.f_statistic": [[588, null]], "linearmodels.panel.results.PanelEffectsResults.f_statistic_robust": [[589, null]], "linearmodels.panel.results.PanelEffectsResults.fitted_values": [[590, null]], "linearmodels.panel.results.PanelEffectsResults.idiosyncratic": [[591, null]], "linearmodels.panel.results.PanelEffectsResults.included_effects": [[592, null]], "linearmodels.panel.results.PanelEffectsResults.loglik": [[593, null]], "linearmodels.panel.results.PanelEffectsResults.model_ss": [[594, null]], "linearmodels.panel.results.PanelEffectsResults.name": [[595, null]], "linearmodels.panel.results.PanelEffectsResults.nobs": [[596, null]], "linearmodels.panel.results.PanelEffectsResults.other_info": [[597, null]], "linearmodels.panel.results.PanelEffectsResults.params": [[598, null]], "linearmodels.panel.results.PanelEffectsResults.predict": [[599, null]], "linearmodels.panel.results.PanelEffectsResults.pvalues": [[600, null]], "linearmodels.panel.results.PanelEffectsResults.resid_ss": [[601, null]], "linearmodels.panel.results.PanelEffectsResults.resids": [[602, null]], "linearmodels.panel.results.PanelEffectsResults.rsquared": [[603, null]], "linearmodels.panel.results.PanelEffectsResults.rsquared_between": [[604, null]], "linearmodels.panel.results.PanelEffectsResults.rsquared_inclusive": [[605, null]], "linearmodels.panel.results.PanelEffectsResults.rsquared_overall": [[606, null]], "linearmodels.panel.results.PanelEffectsResults.rsquared_within": [[607, null]], "linearmodels.panel.results.PanelEffectsResults.s2": [[608, null]], "linearmodels.panel.results.PanelEffectsResults.std_errors": [[609, null]], "linearmodels.panel.results.PanelEffectsResults.summary": [[610, null]], "linearmodels.panel.results.PanelEffectsResults.time_info": [[611, null]], "linearmodels.panel.results.PanelEffectsResults.total_ss": [[612, null]], "linearmodels.panel.results.PanelEffectsResults.tstats": [[613, null]], "linearmodels.panel.results.PanelEffectsResults.variance_decomposition": [[614, null]], "linearmodels.panel.results.PanelEffectsResults.wald_test": [[615, null]], "linearmodels.panel.results.PanelEffectsResults.wresids": [[616, null]], "linearmodels.panel.results.PanelModelComparison": [[617, null]], "linearmodels.panel.results.PanelModelComparison.cov_estimator": [[618, null]], "linearmodels.panel.results.PanelModelComparison.estimator_method": [[619, null]], "linearmodels.panel.results.PanelModelComparison.f_statistic": [[620, null]], "linearmodels.panel.results.PanelModelComparison.nobs": [[621, null]], "linearmodels.panel.results.PanelModelComparison.params": [[622, null]], "linearmodels.panel.results.PanelModelComparison.pvalues": [[623, null]], "linearmodels.panel.results.PanelModelComparison.rsquared": [[624, null]], "linearmodels.panel.results.PanelModelComparison.rsquared_between": [[625, null]], "linearmodels.panel.results.PanelModelComparison.rsquared_overall": [[626, null]], "linearmodels.panel.results.PanelModelComparison.rsquared_within": [[627, null]], "linearmodels.panel.results.PanelModelComparison.std_errors": [[628, null]], "linearmodels.panel.results.PanelModelComparison.summary": [[629, null]], "linearmodels.panel.results.PanelModelComparison.tstats": [[630, null]], "linearmodels.panel.results.PanelResults": [[631, null]], "linearmodels.panel.results.PanelResults.conf_int": [[632, null]], "linearmodels.panel.results.PanelResults.corr_squared_between": [[633, null]], "linearmodels.panel.results.PanelResults.corr_squared_overall": [[634, null]], "linearmodels.panel.results.PanelResults.corr_squared_within": [[635, null]], "linearmodels.panel.results.PanelResults.cov": [[636, null]], "linearmodels.panel.results.PanelResults.df_model": [[637, null]], "linearmodels.panel.results.PanelResults.df_resid": [[638, null]], "linearmodels.panel.results.PanelResults.entity_info": [[639, null]], "linearmodels.panel.results.PanelResults.estimated_effects": [[640, null]], "linearmodels.panel.results.PanelResults.f_statistic": [[641, null]], "linearmodels.panel.results.PanelResults.f_statistic_robust": [[642, null]], "linearmodels.panel.results.PanelResults.fitted_values": [[643, null]], "linearmodels.panel.results.PanelResults.idiosyncratic": [[644, null]], "linearmodels.panel.results.PanelResults.loglik": [[645, null]], "linearmodels.panel.results.PanelResults.model_ss": [[646, null]], "linearmodels.panel.results.PanelResults.name": [[647, null]], "linearmodels.panel.results.PanelResults.nobs": [[648, null]], "linearmodels.panel.results.PanelResults.params": [[649, null]], "linearmodels.panel.results.PanelResults.predict": [[650, null]], "linearmodels.panel.results.PanelResults.pvalues": [[651, null]], "linearmodels.panel.results.PanelResults.resid_ss": [[652, null]], "linearmodels.panel.results.PanelResults.resids": [[653, null]], "linearmodels.panel.results.PanelResults.rsquared": [[654, null]], "linearmodels.panel.results.PanelResults.rsquared_between": [[655, null]], "linearmodels.panel.results.PanelResults.rsquared_overall": [[656, null]], "linearmodels.panel.results.PanelResults.rsquared_within": [[657, null]], "linearmodels.panel.results.PanelResults.s2": [[658, null]], "linearmodels.panel.results.PanelResults.std_errors": [[659, null]], "linearmodels.panel.results.PanelResults.summary": [[660, null]], "linearmodels.panel.results.PanelResults.time_info": [[661, null]], "linearmodels.panel.results.PanelResults.total_ss": [[662, null]], "linearmodels.panel.results.PanelResults.tstats": [[663, null]], "linearmodels.panel.results.PanelResults.wald_test": [[664, null]], "linearmodels.panel.results.PanelResults.wresids": [[665, null]], "linearmodels.panel.results.RandomEffectsResults": [[666, null]], "linearmodels.panel.results.RandomEffectsResults.conf_int": [[667, null]], "linearmodels.panel.results.RandomEffectsResults.corr_squared_between": [[668, null]], "linearmodels.panel.results.RandomEffectsResults.corr_squared_overall": [[669, null]], "linearmodels.panel.results.RandomEffectsResults.corr_squared_within": [[670, null]], "linearmodels.panel.results.RandomEffectsResults.cov": [[671, null]], "linearmodels.panel.results.RandomEffectsResults.df_model": [[672, null]], "linearmodels.panel.results.RandomEffectsResults.df_resid": [[673, null]], "linearmodels.panel.results.RandomEffectsResults.entity_info": [[674, null]], "linearmodels.panel.results.RandomEffectsResults.estimated_effects": [[675, null]], "linearmodels.panel.results.RandomEffectsResults.f_statistic": [[676, null]], "linearmodels.panel.results.RandomEffectsResults.f_statistic_robust": [[677, null]], "linearmodels.panel.results.RandomEffectsResults.fitted_values": [[678, null]], "linearmodels.panel.results.RandomEffectsResults.idiosyncratic": [[679, null]], "linearmodels.panel.results.RandomEffectsResults.loglik": [[680, null]], "linearmodels.panel.results.RandomEffectsResults.model_ss": [[681, null]], "linearmodels.panel.results.RandomEffectsResults.name": [[682, null]], "linearmodels.panel.results.RandomEffectsResults.nobs": [[683, null]], "linearmodels.panel.results.RandomEffectsResults.params": [[684, null]], "linearmodels.panel.results.RandomEffectsResults.predict": [[685, null]], "linearmodels.panel.results.RandomEffectsResults.pvalues": [[686, null]], "linearmodels.panel.results.RandomEffectsResults.resid_ss": [[687, null]], "linearmodels.panel.results.RandomEffectsResults.resids": [[688, null]], "linearmodels.panel.results.RandomEffectsResults.rsquared": [[689, null]], "linearmodels.panel.results.RandomEffectsResults.rsquared_between": [[690, null]], "linearmodels.panel.results.RandomEffectsResults.rsquared_overall": [[691, null]], "linearmodels.panel.results.RandomEffectsResults.rsquared_within": [[692, null]], "linearmodels.panel.results.RandomEffectsResults.s2": [[693, null]], "linearmodels.panel.results.RandomEffectsResults.std_errors": [[694, null]], "linearmodels.panel.results.RandomEffectsResults.summary": [[695, null]], "linearmodels.panel.results.RandomEffectsResults.theta": [[696, null]], "linearmodels.panel.results.RandomEffectsResults.time_info": [[697, null]], "linearmodels.panel.results.RandomEffectsResults.total_ss": [[698, null]], "linearmodels.panel.results.RandomEffectsResults.tstats": [[699, null]], "linearmodels.panel.results.RandomEffectsResults.variance_decomposition": [[700, null]], "linearmodels.panel.results.RandomEffectsResults.wald_test": [[701, null]], "linearmodels.panel.results.RandomEffectsResults.wresids": [[702, null]], "linearmodels.panel.results.compare": [[703, null]], "linearmodels.panel.utility.PanelModelData": [[704, null]], "linearmodels.panel.utility.PanelModelData.clusters": [[705, null]], "linearmodels.panel.utility.PanelModelData.count": [[706, null]], "linearmodels.panel.utility.PanelModelData.data": [[707, null]], "linearmodels.panel.utility.PanelModelData.index": [[708, null]], "linearmodels.panel.utility.PanelModelData.other_effects": [[709, null]], "linearmodels.panel.utility.PanelModelData.weights": [[710, null]], "linearmodels.panel.utility.generate_panel_data": [[711, null]], "linearmodels.shared.covariance.cov_cluster": [[869, null]], "linearmodels.shared.covariance.cov_kernel": [[870, null]], "linearmodels.shared.covariance.group_debias_coefficient": [[871, null]], "linearmodels.shared.hypotheses.InvalidTestStatistic": [[872, null]], "linearmodels.shared.hypotheses.InvalidTestStatistic.critical_values": [[873, null]], "linearmodels.shared.hypotheses.InvalidTestStatistic.null": [[874, null]], "linearmodels.shared.hypotheses.InvalidTestStatistic.pval": [[875, null]], "linearmodels.shared.hypotheses.InvalidTestStatistic.stat": [[876, null]], "linearmodels.shared.hypotheses.WaldTestStatistic": [[877, null]], "linearmodels.shared.hypotheses.WaldTestStatistic.critical_values": [[878, null]], "linearmodels.shared.hypotheses.WaldTestStatistic.null": [[879, null]], "linearmodels.shared.hypotheses.WaldTestStatistic.pval": [[880, null]], "linearmodels.shared.hypotheses.WaldTestStatistic.stat": [[881, null]], "linearmodels.shared.utility.AttrDict": [[882, null]], "linearmodels.shared.utility.AttrDict.clear": [[883, null]], "linearmodels.shared.utility.AttrDict.copy": [[884, null]], "linearmodels.shared.utility.AttrDict.get": [[885, null]], "linearmodels.shared.utility.AttrDict.items": [[886, null]], "linearmodels.shared.utility.AttrDict.keys": [[887, null]], "linearmodels.shared.utility.AttrDict.pop": [[888, null]], "linearmodels.shared.utility.AttrDict.popitem": [[889, null]], "linearmodels.shared.utility.AttrDict.setdefault": [[890, null]], "linearmodels.shared.utility.AttrDict.update": [[891, null]], "linearmodels.shared.utility.AttrDict.values": [[892, null]], "linearmodels.system.covariance.ClusteredCovariance": [[721, null]], "linearmodels.system.covariance.ClusteredCovariance.cov": [[722, null]], "linearmodels.system.covariance.ClusteredCovariance.cov_config": [[723, null]], "linearmodels.system.covariance.ClusteredCovariance.sigma": [[724, null]], "linearmodels.system.covariance.GMMHeteroskedasticCovariance": [[725, null]], "linearmodels.system.covariance.GMMHeteroskedasticCovariance.cov": [[726, null]], "linearmodels.system.covariance.GMMHeteroskedasticCovariance.cov_config": [[727, null]], "linearmodels.system.covariance.GMMHomoskedasticCovariance": [[728, null]], "linearmodels.system.covariance.GMMHomoskedasticCovariance.cov": [[729, null]], "linearmodels.system.covariance.GMMHomoskedasticCovariance.cov_config": [[730, null]], "linearmodels.system.covariance.GMMKernelCovariance": [[731, null]], "linearmodels.system.covariance.GMMKernelCovariance.bandwidth": [[732, null]], "linearmodels.system.covariance.GMMKernelCovariance.cov": [[733, null]], "linearmodels.system.covariance.GMMKernelCovariance.cov_config": [[734, null]], "linearmodels.system.covariance.GMMKernelCovariance.kernel": [[735, null]], "linearmodels.system.covariance.HeteroskedasticCovariance": [[736, null]], "linearmodels.system.covariance.HeteroskedasticCovariance.cov": [[737, null]], "linearmodels.system.covariance.HeteroskedasticCovariance.cov_config": [[738, null]], "linearmodels.system.covariance.HeteroskedasticCovariance.sigma": [[739, null]], "linearmodels.system.covariance.HomoskedasticCovariance": [[740, null]], "linearmodels.system.covariance.HomoskedasticCovariance.cov": [[741, null]], "linearmodels.system.covariance.HomoskedasticCovariance.cov_config": [[742, null]], "linearmodels.system.covariance.HomoskedasticCovariance.sigma": [[743, null]], "linearmodels.system.covariance.KernelCovariance": [[744, null]], "linearmodels.system.covariance.KernelCovariance.bandwidth": [[745, null]], "linearmodels.system.covariance.KernelCovariance.cov": [[746, null]], "linearmodels.system.covariance.KernelCovariance.cov_config": [[747, null]], "linearmodels.system.covariance.KernelCovariance.kernel": [[748, null]], "linearmodels.system.covariance.KernelCovariance.sigma": [[749, null]], "linearmodels.system.gmm.HeteroskedasticWeightMatrix": [[750, null]], "linearmodels.system.gmm.HeteroskedasticWeightMatrix.config": [[751, null]], "linearmodels.system.gmm.HeteroskedasticWeightMatrix.sigma": [[752, null]], "linearmodels.system.gmm.HeteroskedasticWeightMatrix.weight_matrix": [[753, null]], "linearmodels.system.gmm.HomoskedasticWeightMatrix": [[754, null]], "linearmodels.system.gmm.HomoskedasticWeightMatrix.config": [[755, null]], "linearmodels.system.gmm.HomoskedasticWeightMatrix.sigma": [[756, null]], "linearmodels.system.gmm.HomoskedasticWeightMatrix.weight_matrix": [[757, null]], "linearmodels.system.gmm.KernelWeightMatrix": [[758, null]], "linearmodels.system.gmm.KernelWeightMatrix.bandwidth": [[759, null]], "linearmodels.system.gmm.KernelWeightMatrix.config": [[760, null]], "linearmodels.system.gmm.KernelWeightMatrix.kernel": [[761, null]], "linearmodels.system.gmm.KernelWeightMatrix.sigma": [[762, null]], "linearmodels.system.gmm.KernelWeightMatrix.weight_matrix": [[763, null]], "linearmodels.system.model.IV3SLS": [[764, null]], "linearmodels.system.model.IV3SLS.add_constraints": [[765, null]], "linearmodels.system.model.IV3SLS.constraints": [[766, null]], "linearmodels.system.model.IV3SLS.fit": [[767, null]], "linearmodels.system.model.IV3SLS.formula": [[768, null]], "linearmodels.system.model.IV3SLS.from_formula": [[769, null]], "linearmodels.system.model.IV3SLS.has_constant": [[770, null]], "linearmodels.system.model.IV3SLS.multivariate_iv": [[771, null]], "linearmodels.system.model.IV3SLS.param_names": [[772, null]], "linearmodels.system.model.IV3SLS.predict": [[773, null]], "linearmodels.system.model.IV3SLS.reset_constraints": [[774, null]], "linearmodels.system.model.IVSystemGMM": [[775, null]], "linearmodels.system.model.IVSystemGMM.add_constraints": [[776, null]], "linearmodels.system.model.IVSystemGMM.constraints": [[777, null]], "linearmodels.system.model.IVSystemGMM.fit": [[778, null]], "linearmodels.system.model.IVSystemGMM.formula": [[779, null]], "linearmodels.system.model.IVSystemGMM.from_formula": [[780, null]], "linearmodels.system.model.IVSystemGMM.has_constant": [[781, null]], "linearmodels.system.model.IVSystemGMM.param_names": [[782, null]], "linearmodels.system.model.IVSystemGMM.predict": [[783, null]], "linearmodels.system.model.IVSystemGMM.reset_constraints": [[784, null]], "linearmodels.system.model.LinearConstraint": [[785, null]], "linearmodels.system.model.LinearConstraint.a": [[786, null]], "linearmodels.system.model.LinearConstraint.q": [[787, null]], "linearmodels.system.model.LinearConstraint.r": [[788, null]], "linearmodels.system.model.LinearConstraint.t": [[789, null]], "linearmodels.system.model.SUR": [[790, null]], "linearmodels.system.model.SUR.add_constraints": [[791, null]], "linearmodels.system.model.SUR.constraints": [[792, null]], "linearmodels.system.model.SUR.fit": [[793, null]], "linearmodels.system.model.SUR.formula": [[794, null]], "linearmodels.system.model.SUR.from_formula": [[795, null]], "linearmodels.system.model.SUR.has_constant": [[796, null]], "linearmodels.system.model.SUR.multivariate_ls": [[797, null]], "linearmodels.system.model.SUR.param_names": [[798, null]], "linearmodels.system.model.SUR.predict": [[799, null]], "linearmodels.system.model.SUR.reset_constraints": [[800, null]], "linearmodels.system.results.GMMSystemResults": [[801, null]], "linearmodels.system.results.GMMSystemResults.breusch_pagan": [[802, null]], "linearmodels.system.results.GMMSystemResults.conf_int": [[803, null]], "linearmodels.system.results.GMMSystemResults.cov": [[804, null]], "linearmodels.system.results.GMMSystemResults.cov_config": [[805, null]], "linearmodels.system.results.GMMSystemResults.cov_estimator": [[806, null]], "linearmodels.system.results.GMMSystemResults.debiased": [[807, null]], "linearmodels.system.results.GMMSystemResults.df_model": [[808, null]], "linearmodels.system.results.GMMSystemResults.df_resid": [[809, null]], "linearmodels.system.results.GMMSystemResults.equation_labels": [[810, null]], "linearmodels.system.results.GMMSystemResults.equations": [[811, null]], "linearmodels.system.results.GMMSystemResults.fitted_values": [[812, null]], "linearmodels.system.results.GMMSystemResults.iterations": [[813, null]], "linearmodels.system.results.GMMSystemResults.j_stat": [[814, null]], "linearmodels.system.results.GMMSystemResults.likelihood_ratio": [[815, null]], "linearmodels.system.results.GMMSystemResults.method": [[816, null]], "linearmodels.system.results.GMMSystemResults.model": [[817, null]], "linearmodels.system.results.GMMSystemResults.model_ss": [[818, null]], "linearmodels.system.results.GMMSystemResults.nobs": [[819, null]], "linearmodels.system.results.GMMSystemResults.params": [[820, null]], "linearmodels.system.results.GMMSystemResults.predict": [[821, null]], "linearmodels.system.results.GMMSystemResults.pvalues": [[822, null]], "linearmodels.system.results.GMMSystemResults.resid_ss": [[823, null]], "linearmodels.system.results.GMMSystemResults.resids": [[824, null]], "linearmodels.system.results.GMMSystemResults.rsquared": [[825, null]], "linearmodels.system.results.GMMSystemResults.sigma": [[826, null]], "linearmodels.system.results.GMMSystemResults.std_errors": [[827, null]], "linearmodels.system.results.GMMSystemResults.summary": [[828, null]], "linearmodels.system.results.GMMSystemResults.system_rsquared": [[829, null]], "linearmodels.system.results.GMMSystemResults.total_ss": [[830, null]], "linearmodels.system.results.GMMSystemResults.tstats": [[831, null]], "linearmodels.system.results.GMMSystemResults.w": [[832, null]], "linearmodels.system.results.GMMSystemResults.weight_config": [[833, null]], "linearmodels.system.results.GMMSystemResults.weight_type": [[834, null]], "linearmodels.system.results.GMMSystemResults.wresids": [[835, null]], "linearmodels.system.results.SystemResults": [[836, null]], "linearmodels.system.results.SystemResults.breusch_pagan": [[837, null]], "linearmodels.system.results.SystemResults.conf_int": [[838, null]], "linearmodels.system.results.SystemResults.cov": [[839, null]], "linearmodels.system.results.SystemResults.cov_config": [[840, null]], "linearmodels.system.results.SystemResults.cov_estimator": [[841, null]], "linearmodels.system.results.SystemResults.debiased": [[842, null]], "linearmodels.system.results.SystemResults.df_model": [[843, null]], "linearmodels.system.results.SystemResults.df_resid": [[844, null]], "linearmodels.system.results.SystemResults.equation_labels": [[845, null]], "linearmodels.system.results.SystemResults.equations": [[846, null]], "linearmodels.system.results.SystemResults.fitted_values": [[847, null]], "linearmodels.system.results.SystemResults.iterations": [[848, null]], "linearmodels.system.results.SystemResults.likelihood_ratio": [[849, null]], "linearmodels.system.results.SystemResults.method": [[850, null]], "linearmodels.system.results.SystemResults.model": [[851, null]], "linearmodels.system.results.SystemResults.model_ss": [[852, null]], "linearmodels.system.results.SystemResults.nobs": [[853, null]], "linearmodels.system.results.SystemResults.params": [[854, null]], "linearmodels.system.results.SystemResults.predict": [[855, null]], "linearmodels.system.results.SystemResults.pvalues": [[856, null]], "linearmodels.system.results.SystemResults.resid_ss": [[857, null]], "linearmodels.system.results.SystemResults.resids": [[858, null]], "linearmodels.system.results.SystemResults.rsquared": [[859, null]], "linearmodels.system.results.SystemResults.sigma": [[860, null]], "linearmodels.system.results.SystemResults.std_errors": [[861, null]], "linearmodels.system.results.SystemResults.summary": [[862, null]], "linearmodels.system.results.SystemResults.system_rsquared": [[863, null]], "linearmodels.system.results.SystemResults.total_ss": [[864, null]], "linearmodels.system.results.SystemResults.tstats": [[865, null]], "linearmodels.system.results.SystemResults.wresids": [[866, null]], "xarray DataArrays": [[397, "xarray-DataArrays"]]}, "docurls": ["asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.config.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.cov.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.inv_jacobian.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.jacobian.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.s.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.square.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.KernelCovariance.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.KernelCovariance.bandwidth.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.KernelCovariance.config.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.KernelCovariance.cov.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.KernelCovariance.inv_jacobian.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.KernelCovariance.jacobian.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.KernelCovariance.kernel.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.KernelCovariance.s.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.KernelCovariance.square.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.model.LinearFactorModel.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.model.LinearFactorModel.fit.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.model.LinearFactorModel.formula.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.model.LinearFactorModel.from_formula.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.model.LinearFactorModelGMM.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.model.LinearFactorModelGMM.fit.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.model.LinearFactorModelGMM.formula.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.model.LinearFactorModelGMM.from_formula.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.model.TradedFactorModel.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.model.TradedFactorModel.fit.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.model.TradedFactorModel.formula.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.model.TradedFactorModel.from_formula.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.alphas.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.betas.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.cov.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.cov_estimator.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.full_summary.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.iterations.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.j_statistic.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.name.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.nobs.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.params.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.pvalues.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.residual_ss.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.risk_premia.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.risk_premia_se.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.risk_premia_tstats.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.rsquared.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.std_errors.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.summary.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.total_ss.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.tstats.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.alphas.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.betas.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.cov.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.cov_estimator.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.full_summary.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.j_statistic.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.name.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.nobs.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.params.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.pvalues.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.residual_ss.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.risk_premia.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.risk_premia_se.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.risk_premia_tstats.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.rsquared.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.std_errors.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.summary.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.total_ss.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.tstats.html", "asset-pricing/examples/examples.html", "asset-pricing/examples/formulas.html", "asset-pricing/index.html", "asset-pricing/introduction.html", "asset-pricing/mathematical-formula.html", "asset-pricing/reference.html", "changes.html", "changes/3.0-2.0-1.0.html", "changes/4.0.html", "changes/5.0.html", "changes/6.0.html", "changes/7.0.html", "compatibility.html", "compatibility/linearmodels.compat.statsmodels.Summary.html", "compatibility/linearmodels.compat.statsmodels.Summary.add_extra_txt.html", "compatibility/linearmodels.compat.statsmodels.Summary.add_table_2cols.html", "compatibility/linearmodels.compat.statsmodels.Summary.add_table_params.html", "compatibility/linearmodels.compat.statsmodels.Summary.as_csv.html", "compatibility/linearmodels.compat.statsmodels.Summary.as_html.html", "compatibility/linearmodels.compat.statsmodels.Summary.as_latex.html", "compatibility/linearmodels.compat.statsmodels.Summary.as_text.html", "contributing.html", "index.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLS.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLS.absorbed_dependent.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLS.absorbed_exog.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLS.dependent.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLS.exog.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLS.fit.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLS.has_constant.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLS.instruments.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLS.resids.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLS.weights.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLS.wresids.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.absorbed_effects.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.absorbed_rsquared.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.conf_int.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.cov.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.cov_config.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.cov_estimator.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.cov_type.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.debiased.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.df_absorbed.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.df_model.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.df_resid.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.f_statistic.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.fitted_values.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.has_constant.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.idiosyncratic.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.method.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.model_ss.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.nobs.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.params.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.pvalues.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.resid_ss.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.resids.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.rsquared.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.rsquared_adj.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.s2.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.std_errors.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.summary.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.total_ss.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.tstats.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.wald_test.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.wresids.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingRegressor.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingRegressor.approx_rank.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingRegressor.has_constant.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingRegressor.hash.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingRegressor.regressors.html", "iv/absorbing/linearmodels.iv.absorbing.Interaction.html", "iv/absorbing/linearmodels.iv.absorbing.Interaction.cat.html", "iv/absorbing/linearmodels.iv.absorbing.Interaction.cont.html", "iv/absorbing/linearmodels.iv.absorbing.Interaction.drop.html", "iv/absorbing/linearmodels.iv.absorbing.Interaction.from_frame.html", "iv/absorbing/linearmodels.iv.absorbing.Interaction.hash.html", "iv/absorbing/linearmodels.iv.absorbing.Interaction.isnull.html", "iv/absorbing/linearmodels.iv.absorbing.Interaction.nobs.html", "iv/absorbing/linearmodels.iv.absorbing.Interaction.sparse.html", "iv/examples/absorbing-regression.html", "iv/examples/advanced-examples.html", "iv/examples/basic-examples.html", "iv/examples/using-formulas.html", "iv/index.html", "iv/introduction.html", "iv/iv/linearmodels.iv.covariance.ClusteredCovariance.html", "iv/iv/linearmodels.iv.covariance.ClusteredCovariance.config.html", "iv/iv/linearmodels.iv.covariance.ClusteredCovariance.cov.html", "iv/iv/linearmodels.iv.covariance.ClusteredCovariance.debiased.html", "iv/iv/linearmodels.iv.covariance.ClusteredCovariance.s.html", "iv/iv/linearmodels.iv.covariance.ClusteredCovariance.s2.html", "iv/iv/linearmodels.iv.covariance.HeteroskedasticCovariance.html", "iv/iv/linearmodels.iv.covariance.HeteroskedasticCovariance.config.html", "iv/iv/linearmodels.iv.covariance.HeteroskedasticCovariance.cov.html", "iv/iv/linearmodels.iv.covariance.HeteroskedasticCovariance.debiased.html", "iv/iv/linearmodels.iv.covariance.HeteroskedasticCovariance.s.html", "iv/iv/linearmodels.iv.covariance.HeteroskedasticCovariance.s2.html", "iv/iv/linearmodels.iv.covariance.HomoskedasticCovariance.html", "iv/iv/linearmodels.iv.covariance.HomoskedasticCovariance.config.html", "iv/iv/linearmodels.iv.covariance.HomoskedasticCovariance.cov.html", "iv/iv/linearmodels.iv.covariance.HomoskedasticCovariance.debiased.html", "iv/iv/linearmodels.iv.covariance.HomoskedasticCovariance.s.html", "iv/iv/linearmodels.iv.covariance.HomoskedasticCovariance.s2.html", "iv/iv/linearmodels.iv.covariance.KernelCovariance.html", "iv/iv/linearmodels.iv.covariance.KernelCovariance.config.html", "iv/iv/linearmodels.iv.covariance.KernelCovariance.cov.html", "iv/iv/linearmodels.iv.covariance.KernelCovariance.debiased.html", "iv/iv/linearmodels.iv.covariance.KernelCovariance.s.html", "iv/iv/linearmodels.iv.covariance.KernelCovariance.s2.html", "iv/iv/linearmodels.iv.covariance.kernel_optimal_bandwidth.html", "iv/iv/linearmodels.iv.covariance.kernel_weight_bartlett.html", "iv/iv/linearmodels.iv.covariance.kernel_weight_parzen.html", "iv/iv/linearmodels.iv.covariance.kernel_weight_quadratic_spectral.html", "iv/iv/linearmodels.iv.data.IVData.html", "iv/iv/linearmodels.iv.data.IVData.cols.html", "iv/iv/linearmodels.iv.data.IVData.drop.html", "iv/iv/linearmodels.iv.data.IVData.isnull.html", "iv/iv/linearmodels.iv.data.IVData.labels.html", "iv/iv/linearmodels.iv.data.IVData.ndarray.html", "iv/iv/linearmodels.iv.data.IVData.ndim.html", "iv/iv/linearmodels.iv.data.IVData.pandas.html", "iv/iv/linearmodels.iv.data.IVData.rows.html", "iv/iv/linearmodels.iv.data.IVData.shape.html", "iv/iv/linearmodels.iv.gmm.HeteroskedasticWeightMatrix.html", "iv/iv/linearmodels.iv.gmm.HeteroskedasticWeightMatrix.config.html", "iv/iv/linearmodels.iv.gmm.HeteroskedasticWeightMatrix.weight_matrix.html", "iv/iv/linearmodels.iv.gmm.HomoskedasticWeightMatrix.html", "iv/iv/linearmodels.iv.gmm.HomoskedasticWeightMatrix.config.html", "iv/iv/linearmodels.iv.gmm.HomoskedasticWeightMatrix.weight_matrix.html", "iv/iv/linearmodels.iv.gmm.IVGMMCovariance.html", "iv/iv/linearmodels.iv.gmm.IVGMMCovariance.config.html", "iv/iv/linearmodels.iv.gmm.IVGMMCovariance.cov.html", "iv/iv/linearmodels.iv.gmm.IVGMMCovariance.debiased.html", "iv/iv/linearmodels.iv.gmm.IVGMMCovariance.s.html", "iv/iv/linearmodels.iv.gmm.IVGMMCovariance.s2.html", "iv/iv/linearmodels.iv.gmm.KernelWeightMatrix.html", "iv/iv/linearmodels.iv.gmm.KernelWeightMatrix.bandwidth.html", "iv/iv/linearmodels.iv.gmm.KernelWeightMatrix.config.html", "iv/iv/linearmodels.iv.gmm.KernelWeightMatrix.weight_matrix.html", "iv/iv/linearmodels.iv.gmm.OneWayClusteredWeightMatrix.html", "iv/iv/linearmodels.iv.gmm.OneWayClusteredWeightMatrix.config.html", "iv/iv/linearmodels.iv.gmm.OneWayClusteredWeightMatrix.weight_matrix.html", "iv/iv/linearmodels.iv.model.IV2SLS.html", "iv/iv/linearmodels.iv.model.IV2SLS.estimate_parameters.html", "iv/iv/linearmodels.iv.model.IV2SLS.fit.html", "iv/iv/linearmodels.iv.model.IV2SLS.formula.html", "iv/iv/linearmodels.iv.model.IV2SLS.from_formula.html", "iv/iv/linearmodels.iv.model.IV2SLS.has_constant.html", "iv/iv/linearmodels.iv.model.IV2SLS.isnull.html", "iv/iv/linearmodels.iv.model.IV2SLS.notnull.html", "iv/iv/linearmodels.iv.model.IV2SLS.predict.html", "iv/iv/linearmodels.iv.model.IV2SLS.resids.html", "iv/iv/linearmodels.iv.model.IV2SLS.wresids.html", "iv/iv/linearmodels.iv.model.IVGMM.html", "iv/iv/linearmodels.iv.model.IVGMM.estimate_parameters.html", "iv/iv/linearmodels.iv.model.IVGMM.fit.html", "iv/iv/linearmodels.iv.model.IVGMM.formula.html", "iv/iv/linearmodels.iv.model.IVGMM.from_formula.html", "iv/iv/linearmodels.iv.model.IVGMM.has_constant.html", "iv/iv/linearmodels.iv.model.IVGMM.isnull.html", "iv/iv/linearmodels.iv.model.IVGMM.notnull.html", "iv/iv/linearmodels.iv.model.IVGMM.predict.html", "iv/iv/linearmodels.iv.model.IVGMM.resids.html", "iv/iv/linearmodels.iv.model.IVGMM.wresids.html", "iv/iv/linearmodels.iv.model.IVGMMCUE.html", "iv/iv/linearmodels.iv.model.IVGMMCUE.estimate_parameters.html", "iv/iv/linearmodels.iv.model.IVGMMCUE.fit.html", "iv/iv/linearmodels.iv.model.IVGMMCUE.formula.html", "iv/iv/linearmodels.iv.model.IVGMMCUE.from_formula.html", "iv/iv/linearmodels.iv.model.IVGMMCUE.has_constant.html", "iv/iv/linearmodels.iv.model.IVGMMCUE.isnull.html", "iv/iv/linearmodels.iv.model.IVGMMCUE.j.html", "iv/iv/linearmodels.iv.model.IVGMMCUE.notnull.html", "iv/iv/linearmodels.iv.model.IVGMMCUE.predict.html", "iv/iv/linearmodels.iv.model.IVGMMCUE.resids.html", "iv/iv/linearmodels.iv.model.IVGMMCUE.wresids.html", "iv/iv/linearmodels.iv.model.IVLIML.html", "iv/iv/linearmodels.iv.model.IVLIML.estimate_parameters.html", "iv/iv/linearmodels.iv.model.IVLIML.fit.html", "iv/iv/linearmodels.iv.model.IVLIML.formula.html", "iv/iv/linearmodels.iv.model.IVLIML.from_formula.html", "iv/iv/linearmodels.iv.model.IVLIML.has_constant.html", "iv/iv/linearmodels.iv.model.IVLIML.isnull.html", "iv/iv/linearmodels.iv.model.IVLIML.notnull.html", "iv/iv/linearmodels.iv.model.IVLIML.predict.html", "iv/iv/linearmodels.iv.model.IVLIML.resids.html", "iv/iv/linearmodels.iv.model.IVLIML.wresids.html", "iv/iv/linearmodels.iv.model._OLS.html", "iv/iv/linearmodels.iv.model._OLS.estimate_parameters.html", "iv/iv/linearmodels.iv.model._OLS.fit.html", "iv/iv/linearmodels.iv.model._OLS.formula.html", "iv/iv/linearmodels.iv.model._OLS.from_formula.html", "iv/iv/linearmodels.iv.model._OLS.has_constant.html", "iv/iv/linearmodels.iv.model._OLS.isnull.html", "iv/iv/linearmodels.iv.model._OLS.notnull.html", "iv/iv/linearmodels.iv.model._OLS.predict.html", "iv/iv/linearmodels.iv.model._OLS.resids.html", "iv/iv/linearmodels.iv.model._OLS.wresids.html", "iv/iv/linearmodels.iv.results.FirstStageResults.html", "iv/iv/linearmodels.iv.results.FirstStageResults.diagnostics.html", "iv/iv/linearmodels.iv.results.FirstStageResults.individual.html", "iv/iv/linearmodels.iv.results.FirstStageResults.summary.html", "iv/iv/linearmodels.iv.results.IVGMMResults.html", "iv/iv/linearmodels.iv.results.IVGMMResults.c_stat.html", "iv/iv/linearmodels.iv.results.IVGMMResults.conf_int.html", "iv/iv/linearmodels.iv.results.IVGMMResults.cov.html", "iv/iv/linearmodels.iv.results.IVGMMResults.cov_config.html", "iv/iv/linearmodels.iv.results.IVGMMResults.cov_estimator.html", "iv/iv/linearmodels.iv.results.IVGMMResults.cov_type.html", "iv/iv/linearmodels.iv.results.IVGMMResults.debiased.html", "iv/iv/linearmodels.iv.results.IVGMMResults.df_model.html", "iv/iv/linearmodels.iv.results.IVGMMResults.df_resid.html", "iv/iv/linearmodels.iv.results.IVGMMResults.f_statistic.html", "iv/iv/linearmodels.iv.results.IVGMMResults.first_stage.html", "iv/iv/linearmodels.iv.results.IVGMMResults.fitted_values.html", "iv/iv/linearmodels.iv.results.IVGMMResults.has_constant.html", "iv/iv/linearmodels.iv.results.IVGMMResults.idiosyncratic.html", "iv/iv/linearmodels.iv.results.IVGMMResults.iterations.html", "iv/iv/linearmodels.iv.results.IVGMMResults.j_stat.html", "iv/iv/linearmodels.iv.results.IVGMMResults.kappa.html", "iv/iv/linearmodels.iv.results.IVGMMResults.method.html", "iv/iv/linearmodels.iv.results.IVGMMResults.model_ss.html", "iv/iv/linearmodels.iv.results.IVGMMResults.nobs.html", "iv/iv/linearmodels.iv.results.IVGMMResults.params.html", "iv/iv/linearmodels.iv.results.IVGMMResults.predict.html", "iv/iv/linearmodels.iv.results.IVGMMResults.pvalues.html", "iv/iv/linearmodels.iv.results.IVGMMResults.resid_ss.html", "iv/iv/linearmodels.iv.results.IVGMMResults.resids.html", "iv/iv/linearmodels.iv.results.IVGMMResults.rsquared.html", "iv/iv/linearmodels.iv.results.IVGMMResults.rsquared_adj.html", "iv/iv/linearmodels.iv.results.IVGMMResults.s2.html", "iv/iv/linearmodels.iv.results.IVGMMResults.std_errors.html", "iv/iv/linearmodels.iv.results.IVGMMResults.summary.html", "iv/iv/linearmodels.iv.results.IVGMMResults.total_ss.html", "iv/iv/linearmodels.iv.results.IVGMMResults.tstats.html", "iv/iv/linearmodels.iv.results.IVGMMResults.wald_test.html", "iv/iv/linearmodels.iv.results.IVGMMResults.weight_config.html", "iv/iv/linearmodels.iv.results.IVGMMResults.weight_matrix.html", "iv/iv/linearmodels.iv.results.IVGMMResults.weight_type.html", "iv/iv/linearmodels.iv.results.IVGMMResults.wresids.html", "iv/iv/linearmodels.iv.results.IVModelComparison.html", "iv/iv/linearmodels.iv.results.IVModelComparison.cov_estimator.html", "iv/iv/linearmodels.iv.results.IVModelComparison.estimator_method.html", "iv/iv/linearmodels.iv.results.IVModelComparison.f_statistic.html", "iv/iv/linearmodels.iv.results.IVModelComparison.nobs.html", "iv/iv/linearmodels.iv.results.IVModelComparison.params.html", "iv/iv/linearmodels.iv.results.IVModelComparison.pvalues.html", "iv/iv/linearmodels.iv.results.IVModelComparison.rsquared.html", "iv/iv/linearmodels.iv.results.IVModelComparison.rsquared_adj.html", "iv/iv/linearmodels.iv.results.IVModelComparison.std_errors.html", "iv/iv/linearmodels.iv.results.IVModelComparison.summary.html", "iv/iv/linearmodels.iv.results.IVModelComparison.tstats.html", "iv/iv/linearmodels.iv.results.IVResults.html", "iv/iv/linearmodels.iv.results.IVResults.anderson_rubin.html", "iv/iv/linearmodels.iv.results.IVResults.basmann.html", "iv/iv/linearmodels.iv.results.IVResults.basmann_f.html", "iv/iv/linearmodels.iv.results.IVResults.conf_int.html", "iv/iv/linearmodels.iv.results.IVResults.cov.html", "iv/iv/linearmodels.iv.results.IVResults.cov_config.html", "iv/iv/linearmodels.iv.results.IVResults.cov_estimator.html", "iv/iv/linearmodels.iv.results.IVResults.cov_type.html", "iv/iv/linearmodels.iv.results.IVResults.debiased.html", "iv/iv/linearmodels.iv.results.IVResults.df_model.html", "iv/iv/linearmodels.iv.results.IVResults.df_resid.html", "iv/iv/linearmodels.iv.results.IVResults.durbin.html", "iv/iv/linearmodels.iv.results.IVResults.f_statistic.html", "iv/iv/linearmodels.iv.results.IVResults.first_stage.html", "iv/iv/linearmodels.iv.results.IVResults.fitted_values.html", "iv/iv/linearmodels.iv.results.IVResults.has_constant.html", "iv/iv/linearmodels.iv.results.IVResults.idiosyncratic.html", "iv/iv/linearmodels.iv.results.IVResults.kappa.html", "iv/iv/linearmodels.iv.results.IVResults.method.html", "iv/iv/linearmodels.iv.results.IVResults.model_ss.html", "iv/iv/linearmodels.iv.results.IVResults.nobs.html", "iv/iv/linearmodels.iv.results.IVResults.params.html", "iv/iv/linearmodels.iv.results.IVResults.predict.html", "iv/iv/linearmodels.iv.results.IVResults.pvalues.html", "iv/iv/linearmodels.iv.results.IVResults.resid_ss.html", "iv/iv/linearmodels.iv.results.IVResults.resids.html", "iv/iv/linearmodels.iv.results.IVResults.rsquared.html", "iv/iv/linearmodels.iv.results.IVResults.rsquared_adj.html", "iv/iv/linearmodels.iv.results.IVResults.s2.html", "iv/iv/linearmodels.iv.results.IVResults.sargan.html", "iv/iv/linearmodels.iv.results.IVResults.std_errors.html", "iv/iv/linearmodels.iv.results.IVResults.summary.html", "iv/iv/linearmodels.iv.results.IVResults.total_ss.html", "iv/iv/linearmodels.iv.results.IVResults.tstats.html", "iv/iv/linearmodels.iv.results.IVResults.wald_test.html", "iv/iv/linearmodels.iv.results.IVResults.wooldridge_overid.html", "iv/iv/linearmodels.iv.results.IVResults.wooldridge_regression.html", "iv/iv/linearmodels.iv.results.IVResults.wooldridge_score.html", "iv/iv/linearmodels.iv.results.IVResults.wresids.html", "iv/iv/linearmodels.iv.results.IVResults.wu_hausman.html", "iv/iv/linearmodels.iv.results.OLSResults.html", "iv/iv/linearmodels.iv.results.OLSResults.conf_int.html", "iv/iv/linearmodels.iv.results.OLSResults.cov.html", "iv/iv/linearmodels.iv.results.OLSResults.cov_config.html", "iv/iv/linearmodels.iv.results.OLSResults.cov_estimator.html", "iv/iv/linearmodels.iv.results.OLSResults.cov_type.html", "iv/iv/linearmodels.iv.results.OLSResults.debiased.html", "iv/iv/linearmodels.iv.results.OLSResults.df_model.html", "iv/iv/linearmodels.iv.results.OLSResults.df_resid.html", "iv/iv/linearmodels.iv.results.OLSResults.f_statistic.html", "iv/iv/linearmodels.iv.results.OLSResults.fitted_values.html", "iv/iv/linearmodels.iv.results.OLSResults.has_constant.html", "iv/iv/linearmodels.iv.results.OLSResults.idiosyncratic.html", "iv/iv/linearmodels.iv.results.OLSResults.kappa.html", "iv/iv/linearmodels.iv.results.OLSResults.method.html", "iv/iv/linearmodels.iv.results.OLSResults.model_ss.html", "iv/iv/linearmodels.iv.results.OLSResults.nobs.html", "iv/iv/linearmodels.iv.results.OLSResults.params.html", "iv/iv/linearmodels.iv.results.OLSResults.predict.html", "iv/iv/linearmodels.iv.results.OLSResults.pvalues.html", "iv/iv/linearmodels.iv.results.OLSResults.resid_ss.html", "iv/iv/linearmodels.iv.results.OLSResults.resids.html", "iv/iv/linearmodels.iv.results.OLSResults.rsquared.html", "iv/iv/linearmodels.iv.results.OLSResults.rsquared_adj.html", "iv/iv/linearmodels.iv.results.OLSResults.s2.html", "iv/iv/linearmodels.iv.results.OLSResults.std_errors.html", "iv/iv/linearmodels.iv.results.OLSResults.summary.html", "iv/iv/linearmodels.iv.results.OLSResults.total_ss.html", "iv/iv/linearmodels.iv.results.OLSResults.tstats.html", "iv/iv/linearmodels.iv.results.OLSResults.wald_test.html", "iv/iv/linearmodels.iv.results.OLSResults.wresids.html", "iv/iv/linearmodels.iv.results.compare.html", "iv/mathematical-formula.html", "iv/reference.html", "panel/examples/data-formats.html", "panel/examples/examples.html", "panel/examples/using-formulas.html", "panel/faq.html", "panel/index.html", "panel/introduction.html", "panel/mathematical-formula.html", "panel/pandas.html", "panel/panel/linearmodels.panel.covariance.ACCovariance.html", "panel/panel/linearmodels.panel.covariance.ACCovariance.ALLOWED_KWARGS.html", "panel/panel/linearmodels.panel.covariance.ACCovariance.DEFAULT_KERNEL.html", "panel/panel/linearmodels.panel.covariance.ACCovariance.cov.html", "panel/panel/linearmodels.panel.covariance.ACCovariance.deferred_cov.html", "panel/panel/linearmodels.panel.covariance.ACCovariance.eps.html", "panel/panel/linearmodels.panel.covariance.ACCovariance.name.html", "panel/panel/linearmodels.panel.covariance.ACCovariance.s2.html", "panel/panel/linearmodels.panel.covariance.ClusteredCovariance.html", "panel/panel/linearmodels.panel.covariance.ClusteredCovariance.ALLOWED_KWARGS.html", "panel/panel/linearmodels.panel.covariance.ClusteredCovariance.DEFAULT_KERNEL.html", "panel/panel/linearmodels.panel.covariance.ClusteredCovariance.cov.html", "panel/panel/linearmodels.panel.covariance.ClusteredCovariance.deferred_cov.html", "panel/panel/linearmodels.panel.covariance.ClusteredCovariance.eps.html", "panel/panel/linearmodels.panel.covariance.ClusteredCovariance.name.html", "panel/panel/linearmodels.panel.covariance.ClusteredCovariance.s2.html", "panel/panel/linearmodels.panel.covariance.DriscollKraay.html", "panel/panel/linearmodels.panel.covariance.DriscollKraay.ALLOWED_KWARGS.html", "panel/panel/linearmodels.panel.covariance.DriscollKraay.DEFAULT_KERNEL.html", "panel/panel/linearmodels.panel.covariance.DriscollKraay.cov.html", "panel/panel/linearmodels.panel.covariance.DriscollKraay.deferred_cov.html", "panel/panel/linearmodels.panel.covariance.DriscollKraay.eps.html", "panel/panel/linearmodels.panel.covariance.DriscollKraay.name.html", "panel/panel/linearmodels.panel.covariance.DriscollKraay.s2.html", "panel/panel/linearmodels.panel.covariance.FamaMacBethCovariance.html", "panel/panel/linearmodels.panel.covariance.FamaMacBethCovariance.ALLOWED_KWARGS.html", "panel/panel/linearmodels.panel.covariance.FamaMacBethCovariance.DEFAULT_KERNEL.html", "panel/panel/linearmodels.panel.covariance.FamaMacBethCovariance.all_params.html", "panel/panel/linearmodels.panel.covariance.FamaMacBethCovariance.bandwidth.html", "panel/panel/linearmodels.panel.covariance.FamaMacBethCovariance.cov.html", "panel/panel/linearmodels.panel.covariance.FamaMacBethCovariance.deferred_cov.html", "panel/panel/linearmodels.panel.covariance.FamaMacBethCovariance.eps.html", "panel/panel/linearmodels.panel.covariance.FamaMacBethCovariance.name.html", "panel/panel/linearmodels.panel.covariance.FamaMacBethCovariance.s2.html", "panel/panel/linearmodels.panel.covariance.HeteroskedasticCovariance.html", "panel/panel/linearmodels.panel.covariance.HeteroskedasticCovariance.ALLOWED_KWARGS.html", "panel/panel/linearmodels.panel.covariance.HeteroskedasticCovariance.DEFAULT_KERNEL.html", "panel/panel/linearmodels.panel.covariance.HeteroskedasticCovariance.cov.html", "panel/panel/linearmodels.panel.covariance.HeteroskedasticCovariance.deferred_cov.html", "panel/panel/linearmodels.panel.covariance.HeteroskedasticCovariance.eps.html", "panel/panel/linearmodels.panel.covariance.HeteroskedasticCovariance.name.html", "panel/panel/linearmodels.panel.covariance.HeteroskedasticCovariance.s2.html", "panel/panel/linearmodels.panel.covariance.HomoskedasticCovariance.html", "panel/panel/linearmodels.panel.covariance.HomoskedasticCovariance.ALLOWED_KWARGS.html", "panel/panel/linearmodels.panel.covariance.HomoskedasticCovariance.DEFAULT_KERNEL.html", "panel/panel/linearmodels.panel.covariance.HomoskedasticCovariance.cov.html", "panel/panel/linearmodels.panel.covariance.HomoskedasticCovariance.deferred_cov.html", "panel/panel/linearmodels.panel.covariance.HomoskedasticCovariance.eps.html", "panel/panel/linearmodels.panel.covariance.HomoskedasticCovariance.name.html", "panel/panel/linearmodels.panel.covariance.HomoskedasticCovariance.s2.html", "panel/panel/linearmodels.panel.data.PanelData.html", "panel/panel/linearmodels.panel.data.PanelData.copy.html", "panel/panel/linearmodels.panel.data.PanelData.count.html", "panel/panel/linearmodels.panel.data.PanelData.dataframe.html", "panel/panel/linearmodels.panel.data.PanelData.demean.html", "panel/panel/linearmodels.panel.data.PanelData.drop.html", "panel/panel/linearmodels.panel.data.PanelData.dummies.html", "panel/panel/linearmodels.panel.data.PanelData.entities.html", "panel/panel/linearmodels.panel.data.PanelData.entity_ids.html", "panel/panel/linearmodels.panel.data.PanelData.first_difference.html", "panel/panel/linearmodels.panel.data.PanelData.general_demean.html", "panel/panel/linearmodels.panel.data.PanelData.index.html", "panel/panel/linearmodels.panel.data.PanelData.isnull.html", "panel/panel/linearmodels.panel.data.PanelData.mean.html", "panel/panel/linearmodels.panel.data.PanelData.ndim.html", "panel/panel/linearmodels.panel.data.PanelData.nentity.html", "panel/panel/linearmodels.panel.data.PanelData.nobs.html", "panel/panel/linearmodels.panel.data.PanelData.nvar.html", "panel/panel/linearmodels.panel.data.PanelData.panel.html", "panel/panel/linearmodels.panel.data.PanelData.shape.html", "panel/panel/linearmodels.panel.data.PanelData.time.html", "panel/panel/linearmodels.panel.data.PanelData.time_ids.html", "panel/panel/linearmodels.panel.data.PanelData.values2d.html", "panel/panel/linearmodels.panel.data.PanelData.values3d.html", "panel/panel/linearmodels.panel.data.PanelData.vars.html", "panel/panel/linearmodels.panel.data._Panel.html", "panel/panel/linearmodels.panel.data._Panel.from_array.html", "panel/panel/linearmodels.panel.data._Panel.items.html", "panel/panel/linearmodels.panel.data._Panel.major_axis.html", "panel/panel/linearmodels.panel.data._Panel.minor_axis.html", "panel/panel/linearmodels.panel.data._Panel.shape.html", "panel/panel/linearmodels.panel.data._Panel.to_frame.html", "panel/panel/linearmodels.panel.data._Panel.values.html", "panel/panel/linearmodels.panel.model.BetweenOLS.html", "panel/panel/linearmodels.panel.model.BetweenOLS.fit.html", "panel/panel/linearmodels.panel.model.BetweenOLS.formula.html", "panel/panel/linearmodels.panel.model.BetweenOLS.from_formula.html", "panel/panel/linearmodels.panel.model.BetweenOLS.has_constant.html", "panel/panel/linearmodels.panel.model.BetweenOLS.not_null.html", "panel/panel/linearmodels.panel.model.BetweenOLS.predict.html", "panel/panel/linearmodels.panel.model.BetweenOLS.reformat_clusters.html", "panel/panel/linearmodels.panel.model.FamaMacBeth.html", "panel/panel/linearmodels.panel.model.FamaMacBeth.fit.html", "panel/panel/linearmodels.panel.model.FamaMacBeth.formula.html", "panel/panel/linearmodels.panel.model.FamaMacBeth.from_formula.html", "panel/panel/linearmodels.panel.model.FamaMacBeth.has_constant.html", "panel/panel/linearmodels.panel.model.FamaMacBeth.not_null.html", "panel/panel/linearmodels.panel.model.FamaMacBeth.predict.html", "panel/panel/linearmodels.panel.model.FamaMacBeth.reformat_clusters.html", "panel/panel/linearmodels.panel.model.FirstDifferenceOLS.html", "panel/panel/linearmodels.panel.model.FirstDifferenceOLS.fit.html", "panel/panel/linearmodels.panel.model.FirstDifferenceOLS.formula.html", "panel/panel/linearmodels.panel.model.FirstDifferenceOLS.from_formula.html", "panel/panel/linearmodels.panel.model.FirstDifferenceOLS.has_constant.html", "panel/panel/linearmodels.panel.model.FirstDifferenceOLS.not_null.html", "panel/panel/linearmodels.panel.model.FirstDifferenceOLS.predict.html", "panel/panel/linearmodels.panel.model.FirstDifferenceOLS.reformat_clusters.html", "panel/panel/linearmodels.panel.model.PanelOLS.html", "panel/panel/linearmodels.panel.model.PanelOLS.entity_effects.html", "panel/panel/linearmodels.panel.model.PanelOLS.fit.html", "panel/panel/linearmodels.panel.model.PanelOLS.formula.html", "panel/panel/linearmodels.panel.model.PanelOLS.from_formula.html", "panel/panel/linearmodels.panel.model.PanelOLS.has_constant.html", "panel/panel/linearmodels.panel.model.PanelOLS.not_null.html", "panel/panel/linearmodels.panel.model.PanelOLS.other_effects.html", "panel/panel/linearmodels.panel.model.PanelOLS.predict.html", "panel/panel/linearmodels.panel.model.PanelOLS.reformat_clusters.html", "panel/panel/linearmodels.panel.model.PanelOLS.time_effects.html", "panel/panel/linearmodels.panel.model.PooledOLS.html", "panel/panel/linearmodels.panel.model.PooledOLS.fit.html", "panel/panel/linearmodels.panel.model.PooledOLS.formula.html", "panel/panel/linearmodels.panel.model.PooledOLS.from_formula.html", "panel/panel/linearmodels.panel.model.PooledOLS.has_constant.html", "panel/panel/linearmodels.panel.model.PooledOLS.not_null.html", "panel/panel/linearmodels.panel.model.PooledOLS.predict.html", "panel/panel/linearmodels.panel.model.PooledOLS.reformat_clusters.html", "panel/panel/linearmodels.panel.model.RandomEffects.html", "panel/panel/linearmodels.panel.model.RandomEffects.fit.html", "panel/panel/linearmodels.panel.model.RandomEffects.formula.html", "panel/panel/linearmodels.panel.model.RandomEffects.from_formula.html", "panel/panel/linearmodels.panel.model.RandomEffects.has_constant.html", "panel/panel/linearmodels.panel.model.RandomEffects.not_null.html", "panel/panel/linearmodels.panel.model.RandomEffects.predict.html", "panel/panel/linearmodels.panel.model.RandomEffects.reformat_clusters.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.all_params.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.avg_adj_rsquared.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.avg_rsquared.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.conf_int.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.corr_squared_between.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.corr_squared_overall.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.corr_squared_within.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.cov.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.df_model.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.df_resid.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.entity_info.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.estimated_effects.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.f_statistic.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.f_statistic_robust.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.fitted_values.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.idiosyncratic.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.loglik.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.model_ss.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.name.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.nobs.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.params.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.predict.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.pvalues.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.resid_ss.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.resids.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.rsquared.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.rsquared_between.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.rsquared_overall.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.rsquared_within.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.s2.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.std_errors.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.summary.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.time_info.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.total_ss.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.tstats.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.wald_test.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.wresids.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.conf_int.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.corr_squared_between.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.corr_squared_overall.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.corr_squared_within.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.cov.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.df_model.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.df_resid.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.entity_info.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.estimated_effects.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.f_pooled.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.f_statistic.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.f_statistic_robust.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.fitted_values.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.idiosyncratic.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.included_effects.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.loglik.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.model_ss.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.name.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.nobs.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.other_info.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.params.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.predict.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.pvalues.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.resid_ss.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.resids.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.rsquared.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.rsquared_between.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.rsquared_inclusive.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.rsquared_overall.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.rsquared_within.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.s2.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.std_errors.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.summary.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.time_info.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.total_ss.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.tstats.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.variance_decomposition.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.wald_test.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.wresids.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.cov_estimator.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.estimator_method.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.f_statistic.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.nobs.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.params.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.pvalues.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.rsquared.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.rsquared_between.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.rsquared_overall.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.rsquared_within.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.std_errors.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.summary.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.tstats.html", "panel/panel/linearmodels.panel.results.PanelResults.html", "panel/panel/linearmodels.panel.results.PanelResults.conf_int.html", "panel/panel/linearmodels.panel.results.PanelResults.corr_squared_between.html", "panel/panel/linearmodels.panel.results.PanelResults.corr_squared_overall.html", "panel/panel/linearmodels.panel.results.PanelResults.corr_squared_within.html", "panel/panel/linearmodels.panel.results.PanelResults.cov.html", "panel/panel/linearmodels.panel.results.PanelResults.df_model.html", "panel/panel/linearmodels.panel.results.PanelResults.df_resid.html", "panel/panel/linearmodels.panel.results.PanelResults.entity_info.html", "panel/panel/linearmodels.panel.results.PanelResults.estimated_effects.html", "panel/panel/linearmodels.panel.results.PanelResults.f_statistic.html", "panel/panel/linearmodels.panel.results.PanelResults.f_statistic_robust.html", "panel/panel/linearmodels.panel.results.PanelResults.fitted_values.html", "panel/panel/linearmodels.panel.results.PanelResults.idiosyncratic.html", "panel/panel/linearmodels.panel.results.PanelResults.loglik.html", "panel/panel/linearmodels.panel.results.PanelResults.model_ss.html", "panel/panel/linearmodels.panel.results.PanelResults.name.html", "panel/panel/linearmodels.panel.results.PanelResults.nobs.html", "panel/panel/linearmodels.panel.results.PanelResults.params.html", "panel/panel/linearmodels.panel.results.PanelResults.predict.html", "panel/panel/linearmodels.panel.results.PanelResults.pvalues.html", "panel/panel/linearmodels.panel.results.PanelResults.resid_ss.html", "panel/panel/linearmodels.panel.results.PanelResults.resids.html", "panel/panel/linearmodels.panel.results.PanelResults.rsquared.html", "panel/panel/linearmodels.panel.results.PanelResults.rsquared_between.html", "panel/panel/linearmodels.panel.results.PanelResults.rsquared_overall.html", "panel/panel/linearmodels.panel.results.PanelResults.rsquared_within.html", "panel/panel/linearmodels.panel.results.PanelResults.s2.html", "panel/panel/linearmodels.panel.results.PanelResults.std_errors.html", "panel/panel/linearmodels.panel.results.PanelResults.summary.html", "panel/panel/linearmodels.panel.results.PanelResults.time_info.html", "panel/panel/linearmodels.panel.results.PanelResults.total_ss.html", "panel/panel/linearmodels.panel.results.PanelResults.tstats.html", "panel/panel/linearmodels.panel.results.PanelResults.wald_test.html", "panel/panel/linearmodels.panel.results.PanelResults.wresids.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.conf_int.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.corr_squared_between.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.corr_squared_overall.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.corr_squared_within.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.cov.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.df_model.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.df_resid.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.entity_info.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.estimated_effects.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.f_statistic.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.f_statistic_robust.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.fitted_values.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.idiosyncratic.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.loglik.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.model_ss.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.name.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.nobs.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.params.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.predict.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.pvalues.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.resid_ss.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.resids.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.rsquared.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.rsquared_between.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.rsquared_overall.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.rsquared_within.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.s2.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.std_errors.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.summary.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.theta.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.time_info.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.total_ss.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.tstats.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.variance_decomposition.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.wald_test.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.wresids.html", "panel/panel/linearmodels.panel.results.compare.html", "panel/panel/linearmodels.panel.utility.PanelModelData.html", "panel/panel/linearmodels.panel.utility.PanelModelData.clusters.html", "panel/panel/linearmodels.panel.utility.PanelModelData.count.html", "panel/panel/linearmodels.panel.utility.PanelModelData.data.html", "panel/panel/linearmodels.panel.utility.PanelModelData.index.html", "panel/panel/linearmodels.panel.utility.PanelModelData.other_effects.html", "panel/panel/linearmodels.panel.utility.PanelModelData.weights.html", "panel/panel/linearmodels.panel.utility.generate_panel_data.html", "panel/reference.html", "plan.html", "references.html", "system/examples/examples.html", "system/examples/formulas.html", "system/examples/three-stage-ls.html", "system/index.html", "system/mathematical-formula.html", "system/reference.html", "system/system/linearmodels.system.covariance.ClusteredCovariance.html", "system/system/linearmodels.system.covariance.ClusteredCovariance.cov.html", "system/system/linearmodels.system.covariance.ClusteredCovariance.cov_config.html", "system/system/linearmodels.system.covariance.ClusteredCovariance.sigma.html", "system/system/linearmodels.system.covariance.GMMHeteroskedasticCovariance.html", "system/system/linearmodels.system.covariance.GMMHeteroskedasticCovariance.cov.html", "system/system/linearmodels.system.covariance.GMMHeteroskedasticCovariance.cov_config.html", "system/system/linearmodels.system.covariance.GMMHomoskedasticCovariance.html", "system/system/linearmodels.system.covariance.GMMHomoskedasticCovariance.cov.html", "system/system/linearmodels.system.covariance.GMMHomoskedasticCovariance.cov_config.html", "system/system/linearmodels.system.covariance.GMMKernelCovariance.html", "system/system/linearmodels.system.covariance.GMMKernelCovariance.bandwidth.html", "system/system/linearmodels.system.covariance.GMMKernelCovariance.cov.html", "system/system/linearmodels.system.covariance.GMMKernelCovariance.cov_config.html", "system/system/linearmodels.system.covariance.GMMKernelCovariance.kernel.html", "system/system/linearmodels.system.covariance.HeteroskedasticCovariance.html", "system/system/linearmodels.system.covariance.HeteroskedasticCovariance.cov.html", "system/system/linearmodels.system.covariance.HeteroskedasticCovariance.cov_config.html", "system/system/linearmodels.system.covariance.HeteroskedasticCovariance.sigma.html", "system/system/linearmodels.system.covariance.HomoskedasticCovariance.html", "system/system/linearmodels.system.covariance.HomoskedasticCovariance.cov.html", "system/system/linearmodels.system.covariance.HomoskedasticCovariance.cov_config.html", "system/system/linearmodels.system.covariance.HomoskedasticCovariance.sigma.html", "system/system/linearmodels.system.covariance.KernelCovariance.html", "system/system/linearmodels.system.covariance.KernelCovariance.bandwidth.html", "system/system/linearmodels.system.covariance.KernelCovariance.cov.html", "system/system/linearmodels.system.covariance.KernelCovariance.cov_config.html", "system/system/linearmodels.system.covariance.KernelCovariance.kernel.html", "system/system/linearmodels.system.covariance.KernelCovariance.sigma.html", "system/system/linearmodels.system.gmm.HeteroskedasticWeightMatrix.html", "system/system/linearmodels.system.gmm.HeteroskedasticWeightMatrix.config.html", "system/system/linearmodels.system.gmm.HeteroskedasticWeightMatrix.sigma.html", "system/system/linearmodels.system.gmm.HeteroskedasticWeightMatrix.weight_matrix.html", "system/system/linearmodels.system.gmm.HomoskedasticWeightMatrix.html", "system/system/linearmodels.system.gmm.HomoskedasticWeightMatrix.config.html", "system/system/linearmodels.system.gmm.HomoskedasticWeightMatrix.sigma.html", "system/system/linearmodels.system.gmm.HomoskedasticWeightMatrix.weight_matrix.html", "system/system/linearmodels.system.gmm.KernelWeightMatrix.html", "system/system/linearmodels.system.gmm.KernelWeightMatrix.bandwidth.html", "system/system/linearmodels.system.gmm.KernelWeightMatrix.config.html", "system/system/linearmodels.system.gmm.KernelWeightMatrix.kernel.html", "system/system/linearmodels.system.gmm.KernelWeightMatrix.sigma.html", "system/system/linearmodels.system.gmm.KernelWeightMatrix.weight_matrix.html", "system/system/linearmodels.system.model.IV3SLS.html", "system/system/linearmodels.system.model.IV3SLS.add_constraints.html", "system/system/linearmodels.system.model.IV3SLS.constraints.html", "system/system/linearmodels.system.model.IV3SLS.fit.html", "system/system/linearmodels.system.model.IV3SLS.formula.html", "system/system/linearmodels.system.model.IV3SLS.from_formula.html", "system/system/linearmodels.system.model.IV3SLS.has_constant.html", "system/system/linearmodels.system.model.IV3SLS.multivariate_iv.html", "system/system/linearmodels.system.model.IV3SLS.param_names.html", "system/system/linearmodels.system.model.IV3SLS.predict.html", "system/system/linearmodels.system.model.IV3SLS.reset_constraints.html", "system/system/linearmodels.system.model.IVSystemGMM.html", "system/system/linearmodels.system.model.IVSystemGMM.add_constraints.html", "system/system/linearmodels.system.model.IVSystemGMM.constraints.html", "system/system/linearmodels.system.model.IVSystemGMM.fit.html", "system/system/linearmodels.system.model.IVSystemGMM.formula.html", "system/system/linearmodels.system.model.IVSystemGMM.from_formula.html", "system/system/linearmodels.system.model.IVSystemGMM.has_constant.html", "system/system/linearmodels.system.model.IVSystemGMM.param_names.html", "system/system/linearmodels.system.model.IVSystemGMM.predict.html", "system/system/linearmodels.system.model.IVSystemGMM.reset_constraints.html", "system/system/linearmodels.system.model.LinearConstraint.html", "system/system/linearmodels.system.model.LinearConstraint.a.html", "system/system/linearmodels.system.model.LinearConstraint.q.html", "system/system/linearmodels.system.model.LinearConstraint.r.html", "system/system/linearmodels.system.model.LinearConstraint.t.html", "system/system/linearmodels.system.model.SUR.html", "system/system/linearmodels.system.model.SUR.add_constraints.html", "system/system/linearmodels.system.model.SUR.constraints.html", "system/system/linearmodels.system.model.SUR.fit.html", "system/system/linearmodels.system.model.SUR.formula.html", "system/system/linearmodels.system.model.SUR.from_formula.html", "system/system/linearmodels.system.model.SUR.has_constant.html", "system/system/linearmodels.system.model.SUR.multivariate_ls.html", "system/system/linearmodels.system.model.SUR.param_names.html", "system/system/linearmodels.system.model.SUR.predict.html", "system/system/linearmodels.system.model.SUR.reset_constraints.html", "system/system/linearmodels.system.results.GMMSystemResults.html", "system/system/linearmodels.system.results.GMMSystemResults.breusch_pagan.html", "system/system/linearmodels.system.results.GMMSystemResults.conf_int.html", "system/system/linearmodels.system.results.GMMSystemResults.cov.html", "system/system/linearmodels.system.results.GMMSystemResults.cov_config.html", "system/system/linearmodels.system.results.GMMSystemResults.cov_estimator.html", "system/system/linearmodels.system.results.GMMSystemResults.debiased.html", "system/system/linearmodels.system.results.GMMSystemResults.df_model.html", "system/system/linearmodels.system.results.GMMSystemResults.df_resid.html", "system/system/linearmodels.system.results.GMMSystemResults.equation_labels.html", "system/system/linearmodels.system.results.GMMSystemResults.equations.html", "system/system/linearmodels.system.results.GMMSystemResults.fitted_values.html", "system/system/linearmodels.system.results.GMMSystemResults.iterations.html", "system/system/linearmodels.system.results.GMMSystemResults.j_stat.html", "system/system/linearmodels.system.results.GMMSystemResults.likelihood_ratio.html", "system/system/linearmodels.system.results.GMMSystemResults.method.html", "system/system/linearmodels.system.results.GMMSystemResults.model.html", "system/system/linearmodels.system.results.GMMSystemResults.model_ss.html", "system/system/linearmodels.system.results.GMMSystemResults.nobs.html", "system/system/linearmodels.system.results.GMMSystemResults.params.html", "system/system/linearmodels.system.results.GMMSystemResults.predict.html", "system/system/linearmodels.system.results.GMMSystemResults.pvalues.html", "system/system/linearmodels.system.results.GMMSystemResults.resid_ss.html", "system/system/linearmodels.system.results.GMMSystemResults.resids.html", "system/system/linearmodels.system.results.GMMSystemResults.rsquared.html", "system/system/linearmodels.system.results.GMMSystemResults.sigma.html", "system/system/linearmodels.system.results.GMMSystemResults.std_errors.html", "system/system/linearmodels.system.results.GMMSystemResults.summary.html", "system/system/linearmodels.system.results.GMMSystemResults.system_rsquared.html", "system/system/linearmodels.system.results.GMMSystemResults.total_ss.html", "system/system/linearmodels.system.results.GMMSystemResults.tstats.html", "system/system/linearmodels.system.results.GMMSystemResults.w.html", "system/system/linearmodels.system.results.GMMSystemResults.weight_config.html", "system/system/linearmodels.system.results.GMMSystemResults.weight_type.html", "system/system/linearmodels.system.results.GMMSystemResults.wresids.html", "system/system/linearmodels.system.results.SystemResults.html", "system/system/linearmodels.system.results.SystemResults.breusch_pagan.html", "system/system/linearmodels.system.results.SystemResults.conf_int.html", "system/system/linearmodels.system.results.SystemResults.cov.html", "system/system/linearmodels.system.results.SystemResults.cov_config.html", "system/system/linearmodels.system.results.SystemResults.cov_estimator.html", "system/system/linearmodels.system.results.SystemResults.debiased.html", "system/system/linearmodels.system.results.SystemResults.df_model.html", "system/system/linearmodels.system.results.SystemResults.df_resid.html", "system/system/linearmodels.system.results.SystemResults.equation_labels.html", "system/system/linearmodels.system.results.SystemResults.equations.html", "system/system/linearmodels.system.results.SystemResults.fitted_values.html", "system/system/linearmodels.system.results.SystemResults.iterations.html", "system/system/linearmodels.system.results.SystemResults.likelihood_ratio.html", "system/system/linearmodels.system.results.SystemResults.method.html", "system/system/linearmodels.system.results.SystemResults.model.html", "system/system/linearmodels.system.results.SystemResults.model_ss.html", "system/system/linearmodels.system.results.SystemResults.nobs.html", "system/system/linearmodels.system.results.SystemResults.params.html", "system/system/linearmodels.system.results.SystemResults.predict.html", "system/system/linearmodels.system.results.SystemResults.pvalues.html", "system/system/linearmodels.system.results.SystemResults.resid_ss.html", "system/system/linearmodels.system.results.SystemResults.resids.html", "system/system/linearmodels.system.results.SystemResults.rsquared.html", "system/system/linearmodels.system.results.SystemResults.sigma.html", "system/system/linearmodels.system.results.SystemResults.std_errors.html", "system/system/linearmodels.system.results.SystemResults.summary.html", "system/system/linearmodels.system.results.SystemResults.system_rsquared.html", "system/system/linearmodels.system.results.SystemResults.total_ss.html", "system/system/linearmodels.system.results.SystemResults.tstats.html", "system/system/linearmodels.system.results.SystemResults.wresids.html", "types.html", "utility.html", "utility/linearmodels.shared.covariance.cov_cluster.html", "utility/linearmodels.shared.covariance.cov_kernel.html", "utility/linearmodels.shared.covariance.group_debias_coefficient.html", "utility/linearmodels.shared.hypotheses.InvalidTestStatistic.html", "utility/linearmodels.shared.hypotheses.InvalidTestStatistic.critical_values.html", "utility/linearmodels.shared.hypotheses.InvalidTestStatistic.null.html", "utility/linearmodels.shared.hypotheses.InvalidTestStatistic.pval.html", "utility/linearmodels.shared.hypotheses.InvalidTestStatistic.stat.html", "utility/linearmodels.shared.hypotheses.WaldTestStatistic.html", "utility/linearmodels.shared.hypotheses.WaldTestStatistic.critical_values.html", "utility/linearmodels.shared.hypotheses.WaldTestStatistic.null.html", "utility/linearmodels.shared.hypotheses.WaldTestStatistic.pval.html", "utility/linearmodels.shared.hypotheses.WaldTestStatistic.stat.html", "utility/linearmodels.shared.utility.AttrDict.html", "utility/linearmodels.shared.utility.AttrDict.clear.html", "utility/linearmodels.shared.utility.AttrDict.copy.html", "utility/linearmodels.shared.utility.AttrDict.get.html", "utility/linearmodels.shared.utility.AttrDict.items.html", "utility/linearmodels.shared.utility.AttrDict.keys.html", "utility/linearmodels.shared.utility.AttrDict.pop.html", "utility/linearmodels.shared.utility.AttrDict.popitem.html", "utility/linearmodels.shared.utility.AttrDict.setdefault.html", "utility/linearmodels.shared.utility.AttrDict.update.html", "utility/linearmodels.shared.utility.AttrDict.values.html"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1}, "indexentries": {"_ols (class in linearmodels.iv.model)": [[257, "linearmodels.iv.model._OLS", false]], "_panel (class in linearmodels.panel.data)": [[480, "linearmodels.panel.data._Panel", false]], "a (linearmodels.system.model.linearconstraint property)": [[786, "linearmodels.system.model.LinearConstraint.a", false]], "absorbed_dependent (linearmodels.iv.absorbing.absorbingls property)": [[93, "linearmodels.iv.absorbing.AbsorbingLS.absorbed_dependent", false]], "absorbed_effects (linearmodels.iv.absorbing.absorbinglsresults property)": [[104, "linearmodels.iv.absorbing.AbsorbingLSResults.absorbed_effects", false]], "absorbed_exog (linearmodels.iv.absorbing.absorbingls property)": [[94, "linearmodels.iv.absorbing.AbsorbingLS.absorbed_exog", false]], "absorbed_rsquared (linearmodels.iv.absorbing.absorbinglsresults property)": [[105, "linearmodels.iv.absorbing.AbsorbingLSResults.absorbed_rsquared", false]], "absorbingls (class in linearmodels.iv.absorbing)": [[92, "linearmodels.iv.absorbing.AbsorbingLS", false]], "absorbinglsresults (class in linearmodels.iv.absorbing)": [[103, "linearmodels.iv.absorbing.AbsorbingLSResults", false]], "absorbingregressor (class in linearmodels.iv.absorbing)": [[135, "linearmodels.iv.absorbing.AbsorbingRegressor", false]], "accovariance (class in linearmodels.panel.covariance)": [[405, "linearmodels.panel.covariance.ACCovariance", false]], "add_constraints() (linearmodels.system.model.iv3sls method)": [[765, "linearmodels.system.model.IV3SLS.add_constraints", false]], "add_constraints() (linearmodels.system.model.ivsystemgmm method)": [[776, "linearmodels.system.model.IVSystemGMM.add_constraints", false]], "add_constraints() (linearmodels.system.model.sur method)": [[791, "linearmodels.system.model.SUR.add_constraints", false]], "add_extra_txt() (linearmodels.compat.statsmodels.summary method)": [[83, "linearmodels.compat.statsmodels.Summary.add_extra_txt", false]], "add_table_2cols() (linearmodels.compat.statsmodels.summary method)": [[84, "linearmodels.compat.statsmodels.Summary.add_table_2cols", false]], "add_table_params() (linearmodels.compat.statsmodels.summary method)": [[85, "linearmodels.compat.statsmodels.Summary.add_table_params", false]], "all_params (linearmodels.panel.covariance.famamacbethcovariance property)": [[432, "linearmodels.panel.covariance.FamaMacBethCovariance.all_params", false]], "all_params (linearmodels.panel.results.famamacbethresults property)": [[540, "linearmodels.panel.results.FamaMacBethResults.all_params", false]], "allowed_kwargs (linearmodels.panel.covariance.accovariance attribute)": [[406, "linearmodels.panel.covariance.ACCovariance.ALLOWED_KWARGS", false]], "allowed_kwargs (linearmodels.panel.covariance.clusteredcovariance attribute)": [[414, "linearmodels.panel.covariance.ClusteredCovariance.ALLOWED_KWARGS", false]], "allowed_kwargs (linearmodels.panel.covariance.driscollkraay attribute)": [[422, "linearmodels.panel.covariance.DriscollKraay.ALLOWED_KWARGS", false]], "allowed_kwargs (linearmodels.panel.covariance.famamacbethcovariance attribute)": [[430, "linearmodels.panel.covariance.FamaMacBethCovariance.ALLOWED_KWARGS", false]], "allowed_kwargs (linearmodels.panel.covariance.heteroskedasticcovariance attribute)": [[440, "linearmodels.panel.covariance.HeteroskedasticCovariance.ALLOWED_KWARGS", false]], "allowed_kwargs (linearmodels.panel.covariance.homoskedasticcovariance attribute)": [[448, "linearmodels.panel.covariance.HomoskedasticCovariance.ALLOWED_KWARGS", false]], "alphas (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[29, "linearmodels.asset_pricing.results.GMMFactorModelResults.alphas", false]], "alphas (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[50, "linearmodels.asset_pricing.results.LinearFactorModelResults.alphas", false]], "anderson_rubin (linearmodels.iv.results.ivresults property)": [[323, "linearmodels.iv.results.IVResults.anderson_rubin", false]], "anyarray (in module linearmodels.typing.data)": [[867, "linearmodels.typing.data.AnyArray", false]], "approx_rank (linearmodels.iv.absorbing.absorbingregressor property)": [[136, "linearmodels.iv.absorbing.AbsorbingRegressor.approx_rank", false]], "arraylike (in module linearmodels.typing.data)": [[867, "linearmodels.typing.data.ArrayLike", false]], "as_csv() (linearmodels.compat.statsmodels.summary method)": [[86, "linearmodels.compat.statsmodels.Summary.as_csv", false]], "as_html() (linearmodels.compat.statsmodels.summary method)": [[87, "linearmodels.compat.statsmodels.Summary.as_html", false]], "as_latex() (linearmodels.compat.statsmodels.summary method)": [[88, "linearmodels.compat.statsmodels.Summary.as_latex", false]], "as_text() (linearmodels.compat.statsmodels.summary method)": [[89, "linearmodels.compat.statsmodels.Summary.as_text", false]], "attrdict (class in linearmodels.shared.utility)": [[882, "linearmodels.shared.utility.AttrDict", false]], "avg_adj_rsquared (linearmodels.panel.results.famamacbethresults property)": [[541, "linearmodels.panel.results.FamaMacBethResults.avg_adj_rsquared", false]], "avg_rsquared (linearmodels.panel.results.famamacbethresults property)": [[542, "linearmodels.panel.results.FamaMacBethResults.avg_rsquared", false]], "bandwidth (linearmodels.asset_pricing.covariance.kernelcovariance property)": [[8, "linearmodels.asset_pricing.covariance.KernelCovariance.bandwidth", false]], "bandwidth (linearmodels.iv.gmm.kernelweightmatrix property)": [[206, "linearmodels.iv.gmm.KernelWeightMatrix.bandwidth", false]], "bandwidth (linearmodels.panel.covariance.famamacbethcovariance property)": [[433, "linearmodels.panel.covariance.FamaMacBethCovariance.bandwidth", false]], "bandwidth (linearmodels.system.covariance.gmmkernelcovariance property)": [[732, "linearmodels.system.covariance.GMMKernelCovariance.bandwidth", false]], "bandwidth (linearmodels.system.covariance.kernelcovariance property)": [[745, "linearmodels.system.covariance.KernelCovariance.bandwidth", false]], "bandwidth (linearmodels.system.gmm.kernelweightmatrix property)": [[759, "linearmodels.system.gmm.KernelWeightMatrix.bandwidth", false]], "basmann (linearmodels.iv.results.ivresults property)": [[324, "linearmodels.iv.results.IVResults.basmann", false]], "basmann_f (linearmodels.iv.results.ivresults property)": [[325, "linearmodels.iv.results.IVResults.basmann_f", false]], "betas (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[30, "linearmodels.asset_pricing.results.GMMFactorModelResults.betas", false]], "betas (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[51, "linearmodels.asset_pricing.results.LinearFactorModelResults.betas", false]], "betweenols (class in linearmodels.panel.model)": [[488, "linearmodels.panel.model.BetweenOLS", false]], "boolarray (in module linearmodels.typing.data)": [[867, "linearmodels.typing.data.BoolArray", false]], "breusch_pagan() (linearmodels.system.results.gmmsystemresults method)": [[802, "linearmodels.system.results.GMMSystemResults.breusch_pagan", false]], "breusch_pagan() (linearmodels.system.results.systemresults method)": [[837, "linearmodels.system.results.SystemResults.breusch_pagan", false]], "c_stat() (linearmodels.iv.results.ivgmmresults method)": [[273, "linearmodels.iv.results.IVGMMResults.c_stat", false]], "cat (linearmodels.iv.absorbing.interaction property)": [[141, "linearmodels.iv.absorbing.Interaction.cat", false]], "clear() (linearmodels.shared.utility.attrdict method)": [[883, "linearmodels.shared.utility.AttrDict.clear", false]], "clusteredcovariance (class in linearmodels.iv.covariance)": [[155, "linearmodels.iv.covariance.ClusteredCovariance", false]], "clusteredcovariance (class in linearmodels.panel.covariance)": [[413, "linearmodels.panel.covariance.ClusteredCovariance", false]], "clusteredcovariance (class in linearmodels.system.covariance)": [[721, "linearmodels.system.covariance.ClusteredCovariance", false]], "clusters (linearmodels.panel.utility.panelmodeldata attribute)": [[705, "linearmodels.panel.utility.PanelModelData.clusters", false]], "cols (linearmodels.iv.data.ivdata property)": [[184, "linearmodels.iv.data.IVData.cols", false]], "compare() (in module linearmodels.iv.results)": [[394, "linearmodels.iv.results.compare", false]], "compare() (in module linearmodels.panel.results)": [[703, "linearmodels.panel.results.compare", false]], "conf_int() (linearmodels.iv.absorbing.absorbinglsresults method)": [[106, "linearmodels.iv.absorbing.AbsorbingLSResults.conf_int", false]], "conf_int() (linearmodels.iv.results.ivgmmresults method)": [[274, "linearmodels.iv.results.IVGMMResults.conf_int", false]], "conf_int() (linearmodels.iv.results.ivresults method)": [[326, "linearmodels.iv.results.IVResults.conf_int", false]], "conf_int() (linearmodels.iv.results.olsresults method)": [[364, "linearmodels.iv.results.OLSResults.conf_int", false]], "conf_int() (linearmodels.panel.results.famamacbethresults method)": [[543, "linearmodels.panel.results.FamaMacBethResults.conf_int", false]], "conf_int() (linearmodels.panel.results.paneleffectsresults method)": [[578, "linearmodels.panel.results.PanelEffectsResults.conf_int", false]], "conf_int() (linearmodels.panel.results.panelresults method)": [[632, "linearmodels.panel.results.PanelResults.conf_int", false]], "conf_int() (linearmodels.panel.results.randomeffectsresults method)": [[667, "linearmodels.panel.results.RandomEffectsResults.conf_int", false]], "conf_int() (linearmodels.system.results.gmmsystemresults method)": [[803, "linearmodels.system.results.GMMSystemResults.conf_int", false]], "conf_int() (linearmodels.system.results.systemresults method)": [[838, "linearmodels.system.results.SystemResults.conf_int", false]], "config (linearmodels.asset_pricing.covariance.heteroskedasticcovariance property)": [[1, "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.config", false]], "config (linearmodels.asset_pricing.covariance.kernelcovariance property)": [[9, "linearmodels.asset_pricing.covariance.KernelCovariance.config", false]], "config (linearmodels.iv.covariance.clusteredcovariance property)": [[156, "linearmodels.iv.covariance.ClusteredCovariance.config", false]], "config (linearmodels.iv.covariance.heteroskedasticcovariance property)": [[162, "linearmodels.iv.covariance.HeteroskedasticCovariance.config", false]], "config (linearmodels.iv.covariance.homoskedasticcovariance property)": [[168, "linearmodels.iv.covariance.HomoskedasticCovariance.config", false]], "config (linearmodels.iv.covariance.kernelcovariance property)": [[174, "linearmodels.iv.covariance.KernelCovariance.config", false]], "config (linearmodels.iv.gmm.heteroskedasticweightmatrix property)": [[194, "linearmodels.iv.gmm.HeteroskedasticWeightMatrix.config", false]], "config (linearmodels.iv.gmm.homoskedasticweightmatrix property)": [[197, "linearmodels.iv.gmm.HomoskedasticWeightMatrix.config", false]], "config (linearmodels.iv.gmm.ivgmmcovariance property)": [[200, "linearmodels.iv.gmm.IVGMMCovariance.config", false]], "config (linearmodels.iv.gmm.kernelweightmatrix property)": [[207, "linearmodels.iv.gmm.KernelWeightMatrix.config", false]], "config (linearmodels.iv.gmm.onewayclusteredweightmatrix property)": [[210, "linearmodels.iv.gmm.OneWayClusteredWeightMatrix.config", false]], "config (linearmodels.system.gmm.heteroskedasticweightmatrix property)": [[751, "linearmodels.system.gmm.HeteroskedasticWeightMatrix.config", false]], "config (linearmodels.system.gmm.homoskedasticweightmatrix property)": [[755, "linearmodels.system.gmm.HomoskedasticWeightMatrix.config", false]], "config (linearmodels.system.gmm.kernelweightmatrix property)": [[760, "linearmodels.system.gmm.KernelWeightMatrix.config", false]], "constraints (linearmodels.system.model.iv3sls property)": [[766, "linearmodels.system.model.IV3SLS.constraints", false]], "constraints (linearmodels.system.model.ivsystemgmm property)": [[777, "linearmodels.system.model.IVSystemGMM.constraints", false]], "constraints (linearmodels.system.model.sur property)": [[792, "linearmodels.system.model.SUR.constraints", false]], "cont (linearmodels.iv.absorbing.interaction property)": [[142, "linearmodels.iv.absorbing.Interaction.cont", false]], "copy() (linearmodels.panel.data.paneldata method)": [[456, "linearmodels.panel.data.PanelData.copy", false]], "copy() (linearmodels.shared.utility.attrdict method)": [[884, "linearmodels.shared.utility.AttrDict.copy", false]], "corr_squared_between (linearmodels.panel.results.famamacbethresults property)": [[544, "linearmodels.panel.results.FamaMacBethResults.corr_squared_between", false]], "corr_squared_between (linearmodels.panel.results.paneleffectsresults property)": [[579, "linearmodels.panel.results.PanelEffectsResults.corr_squared_between", false]], "corr_squared_between (linearmodels.panel.results.panelresults property)": [[633, "linearmodels.panel.results.PanelResults.corr_squared_between", false]], "corr_squared_between (linearmodels.panel.results.randomeffectsresults property)": [[668, "linearmodels.panel.results.RandomEffectsResults.corr_squared_between", false]], "corr_squared_overall (linearmodels.panel.results.famamacbethresults property)": [[545, "linearmodels.panel.results.FamaMacBethResults.corr_squared_overall", false]], "corr_squared_overall (linearmodels.panel.results.paneleffectsresults property)": [[580, "linearmodels.panel.results.PanelEffectsResults.corr_squared_overall", false]], "corr_squared_overall (linearmodels.panel.results.panelresults property)": [[634, "linearmodels.panel.results.PanelResults.corr_squared_overall", false]], "corr_squared_overall (linearmodels.panel.results.randomeffectsresults property)": [[669, "linearmodels.panel.results.RandomEffectsResults.corr_squared_overall", false]], "corr_squared_within (linearmodels.panel.results.famamacbethresults property)": [[546, "linearmodels.panel.results.FamaMacBethResults.corr_squared_within", false]], "corr_squared_within (linearmodels.panel.results.paneleffectsresults property)": [[581, "linearmodels.panel.results.PanelEffectsResults.corr_squared_within", false]], "corr_squared_within (linearmodels.panel.results.panelresults property)": [[635, "linearmodels.panel.results.PanelResults.corr_squared_within", false]], "corr_squared_within (linearmodels.panel.results.randomeffectsresults property)": [[670, "linearmodels.panel.results.RandomEffectsResults.corr_squared_within", false]], "count() (linearmodels.panel.data.paneldata method)": [[457, "linearmodels.panel.data.PanelData.count", false]], "count() (linearmodels.panel.utility.panelmodeldata method)": [[706, "linearmodels.panel.utility.PanelModelData.count", false]], "cov (linearmodels.asset_pricing.covariance.heteroskedasticcovariance property)": [[2, "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.cov", false]], "cov (linearmodels.asset_pricing.covariance.kernelcovariance property)": [[10, "linearmodels.asset_pricing.covariance.KernelCovariance.cov", false]], "cov (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[31, "linearmodels.asset_pricing.results.GMMFactorModelResults.cov", false]], "cov (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[52, "linearmodels.asset_pricing.results.LinearFactorModelResults.cov", false]], "cov (linearmodels.iv.absorbing.absorbinglsresults property)": [[107, "linearmodels.iv.absorbing.AbsorbingLSResults.cov", false]], "cov (linearmodels.iv.covariance.clusteredcovariance property)": [[157, "linearmodels.iv.covariance.ClusteredCovariance.cov", false]], "cov (linearmodels.iv.covariance.heteroskedasticcovariance property)": [[163, "linearmodels.iv.covariance.HeteroskedasticCovariance.cov", false]], "cov (linearmodels.iv.covariance.homoskedasticcovariance property)": [[169, "linearmodels.iv.covariance.HomoskedasticCovariance.cov", false]], "cov (linearmodels.iv.covariance.kernelcovariance property)": [[175, "linearmodels.iv.covariance.KernelCovariance.cov", false]], "cov (linearmodels.iv.gmm.ivgmmcovariance property)": [[201, "linearmodels.iv.gmm.IVGMMCovariance.cov", false]], "cov (linearmodels.iv.results.ivgmmresults property)": [[275, "linearmodels.iv.results.IVGMMResults.cov", false]], "cov (linearmodels.iv.results.ivresults property)": [[327, "linearmodels.iv.results.IVResults.cov", false]], "cov (linearmodels.iv.results.olsresults property)": [[365, "linearmodels.iv.results.OLSResults.cov", false]], "cov (linearmodels.panel.covariance.accovariance property)": [[408, "linearmodels.panel.covariance.ACCovariance.cov", false]], "cov (linearmodels.panel.covariance.clusteredcovariance property)": [[416, "linearmodels.panel.covariance.ClusteredCovariance.cov", false]], "cov (linearmodels.panel.covariance.driscollkraay property)": [[424, "linearmodels.panel.covariance.DriscollKraay.cov", false]], "cov (linearmodels.panel.covariance.famamacbethcovariance property)": [[434, "linearmodels.panel.covariance.FamaMacBethCovariance.cov", false]], "cov (linearmodels.panel.covariance.heteroskedasticcovariance property)": [[442, "linearmodels.panel.covariance.HeteroskedasticCovariance.cov", false]], "cov (linearmodels.panel.covariance.homoskedasticcovariance property)": [[450, "linearmodels.panel.covariance.HomoskedasticCovariance.cov", false]], "cov (linearmodels.panel.results.famamacbethresults property)": [[547, "linearmodels.panel.results.FamaMacBethResults.cov", false]], "cov (linearmodels.panel.results.paneleffectsresults property)": [[582, "linearmodels.panel.results.PanelEffectsResults.cov", false]], "cov (linearmodels.panel.results.panelresults property)": [[636, "linearmodels.panel.results.PanelResults.cov", false]], "cov (linearmodels.panel.results.randomeffectsresults property)": [[671, "linearmodels.panel.results.RandomEffectsResults.cov", false]], "cov (linearmodels.system.covariance.clusteredcovariance property)": [[722, "linearmodels.system.covariance.ClusteredCovariance.cov", false]], "cov (linearmodels.system.covariance.gmmheteroskedasticcovariance property)": [[726, "linearmodels.system.covariance.GMMHeteroskedasticCovariance.cov", false]], "cov (linearmodels.system.covariance.gmmhomoskedasticcovariance property)": [[729, "linearmodels.system.covariance.GMMHomoskedasticCovariance.cov", false]], "cov (linearmodels.system.covariance.gmmkernelcovariance property)": [[733, "linearmodels.system.covariance.GMMKernelCovariance.cov", false]], "cov (linearmodels.system.covariance.heteroskedasticcovariance property)": [[737, "linearmodels.system.covariance.HeteroskedasticCovariance.cov", false]], "cov (linearmodels.system.covariance.homoskedasticcovariance property)": [[741, "linearmodels.system.covariance.HomoskedasticCovariance.cov", false]], "cov (linearmodels.system.covariance.kernelcovariance property)": [[746, "linearmodels.system.covariance.KernelCovariance.cov", false]], "cov (linearmodels.system.results.gmmsystemresults property)": [[804, "linearmodels.system.results.GMMSystemResults.cov", false]], "cov (linearmodels.system.results.systemresults property)": [[839, "linearmodels.system.results.SystemResults.cov", false]], "cov_cluster() (in module linearmodels.shared.covariance)": [[869, "linearmodels.shared.covariance.cov_cluster", false]], "cov_config (linearmodels.iv.absorbing.absorbinglsresults property)": [[108, "linearmodels.iv.absorbing.AbsorbingLSResults.cov_config", false]], "cov_config (linearmodels.iv.results.ivgmmresults property)": [[276, "linearmodels.iv.results.IVGMMResults.cov_config", false]], "cov_config (linearmodels.iv.results.ivresults property)": [[328, "linearmodels.iv.results.IVResults.cov_config", false]], "cov_config (linearmodels.iv.results.olsresults property)": [[366, "linearmodels.iv.results.OLSResults.cov_config", false]], "cov_config (linearmodels.system.covariance.clusteredcovariance property)": [[723, "linearmodels.system.covariance.ClusteredCovariance.cov_config", false]], "cov_config (linearmodels.system.covariance.gmmheteroskedasticcovariance property)": [[727, "linearmodels.system.covariance.GMMHeteroskedasticCovariance.cov_config", false]], "cov_config (linearmodels.system.covariance.gmmhomoskedasticcovariance property)": [[730, "linearmodels.system.covariance.GMMHomoskedasticCovariance.cov_config", false]], "cov_config (linearmodels.system.covariance.gmmkernelcovariance property)": [[734, "linearmodels.system.covariance.GMMKernelCovariance.cov_config", false]], "cov_config (linearmodels.system.covariance.heteroskedasticcovariance property)": [[738, "linearmodels.system.covariance.HeteroskedasticCovariance.cov_config", false]], "cov_config (linearmodels.system.covariance.homoskedasticcovariance property)": [[742, "linearmodels.system.covariance.HomoskedasticCovariance.cov_config", false]], "cov_config (linearmodels.system.covariance.kernelcovariance property)": [[747, "linearmodels.system.covariance.KernelCovariance.cov_config", false]], "cov_config (linearmodels.system.results.gmmsystemresults property)": [[805, "linearmodels.system.results.GMMSystemResults.cov_config", false]], "cov_config (linearmodels.system.results.systemresults property)": [[840, "linearmodels.system.results.SystemResults.cov_config", false]], "cov_estimator (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[32, "linearmodels.asset_pricing.results.GMMFactorModelResults.cov_estimator", false]], "cov_estimator (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[53, "linearmodels.asset_pricing.results.LinearFactorModelResults.cov_estimator", false]], "cov_estimator (linearmodels.iv.absorbing.absorbinglsresults property)": [[109, "linearmodels.iv.absorbing.AbsorbingLSResults.cov_estimator", false]], "cov_estimator (linearmodels.iv.results.ivgmmresults property)": [[277, "linearmodels.iv.results.IVGMMResults.cov_estimator", false]], "cov_estimator (linearmodels.iv.results.ivmodelcomparison property)": [[311, "linearmodels.iv.results.IVModelComparison.cov_estimator", false]], "cov_estimator (linearmodels.iv.results.ivresults property)": [[329, "linearmodels.iv.results.IVResults.cov_estimator", false]], "cov_estimator (linearmodels.iv.results.olsresults property)": [[367, "linearmodels.iv.results.OLSResults.cov_estimator", false]], "cov_estimator (linearmodels.panel.results.panelmodelcomparison property)": [[618, "linearmodels.panel.results.PanelModelComparison.cov_estimator", false]], "cov_estimator (linearmodels.system.results.gmmsystemresults property)": [[806, "linearmodels.system.results.GMMSystemResults.cov_estimator", false]], "cov_estimator (linearmodels.system.results.systemresults property)": [[841, "linearmodels.system.results.SystemResults.cov_estimator", false]], "cov_kernel() (in module linearmodels.shared.covariance)": [[870, "linearmodels.shared.covariance.cov_kernel", false]], "cov_type (linearmodels.iv.absorbing.absorbinglsresults property)": [[110, "linearmodels.iv.absorbing.AbsorbingLSResults.cov_type", false]], "cov_type (linearmodels.iv.results.ivgmmresults property)": [[278, "linearmodels.iv.results.IVGMMResults.cov_type", false]], "cov_type (linearmodels.iv.results.ivresults property)": [[330, "linearmodels.iv.results.IVResults.cov_type", false]], "cov_type (linearmodels.iv.results.olsresults property)": [[368, "linearmodels.iv.results.OLSResults.cov_type", false]], "critical_values (linearmodels.shared.hypotheses.invalidteststatistic property)": [[873, "linearmodels.shared.hypotheses.InvalidTestStatistic.critical_values", false]], "critical_values (linearmodels.shared.hypotheses.waldteststatistic property)": [[878, "linearmodels.shared.hypotheses.WaldTestStatistic.critical_values", false]], "data (linearmodels.panel.utility.panelmodeldata attribute)": [[707, "linearmodels.panel.utility.PanelModelData.data", false]], "dataframe (linearmodels.panel.data.paneldata property)": [[458, "linearmodels.panel.data.PanelData.dataframe", false]], "debiased (linearmodels.iv.absorbing.absorbinglsresults property)": [[111, "linearmodels.iv.absorbing.AbsorbingLSResults.debiased", false]], "debiased (linearmodels.iv.covariance.clusteredcovariance property)": [[158, "linearmodels.iv.covariance.ClusteredCovariance.debiased", false]], "debiased (linearmodels.iv.covariance.heteroskedasticcovariance property)": [[164, "linearmodels.iv.covariance.HeteroskedasticCovariance.debiased", false]], "debiased (linearmodels.iv.covariance.homoskedasticcovariance property)": [[170, "linearmodels.iv.covariance.HomoskedasticCovariance.debiased", false]], "debiased (linearmodels.iv.covariance.kernelcovariance property)": [[176, "linearmodels.iv.covariance.KernelCovariance.debiased", false]], "debiased (linearmodels.iv.gmm.ivgmmcovariance property)": [[202, "linearmodels.iv.gmm.IVGMMCovariance.debiased", false]], "debiased (linearmodels.iv.results.ivgmmresults property)": [[279, "linearmodels.iv.results.IVGMMResults.debiased", false]], "debiased (linearmodels.iv.results.ivresults property)": [[331, "linearmodels.iv.results.IVResults.debiased", false]], "debiased (linearmodels.iv.results.olsresults property)": [[369, "linearmodels.iv.results.OLSResults.debiased", false]], "debiased (linearmodels.system.results.gmmsystemresults property)": [[807, "linearmodels.system.results.GMMSystemResults.debiased", false]], "debiased (linearmodels.system.results.systemresults property)": [[842, "linearmodels.system.results.SystemResults.debiased", false]], "default_kernel (linearmodels.panel.covariance.accovariance attribute)": [[407, "linearmodels.panel.covariance.ACCovariance.DEFAULT_KERNEL", false]], "default_kernel (linearmodels.panel.covariance.clusteredcovariance attribute)": [[415, "linearmodels.panel.covariance.ClusteredCovariance.DEFAULT_KERNEL", false]], "default_kernel (linearmodels.panel.covariance.driscollkraay attribute)": [[423, "linearmodels.panel.covariance.DriscollKraay.DEFAULT_KERNEL", false]], "default_kernel (linearmodels.panel.covariance.famamacbethcovariance attribute)": [[431, "linearmodels.panel.covariance.FamaMacBethCovariance.DEFAULT_KERNEL", false]], "default_kernel (linearmodels.panel.covariance.heteroskedasticcovariance attribute)": [[441, "linearmodels.panel.covariance.HeteroskedasticCovariance.DEFAULT_KERNEL", false]], "default_kernel (linearmodels.panel.covariance.homoskedasticcovariance attribute)": [[449, "linearmodels.panel.covariance.HomoskedasticCovariance.DEFAULT_KERNEL", false]], "deferred_cov() (linearmodels.panel.covariance.accovariance method)": [[409, "linearmodels.panel.covariance.ACCovariance.deferred_cov", false]], "deferred_cov() (linearmodels.panel.covariance.clusteredcovariance method)": [[417, "linearmodels.panel.covariance.ClusteredCovariance.deferred_cov", false]], "deferred_cov() (linearmodels.panel.covariance.driscollkraay method)": [[425, "linearmodels.panel.covariance.DriscollKraay.deferred_cov", false]], "deferred_cov() (linearmodels.panel.covariance.famamacbethcovariance method)": [[435, "linearmodels.panel.covariance.FamaMacBethCovariance.deferred_cov", false]], "deferred_cov() (linearmodels.panel.covariance.heteroskedasticcovariance method)": [[443, "linearmodels.panel.covariance.HeteroskedasticCovariance.deferred_cov", false]], "deferred_cov() (linearmodels.panel.covariance.homoskedasticcovariance method)": [[451, "linearmodels.panel.covariance.HomoskedasticCovariance.deferred_cov", false]], "demean() (linearmodels.panel.data.paneldata method)": [[459, "linearmodels.panel.data.PanelData.demean", false]], "dependent (linearmodels.iv.absorbing.absorbingls property)": [[95, "linearmodels.iv.absorbing.AbsorbingLS.dependent", false]], "df_absorbed (linearmodels.iv.absorbing.absorbinglsresults property)": [[112, "linearmodels.iv.absorbing.AbsorbingLSResults.df_absorbed", false]], "df_model (linearmodels.iv.absorbing.absorbinglsresults property)": [[113, "linearmodels.iv.absorbing.AbsorbingLSResults.df_model", false]], "df_model (linearmodels.iv.results.ivgmmresults property)": [[280, "linearmodels.iv.results.IVGMMResults.df_model", false]], "df_model (linearmodels.iv.results.ivresults property)": [[332, "linearmodels.iv.results.IVResults.df_model", false]], "df_model (linearmodels.iv.results.olsresults property)": [[370, "linearmodels.iv.results.OLSResults.df_model", false]], "df_model (linearmodels.panel.results.famamacbethresults property)": [[548, "linearmodels.panel.results.FamaMacBethResults.df_model", false]], "df_model (linearmodels.panel.results.paneleffectsresults property)": [[583, "linearmodels.panel.results.PanelEffectsResults.df_model", false]], "df_model (linearmodels.panel.results.panelresults property)": [[637, "linearmodels.panel.results.PanelResults.df_model", false]], "df_model (linearmodels.panel.results.randomeffectsresults property)": [[672, "linearmodels.panel.results.RandomEffectsResults.df_model", false]], "df_model (linearmodels.system.results.gmmsystemresults property)": [[808, "linearmodels.system.results.GMMSystemResults.df_model", false]], "df_model (linearmodels.system.results.systemresults property)": [[843, "linearmodels.system.results.SystemResults.df_model", false]], "df_resid (linearmodels.iv.absorbing.absorbinglsresults property)": [[114, "linearmodels.iv.absorbing.AbsorbingLSResults.df_resid", false]], "df_resid (linearmodels.iv.results.ivgmmresults property)": [[281, "linearmodels.iv.results.IVGMMResults.df_resid", false]], "df_resid (linearmodels.iv.results.ivresults property)": [[333, "linearmodels.iv.results.IVResults.df_resid", false]], "df_resid (linearmodels.iv.results.olsresults property)": [[371, "linearmodels.iv.results.OLSResults.df_resid", false]], "df_resid (linearmodels.panel.results.famamacbethresults property)": [[549, "linearmodels.panel.results.FamaMacBethResults.df_resid", false]], "df_resid (linearmodels.panel.results.paneleffectsresults property)": [[584, "linearmodels.panel.results.PanelEffectsResults.df_resid", false]], "df_resid (linearmodels.panel.results.panelresults property)": [[638, "linearmodels.panel.results.PanelResults.df_resid", false]], "df_resid (linearmodels.panel.results.randomeffectsresults property)": [[673, "linearmodels.panel.results.RandomEffectsResults.df_resid", false]], "df_resid (linearmodels.system.results.gmmsystemresults property)": [[809, "linearmodels.system.results.GMMSystemResults.df_resid", false]], "df_resid (linearmodels.system.results.systemresults property)": [[844, "linearmodels.system.results.SystemResults.df_resid", false]], "diagnostics (linearmodels.iv.results.firststageresults property)": [[269, "linearmodels.iv.results.FirstStageResults.diagnostics", false]], "driscollkraay (class in linearmodels.panel.covariance)": [[421, "linearmodels.panel.covariance.DriscollKraay", false]], "drop() (linearmodels.iv.absorbing.interaction method)": [[143, "linearmodels.iv.absorbing.Interaction.drop", false]], "drop() (linearmodels.iv.data.ivdata method)": [[185, "linearmodels.iv.data.IVData.drop", false]], "drop() (linearmodels.panel.data.paneldata method)": [[460, "linearmodels.panel.data.PanelData.drop", false]], "dummies() (linearmodels.panel.data.paneldata method)": [[461, "linearmodels.panel.data.PanelData.dummies", false]], "durbin() (linearmodels.iv.results.ivresults method)": [[334, "linearmodels.iv.results.IVResults.durbin", false]], "entities (linearmodels.panel.data.paneldata property)": [[462, "linearmodels.panel.data.PanelData.entities", false]], "entity_effects (linearmodels.panel.model.panelols property)": [[513, "linearmodels.panel.model.PanelOLS.entity_effects", false]], "entity_ids (linearmodels.panel.data.paneldata property)": [[463, "linearmodels.panel.data.PanelData.entity_ids", false]], "entity_info (linearmodels.panel.results.famamacbethresults property)": [[550, "linearmodels.panel.results.FamaMacBethResults.entity_info", false]], "entity_info (linearmodels.panel.results.paneleffectsresults property)": [[585, "linearmodels.panel.results.PanelEffectsResults.entity_info", false]], "entity_info (linearmodels.panel.results.panelresults property)": [[639, "linearmodels.panel.results.PanelResults.entity_info", false]], "entity_info (linearmodels.panel.results.randomeffectsresults property)": [[674, "linearmodels.panel.results.RandomEffectsResults.entity_info", false]], "eps (linearmodels.panel.covariance.accovariance property)": [[410, "linearmodels.panel.covariance.ACCovariance.eps", false]], "eps (linearmodels.panel.covariance.clusteredcovariance property)": [[418, "linearmodels.panel.covariance.ClusteredCovariance.eps", false]], "eps (linearmodels.panel.covariance.driscollkraay property)": [[426, "linearmodels.panel.covariance.DriscollKraay.eps", false]], "eps (linearmodels.panel.covariance.famamacbethcovariance property)": [[436, "linearmodels.panel.covariance.FamaMacBethCovariance.eps", false]], "eps (linearmodels.panel.covariance.heteroskedasticcovariance property)": [[444, "linearmodels.panel.covariance.HeteroskedasticCovariance.eps", false]], "eps (linearmodels.panel.covariance.homoskedasticcovariance property)": [[452, "linearmodels.panel.covariance.HomoskedasticCovariance.eps", false]], "equation_labels (linearmodels.system.results.gmmsystemresults property)": [[810, "linearmodels.system.results.GMMSystemResults.equation_labels", false]], "equation_labels (linearmodels.system.results.systemresults property)": [[845, "linearmodels.system.results.SystemResults.equation_labels", false]], "equations (linearmodels.system.results.gmmsystemresults property)": [[811, "linearmodels.system.results.GMMSystemResults.equations", false]], "equations (linearmodels.system.results.systemresults property)": [[846, "linearmodels.system.results.SystemResults.equations", false]], "estimate_parameters() (linearmodels.iv.model._ols static method)": [[258, "linearmodels.iv.model._OLS.estimate_parameters", false]], "estimate_parameters() (linearmodels.iv.model.iv2sls static method)": [[213, "linearmodels.iv.model.IV2SLS.estimate_parameters", false]], "estimate_parameters() (linearmodels.iv.model.ivgmm static method)": [[224, "linearmodels.iv.model.IVGMM.estimate_parameters", false]], "estimate_parameters() (linearmodels.iv.model.ivgmmcue method)": [[235, "linearmodels.iv.model.IVGMMCUE.estimate_parameters", false]], "estimate_parameters() (linearmodels.iv.model.ivliml static method)": [[247, "linearmodels.iv.model.IVLIML.estimate_parameters", false]], "estimated_effects (linearmodels.panel.results.famamacbethresults property)": [[551, "linearmodels.panel.results.FamaMacBethResults.estimated_effects", false]], "estimated_effects (linearmodels.panel.results.paneleffectsresults property)": [[586, "linearmodels.panel.results.PanelEffectsResults.estimated_effects", false]], "estimated_effects (linearmodels.panel.results.panelresults property)": [[640, "linearmodels.panel.results.PanelResults.estimated_effects", false]], "estimated_effects (linearmodels.panel.results.randomeffectsresults property)": [[675, "linearmodels.panel.results.RandomEffectsResults.estimated_effects", false]], "estimator_method (linearmodels.iv.results.ivmodelcomparison property)": [[312, "linearmodels.iv.results.IVModelComparison.estimator_method", false]], "estimator_method (linearmodels.panel.results.panelmodelcomparison property)": [[619, "linearmodels.panel.results.PanelModelComparison.estimator_method", false]], "exog (linearmodels.iv.absorbing.absorbingls property)": [[96, "linearmodels.iv.absorbing.AbsorbingLS.exog", false]], "f_pooled (linearmodels.panel.results.paneleffectsresults property)": [[587, "linearmodels.panel.results.PanelEffectsResults.f_pooled", false]], "f_statistic (linearmodels.iv.absorbing.absorbinglsresults property)": [[115, "linearmodels.iv.absorbing.AbsorbingLSResults.f_statistic", false]], "f_statistic (linearmodels.iv.results.ivgmmresults property)": [[282, "linearmodels.iv.results.IVGMMResults.f_statistic", false]], "f_statistic (linearmodels.iv.results.ivmodelcomparison property)": [[313, "linearmodels.iv.results.IVModelComparison.f_statistic", false]], "f_statistic (linearmodels.iv.results.ivresults property)": [[335, "linearmodels.iv.results.IVResults.f_statistic", false]], "f_statistic (linearmodels.iv.results.olsresults property)": [[372, "linearmodels.iv.results.OLSResults.f_statistic", false]], "f_statistic (linearmodels.panel.results.famamacbethresults property)": [[552, "linearmodels.panel.results.FamaMacBethResults.f_statistic", false]], "f_statistic (linearmodels.panel.results.paneleffectsresults property)": [[588, "linearmodels.panel.results.PanelEffectsResults.f_statistic", false]], "f_statistic (linearmodels.panel.results.panelmodelcomparison property)": [[620, "linearmodels.panel.results.PanelModelComparison.f_statistic", false]], "f_statistic (linearmodels.panel.results.panelresults property)": [[641, "linearmodels.panel.results.PanelResults.f_statistic", false]], "f_statistic (linearmodels.panel.results.randomeffectsresults property)": [[676, "linearmodels.panel.results.RandomEffectsResults.f_statistic", false]], "f_statistic_robust (linearmodels.panel.results.famamacbethresults property)": [[553, "linearmodels.panel.results.FamaMacBethResults.f_statistic_robust", false]], "f_statistic_robust (linearmodels.panel.results.paneleffectsresults property)": [[589, "linearmodels.panel.results.PanelEffectsResults.f_statistic_robust", false]], "f_statistic_robust (linearmodels.panel.results.panelresults property)": [[642, "linearmodels.panel.results.PanelResults.f_statistic_robust", false]], "f_statistic_robust (linearmodels.panel.results.randomeffectsresults property)": [[677, "linearmodels.panel.results.RandomEffectsResults.f_statistic_robust", false]], "famamacbeth (class in linearmodels.panel.model)": [[496, "linearmodels.panel.model.FamaMacBeth", false]], "famamacbethcovariance (class in linearmodels.panel.covariance)": [[429, "linearmodels.panel.covariance.FamaMacBethCovariance", false]], "famamacbethresults (class in linearmodels.panel.results)": [[539, "linearmodels.panel.results.FamaMacBethResults", false]], "first_difference() (linearmodels.panel.data.paneldata method)": [[464, "linearmodels.panel.data.PanelData.first_difference", false]], "first_stage (linearmodels.iv.results.ivgmmresults property)": [[283, "linearmodels.iv.results.IVGMMResults.first_stage", false]], "first_stage (linearmodels.iv.results.ivresults property)": [[336, "linearmodels.iv.results.IVResults.first_stage", false]], "firstdifferenceols (class in linearmodels.panel.model)": [[504, "linearmodels.panel.model.FirstDifferenceOLS", false]], "firststageresults (class in linearmodels.iv.results)": [[268, "linearmodels.iv.results.FirstStageResults", false]], "fit() (linearmodels.asset_pricing.model.linearfactormodel method)": [[17, "linearmodels.asset_pricing.model.LinearFactorModel.fit", false]], "fit() (linearmodels.asset_pricing.model.linearfactormodelgmm method)": [[21, "linearmodels.asset_pricing.model.LinearFactorModelGMM.fit", false]], "fit() (linearmodels.asset_pricing.model.tradedfactormodel method)": [[25, "linearmodels.asset_pricing.model.TradedFactorModel.fit", false]], "fit() (linearmodels.iv.absorbing.absorbingls method)": [[97, "linearmodels.iv.absorbing.AbsorbingLS.fit", false]], "fit() (linearmodels.iv.model._ols method)": [[259, "linearmodels.iv.model._OLS.fit", false]], "fit() (linearmodels.iv.model.iv2sls method)": [[214, "linearmodels.iv.model.IV2SLS.fit", false]], "fit() (linearmodels.iv.model.ivgmm method)": [[225, "linearmodels.iv.model.IVGMM.fit", false]], "fit() (linearmodels.iv.model.ivgmmcue method)": [[236, "linearmodels.iv.model.IVGMMCUE.fit", false]], "fit() (linearmodels.iv.model.ivliml method)": [[248, "linearmodels.iv.model.IVLIML.fit", false]], "fit() (linearmodels.panel.model.betweenols method)": [[489, "linearmodels.panel.model.BetweenOLS.fit", false]], "fit() (linearmodels.panel.model.famamacbeth method)": [[497, "linearmodels.panel.model.FamaMacBeth.fit", false]], "fit() (linearmodels.panel.model.firstdifferenceols method)": [[505, "linearmodels.panel.model.FirstDifferenceOLS.fit", false]], "fit() (linearmodels.panel.model.panelols method)": [[514, "linearmodels.panel.model.PanelOLS.fit", false]], "fit() (linearmodels.panel.model.pooledols method)": [[524, "linearmodels.panel.model.PooledOLS.fit", false]], "fit() (linearmodels.panel.model.randomeffects method)": [[532, "linearmodels.panel.model.RandomEffects.fit", false]], "fit() (linearmodels.system.model.iv3sls method)": [[767, "linearmodels.system.model.IV3SLS.fit", false]], "fit() (linearmodels.system.model.ivsystemgmm method)": [[778, "linearmodels.system.model.IVSystemGMM.fit", false]], "fit() (linearmodels.system.model.sur method)": [[793, "linearmodels.system.model.SUR.fit", false]], "fitted_values (linearmodels.iv.absorbing.absorbinglsresults property)": [[116, "linearmodels.iv.absorbing.AbsorbingLSResults.fitted_values", false]], "fitted_values (linearmodels.iv.results.ivgmmresults property)": [[284, "linearmodels.iv.results.IVGMMResults.fitted_values", false]], "fitted_values (linearmodels.iv.results.ivresults property)": [[337, "linearmodels.iv.results.IVResults.fitted_values", false]], "fitted_values (linearmodels.iv.results.olsresults property)": [[373, "linearmodels.iv.results.OLSResults.fitted_values", false]], "fitted_values (linearmodels.panel.results.famamacbethresults property)": [[554, "linearmodels.panel.results.FamaMacBethResults.fitted_values", false]], "fitted_values (linearmodels.panel.results.paneleffectsresults property)": [[590, "linearmodels.panel.results.PanelEffectsResults.fitted_values", false]], "fitted_values (linearmodels.panel.results.panelresults property)": [[643, "linearmodels.panel.results.PanelResults.fitted_values", false]], "fitted_values (linearmodels.panel.results.randomeffectsresults property)": [[678, "linearmodels.panel.results.RandomEffectsResults.fitted_values", false]], "fitted_values (linearmodels.system.results.gmmsystemresults property)": [[812, "linearmodels.system.results.GMMSystemResults.fitted_values", false]], "fitted_values (linearmodels.system.results.systemresults property)": [[847, "linearmodels.system.results.SystemResults.fitted_values", false]], "float64array (in module linearmodels.typing.data)": [[867, "linearmodels.typing.data.Float64Array", false]], "formula (linearmodels.asset_pricing.model.linearfactormodel property)": [[18, "linearmodels.asset_pricing.model.LinearFactorModel.formula", false]], "formula (linearmodels.asset_pricing.model.linearfactormodelgmm property)": [[22, "linearmodels.asset_pricing.model.LinearFactorModelGMM.formula", false]], "formula (linearmodels.asset_pricing.model.tradedfactormodel property)": [[26, "linearmodels.asset_pricing.model.TradedFactorModel.formula", false]], "formula (linearmodels.iv.model._ols property)": [[260, "linearmodels.iv.model._OLS.formula", false]], "formula (linearmodels.iv.model.iv2sls property)": [[215, "linearmodels.iv.model.IV2SLS.formula", false]], "formula (linearmodels.iv.model.ivgmm property)": [[226, "linearmodels.iv.model.IVGMM.formula", false]], "formula (linearmodels.iv.model.ivgmmcue property)": [[237, "linearmodels.iv.model.IVGMMCUE.formula", false]], "formula (linearmodels.iv.model.ivliml property)": [[249, "linearmodels.iv.model.IVLIML.formula", false]], "formula (linearmodels.panel.model.betweenols property)": [[490, "linearmodels.panel.model.BetweenOLS.formula", false]], "formula (linearmodels.panel.model.famamacbeth property)": [[498, "linearmodels.panel.model.FamaMacBeth.formula", false]], "formula (linearmodels.panel.model.firstdifferenceols property)": [[506, "linearmodels.panel.model.FirstDifferenceOLS.formula", false]], "formula (linearmodels.panel.model.panelols property)": [[515, "linearmodels.panel.model.PanelOLS.formula", false]], "formula (linearmodels.panel.model.pooledols property)": [[525, "linearmodels.panel.model.PooledOLS.formula", false]], "formula (linearmodels.panel.model.randomeffects property)": [[533, "linearmodels.panel.model.RandomEffects.formula", false]], "formula (linearmodels.system.model.iv3sls property)": [[768, "linearmodels.system.model.IV3SLS.formula", false]], "formula (linearmodels.system.model.ivsystemgmm property)": [[779, "linearmodels.system.model.IVSystemGMM.formula", false]], "formula (linearmodels.system.model.sur property)": [[794, "linearmodels.system.model.SUR.formula", false]], "from_array() (linearmodels.panel.data._panel class method)": [[481, "linearmodels.panel.data._Panel.from_array", false]], "from_formula() (linearmodels.asset_pricing.model.linearfactormodel class method)": [[19, "linearmodels.asset_pricing.model.LinearFactorModel.from_formula", false]], "from_formula() (linearmodels.asset_pricing.model.linearfactormodelgmm class method)": [[23, "linearmodels.asset_pricing.model.LinearFactorModelGMM.from_formula", false]], "from_formula() (linearmodels.asset_pricing.model.tradedfactormodel class method)": [[27, "linearmodels.asset_pricing.model.TradedFactorModel.from_formula", false]], "from_formula() (linearmodels.iv.model._ols static method)": [[261, "linearmodels.iv.model._OLS.from_formula", false]], "from_formula() (linearmodels.iv.model.iv2sls static method)": [[216, "linearmodels.iv.model.IV2SLS.from_formula", false]], "from_formula() (linearmodels.iv.model.ivgmm static method)": [[227, "linearmodels.iv.model.IVGMM.from_formula", false]], "from_formula() (linearmodels.iv.model.ivgmmcue static method)": [[238, "linearmodels.iv.model.IVGMMCUE.from_formula", false]], "from_formula() (linearmodels.iv.model.ivliml static method)": [[250, "linearmodels.iv.model.IVLIML.from_formula", false]], "from_formula() (linearmodels.panel.model.betweenols class method)": [[491, "linearmodels.panel.model.BetweenOLS.from_formula", false]], "from_formula() (linearmodels.panel.model.famamacbeth class method)": [[499, "linearmodels.panel.model.FamaMacBeth.from_formula", false]], "from_formula() (linearmodels.panel.model.firstdifferenceols class method)": [[507, "linearmodels.panel.model.FirstDifferenceOLS.from_formula", false]], "from_formula() (linearmodels.panel.model.panelols class method)": [[516, "linearmodels.panel.model.PanelOLS.from_formula", false]], "from_formula() (linearmodels.panel.model.pooledols class method)": [[526, "linearmodels.panel.model.PooledOLS.from_formula", false]], "from_formula() (linearmodels.panel.model.randomeffects class method)": [[534, "linearmodels.panel.model.RandomEffects.from_formula", false]], "from_formula() (linearmodels.system.model.iv3sls class method)": [[769, "linearmodels.system.model.IV3SLS.from_formula", false]], "from_formula() (linearmodels.system.model.ivsystemgmm class method)": [[780, "linearmodels.system.model.IVSystemGMM.from_formula", false]], "from_formula() (linearmodels.system.model.sur class method)": [[795, "linearmodels.system.model.SUR.from_formula", false]], "from_frame() (linearmodels.iv.absorbing.interaction static method)": [[144, "linearmodels.iv.absorbing.Interaction.from_frame", false]], "full_summary (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[33, "linearmodels.asset_pricing.results.GMMFactorModelResults.full_summary", false]], "full_summary (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[54, "linearmodels.asset_pricing.results.LinearFactorModelResults.full_summary", false]], "general_demean() (linearmodels.panel.data.paneldata method)": [[465, "linearmodels.panel.data.PanelData.general_demean", false]], "generate_panel_data() (in module linearmodels.panel.utility)": [[711, "linearmodels.panel.utility.generate_panel_data", false]], "get() (linearmodels.shared.utility.attrdict method)": [[885, "linearmodels.shared.utility.AttrDict.get", false]], "gmmfactormodelresults (class in linearmodels.asset_pricing.results)": [[28, "linearmodels.asset_pricing.results.GMMFactorModelResults", false]], "gmmheteroskedasticcovariance (class in linearmodels.system.covariance)": [[725, "linearmodels.system.covariance.GMMHeteroskedasticCovariance", false]], "gmmhomoskedasticcovariance (class in linearmodels.system.covariance)": [[728, "linearmodels.system.covariance.GMMHomoskedasticCovariance", false]], "gmmkernelcovariance (class in linearmodels.system.covariance)": [[731, "linearmodels.system.covariance.GMMKernelCovariance", false]], "gmmsystemresults (class in linearmodels.system.results)": [[801, "linearmodels.system.results.GMMSystemResults", false]], "group_debias_coefficient() (in module linearmodels.shared.covariance)": [[871, "linearmodels.shared.covariance.group_debias_coefficient", false]], "has_constant (linearmodels.iv.absorbing.absorbingls property)": [[98, "linearmodels.iv.absorbing.AbsorbingLS.has_constant", false]], "has_constant (linearmodels.iv.absorbing.absorbinglsresults property)": [[117, "linearmodels.iv.absorbing.AbsorbingLSResults.has_constant", false]], "has_constant (linearmodels.iv.absorbing.absorbingregressor property)": [[137, "linearmodels.iv.absorbing.AbsorbingRegressor.has_constant", false]], "has_constant (linearmodels.iv.model._ols property)": [[262, "linearmodels.iv.model._OLS.has_constant", false]], "has_constant (linearmodels.iv.model.iv2sls property)": [[217, "linearmodels.iv.model.IV2SLS.has_constant", false]], "has_constant (linearmodels.iv.model.ivgmm property)": [[228, "linearmodels.iv.model.IVGMM.has_constant", false]], "has_constant (linearmodels.iv.model.ivgmmcue property)": [[239, "linearmodels.iv.model.IVGMMCUE.has_constant", false]], "has_constant (linearmodels.iv.model.ivliml property)": [[251, "linearmodels.iv.model.IVLIML.has_constant", false]], "has_constant (linearmodels.iv.results.ivgmmresults property)": [[285, "linearmodels.iv.results.IVGMMResults.has_constant", false]], "has_constant (linearmodels.iv.results.ivresults property)": [[338, "linearmodels.iv.results.IVResults.has_constant", false]], "has_constant (linearmodels.iv.results.olsresults property)": [[374, "linearmodels.iv.results.OLSResults.has_constant", false]], "has_constant (linearmodels.panel.model.betweenols property)": [[492, "linearmodels.panel.model.BetweenOLS.has_constant", false]], "has_constant (linearmodels.panel.model.famamacbeth property)": [[500, "linearmodels.panel.model.FamaMacBeth.has_constant", false]], "has_constant (linearmodels.panel.model.firstdifferenceols property)": [[508, "linearmodels.panel.model.FirstDifferenceOLS.has_constant", false]], "has_constant (linearmodels.panel.model.panelols property)": [[517, "linearmodels.panel.model.PanelOLS.has_constant", false]], "has_constant (linearmodels.panel.model.pooledols property)": [[527, "linearmodels.panel.model.PooledOLS.has_constant", false]], "has_constant (linearmodels.panel.model.randomeffects property)": [[535, "linearmodels.panel.model.RandomEffects.has_constant", false]], "has_constant (linearmodels.system.model.iv3sls property)": [[770, "linearmodels.system.model.IV3SLS.has_constant", false]], "has_constant (linearmodels.system.model.ivsystemgmm property)": [[781, "linearmodels.system.model.IVSystemGMM.has_constant", false]], "has_constant (linearmodels.system.model.sur property)": [[796, "linearmodels.system.model.SUR.has_constant", false]], "hash (linearmodels.iv.absorbing.absorbingregressor property)": [[138, "linearmodels.iv.absorbing.AbsorbingRegressor.hash", false]], "hash (linearmodels.iv.absorbing.interaction property)": [[145, "linearmodels.iv.absorbing.Interaction.hash", false]], "heteroskedasticcovariance (class in linearmodels.asset_pricing.covariance)": [[0, "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance", false]], "heteroskedasticcovariance (class in linearmodels.iv.covariance)": [[161, "linearmodels.iv.covariance.HeteroskedasticCovariance", false]], "heteroskedasticcovariance (class in linearmodels.panel.covariance)": [[439, "linearmodels.panel.covariance.HeteroskedasticCovariance", false]], "heteroskedasticcovariance (class in linearmodels.system.covariance)": [[736, "linearmodels.system.covariance.HeteroskedasticCovariance", false]], "heteroskedasticweightmatrix (class in linearmodels.iv.gmm)": [[193, "linearmodels.iv.gmm.HeteroskedasticWeightMatrix", false]], "heteroskedasticweightmatrix (class in linearmodels.system.gmm)": [[750, "linearmodels.system.gmm.HeteroskedasticWeightMatrix", false]], "homoskedasticcovariance (class in linearmodels.iv.covariance)": [[167, "linearmodels.iv.covariance.HomoskedasticCovariance", false]], "homoskedasticcovariance (class in linearmodels.panel.covariance)": [[447, "linearmodels.panel.covariance.HomoskedasticCovariance", false]], "homoskedasticcovariance (class in linearmodels.system.covariance)": [[740, "linearmodels.system.covariance.HomoskedasticCovariance", false]], "homoskedasticweightmatrix (class in linearmodels.iv.gmm)": [[196, "linearmodels.iv.gmm.HomoskedasticWeightMatrix", false]], "homoskedasticweightmatrix (class in linearmodels.system.gmm)": [[754, "linearmodels.system.gmm.HomoskedasticWeightMatrix", false]], "idiosyncratic (linearmodels.iv.absorbing.absorbinglsresults property)": [[118, "linearmodels.iv.absorbing.AbsorbingLSResults.idiosyncratic", false]], "idiosyncratic (linearmodels.iv.results.ivgmmresults property)": [[286, "linearmodels.iv.results.IVGMMResults.idiosyncratic", false]], "idiosyncratic (linearmodels.iv.results.ivresults property)": [[339, "linearmodels.iv.results.IVResults.idiosyncratic", false]], "idiosyncratic (linearmodels.iv.results.olsresults property)": [[375, "linearmodels.iv.results.OLSResults.idiosyncratic", false]], "idiosyncratic (linearmodels.panel.results.famamacbethresults property)": [[555, "linearmodels.panel.results.FamaMacBethResults.idiosyncratic", false]], "idiosyncratic (linearmodels.panel.results.paneleffectsresults property)": [[591, "linearmodels.panel.results.PanelEffectsResults.idiosyncratic", false]], "idiosyncratic (linearmodels.panel.results.panelresults property)": [[644, "linearmodels.panel.results.PanelResults.idiosyncratic", false]], "idiosyncratic (linearmodels.panel.results.randomeffectsresults property)": [[679, "linearmodels.panel.results.RandomEffectsResults.idiosyncratic", false]], "included_effects (linearmodels.panel.results.paneleffectsresults property)": [[592, "linearmodels.panel.results.PanelEffectsResults.included_effects", false]], "index (linearmodels.panel.data.paneldata property)": [[466, "linearmodels.panel.data.PanelData.index", false]], "index() (linearmodels.panel.utility.panelmodeldata method)": [[708, "linearmodels.panel.utility.PanelModelData.index", false]], "individual (linearmodels.iv.results.firststageresults property)": [[270, "linearmodels.iv.results.FirstStageResults.individual", false]], "instruments (linearmodels.iv.absorbing.absorbingls property)": [[99, "linearmodels.iv.absorbing.AbsorbingLS.instruments", false]], "int32array (in module linearmodels.typing.data)": [[867, "linearmodels.typing.data.Int32Array", false]], "int64array (in module linearmodels.typing.data)": [[867, "linearmodels.typing.data.Int64Array", false]], "intarray (in module linearmodels.typing.data)": [[867, "linearmodels.typing.data.IntArray", false]], "interaction (class in linearmodels.iv.absorbing)": [[140, "linearmodels.iv.absorbing.Interaction", false]], "inv_jacobian (linearmodels.asset_pricing.covariance.heteroskedasticcovariance property)": [[3, "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.inv_jacobian", false]], "inv_jacobian (linearmodels.asset_pricing.covariance.kernelcovariance property)": [[11, "linearmodels.asset_pricing.covariance.KernelCovariance.inv_jacobian", false]], "invalidteststatistic (class in linearmodels.shared.hypotheses)": [[872, "linearmodels.shared.hypotheses.InvalidTestStatistic", false]], "isnull (linearmodels.iv.absorbing.interaction property)": [[146, "linearmodels.iv.absorbing.Interaction.isnull", false]], "isnull (linearmodels.iv.data.ivdata property)": [[186, "linearmodels.iv.data.IVData.isnull", false]], "isnull (linearmodels.iv.model._ols property)": [[263, "linearmodels.iv.model._OLS.isnull", false]], "isnull (linearmodels.iv.model.iv2sls property)": [[218, "linearmodels.iv.model.IV2SLS.isnull", false]], "isnull (linearmodels.iv.model.ivgmm property)": [[229, "linearmodels.iv.model.IVGMM.isnull", false]], "isnull (linearmodels.iv.model.ivgmmcue property)": [[240, "linearmodels.iv.model.IVGMMCUE.isnull", false]], "isnull (linearmodels.iv.model.ivliml property)": [[252, "linearmodels.iv.model.IVLIML.isnull", false]], "isnull (linearmodels.panel.data.paneldata property)": [[467, "linearmodels.panel.data.PanelData.isnull", false]], "items (linearmodels.panel.data._panel property)": [[482, "linearmodels.panel.data._Panel.items", false]], "items() (linearmodels.shared.utility.attrdict method)": [[886, "linearmodels.shared.utility.AttrDict.items", false]], "iterations (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[34, "linearmodels.asset_pricing.results.GMMFactorModelResults.iterations", false]], "iterations (linearmodels.iv.results.ivgmmresults property)": [[287, "linearmodels.iv.results.IVGMMResults.iterations", false]], "iterations (linearmodels.system.results.gmmsystemresults property)": [[813, "linearmodels.system.results.GMMSystemResults.iterations", false]], "iterations (linearmodels.system.results.systemresults property)": [[848, "linearmodels.system.results.SystemResults.iterations", false]], "iv2sls (class in linearmodels.iv.model)": [[212, "linearmodels.iv.model.IV2SLS", false]], "iv3sls (class in linearmodels.system.model)": [[764, "linearmodels.system.model.IV3SLS", false]], "ivdata (class in linearmodels.iv.data)": [[183, "linearmodels.iv.data.IVData", false]], "ivgmm (class in linearmodels.iv.model)": [[223, "linearmodels.iv.model.IVGMM", false]], "ivgmmcovariance (class in linearmodels.iv.gmm)": [[199, "linearmodels.iv.gmm.IVGMMCovariance", false]], "ivgmmcue (class in linearmodels.iv.model)": [[234, "linearmodels.iv.model.IVGMMCUE", false]], "ivgmmresults (class in linearmodels.iv.results)": [[272, "linearmodels.iv.results.IVGMMResults", false]], "ivliml (class in linearmodels.iv.model)": [[246, "linearmodels.iv.model.IVLIML", false]], "ivmodelcomparison (class in linearmodels.iv.results)": [[310, "linearmodels.iv.results.IVModelComparison", false]], "ivresults (class in linearmodels.iv.results)": [[322, "linearmodels.iv.results.IVResults", false]], "ivsystemgmm (class in linearmodels.system.model)": [[775, "linearmodels.system.model.IVSystemGMM", false]], "j() (linearmodels.iv.model.ivgmmcue method)": [[241, "linearmodels.iv.model.IVGMMCUE.j", false]], "j_stat (linearmodels.iv.results.ivgmmresults property)": [[288, "linearmodels.iv.results.IVGMMResults.j_stat", false]], "j_stat (linearmodels.system.results.gmmsystemresults property)": [[814, "linearmodels.system.results.GMMSystemResults.j_stat", false]], "j_statistic (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[35, "linearmodels.asset_pricing.results.GMMFactorModelResults.j_statistic", false]], "j_statistic (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[55, "linearmodels.asset_pricing.results.LinearFactorModelResults.j_statistic", false]], "jacobian (linearmodels.asset_pricing.covariance.heteroskedasticcovariance property)": [[4, "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.jacobian", false]], "jacobian (linearmodels.asset_pricing.covariance.kernelcovariance property)": [[12, "linearmodels.asset_pricing.covariance.KernelCovariance.jacobian", false]], "kappa (linearmodels.iv.results.ivgmmresults property)": [[289, "linearmodels.iv.results.IVGMMResults.kappa", false]], "kappa (linearmodels.iv.results.ivresults property)": [[340, "linearmodels.iv.results.IVResults.kappa", false]], "kappa (linearmodels.iv.results.olsresults property)": [[376, "linearmodels.iv.results.OLSResults.kappa", false]], "kernel (linearmodels.asset_pricing.covariance.kernelcovariance property)": [[13, "linearmodels.asset_pricing.covariance.KernelCovariance.kernel", false]], "kernel (linearmodels.system.covariance.gmmkernelcovariance property)": [[735, "linearmodels.system.covariance.GMMKernelCovariance.kernel", false]], "kernel (linearmodels.system.covariance.kernelcovariance property)": [[748, "linearmodels.system.covariance.KernelCovariance.kernel", false]], "kernel (linearmodels.system.gmm.kernelweightmatrix property)": [[761, "linearmodels.system.gmm.KernelWeightMatrix.kernel", false]], "kernel_optimal_bandwidth() (in module linearmodels.iv.covariance)": [[179, "linearmodels.iv.covariance.kernel_optimal_bandwidth", false]], "kernel_weight_bartlett() (in module linearmodels.iv.covariance)": [[180, "linearmodels.iv.covariance.kernel_weight_bartlett", false]], "kernel_weight_parzen() (in module linearmodels.iv.covariance)": [[181, "linearmodels.iv.covariance.kernel_weight_parzen", false]], "kernel_weight_quadratic_spectral() (in module linearmodels.iv.covariance)": [[182, "linearmodels.iv.covariance.kernel_weight_quadratic_spectral", false]], "kernelcovariance (class in linearmodels.asset_pricing.covariance)": [[7, "linearmodels.asset_pricing.covariance.KernelCovariance", false]], "kernelcovariance (class in linearmodels.iv.covariance)": [[173, "linearmodels.iv.covariance.KernelCovariance", false]], "kernelcovariance (class in linearmodels.system.covariance)": [[744, "linearmodels.system.covariance.KernelCovariance", false]], "kernelweightmatrix (class in linearmodels.iv.gmm)": [[205, "linearmodels.iv.gmm.KernelWeightMatrix", false]], "kernelweightmatrix (class in linearmodels.system.gmm)": [[758, "linearmodels.system.gmm.KernelWeightMatrix", false]], "keys() (linearmodels.shared.utility.attrdict method)": [[887, "linearmodels.shared.utility.AttrDict.keys", false]], "labels (linearmodels.iv.data.ivdata property)": [[187, "linearmodels.iv.data.IVData.labels", false]], "likelihood_ratio() (linearmodels.system.results.gmmsystemresults method)": [[815, "linearmodels.system.results.GMMSystemResults.likelihood_ratio", false]], "likelihood_ratio() (linearmodels.system.results.systemresults method)": [[849, "linearmodels.system.results.SystemResults.likelihood_ratio", false]], "linearconstraint (class in linearmodels.system.model)": [[785, "linearmodels.system.model.LinearConstraint", false]], "linearfactormodel (class in linearmodels.asset_pricing.model)": [[16, "linearmodels.asset_pricing.model.LinearFactorModel", false]], "linearfactormodelgmm (class in linearmodels.asset_pricing.model)": [[20, "linearmodels.asset_pricing.model.LinearFactorModelGMM", false]], "linearfactormodelresults (class in linearmodels.asset_pricing.results)": [[49, "linearmodels.asset_pricing.results.LinearFactorModelResults", false]], "linearmodels.asset_pricing.covariance": [[74, "module-linearmodels.asset_pricing.covariance", false]], "linearmodels.asset_pricing.model": [[74, "module-linearmodels.asset_pricing.model", false]], "linearmodels.asset_pricing.results": [[74, "module-linearmodels.asset_pricing.results", false]], "linearmodels.compat.statsmodels": [[81, "module-linearmodels.compat.statsmodels", false]], "linearmodels.iv.absorbing": [[396, "module-linearmodels.iv.absorbing", false]], "linearmodels.iv.covariance": [[396, "module-linearmodels.iv.covariance", false]], "linearmodels.iv.data": [[396, "module-linearmodels.iv.data", false]], "linearmodels.iv.gmm": [[396, "module-linearmodels.iv.gmm", false]], "linearmodels.iv.model": [[396, "module-linearmodels.iv.model", false]], "linearmodels.iv.results": [[396, "module-linearmodels.iv.results", false]], "linearmodels.panel.covariance": [[712, "module-linearmodels.panel.covariance", false]], "linearmodels.panel.data": [[712, "module-linearmodels.panel.data", false]], "linearmodels.panel.model": [[712, "module-linearmodels.panel.model", false]], "linearmodels.panel.results": [[712, "module-linearmodels.panel.results", false]], "linearmodels.panel.utility": [[712, "module-linearmodels.panel.utility", false]], "linearmodels.system.covariance": [[720, "module-linearmodels.system.covariance", false]], "linearmodels.system.gmm": [[720, "module-linearmodels.system.gmm", false]], "linearmodels.system.model": [[720, "module-linearmodels.system.model", false]], "linearmodels.system.results": [[720, "module-linearmodels.system.results", false]], "linearmodels.utility": [[868, "module-linearmodels.utility", false]], "loglik (linearmodels.panel.results.famamacbethresults property)": [[556, "linearmodels.panel.results.FamaMacBethResults.loglik", false]], "loglik (linearmodels.panel.results.paneleffectsresults property)": [[593, "linearmodels.panel.results.PanelEffectsResults.loglik", false]], "loglik (linearmodels.panel.results.panelresults property)": [[645, "linearmodels.panel.results.PanelResults.loglik", false]], "loglik (linearmodels.panel.results.randomeffectsresults property)": [[680, "linearmodels.panel.results.RandomEffectsResults.loglik", false]], "major_axis (linearmodels.panel.data._panel property)": [[483, "linearmodels.panel.data._Panel.major_axis", false]], "mean() (linearmodels.panel.data.paneldata method)": [[468, "linearmodels.panel.data.PanelData.mean", false]], "method (linearmodels.iv.absorbing.absorbinglsresults property)": [[119, "linearmodels.iv.absorbing.AbsorbingLSResults.method", false]], "method (linearmodels.iv.results.ivgmmresults property)": [[290, "linearmodels.iv.results.IVGMMResults.method", false]], "method (linearmodels.iv.results.ivresults property)": [[341, "linearmodels.iv.results.IVResults.method", false]], "method (linearmodels.iv.results.olsresults property)": [[377, "linearmodels.iv.results.OLSResults.method", false]], "method (linearmodels.system.results.gmmsystemresults property)": [[816, "linearmodels.system.results.GMMSystemResults.method", false]], "method (linearmodels.system.results.systemresults property)": [[850, "linearmodels.system.results.SystemResults.method", false]], "minor_axis (linearmodels.panel.data._panel property)": [[484, "linearmodels.panel.data._Panel.minor_axis", false]], "model (linearmodels.system.results.gmmsystemresults property)": [[817, "linearmodels.system.results.GMMSystemResults.model", false]], "model (linearmodels.system.results.systemresults property)": [[851, "linearmodels.system.results.SystemResults.model", false]], "model_ss (linearmodels.iv.absorbing.absorbinglsresults property)": [[120, "linearmodels.iv.absorbing.AbsorbingLSResults.model_ss", false]], "model_ss (linearmodels.iv.results.ivgmmresults property)": [[291, "linearmodels.iv.results.IVGMMResults.model_ss", false]], "model_ss (linearmodels.iv.results.ivresults property)": [[342, "linearmodels.iv.results.IVResults.model_ss", false]], "model_ss (linearmodels.iv.results.olsresults property)": [[378, "linearmodels.iv.results.OLSResults.model_ss", false]], "model_ss (linearmodels.panel.results.famamacbethresults property)": [[557, "linearmodels.panel.results.FamaMacBethResults.model_ss", false]], "model_ss (linearmodels.panel.results.paneleffectsresults property)": [[594, "linearmodels.panel.results.PanelEffectsResults.model_ss", false]], "model_ss (linearmodels.panel.results.panelresults property)": [[646, "linearmodels.panel.results.PanelResults.model_ss", false]], "model_ss (linearmodels.panel.results.randomeffectsresults property)": [[681, "linearmodels.panel.results.RandomEffectsResults.model_ss", false]], "model_ss (linearmodels.system.results.gmmsystemresults property)": [[818, "linearmodels.system.results.GMMSystemResults.model_ss", false]], "model_ss (linearmodels.system.results.systemresults property)": [[852, "linearmodels.system.results.SystemResults.model_ss", false]], "module": [[74, "module-linearmodels.asset_pricing.covariance", false], [74, "module-linearmodels.asset_pricing.model", false], [74, "module-linearmodels.asset_pricing.results", false], [81, "module-linearmodels.compat.statsmodels", false], [396, "module-linearmodels.iv.absorbing", false], [396, "module-linearmodels.iv.covariance", false], [396, "module-linearmodels.iv.data", false], [396, "module-linearmodels.iv.gmm", false], [396, "module-linearmodels.iv.model", false], [396, "module-linearmodels.iv.results", false], [712, "module-linearmodels.panel.covariance", false], [712, "module-linearmodels.panel.data", false], [712, "module-linearmodels.panel.model", false], [712, "module-linearmodels.panel.results", false], [712, "module-linearmodels.panel.utility", false], [720, "module-linearmodels.system.covariance", false], [720, "module-linearmodels.system.gmm", false], [720, "module-linearmodels.system.model", false], [720, "module-linearmodels.system.results", false], [868, "module-linearmodels.utility", false]], "multivariate_iv() (linearmodels.system.model.iv3sls class method)": [[771, "linearmodels.system.model.IV3SLS.multivariate_iv", false]], "multivariate_ls() (linearmodels.system.model.sur class method)": [[797, "linearmodels.system.model.SUR.multivariate_ls", false]], "name (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[36, "linearmodels.asset_pricing.results.GMMFactorModelResults.name", false]], "name (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[56, "linearmodels.asset_pricing.results.LinearFactorModelResults.name", false]], "name (linearmodels.panel.covariance.accovariance property)": [[411, "linearmodels.panel.covariance.ACCovariance.name", false]], "name (linearmodels.panel.covariance.clusteredcovariance property)": [[419, "linearmodels.panel.covariance.ClusteredCovariance.name", false]], "name (linearmodels.panel.covariance.driscollkraay property)": [[427, "linearmodels.panel.covariance.DriscollKraay.name", false]], "name (linearmodels.panel.covariance.famamacbethcovariance property)": [[437, "linearmodels.panel.covariance.FamaMacBethCovariance.name", false]], "name (linearmodels.panel.covariance.heteroskedasticcovariance property)": [[445, "linearmodels.panel.covariance.HeteroskedasticCovariance.name", false]], "name (linearmodels.panel.covariance.homoskedasticcovariance property)": [[453, "linearmodels.panel.covariance.HomoskedasticCovariance.name", false]], "name (linearmodels.panel.results.famamacbethresults property)": [[558, "linearmodels.panel.results.FamaMacBethResults.name", false]], "name (linearmodels.panel.results.paneleffectsresults property)": [[595, "linearmodels.panel.results.PanelEffectsResults.name", false]], "name (linearmodels.panel.results.panelresults property)": [[647, "linearmodels.panel.results.PanelResults.name", false]], "name (linearmodels.panel.results.randomeffectsresults property)": [[682, "linearmodels.panel.results.RandomEffectsResults.name", false]], "ndarray (linearmodels.iv.data.ivdata property)": [[188, "linearmodels.iv.data.IVData.ndarray", false]], "ndim (linearmodels.iv.data.ivdata property)": [[189, "linearmodels.iv.data.IVData.ndim", false]], "ndim (linearmodels.panel.data.paneldata property)": [[469, "linearmodels.panel.data.PanelData.ndim", false]], "nentity (linearmodels.panel.data.paneldata property)": [[470, "linearmodels.panel.data.PanelData.nentity", false]], "nobs (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[37, "linearmodels.asset_pricing.results.GMMFactorModelResults.nobs", false]], "nobs (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[57, "linearmodels.asset_pricing.results.LinearFactorModelResults.nobs", false]], "nobs (linearmodels.iv.absorbing.absorbinglsresults property)": [[121, "linearmodels.iv.absorbing.AbsorbingLSResults.nobs", false]], "nobs (linearmodels.iv.absorbing.interaction property)": [[147, "linearmodels.iv.absorbing.Interaction.nobs", false]], "nobs (linearmodels.iv.results.ivgmmresults property)": [[292, "linearmodels.iv.results.IVGMMResults.nobs", false]], "nobs (linearmodels.iv.results.ivmodelcomparison property)": [[314, "linearmodels.iv.results.IVModelComparison.nobs", false]], "nobs (linearmodels.iv.results.ivresults property)": [[343, "linearmodels.iv.results.IVResults.nobs", false]], "nobs (linearmodels.iv.results.olsresults property)": [[379, "linearmodels.iv.results.OLSResults.nobs", false]], "nobs (linearmodels.panel.data.paneldata property)": [[471, "linearmodels.panel.data.PanelData.nobs", false]], "nobs (linearmodels.panel.results.famamacbethresults property)": [[559, "linearmodels.panel.results.FamaMacBethResults.nobs", false]], "nobs (linearmodels.panel.results.paneleffectsresults property)": [[596, "linearmodels.panel.results.PanelEffectsResults.nobs", false]], "nobs (linearmodels.panel.results.panelmodelcomparison property)": [[621, "linearmodels.panel.results.PanelModelComparison.nobs", false]], "nobs (linearmodels.panel.results.panelresults property)": [[648, "linearmodels.panel.results.PanelResults.nobs", false]], "nobs (linearmodels.panel.results.randomeffectsresults property)": [[683, "linearmodels.panel.results.RandomEffectsResults.nobs", false]], "nobs (linearmodels.system.results.gmmsystemresults property)": [[819, "linearmodels.system.results.GMMSystemResults.nobs", false]], "nobs (linearmodels.system.results.systemresults property)": [[853, "linearmodels.system.results.SystemResults.nobs", false]], "not_null (linearmodels.panel.model.betweenols property)": [[493, "linearmodels.panel.model.BetweenOLS.not_null", false]], "not_null (linearmodels.panel.model.famamacbeth property)": [[501, "linearmodels.panel.model.FamaMacBeth.not_null", false]], "not_null (linearmodels.panel.model.firstdifferenceols property)": [[509, "linearmodels.panel.model.FirstDifferenceOLS.not_null", false]], "not_null (linearmodels.panel.model.panelols property)": [[518, "linearmodels.panel.model.PanelOLS.not_null", false]], "not_null (linearmodels.panel.model.pooledols property)": [[528, "linearmodels.panel.model.PooledOLS.not_null", false]], "not_null (linearmodels.panel.model.randomeffects property)": [[536, "linearmodels.panel.model.RandomEffects.not_null", false]], "notnull (linearmodels.iv.model._ols property)": [[264, "linearmodels.iv.model._OLS.notnull", false]], "notnull (linearmodels.iv.model.iv2sls property)": [[219, "linearmodels.iv.model.IV2SLS.notnull", false]], "notnull (linearmodels.iv.model.ivgmm property)": [[230, "linearmodels.iv.model.IVGMM.notnull", false]], "notnull (linearmodels.iv.model.ivgmmcue property)": [[242, "linearmodels.iv.model.IVGMMCUE.notnull", false]], "notnull (linearmodels.iv.model.ivliml property)": [[253, "linearmodels.iv.model.IVLIML.notnull", false]], "null (linearmodels.shared.hypotheses.invalidteststatistic property)": [[874, "linearmodels.shared.hypotheses.InvalidTestStatistic.null", false]], "null (linearmodels.shared.hypotheses.waldteststatistic property)": [[879, "linearmodels.shared.hypotheses.WaldTestStatistic.null", false]], "numeric (in module linearmodels.typing)": [[867, "linearmodels.typing.Numeric", false]], "nvar (linearmodels.panel.data.paneldata property)": [[472, "linearmodels.panel.data.PanelData.nvar", false]], "olsresults (class in linearmodels.iv.results)": [[363, "linearmodels.iv.results.OLSResults", false]], "onewayclusteredweightmatrix (class in linearmodels.iv.gmm)": [[209, "linearmodels.iv.gmm.OneWayClusteredWeightMatrix", false]], "optionalnumeric (in module linearmodels.typing)": [[867, "linearmodels.typing.OptionalNumeric", false]], "other_effects (linearmodels.panel.model.panelols property)": [[519, "linearmodels.panel.model.PanelOLS.other_effects", false]], "other_effects (linearmodels.panel.utility.panelmodeldata attribute)": [[709, "linearmodels.panel.utility.PanelModelData.other_effects", false]], "other_info (linearmodels.panel.results.paneleffectsresults property)": [[597, "linearmodels.panel.results.PanelEffectsResults.other_info", false]], "pandas (linearmodels.iv.data.ivdata property)": [[190, "linearmodels.iv.data.IVData.pandas", false]], "panel (linearmodels.panel.data.paneldata property)": [[473, "linearmodels.panel.data.PanelData.panel", false]], "paneldata (class in linearmodels.panel.data)": [[455, "linearmodels.panel.data.PanelData", false]], "paneleffectsresults (class in linearmodels.panel.results)": [[577, "linearmodels.panel.results.PanelEffectsResults", false]], "panelmodelcomparison (class in linearmodels.panel.results)": [[617, "linearmodels.panel.results.PanelModelComparison", false]], "panelmodeldata (class in linearmodels.panel.utility)": [[704, "linearmodels.panel.utility.PanelModelData", false]], "panelols (class in linearmodels.panel.model)": [[512, "linearmodels.panel.model.PanelOLS", false]], "panelresults (class in linearmodels.panel.results)": [[631, "linearmodels.panel.results.PanelResults", false]], "param_names (linearmodels.system.model.iv3sls property)": [[772, "linearmodels.system.model.IV3SLS.param_names", false]], "param_names (linearmodels.system.model.ivsystemgmm property)": [[782, "linearmodels.system.model.IVSystemGMM.param_names", false]], "param_names (linearmodels.system.model.sur property)": [[798, "linearmodels.system.model.SUR.param_names", false]], "params (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[38, "linearmodels.asset_pricing.results.GMMFactorModelResults.params", false]], "params (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[58, "linearmodels.asset_pricing.results.LinearFactorModelResults.params", false]], "params (linearmodels.iv.absorbing.absorbinglsresults property)": [[122, "linearmodels.iv.absorbing.AbsorbingLSResults.params", false]], "params (linearmodels.iv.results.ivgmmresults property)": [[293, "linearmodels.iv.results.IVGMMResults.params", false]], "params (linearmodels.iv.results.ivmodelcomparison property)": [[315, "linearmodels.iv.results.IVModelComparison.params", false]], "params (linearmodels.iv.results.ivresults property)": [[344, "linearmodels.iv.results.IVResults.params", false]], "params (linearmodels.iv.results.olsresults property)": [[380, "linearmodels.iv.results.OLSResults.params", false]], "params (linearmodels.panel.results.famamacbethresults property)": [[560, "linearmodels.panel.results.FamaMacBethResults.params", false]], "params (linearmodels.panel.results.paneleffectsresults property)": [[598, "linearmodels.panel.results.PanelEffectsResults.params", false]], "params (linearmodels.panel.results.panelmodelcomparison property)": [[622, "linearmodels.panel.results.PanelModelComparison.params", false]], "params (linearmodels.panel.results.panelresults property)": [[649, "linearmodels.panel.results.PanelResults.params", false]], "params (linearmodels.panel.results.randomeffectsresults property)": [[684, "linearmodels.panel.results.RandomEffectsResults.params", false]], "params (linearmodels.system.results.gmmsystemresults property)": [[820, "linearmodels.system.results.GMMSystemResults.params", false]], "params (linearmodels.system.results.systemresults property)": [[854, "linearmodels.system.results.SystemResults.params", false]], "pooledols (class in linearmodels.panel.model)": [[523, "linearmodels.panel.model.PooledOLS", false]], "pop() (linearmodels.shared.utility.attrdict method)": [[888, "linearmodels.shared.utility.AttrDict.pop", false]], "popitem() (linearmodels.shared.utility.attrdict method)": [[889, "linearmodels.shared.utility.AttrDict.popitem", false]], "predict() (linearmodels.iv.model._ols method)": [[265, "linearmodels.iv.model._OLS.predict", false]], "predict() (linearmodels.iv.model.iv2sls method)": [[220, "linearmodels.iv.model.IV2SLS.predict", false]], "predict() (linearmodels.iv.model.ivgmm method)": [[231, "linearmodels.iv.model.IVGMM.predict", false]], "predict() (linearmodels.iv.model.ivgmmcue method)": [[243, "linearmodels.iv.model.IVGMMCUE.predict", false]], "predict() (linearmodels.iv.model.ivliml method)": [[254, "linearmodels.iv.model.IVLIML.predict", false]], "predict() (linearmodels.iv.results.ivgmmresults method)": [[294, "linearmodels.iv.results.IVGMMResults.predict", false]], "predict() (linearmodels.iv.results.ivresults method)": [[345, "linearmodels.iv.results.IVResults.predict", false]], "predict() (linearmodels.iv.results.olsresults method)": [[381, "linearmodels.iv.results.OLSResults.predict", false]], "predict() (linearmodels.panel.model.betweenols method)": [[494, "linearmodels.panel.model.BetweenOLS.predict", false]], "predict() (linearmodels.panel.model.famamacbeth method)": [[502, "linearmodels.panel.model.FamaMacBeth.predict", false]], "predict() (linearmodels.panel.model.firstdifferenceols method)": [[510, "linearmodels.panel.model.FirstDifferenceOLS.predict", false]], "predict() (linearmodels.panel.model.panelols method)": [[520, "linearmodels.panel.model.PanelOLS.predict", false]], "predict() (linearmodels.panel.model.pooledols method)": [[529, "linearmodels.panel.model.PooledOLS.predict", false]], "predict() (linearmodels.panel.model.randomeffects method)": [[537, "linearmodels.panel.model.RandomEffects.predict", false]], "predict() (linearmodels.panel.results.famamacbethresults method)": [[561, "linearmodels.panel.results.FamaMacBethResults.predict", false]], "predict() (linearmodels.panel.results.paneleffectsresults method)": [[599, "linearmodels.panel.results.PanelEffectsResults.predict", false]], "predict() (linearmodels.panel.results.panelresults method)": [[650, "linearmodels.panel.results.PanelResults.predict", false]], "predict() (linearmodels.panel.results.randomeffectsresults method)": [[685, "linearmodels.panel.results.RandomEffectsResults.predict", false]], "predict() (linearmodels.system.model.iv3sls method)": [[773, "linearmodels.system.model.IV3SLS.predict", false]], "predict() (linearmodels.system.model.ivsystemgmm method)": [[783, "linearmodels.system.model.IVSystemGMM.predict", false]], "predict() (linearmodels.system.model.sur method)": [[799, "linearmodels.system.model.SUR.predict", false]], "predict() (linearmodels.system.results.gmmsystemresults method)": [[821, "linearmodels.system.results.GMMSystemResults.predict", false]], "predict() (linearmodels.system.results.systemresults method)": [[855, "linearmodels.system.results.SystemResults.predict", false]], "pval (linearmodels.shared.hypotheses.invalidteststatistic property)": [[875, "linearmodels.shared.hypotheses.InvalidTestStatistic.pval", false]], "pval (linearmodels.shared.hypotheses.waldteststatistic property)": [[880, "linearmodels.shared.hypotheses.WaldTestStatistic.pval", false]], "pvalues (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[39, "linearmodels.asset_pricing.results.GMMFactorModelResults.pvalues", false]], "pvalues (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[59, "linearmodels.asset_pricing.results.LinearFactorModelResults.pvalues", false]], "pvalues (linearmodels.iv.absorbing.absorbinglsresults property)": [[123, "linearmodels.iv.absorbing.AbsorbingLSResults.pvalues", false]], "pvalues (linearmodels.iv.results.ivgmmresults property)": [[295, "linearmodels.iv.results.IVGMMResults.pvalues", false]], "pvalues (linearmodels.iv.results.ivmodelcomparison property)": [[316, "linearmodels.iv.results.IVModelComparison.pvalues", false]], "pvalues (linearmodels.iv.results.ivresults property)": [[346, "linearmodels.iv.results.IVResults.pvalues", false]], "pvalues (linearmodels.iv.results.olsresults property)": [[382, "linearmodels.iv.results.OLSResults.pvalues", false]], "pvalues (linearmodels.panel.results.famamacbethresults property)": [[562, "linearmodels.panel.results.FamaMacBethResults.pvalues", false]], "pvalues (linearmodels.panel.results.paneleffectsresults property)": [[600, "linearmodels.panel.results.PanelEffectsResults.pvalues", false]], "pvalues (linearmodels.panel.results.panelmodelcomparison property)": [[623, "linearmodels.panel.results.PanelModelComparison.pvalues", false]], "pvalues (linearmodels.panel.results.panelresults property)": [[651, "linearmodels.panel.results.PanelResults.pvalues", false]], "pvalues (linearmodels.panel.results.randomeffectsresults property)": [[686, "linearmodels.panel.results.RandomEffectsResults.pvalues", false]], "pvalues (linearmodels.system.results.gmmsystemresults property)": [[822, "linearmodels.system.results.GMMSystemResults.pvalues", false]], "pvalues (linearmodels.system.results.systemresults property)": [[856, "linearmodels.system.results.SystemResults.pvalues", false]], "q (linearmodels.system.model.linearconstraint property)": [[787, "linearmodels.system.model.LinearConstraint.q", false]], "r (linearmodels.system.model.linearconstraint property)": [[788, "linearmodels.system.model.LinearConstraint.r", false]], "randomeffects (class in linearmodels.panel.model)": [[531, "linearmodels.panel.model.RandomEffects", false]], "randomeffectsresults (class in linearmodels.panel.results)": [[666, "linearmodels.panel.results.RandomEffectsResults", false]], "reformat_clusters() (linearmodels.panel.model.betweenols method)": [[495, "linearmodels.panel.model.BetweenOLS.reformat_clusters", false]], "reformat_clusters() (linearmodels.panel.model.famamacbeth method)": [[503, "linearmodels.panel.model.FamaMacBeth.reformat_clusters", false]], "reformat_clusters() (linearmodels.panel.model.firstdifferenceols method)": [[511, "linearmodels.panel.model.FirstDifferenceOLS.reformat_clusters", false]], "reformat_clusters() (linearmodels.panel.model.panelols method)": [[521, "linearmodels.panel.model.PanelOLS.reformat_clusters", false]], "reformat_clusters() (linearmodels.panel.model.pooledols method)": [[530, "linearmodels.panel.model.PooledOLS.reformat_clusters", false]], "reformat_clusters() (linearmodels.panel.model.randomeffects method)": [[538, "linearmodels.panel.model.RandomEffects.reformat_clusters", false]], "regressors (linearmodels.iv.absorbing.absorbingregressor property)": [[139, "linearmodels.iv.absorbing.AbsorbingRegressor.regressors", false]], "reset_constraints() (linearmodels.system.model.iv3sls method)": [[774, "linearmodels.system.model.IV3SLS.reset_constraints", false]], "reset_constraints() (linearmodels.system.model.ivsystemgmm method)": [[784, "linearmodels.system.model.IVSystemGMM.reset_constraints", false]], "reset_constraints() (linearmodels.system.model.sur method)": [[800, "linearmodels.system.model.SUR.reset_constraints", false]], "resid_ss (linearmodels.iv.absorbing.absorbinglsresults property)": [[124, "linearmodels.iv.absorbing.AbsorbingLSResults.resid_ss", false]], "resid_ss (linearmodels.iv.results.ivgmmresults property)": [[296, "linearmodels.iv.results.IVGMMResults.resid_ss", false]], "resid_ss (linearmodels.iv.results.ivresults property)": [[347, "linearmodels.iv.results.IVResults.resid_ss", false]], "resid_ss (linearmodels.iv.results.olsresults property)": [[383, "linearmodels.iv.results.OLSResults.resid_ss", false]], "resid_ss (linearmodels.panel.results.famamacbethresults property)": [[563, "linearmodels.panel.results.FamaMacBethResults.resid_ss", false]], "resid_ss (linearmodels.panel.results.paneleffectsresults property)": [[601, "linearmodels.panel.results.PanelEffectsResults.resid_ss", false]], "resid_ss (linearmodels.panel.results.panelresults property)": [[652, "linearmodels.panel.results.PanelResults.resid_ss", false]], "resid_ss (linearmodels.panel.results.randomeffectsresults property)": [[687, "linearmodels.panel.results.RandomEffectsResults.resid_ss", false]], "resid_ss (linearmodels.system.results.gmmsystemresults property)": [[823, "linearmodels.system.results.GMMSystemResults.resid_ss", false]], "resid_ss (linearmodels.system.results.systemresults property)": [[857, "linearmodels.system.results.SystemResults.resid_ss", false]], "resids (linearmodels.iv.absorbing.absorbinglsresults property)": [[125, "linearmodels.iv.absorbing.AbsorbingLSResults.resids", false]], "resids (linearmodels.iv.results.ivgmmresults property)": [[297, "linearmodels.iv.results.IVGMMResults.resids", false]], "resids (linearmodels.iv.results.ivresults property)": [[348, "linearmodels.iv.results.IVResults.resids", false]], "resids (linearmodels.iv.results.olsresults property)": [[384, "linearmodels.iv.results.OLSResults.resids", false]], "resids (linearmodels.panel.results.famamacbethresults property)": [[564, "linearmodels.panel.results.FamaMacBethResults.resids", false]], "resids (linearmodels.panel.results.paneleffectsresults property)": [[602, "linearmodels.panel.results.PanelEffectsResults.resids", false]], "resids (linearmodels.panel.results.panelresults property)": [[653, "linearmodels.panel.results.PanelResults.resids", false]], "resids (linearmodels.panel.results.randomeffectsresults property)": [[688, "linearmodels.panel.results.RandomEffectsResults.resids", false]], "resids (linearmodels.system.results.gmmsystemresults property)": [[824, "linearmodels.system.results.GMMSystemResults.resids", false]], "resids (linearmodels.system.results.systemresults property)": [[858, "linearmodels.system.results.SystemResults.resids", false]], "resids() (linearmodels.iv.absorbing.absorbingls method)": [[100, "linearmodels.iv.absorbing.AbsorbingLS.resids", false]], "resids() (linearmodels.iv.model._ols method)": [[266, "linearmodels.iv.model._OLS.resids", false]], "resids() (linearmodels.iv.model.iv2sls method)": [[221, "linearmodels.iv.model.IV2SLS.resids", false]], "resids() (linearmodels.iv.model.ivgmm method)": [[232, "linearmodels.iv.model.IVGMM.resids", false]], "resids() (linearmodels.iv.model.ivgmmcue method)": [[244, "linearmodels.iv.model.IVGMMCUE.resids", false]], "resids() (linearmodels.iv.model.ivliml method)": [[255, "linearmodels.iv.model.IVLIML.resids", false]], "residual_ss (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[40, "linearmodels.asset_pricing.results.GMMFactorModelResults.residual_ss", false]], "residual_ss (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[60, "linearmodels.asset_pricing.results.LinearFactorModelResults.residual_ss", false]], "risk_premia (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[41, "linearmodels.asset_pricing.results.GMMFactorModelResults.risk_premia", false]], "risk_premia (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[61, "linearmodels.asset_pricing.results.LinearFactorModelResults.risk_premia", false]], "risk_premia_se (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[42, "linearmodels.asset_pricing.results.GMMFactorModelResults.risk_premia_se", false]], "risk_premia_se (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[62, "linearmodels.asset_pricing.results.LinearFactorModelResults.risk_premia_se", false]], "risk_premia_tstats (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[43, "linearmodels.asset_pricing.results.GMMFactorModelResults.risk_premia_tstats", false]], "risk_premia_tstats (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[63, "linearmodels.asset_pricing.results.LinearFactorModelResults.risk_premia_tstats", false]], "rows (linearmodels.iv.data.ivdata property)": [[191, "linearmodels.iv.data.IVData.rows", false]], "rsquared (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[44, "linearmodels.asset_pricing.results.GMMFactorModelResults.rsquared", false]], "rsquared (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[64, "linearmodels.asset_pricing.results.LinearFactorModelResults.rsquared", false]], "rsquared (linearmodels.iv.absorbing.absorbinglsresults property)": [[126, "linearmodels.iv.absorbing.AbsorbingLSResults.rsquared", false]], "rsquared (linearmodels.iv.results.ivgmmresults property)": [[298, "linearmodels.iv.results.IVGMMResults.rsquared", false]], "rsquared (linearmodels.iv.results.ivmodelcomparison property)": [[317, "linearmodels.iv.results.IVModelComparison.rsquared", false]], "rsquared (linearmodels.iv.results.ivresults property)": [[349, "linearmodels.iv.results.IVResults.rsquared", false]], "rsquared (linearmodels.iv.results.olsresults property)": [[385, "linearmodels.iv.results.OLSResults.rsquared", false]], "rsquared (linearmodels.panel.results.famamacbethresults property)": [[565, "linearmodels.panel.results.FamaMacBethResults.rsquared", false]], "rsquared (linearmodels.panel.results.paneleffectsresults property)": [[603, "linearmodels.panel.results.PanelEffectsResults.rsquared", false]], "rsquared (linearmodels.panel.results.panelmodelcomparison property)": [[624, "linearmodels.panel.results.PanelModelComparison.rsquared", false]], "rsquared (linearmodels.panel.results.panelresults property)": [[654, "linearmodels.panel.results.PanelResults.rsquared", false]], "rsquared (linearmodels.panel.results.randomeffectsresults property)": [[689, "linearmodels.panel.results.RandomEffectsResults.rsquared", false]], "rsquared (linearmodels.system.results.gmmsystemresults property)": [[825, "linearmodels.system.results.GMMSystemResults.rsquared", false]], "rsquared (linearmodels.system.results.systemresults property)": [[859, "linearmodels.system.results.SystemResults.rsquared", false]], "rsquared_adj (linearmodels.iv.absorbing.absorbinglsresults property)": [[127, "linearmodels.iv.absorbing.AbsorbingLSResults.rsquared_adj", false]], "rsquared_adj (linearmodels.iv.results.ivgmmresults property)": [[299, "linearmodels.iv.results.IVGMMResults.rsquared_adj", false]], "rsquared_adj (linearmodels.iv.results.ivmodelcomparison property)": [[318, "linearmodels.iv.results.IVModelComparison.rsquared_adj", false]], "rsquared_adj (linearmodels.iv.results.ivresults property)": [[350, "linearmodels.iv.results.IVResults.rsquared_adj", false]], "rsquared_adj (linearmodels.iv.results.olsresults property)": [[386, "linearmodels.iv.results.OLSResults.rsquared_adj", false]], "rsquared_between (linearmodels.panel.results.famamacbethresults property)": [[566, "linearmodels.panel.results.FamaMacBethResults.rsquared_between", false]], "rsquared_between (linearmodels.panel.results.paneleffectsresults property)": [[604, "linearmodels.panel.results.PanelEffectsResults.rsquared_between", false]], "rsquared_between (linearmodels.panel.results.panelmodelcomparison property)": [[625, "linearmodels.panel.results.PanelModelComparison.rsquared_between", false]], "rsquared_between (linearmodels.panel.results.panelresults property)": [[655, "linearmodels.panel.results.PanelResults.rsquared_between", false]], "rsquared_between (linearmodels.panel.results.randomeffectsresults property)": [[690, "linearmodels.panel.results.RandomEffectsResults.rsquared_between", false]], "rsquared_inclusive (linearmodels.panel.results.paneleffectsresults property)": [[605, "linearmodels.panel.results.PanelEffectsResults.rsquared_inclusive", false]], "rsquared_overall (linearmodels.panel.results.famamacbethresults property)": [[567, "linearmodels.panel.results.FamaMacBethResults.rsquared_overall", false]], "rsquared_overall (linearmodels.panel.results.paneleffectsresults property)": [[606, "linearmodels.panel.results.PanelEffectsResults.rsquared_overall", false]], "rsquared_overall (linearmodels.panel.results.panelmodelcomparison property)": [[626, "linearmodels.panel.results.PanelModelComparison.rsquared_overall", false]], "rsquared_overall (linearmodels.panel.results.panelresults property)": [[656, "linearmodels.panel.results.PanelResults.rsquared_overall", false]], "rsquared_overall (linearmodels.panel.results.randomeffectsresults property)": [[691, "linearmodels.panel.results.RandomEffectsResults.rsquared_overall", false]], "rsquared_within (linearmodels.panel.results.famamacbethresults property)": [[568, "linearmodels.panel.results.FamaMacBethResults.rsquared_within", false]], "rsquared_within (linearmodels.panel.results.paneleffectsresults property)": [[607, "linearmodels.panel.results.PanelEffectsResults.rsquared_within", false]], "rsquared_within (linearmodels.panel.results.panelmodelcomparison property)": [[627, "linearmodels.panel.results.PanelModelComparison.rsquared_within", false]], "rsquared_within (linearmodels.panel.results.panelresults property)": [[657, "linearmodels.panel.results.PanelResults.rsquared_within", false]], "rsquared_within (linearmodels.panel.results.randomeffectsresults property)": [[692, "linearmodels.panel.results.RandomEffectsResults.rsquared_within", false]], "s (linearmodels.asset_pricing.covariance.heteroskedasticcovariance property)": [[5, "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.s", false]], "s (linearmodels.asset_pricing.covariance.kernelcovariance property)": [[14, "linearmodels.asset_pricing.covariance.KernelCovariance.s", false]], "s (linearmodels.iv.covariance.clusteredcovariance property)": [[159, "linearmodels.iv.covariance.ClusteredCovariance.s", false]], "s (linearmodels.iv.covariance.heteroskedasticcovariance property)": [[165, "linearmodels.iv.covariance.HeteroskedasticCovariance.s", false]], "s (linearmodels.iv.covariance.homoskedasticcovariance property)": [[171, "linearmodels.iv.covariance.HomoskedasticCovariance.s", false]], "s (linearmodels.iv.covariance.kernelcovariance property)": [[177, "linearmodels.iv.covariance.KernelCovariance.s", false]], "s (linearmodels.iv.gmm.ivgmmcovariance property)": [[203, "linearmodels.iv.gmm.IVGMMCovariance.s", false]], "s2 (linearmodels.iv.absorbing.absorbinglsresults property)": [[128, "linearmodels.iv.absorbing.AbsorbingLSResults.s2", false]], "s2 (linearmodels.iv.covariance.clusteredcovariance property)": [[160, "linearmodels.iv.covariance.ClusteredCovariance.s2", false]], "s2 (linearmodels.iv.covariance.heteroskedasticcovariance property)": [[166, "linearmodels.iv.covariance.HeteroskedasticCovariance.s2", false]], "s2 (linearmodels.iv.covariance.homoskedasticcovariance property)": [[172, "linearmodels.iv.covariance.HomoskedasticCovariance.s2", false]], "s2 (linearmodels.iv.covariance.kernelcovariance property)": [[178, "linearmodels.iv.covariance.KernelCovariance.s2", false]], "s2 (linearmodels.iv.gmm.ivgmmcovariance property)": [[204, "linearmodels.iv.gmm.IVGMMCovariance.s2", false]], "s2 (linearmodels.iv.results.ivgmmresults property)": [[300, "linearmodels.iv.results.IVGMMResults.s2", false]], "s2 (linearmodels.iv.results.ivresults property)": [[351, "linearmodels.iv.results.IVResults.s2", false]], "s2 (linearmodels.iv.results.olsresults property)": [[387, "linearmodels.iv.results.OLSResults.s2", false]], "s2 (linearmodels.panel.covariance.accovariance property)": [[412, "linearmodels.panel.covariance.ACCovariance.s2", false]], "s2 (linearmodels.panel.covariance.clusteredcovariance property)": [[420, "linearmodels.panel.covariance.ClusteredCovariance.s2", false]], "s2 (linearmodels.panel.covariance.driscollkraay property)": [[428, "linearmodels.panel.covariance.DriscollKraay.s2", false]], "s2 (linearmodels.panel.covariance.famamacbethcovariance property)": [[438, "linearmodels.panel.covariance.FamaMacBethCovariance.s2", false]], "s2 (linearmodels.panel.covariance.heteroskedasticcovariance property)": [[446, "linearmodels.panel.covariance.HeteroskedasticCovariance.s2", false]], "s2 (linearmodels.panel.covariance.homoskedasticcovariance property)": [[454, "linearmodels.panel.covariance.HomoskedasticCovariance.s2", false]], "s2 (linearmodels.panel.results.famamacbethresults property)": [[569, "linearmodels.panel.results.FamaMacBethResults.s2", false]], "s2 (linearmodels.panel.results.paneleffectsresults property)": [[608, "linearmodels.panel.results.PanelEffectsResults.s2", false]], "s2 (linearmodels.panel.results.panelresults property)": [[658, "linearmodels.panel.results.PanelResults.s2", false]], "s2 (linearmodels.panel.results.randomeffectsresults property)": [[693, "linearmodels.panel.results.RandomEffectsResults.s2", false]], "sargan (linearmodels.iv.results.ivresults property)": [[352, "linearmodels.iv.results.IVResults.sargan", false]], "setdefault() (linearmodels.shared.utility.attrdict method)": [[890, "linearmodels.shared.utility.AttrDict.setdefault", false]], "shape (linearmodels.iv.data.ivdata property)": [[192, "linearmodels.iv.data.IVData.shape", false]], "shape (linearmodels.panel.data._panel property)": [[485, "linearmodels.panel.data._Panel.shape", false]], "shape (linearmodels.panel.data.paneldata property)": [[474, "linearmodels.panel.data.PanelData.shape", false]], "sigma (linearmodels.system.covariance.clusteredcovariance property)": [[724, "linearmodels.system.covariance.ClusteredCovariance.sigma", false]], "sigma (linearmodels.system.covariance.heteroskedasticcovariance property)": [[739, "linearmodels.system.covariance.HeteroskedasticCovariance.sigma", false]], "sigma (linearmodels.system.covariance.homoskedasticcovariance property)": [[743, "linearmodels.system.covariance.HomoskedasticCovariance.sigma", false]], "sigma (linearmodels.system.covariance.kernelcovariance property)": [[749, "linearmodels.system.covariance.KernelCovariance.sigma", false]], "sigma (linearmodels.system.results.gmmsystemresults property)": [[826, "linearmodels.system.results.GMMSystemResults.sigma", false]], "sigma (linearmodels.system.results.systemresults property)": [[860, "linearmodels.system.results.SystemResults.sigma", false]], "sigma() (linearmodels.system.gmm.heteroskedasticweightmatrix method)": [[752, "linearmodels.system.gmm.HeteroskedasticWeightMatrix.sigma", false]], "sigma() (linearmodels.system.gmm.homoskedasticweightmatrix method)": [[756, "linearmodels.system.gmm.HomoskedasticWeightMatrix.sigma", false]], "sigma() (linearmodels.system.gmm.kernelweightmatrix method)": [[762, "linearmodels.system.gmm.KernelWeightMatrix.sigma", false]], "sparse (linearmodels.iv.absorbing.interaction property)": [[148, "linearmodels.iv.absorbing.Interaction.sparse", false]], "square (linearmodels.asset_pricing.covariance.heteroskedasticcovariance property)": [[6, "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.square", false]], "square (linearmodels.asset_pricing.covariance.kernelcovariance property)": [[15, "linearmodels.asset_pricing.covariance.KernelCovariance.square", false]], "stat (linearmodels.shared.hypotheses.invalidteststatistic property)": [[876, "linearmodels.shared.hypotheses.InvalidTestStatistic.stat", false]], "stat (linearmodels.shared.hypotheses.waldteststatistic property)": [[881, "linearmodels.shared.hypotheses.WaldTestStatistic.stat", false]], "std_errors (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[45, "linearmodels.asset_pricing.results.GMMFactorModelResults.std_errors", false]], "std_errors (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[65, "linearmodels.asset_pricing.results.LinearFactorModelResults.std_errors", false]], "std_errors (linearmodels.iv.absorbing.absorbinglsresults property)": [[129, "linearmodels.iv.absorbing.AbsorbingLSResults.std_errors", false]], "std_errors (linearmodels.iv.results.ivgmmresults property)": [[301, "linearmodels.iv.results.IVGMMResults.std_errors", false]], "std_errors (linearmodels.iv.results.ivmodelcomparison property)": [[319, "linearmodels.iv.results.IVModelComparison.std_errors", false]], "std_errors (linearmodels.iv.results.ivresults property)": [[353, "linearmodels.iv.results.IVResults.std_errors", false]], "std_errors (linearmodels.iv.results.olsresults property)": [[388, "linearmodels.iv.results.OLSResults.std_errors", false]], "std_errors (linearmodels.panel.results.famamacbethresults property)": [[570, "linearmodels.panel.results.FamaMacBethResults.std_errors", false]], "std_errors (linearmodels.panel.results.paneleffectsresults property)": [[609, "linearmodels.panel.results.PanelEffectsResults.std_errors", false]], "std_errors (linearmodels.panel.results.panelmodelcomparison property)": [[628, "linearmodels.panel.results.PanelModelComparison.std_errors", false]], "std_errors (linearmodels.panel.results.panelresults property)": [[659, "linearmodels.panel.results.PanelResults.std_errors", false]], "std_errors (linearmodels.panel.results.randomeffectsresults property)": [[694, "linearmodels.panel.results.RandomEffectsResults.std_errors", false]], "std_errors (linearmodels.system.results.gmmsystemresults property)": [[827, "linearmodels.system.results.GMMSystemResults.std_errors", false]], "std_errors (linearmodels.system.results.systemresults property)": [[861, "linearmodels.system.results.SystemResults.std_errors", false]], "summary (class in linearmodels.compat.statsmodels)": [[82, "linearmodels.compat.statsmodels.Summary", false]], "summary (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[46, "linearmodels.asset_pricing.results.GMMFactorModelResults.summary", false]], "summary (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[66, "linearmodels.asset_pricing.results.LinearFactorModelResults.summary", false]], "summary (linearmodels.iv.absorbing.absorbinglsresults property)": [[130, "linearmodels.iv.absorbing.AbsorbingLSResults.summary", false]], "summary (linearmodels.iv.results.firststageresults property)": [[271, "linearmodels.iv.results.FirstStageResults.summary", false]], "summary (linearmodels.iv.results.ivgmmresults property)": [[302, "linearmodels.iv.results.IVGMMResults.summary", false]], "summary (linearmodels.iv.results.ivmodelcomparison property)": [[320, "linearmodels.iv.results.IVModelComparison.summary", false]], "summary (linearmodels.iv.results.ivresults property)": [[354, "linearmodels.iv.results.IVResults.summary", false]], "summary (linearmodels.iv.results.olsresults property)": [[389, "linearmodels.iv.results.OLSResults.summary", false]], "summary (linearmodels.panel.results.famamacbethresults property)": [[571, "linearmodels.panel.results.FamaMacBethResults.summary", false]], "summary (linearmodels.panel.results.paneleffectsresults property)": [[610, "linearmodels.panel.results.PanelEffectsResults.summary", false]], "summary (linearmodels.panel.results.panelmodelcomparison property)": [[629, "linearmodels.panel.results.PanelModelComparison.summary", false]], "summary (linearmodels.panel.results.panelresults property)": [[660, "linearmodels.panel.results.PanelResults.summary", false]], "summary (linearmodels.panel.results.randomeffectsresults property)": [[695, "linearmodels.panel.results.RandomEffectsResults.summary", false]], "summary (linearmodels.system.results.gmmsystemresults property)": [[828, "linearmodels.system.results.GMMSystemResults.summary", false]], "summary (linearmodels.system.results.systemresults property)": [[862, "linearmodels.system.results.SystemResults.summary", false]], "sur (class in linearmodels.system.model)": [[790, "linearmodels.system.model.SUR", false]], "system_rsquared (linearmodels.system.results.gmmsystemresults property)": [[829, "linearmodels.system.results.GMMSystemResults.system_rsquared", false]], "system_rsquared (linearmodels.system.results.systemresults property)": [[863, "linearmodels.system.results.SystemResults.system_rsquared", false]], "systemresults (class in linearmodels.system.results)": [[836, "linearmodels.system.results.SystemResults", false]], "t (linearmodels.system.model.linearconstraint property)": [[789, "linearmodels.system.model.LinearConstraint.t", false]], "theta (linearmodels.panel.results.randomeffectsresults property)": [[696, "linearmodels.panel.results.RandomEffectsResults.theta", false]], "time (linearmodels.panel.data.paneldata property)": [[475, "linearmodels.panel.data.PanelData.time", false]], "time_effects (linearmodels.panel.model.panelols property)": [[522, "linearmodels.panel.model.PanelOLS.time_effects", false]], "time_ids (linearmodels.panel.data.paneldata property)": [[476, "linearmodels.panel.data.PanelData.time_ids", false]], "time_info (linearmodels.panel.results.famamacbethresults property)": [[572, "linearmodels.panel.results.FamaMacBethResults.time_info", false]], "time_info (linearmodels.panel.results.paneleffectsresults property)": [[611, "linearmodels.panel.results.PanelEffectsResults.time_info", false]], "time_info (linearmodels.panel.results.panelresults property)": [[661, "linearmodels.panel.results.PanelResults.time_info", false]], "time_info (linearmodels.panel.results.randomeffectsresults property)": [[697, "linearmodels.panel.results.RandomEffectsResults.time_info", false]], "to_frame() (linearmodels.panel.data._panel method)": [[486, "linearmodels.panel.data._Panel.to_frame", false]], "total_ss (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[47, "linearmodels.asset_pricing.results.GMMFactorModelResults.total_ss", false]], "total_ss (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[67, "linearmodels.asset_pricing.results.LinearFactorModelResults.total_ss", false]], "total_ss (linearmodels.iv.absorbing.absorbinglsresults property)": [[131, "linearmodels.iv.absorbing.AbsorbingLSResults.total_ss", false]], "total_ss (linearmodels.iv.results.ivgmmresults property)": [[303, "linearmodels.iv.results.IVGMMResults.total_ss", false]], "total_ss (linearmodels.iv.results.ivresults property)": [[355, "linearmodels.iv.results.IVResults.total_ss", false]], "total_ss (linearmodels.iv.results.olsresults property)": [[390, "linearmodels.iv.results.OLSResults.total_ss", false]], "total_ss (linearmodels.panel.results.famamacbethresults property)": [[573, "linearmodels.panel.results.FamaMacBethResults.total_ss", false]], "total_ss (linearmodels.panel.results.paneleffectsresults property)": [[612, "linearmodels.panel.results.PanelEffectsResults.total_ss", false]], "total_ss (linearmodels.panel.results.panelresults property)": [[662, "linearmodels.panel.results.PanelResults.total_ss", false]], "total_ss (linearmodels.panel.results.randomeffectsresults property)": [[698, "linearmodels.panel.results.RandomEffectsResults.total_ss", false]], "total_ss (linearmodels.system.results.gmmsystemresults property)": [[830, "linearmodels.system.results.GMMSystemResults.total_ss", false]], "total_ss (linearmodels.system.results.systemresults property)": [[864, "linearmodels.system.results.SystemResults.total_ss", false]], "tradedfactormodel (class in linearmodels.asset_pricing.model)": [[24, "linearmodels.asset_pricing.model.TradedFactorModel", false]], "tstats (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[48, "linearmodels.asset_pricing.results.GMMFactorModelResults.tstats", false]], "tstats (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[68, "linearmodels.asset_pricing.results.LinearFactorModelResults.tstats", false]], "tstats (linearmodels.iv.absorbing.absorbinglsresults property)": [[132, "linearmodels.iv.absorbing.AbsorbingLSResults.tstats", false]], "tstats (linearmodels.iv.results.ivgmmresults property)": [[304, "linearmodels.iv.results.IVGMMResults.tstats", false]], "tstats (linearmodels.iv.results.ivmodelcomparison property)": [[321, "linearmodels.iv.results.IVModelComparison.tstats", false]], "tstats (linearmodels.iv.results.ivresults property)": [[356, "linearmodels.iv.results.IVResults.tstats", false]], "tstats (linearmodels.iv.results.olsresults property)": [[391, "linearmodels.iv.results.OLSResults.tstats", false]], "tstats (linearmodels.panel.results.famamacbethresults property)": [[574, "linearmodels.panel.results.FamaMacBethResults.tstats", false]], "tstats (linearmodels.panel.results.paneleffectsresults property)": [[613, "linearmodels.panel.results.PanelEffectsResults.tstats", false]], "tstats (linearmodels.panel.results.panelmodelcomparison property)": [[630, "linearmodels.panel.results.PanelModelComparison.tstats", false]], "tstats (linearmodels.panel.results.panelresults property)": [[663, "linearmodels.panel.results.PanelResults.tstats", false]], "tstats (linearmodels.panel.results.randomeffectsresults property)": [[699, "linearmodels.panel.results.RandomEffectsResults.tstats", false]], "tstats (linearmodels.system.results.gmmsystemresults property)": [[831, "linearmodels.system.results.GMMSystemResults.tstats", false]], "tstats (linearmodels.system.results.systemresults property)": [[865, "linearmodels.system.results.SystemResults.tstats", false]], "uint32array (in module linearmodels.typing.data)": [[867, "linearmodels.typing.data.Uint32Array", false]], "update() (linearmodels.shared.utility.attrdict method)": [[891, "linearmodels.shared.utility.AttrDict.update", false]], "values (linearmodels.panel.data._panel property)": [[487, "linearmodels.panel.data._Panel.values", false]], "values() (linearmodels.shared.utility.attrdict method)": [[892, "linearmodels.shared.utility.AttrDict.values", false]], "values2d (linearmodels.panel.data.paneldata property)": [[477, "linearmodels.panel.data.PanelData.values2d", false]], "values3d (linearmodels.panel.data.paneldata property)": [[478, "linearmodels.panel.data.PanelData.values3d", false]], "variance_decomposition (linearmodels.panel.results.paneleffectsresults property)": [[614, "linearmodels.panel.results.PanelEffectsResults.variance_decomposition", false]], "variance_decomposition (linearmodels.panel.results.randomeffectsresults property)": [[700, "linearmodels.panel.results.RandomEffectsResults.variance_decomposition", false]], "vars (linearmodels.panel.data.paneldata property)": [[479, "linearmodels.panel.data.PanelData.vars", false]], "w (linearmodels.system.results.gmmsystemresults property)": [[832, "linearmodels.system.results.GMMSystemResults.w", false]], "wald_test() (linearmodels.iv.absorbing.absorbinglsresults method)": [[133, "linearmodels.iv.absorbing.AbsorbingLSResults.wald_test", false]], "wald_test() (linearmodels.iv.results.ivgmmresults method)": [[305, "linearmodels.iv.results.IVGMMResults.wald_test", false]], "wald_test() (linearmodels.iv.results.ivresults method)": [[357, "linearmodels.iv.results.IVResults.wald_test", false]], "wald_test() (linearmodels.iv.results.olsresults method)": [[392, "linearmodels.iv.results.OLSResults.wald_test", false]], "wald_test() (linearmodels.panel.results.famamacbethresults method)": [[575, "linearmodels.panel.results.FamaMacBethResults.wald_test", false]], "wald_test() (linearmodels.panel.results.paneleffectsresults method)": [[615, "linearmodels.panel.results.PanelEffectsResults.wald_test", false]], "wald_test() (linearmodels.panel.results.panelresults method)": [[664, "linearmodels.panel.results.PanelResults.wald_test", false]], "wald_test() (linearmodels.panel.results.randomeffectsresults method)": [[701, "linearmodels.panel.results.RandomEffectsResults.wald_test", false]], "waldteststatistic (class in linearmodels.shared.hypotheses)": [[877, "linearmodels.shared.hypotheses.WaldTestStatistic", false]], "weight_config (linearmodels.iv.results.ivgmmresults property)": [[306, "linearmodels.iv.results.IVGMMResults.weight_config", false]], "weight_config (linearmodels.system.results.gmmsystemresults property)": [[833, "linearmodels.system.results.GMMSystemResults.weight_config", false]], "weight_matrix (linearmodels.iv.results.ivgmmresults property)": [[307, "linearmodels.iv.results.IVGMMResults.weight_matrix", false]], "weight_matrix() (linearmodels.iv.gmm.heteroskedasticweightmatrix method)": [[195, "linearmodels.iv.gmm.HeteroskedasticWeightMatrix.weight_matrix", false]], "weight_matrix() (linearmodels.iv.gmm.homoskedasticweightmatrix method)": [[198, "linearmodels.iv.gmm.HomoskedasticWeightMatrix.weight_matrix", false]], "weight_matrix() (linearmodels.iv.gmm.kernelweightmatrix method)": [[208, "linearmodels.iv.gmm.KernelWeightMatrix.weight_matrix", false]], "weight_matrix() (linearmodels.iv.gmm.onewayclusteredweightmatrix method)": [[211, "linearmodels.iv.gmm.OneWayClusteredWeightMatrix.weight_matrix", false]], "weight_matrix() (linearmodels.system.gmm.heteroskedasticweightmatrix method)": [[753, "linearmodels.system.gmm.HeteroskedasticWeightMatrix.weight_matrix", false]], "weight_matrix() (linearmodels.system.gmm.homoskedasticweightmatrix method)": [[757, "linearmodels.system.gmm.HomoskedasticWeightMatrix.weight_matrix", false]], "weight_matrix() (linearmodels.system.gmm.kernelweightmatrix method)": [[763, "linearmodels.system.gmm.KernelWeightMatrix.weight_matrix", false]], "weight_type (linearmodels.iv.results.ivgmmresults property)": [[308, "linearmodels.iv.results.IVGMMResults.weight_type", false]], "weight_type (linearmodels.system.results.gmmsystemresults property)": [[834, "linearmodels.system.results.GMMSystemResults.weight_type", false]], "weights (linearmodels.iv.absorbing.absorbingls property)": [[101, "linearmodels.iv.absorbing.AbsorbingLS.weights", false]], "weights (linearmodels.panel.utility.panelmodeldata attribute)": [[710, "linearmodels.panel.utility.PanelModelData.weights", false]], "wooldridge_overid (linearmodels.iv.results.ivresults property)": [[358, "linearmodels.iv.results.IVResults.wooldridge_overid", false]], "wooldridge_regression (linearmodels.iv.results.ivresults property)": [[359, "linearmodels.iv.results.IVResults.wooldridge_regression", false]], "wooldridge_score (linearmodels.iv.results.ivresults property)": [[360, "linearmodels.iv.results.IVResults.wooldridge_score", false]], "wresids (linearmodels.iv.absorbing.absorbinglsresults property)": [[134, "linearmodels.iv.absorbing.AbsorbingLSResults.wresids", false]], "wresids (linearmodels.iv.results.ivgmmresults property)": [[309, "linearmodels.iv.results.IVGMMResults.wresids", false]], "wresids (linearmodels.iv.results.ivresults property)": [[361, "linearmodels.iv.results.IVResults.wresids", false]], "wresids (linearmodels.iv.results.olsresults property)": [[393, "linearmodels.iv.results.OLSResults.wresids", false]], "wresids (linearmodels.panel.results.famamacbethresults property)": [[576, "linearmodels.panel.results.FamaMacBethResults.wresids", false]], "wresids (linearmodels.panel.results.paneleffectsresults property)": [[616, "linearmodels.panel.results.PanelEffectsResults.wresids", false]], "wresids (linearmodels.panel.results.panelresults property)": [[665, "linearmodels.panel.results.PanelResults.wresids", false]], "wresids (linearmodels.panel.results.randomeffectsresults property)": [[702, "linearmodels.panel.results.RandomEffectsResults.wresids", false]], "wresids (linearmodels.system.results.gmmsystemresults property)": [[835, "linearmodels.system.results.GMMSystemResults.wresids", false]], "wresids (linearmodels.system.results.systemresults property)": [[866, "linearmodels.system.results.SystemResults.wresids", false]], "wresids() (linearmodels.iv.absorbing.absorbingls method)": [[102, "linearmodels.iv.absorbing.AbsorbingLS.wresids", false]], "wresids() (linearmodels.iv.model._ols method)": [[267, "linearmodels.iv.model._OLS.wresids", false]], "wresids() (linearmodels.iv.model.iv2sls method)": [[222, "linearmodels.iv.model.IV2SLS.wresids", false]], "wresids() (linearmodels.iv.model.ivgmm method)": [[233, "linearmodels.iv.model.IVGMM.wresids", false]], "wresids() (linearmodels.iv.model.ivgmmcue method)": [[245, "linearmodels.iv.model.IVGMMCUE.wresids", false]], "wresids() (linearmodels.iv.model.ivliml method)": [[256, "linearmodels.iv.model.IVLIML.wresids", false]], "wu_hausman() (linearmodels.iv.results.ivresults method)": [[362, "linearmodels.iv.results.IVResults.wu_hausman", false]]}, "objects": {"linearmodels": [[868, 0, 0, 1, "utility", ""]], "linearmodels.asset_pricing": [[74, 0, 0, 1, "covariance", ""], [74, 0, 0, 1, "model", ""], [74, 0, 0, 1, "results", ""]], "linearmodels.asset_pricing.covariance": [[0, 1, 1, 0, "HeteroskedasticCovariance", "Heteroskedasticity robust covariance estimator"], [7, 1, 1, 0, "KernelCovariance", "Heteroskedasticity-autocorrelation (HAC) robust covariance estimator"]], "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance": [[1, 3, 1, 0, "config", ""], [2, 3, 1, 0, "cov", "Compute parameter covariance"], [3, 3, 1, 0, "inv_jacobian", "Inverse Jacobian"], [4, 3, 1, 0, "jacobian", "The Jacobian"], [5, 3, 1, 0, "s", "Score/moment condition covariance"], [6, 3, 1, 0, "square", "Flag indicating if jacobian is square"]], "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.__init__": [[0, 2, 2, 0, "center", "Flag indicating to center the scores when computing the covariance."], [0, 2, 2, 0, "debiased", "Flag indicating to use a debiased estimator."], [0, 2, 2, 0, "df", "Degree of freedom value ot use if debiasing."], [0, 2, 2, 0, "inv_jacobian", "Inverse jacobian."], [0, 2, 2, 0, "jacobian", "Jacobian."], [0, 2, 2, 0, "xe", "Scores/moment conditions"]], "linearmodels.asset_pricing.covariance.KernelCovariance": [[8, 3, 1, 0, "bandwidth", "Bandwidth used in estimation"], [9, 3, 1, 0, "config", ""], [10, 3, 1, 0, "cov", "Compute parameter covariance"], [11, 3, 1, 0, "inv_jacobian", "Inverse Jacobian"], [12, 3, 1, 0, "jacobian", "The Jacobian"], [13, 3, 1, 0, "kernel", "Kernel used in estimation"], [14, 3, 1, 0, "s", "Score/moment condition covariance"], [15, 3, 1, 0, "square", "Flag indicating if jacobian is square"]], "linearmodels.asset_pricing.covariance.KernelCovariance.__init__": [[7, 2, 2, 0, "bandwidth", "Non-negative integer bandwidth."], [7, 2, 2, 0, "center", "Flag indicating to center the scores when computing the covariance."], [7, 2, 2, 0, "debiased", "Flag indicating to use a debiased estimator."], [7, 2, 2, 0, "df", "Degree of freedom value ot use if debiasing."], [7, 2, 2, 0, "inv_jacobian", "Inverse jacobian."], [7, 2, 2, 0, "jacobian", "Jacobian."], [7, 2, 2, 0, "kernel", "Kernel name."], [7, 2, 2, 0, "xe", "The scores (moment) conditions."]], "linearmodels.asset_pricing.model": [[16, 1, 1, 0, "LinearFactorModel", "Linear factor model estimator"], [20, 1, 1, 0, "LinearFactorModelGMM", "GMM estimator of Linear factor models"], [24, 1, 1, 0, "TradedFactorModel", "Linear factor models estimator applicable to traded factors"]], "linearmodels.asset_pricing.model.LinearFactorModel": [[17, 4, 1, 0, "fit", "Estimate model parameters"], [18, 3, 1, 0, "formula", ""], [19, 4, 1, 0, "from_formula", "Formula modified for the syntax described in the notes"]], "linearmodels.asset_pricing.model.LinearFactorModel.__init__": [[16, 2, 2, 0, "factors", "Priced factor returns (nobs by nfactor)"], [16, 2, 2, 0, "portfolios", "Test portfolio returns (nobs by nportfolio)"], [16, 2, 2, 0, "risk_free", "Flag indicating whether the risk-free rate should be estimated from returns along other risk premia."], [16, 2, 2, 0, "sigma", "Positive definite residual covariance (nportfolio by nportfolio)"]], "linearmodels.asset_pricing.model.LinearFactorModel.fit": [[17, 2, 2, 0, "cov_config", "Additional covariance-specific options."], [17, 2, 2, 0, "cov_type", "Name of covariance estimator"], [17, 2, 2, 0, "debiased", "Flag indicating whether to debias the covariance estimator using a degree of freedom adjustment"]], "linearmodels.asset_pricing.model.LinearFactorModel.from_formula": [[19, 2, 2, 0, "data", "DataFrame containing the variables used in the formula"], [19, 2, 2, 0, "formula", "Formula modified for the syntax described in the notes"], [19, 2, 2, 0, "portfolios", "Portfolios to be used in the model."], [19, 2, 2, 0, "risk_free", "Flag indicating whether the risk-free rate should be estimated from returns along other risk premia."], [19, 2, 2, 0, "sigma", "Positive definite residual covariance (nportfolio by nportfolio)"]], "linearmodels.asset_pricing.model.LinearFactorModelGMM": [[21, 4, 1, 0, "fit", "Estimate model parameters"], [22, 3, 1, 0, "formula", ""], [23, 4, 1, 0, "from_formula", "Formula modified for the syntax described in the notes"]], "linearmodels.asset_pricing.model.LinearFactorModelGMM.__init__": [[20, 2, 2, 0, "factors", "Priced factors values (nobs by nfactor)"], [20, 2, 2, 0, "portfolios", "Test portfolio returns (nobs by nportfolio)"], [20, 2, 2, 0, "risk_free", "Flag indicating whether the risk-free rate should be estimated from returns along other risk premia."]], "linearmodels.asset_pricing.model.LinearFactorModelGMM.fit": [[21, 2, 2, 0, "center", "Flag indicating to center the moment conditions before computing the weighting matrix."], [21, 2, 2, 0, "cov_config", "Additional covariance-specific options."], [21, 2, 2, 0, "cov_type", "Name of covariance estimator"], [21, 2, 2, 0, "debiased", "Flag indicating whether to debias the covariance estimator using a degree of freedom adjustment"], [21, 2, 2, 0, "disp", "Number of iterations between printed update."], [21, 2, 2, 0, "max_iter", "Maximum number of iterations when minimizing objective."], [21, 2, 2, 0, "opt_options", "Additional options to pass to scipy.optimize.minimize when optimizing the objective function."], [21, 2, 2, 0, "starting", "Starting values to use in optimization."], [21, 2, 2, 0, "steps", "Number of steps to use when estimating parameters."], [21, 2, 2, 0, "use_cue", "Flag indicating to use continuously updating estimator"]], "linearmodels.asset_pricing.model.LinearFactorModelGMM.from_formula": [[23, 2, 2, 0, "data", "DataFrame containing the variables used in the formula"], [23, 2, 2, 0, "formula", "Formula modified for the syntax described in the notes"], [23, 2, 2, 0, "portfolios", "Portfolios to be used in the model."], [23, 2, 2, 0, "risk_free", "Flag indicating whether the risk-free rate should be estimated from returns along other risk premia."]], "linearmodels.asset_pricing.model.TradedFactorModel": [[25, 4, 1, 0, "fit", "Estimate model parameters"], [26, 3, 1, 0, "formula", ""], [27, 4, 1, 0, "from_formula", "Formula modified for the syntax described in the notes"]], "linearmodels.asset_pricing.model.TradedFactorModel.__init__": [[24, 2, 2, 0, "factors", "Priced factor returns (nobs by nfactor)"], [24, 2, 2, 0, "portfolios", "Test portfolio returns (nobs by nportfolio)"]], "linearmodels.asset_pricing.model.TradedFactorModel.fit": [[25, 2, 2, 0, "cov_config", "Additional covariance-specific options."], [25, 2, 2, 0, "cov_type", "Name of covariance estimator"], [25, 2, 2, 0, "debiased", "Flag indicating whether to debias the covariance estimator using a degree of freedom adjustment"]], "linearmodels.asset_pricing.model.TradedFactorModel.from_formula": [[27, 2, 2, 0, "data", "DataFrame containing the variables used in the formula"], [27, 2, 2, 0, "formula", "Formula modified for the syntax described in the notes"], [27, 2, 2, 0, "portfolios", "Portfolios to be used in the model"]], "linearmodels.asset_pricing.results": [[28, 1, 1, 0, "GMMFactorModelResults", "alphas"], [49, 1, 1, 0, "LinearFactorModelResults", "Model results from a Linear Factor Model."]], "linearmodels.asset_pricing.results.GMMFactorModelResults": [[29, 3, 1, 0, "alphas", "Mispricing estimates"], [30, 3, 1, 0, "betas", "Estimated factor loadings"], [31, 3, 1, 0, "cov", "Estimated covariance of parameters"], [32, 3, 1, 0, "cov_estimator", "Type of covariance estimator used to compute covariance"], [33, 3, 1, 0, "full_summary", "Complete summary including factor loadings and mispricing measures"], [34, 3, 1, 0, "iterations", "Number of steps in GMM estimation"], [35, 3, 1, 0, "j_statistic", "Model J statistic"], [36, 3, 1, 0, "name", "Model type"], [37, 3, 1, 0, "nobs", "Number of observations"], [38, 3, 1, 0, "params", "Estimated parameters"], [39, 3, 1, 0, "pvalues", "Parameter p-vals. Uses t(df_resid) if debiased is True, else normal"], [40, 3, 1, 0, "residual_ss", "Residual sum of squares"], [41, 3, 1, 0, "risk_premia", "Estimated factor risk premia (lambda)"], [42, 3, 1, 0, "risk_premia_se", "Estimated factor risk premia standard errors"], [43, 3, 1, 0, "risk_premia_tstats", "Risk premia t-statistics"], [44, 3, 1, 0, "rsquared", "Coefficient of determination (R**2)"], [45, 3, 1, 0, "std_errors", "Estimated parameter standard errors"], [46, 3, 1, 0, "summary", "Model estimation summary."], [47, 3, 1, 0, "total_ss", "Total sum of squares"], [48, 3, 1, 0, "tstats", "Parameter t-statistics"]], "linearmodels.asset_pricing.results.GMMFactorModelResults.__init__": [[28, 2, 2, "linearmodels.asset_pricing.results.GMMFactorModelResults", "results", "alphas"]], "linearmodels.asset_pricing.results.LinearFactorModelResults": [[50, 3, 1, 0, "alphas", "Mispricing estimates"], [51, 3, 1, 0, "betas", "Estimated factor loadings"], [52, 3, 1, 0, "cov", "Estimated covariance of parameters"], [53, 3, 1, 0, "cov_estimator", "Type of covariance estimator used to compute covariance"], [54, 3, 1, 0, "full_summary", "Complete summary including factor loadings and mispricing measures"], [55, 3, 1, 0, "j_statistic", "Model J statistic"], [56, 3, 1, 0, "name", "Model type"], [57, 3, 1, 0, "nobs", "Number of observations"], [58, 3, 1, 0, "params", "Estimated parameters"], [59, 3, 1, 0, "pvalues", "Parameter p-vals. Uses t(df_resid) if debiased is True, else normal"], [60, 3, 1, 0, "residual_ss", "Residual sum of squares"], [61, 3, 1, 0, "risk_premia", "Estimated factor risk premia (lambda)"], [62, 3, 1, 0, "risk_premia_se", "Estimated factor risk premia standard errors"], [63, 3, 1, 0, "risk_premia_tstats", "Risk premia t-statistics"], [64, 3, 1, 0, "rsquared", "Coefficient of determination (R**2)"], [65, 3, 1, 0, "std_errors", "Estimated parameter standard errors"], [66, 3, 1, 0, "summary", "Model estimation summary."], [67, 3, 1, 0, "total_ss", "Total sum of squares"], [68, 3, 1, 0, "tstats", "Parameter t-statistics"]], "linearmodels.asset_pricing.results.LinearFactorModelResults.__init__": [[49, 2, 2, 0, "results", "A dictionary of results from the model estimation."]], "linearmodels.compat": [[81, 0, 0, 1, "statsmodels", ""]], "linearmodels.compat.statsmodels": [[82, 1, 1, 0, "Summary", "add_extra_txt(etext)"]], "linearmodels.compat.statsmodels.Summary": [[83, 4, 1, 0, "add_extra_txt", "add additional text that will be added at the end in text format"], [84, 4, 1, 0, "add_table_2cols", "Add a double table, 2 tables with one column merged horizontally"], [85, 4, 1, 0, "add_table_params", "create and add a table for the parameter estimates"], [86, 4, 1, 0, "as_csv", "return tables as string"], [87, 4, 1, 0, "as_html", "Return tables as string"], [88, 4, 1, 0, "as_latex", "return tables as string"], [89, 4, 1, 0, "as_text", "return tables as string"]], "linearmodels.compat.statsmodels.Summary.add_extra_txt": [[83, 2, 2, 0, "etext", "string with lines that are added to the text output."]], "linearmodels.compat.statsmodels.Summary.add_table_2cols": [[84, 2, 2, 0, "gleft", "elements for the left table, tuples are (name, value) pairs If gleft is None, then a default table is created"], [84, 2, 2, 0, "gright", "elements for the right table, tuples are (name, value) pairs"], [84, 2, 2, 0, "res", "some required information is directly taken from the result instance"], [84, 2, 2, 0, "title", "if None, then a default title is used."], [84, 2, 2, 0, "xname", "optional names for the exogenous variables, default is \"var_xx\". Must match the number of parameters in the model."], [84, 2, 2, 0, "yname", "optional name for the endogenous variable, default is \"y\""]], "linearmodels.compat.statsmodels.Summary.add_table_params": [[85, 2, 2, 0, "alpha", "significance level for the confidence intervals"], [85, 2, 2, 0, "res", "some required information is directly taken from the result instance"], [85, 2, 2, 0, "use_t", "indicator whether the p-values are based on the Student-t distribution (if True) or on the normal distribution (if False)"], [85, 2, 2, 0, "xname", "optional names for the exogenous variables, default is \"var_xx\""], [85, 2, 2, 0, "yname", "optional name for the endogenous variable, default is \"y\""]], "linearmodels.iv": [[396, 0, 0, 1, "absorbing", ""], [396, 0, 0, 1, "covariance", ""], [396, 0, 0, 1, "data", ""], [396, 0, 0, 1, "gmm", ""], [396, 0, 0, 1, "model", ""], [396, 0, 0, 1, "results", ""]], "linearmodels.iv.absorbing": [[92, 1, 1, 0, "AbsorbingLS", "Linear regression with high-dimensional effects"], [103, 1, 1, 0, "AbsorbingLSResults", "Results from IV estimation"], [135, 1, 1, 0, "AbsorbingRegressor", "Constructed weights sparse matrix from components"], [140, 1, 1, 0, "Interaction", "Class that simplifies specifying interactions"]], "linearmodels.iv.absorbing.AbsorbingLS": [[93, 3, 1, 0, "absorbed_dependent", "Dependent variable with effects absorbed"], [94, 3, 1, 0, "absorbed_exog", "Exogenous variables with effects absorbed"], [95, 3, 1, 0, "dependent", ""], [96, 3, 1, 0, "exog", ""], [97, 4, 1, 0, "fit", "Estimate model parameters"], [98, 3, 1, 0, "has_constant", ""], [99, 3, 1, 0, "instruments", ""], [100, 4, 1, 0, "resids", "Compute model residuals"], [101, 3, 1, 0, "weights", ""], [102, 4, 1, 0, "wresids", "Compute weighted model residuals"]], "linearmodels.iv.absorbing.AbsorbingLS.__init__": [[92, 2, 2, 0, "absorb", "The effects or continuous variables to absorb."], [92, 2, 2, 0, "dependent", "Endogenous variables (nobs by 1)"], [92, 2, 2, 0, "drop_absorbed", "Flag indicating whether to drop absorbed variables"], [92, 2, 2, 0, "exog", "Exogenous regressors  (nobs by nexog)"], [92, 2, 2, 0, "interactions", "Interactions containing both categorical and continuous variables."], [92, 2, 2, 0, "weights", "Observation weights used in estimation"]], "linearmodels.iv.absorbing.AbsorbingLS.fit": [[97, 2, 2, 0, "absorb_options", "Dictionary of options to pass to the absorber."], [97, 2, 2, 0, "cov_config", "Additional parameters to pass to covariance estimator."], [97, 2, 2, 0, "cov_type", "Name of covariance estimator to use."], [97, 2, 2, 0, "debiased", "Flag indicating whether to debiased the covariance estimator using a degree of freedom adjustment."], [97, 2, 2, 0, "lsmr_options", "Options to ass to scipy.sparse.linalg.lsmr."], [97, 2, 2, 0, "method", "One of:"], [97, 2, 2, 0, "use_cache", "Flag indicating whether the variables, once purged from the absorbed variables and interactions, should be stored in the cache, and retrieved if available."]], "linearmodels.iv.absorbing.AbsorbingLS.resids": [[100, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.absorbing.AbsorbingLS.wresids": [[102, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.absorbing.AbsorbingLSResults": [[104, 3, 1, 0, "absorbed_effects", "Fitted values from only absorbed terms"], [105, 3, 1, 0, "absorbed_rsquared", "Coefficient of determination (R**2), ignoring absorbed variables"], [106, 4, 1, 0, "conf_int", "Confidence interval construction"], [107, 3, 1, 0, "cov", "Estimated covariance of parameters"], [108, 3, 1, 0, "cov_config", "Parameter values from covariance estimator"], [109, 3, 1, 0, "cov_estimator", "Type of covariance estimator used to compute covariance"], [110, 3, 1, 0, "cov_type", "Covariance estimator used"], [111, 3, 1, 0, "debiased", "Flag indicating whether covariance uses a small-sample adjustment"], [112, 3, 1, 0, "df_absorbed", "Number of variables absorbed"], [113, 3, 1, 0, "df_model", "Model degree of freedom"], [114, 3, 1, 0, "df_resid", "Residual degree of freedom"], [115, 3, 1, 0, "f_statistic", "Model F-statistic"], [116, 3, 1, 0, "fitted_values", "Fitted values"], [117, 3, 1, 0, "has_constant", "Flag indicating the model includes a constant or equivalent"], [118, 3, 1, 0, "idiosyncratic", "Idiosyncratic error"], [119, 3, 1, 0, "method", "Method used to estimate model parameters"], [120, 3, 1, 0, "model_ss", "Residual sum of squares"], [121, 3, 1, 0, "nobs", "Number of observations"], [122, 3, 1, 0, "params", "Estimated parameters"], [123, 3, 1, 0, "pvalues", "Parameter p-vals. Uses t(df_resid) if debiased is True, else normal"], [124, 3, 1, 0, "resid_ss", "Residual sum of squares"], [125, 3, 1, 0, "resids", "Estimated residuals"], [126, 3, 1, 0, "rsquared", "Coefficient of determination (R**2)"], [127, 3, 1, 0, "rsquared_adj", "Sample-size adjusted coefficient of determination (R**2)"], [128, 3, 1, 0, "s2", "Residual variance estimator"], [129, 3, 1, 0, "std_errors", "Estimated parameter standard errors"], [130, 3, 1, 0, "summary", "Model estimation summary."], [131, 3, 1, 0, "total_ss", "Total sum of squares"], [132, 3, 1, 0, "tstats", "Parameter t-statistics"], [133, 4, 1, 0, "wald_test", "Test linear equality constraints using a Wald test"], [134, 3, 1, 0, "wresids", "Weighted estimated residuals"]], "linearmodels.iv.absorbing.AbsorbingLSResults.__init__": [[103, 2, 2, 0, "model", "The model used to estimate parameters."], [103, 2, 2, 0, "results", "A dictionary of results from the model estimation."]], "linearmodels.iv.absorbing.AbsorbingLSResults.conf_int": [[106, 2, 2, 0, "level", "Confidence level for interval"]], "linearmodels.iv.absorbing.AbsorbingLSResults.wald_test": [[133, 2, 2, 0, "formula", "formulaic linear constraints."], [133, 2, 2, 0, "restriction", "q by nvar array containing linear weights to apply to parameters when forming the restrictions."], [133, 2, 2, 0, "value", "q element array containing the restricted values."]], "linearmodels.iv.absorbing.AbsorbingRegressor": [[136, 3, 1, 0, "approx_rank", ""], [137, 3, 1, 0, "has_constant", "Flag indicating whether the regressors have a constant equivalent"], [138, 3, 1, 0, "hash", ""], [139, 3, 1, 0, "regressors", ""]], "linearmodels.iv.absorbing.AbsorbingRegressor.__init__": [[135, 2, 2, 0, "cat", "List of categorical variables (factors) to absorb"], [135, 2, 2, 0, "cont", "List of continuous variables to absorb"], [135, 2, 2, 0, "interactions", "List of included interactions"], [135, 2, 2, 0, "weights", "Weights, if any"]], "linearmodels.iv.absorbing.Interaction": [[141, 3, 1, 0, "cat", "Categorical Variables"], [142, 3, 1, 0, "cont", "Continuous Variables"], [143, 4, 1, 0, "drop", ""], [144, 4, 1, 0, "from_frame", "Convenience function the simplifies using a DataFrame"], [145, 3, 1, 0, "hash", "Construct a hash that will be invariant for any permutation of inputs that produce the same fit when used as regressors"], [146, 3, 1, 0, "isnull", ""], [147, 3, 1, 0, "nobs", ""], [148, 3, 1, 0, "sparse", "Construct a sparse interaction matrix"]], "linearmodels.iv.absorbing.Interaction.__init__": [[140, 2, 2, 0, "cat", "Variables to treat as categoricals."], [140, 2, 2, 0, "cont", "Variables to treat as continuous, (nobs, ncont)."], [140, 2, 2, "linearmodels.iv.absorbing.Interaction", "nobs", "Class that simplifies specifying interactions"]], "linearmodels.iv.absorbing.Interaction.drop": [[143, 2, 2, "linearmodels.iv.absorbing.Interaction.drop", "locs", ""]], "linearmodels.iv.absorbing.Interaction.from_frame": [[144, 2, 2, 0, "frame", "Frame containing categorical and continuous variables."]], "linearmodels.iv.covariance": [[155, 1, 1, 0, "ClusteredCovariance", "Covariance estimation for clustered data"], [161, 1, 1, 0, "HeteroskedasticCovariance", "Covariance estimation for heteroskedastic data"], [167, 1, 1, 0, "HomoskedasticCovariance", "Covariance estimation for homoskedastic data"], [173, 1, 1, 0, "KernelCovariance", "Kernel weighted (HAC) covariance estimation"], [179, 5, 1, 0, "kernel_optimal_bandwidth", "Array of data to use when computing optimal bandwidth"], [180, 5, 1, 0, "kernel_weight_bartlett", "Kernel weights from a Bartlett kernel"], [181, 5, 1, 0, "kernel_weight_parzen", "Kernel weights from a Parzen kernel"], [182, 5, 1, 0, "kernel_weight_quadratic_spectral", "Kernel weights from a quadratic-spectral kernel"]], "linearmodels.iv.covariance.ClusteredCovariance": [[156, 3, 1, 0, "config", ""], [157, 3, 1, 0, "cov", "Covariance of estimated parameters"], [158, 3, 1, 0, "debiased", "Flag indicating if covariance is debiased"], [159, 3, 1, 0, "s", "Clustered estimator of score covariance"], [160, 3, 1, 0, "s2", "Estimated variance of residuals. Small-sample adjusted if debiased."]], "linearmodels.iv.covariance.ClusteredCovariance.__init__": [[155, 2, 2, 0, "clusters", "Cluster group assignment."], [155, 2, 2, 0, "debiased", "Flag indicating whether to use a small-sample adjustment"], [155, 2, 2, 0, "kappa", "Value of kappa in k-class estimator"], [155, 2, 2, 0, "params", "Estimated model parameters (nvar by 1)"], [155, 2, 2, 0, "x", "Model regressors (nobs by nvar)"], [155, 2, 2, 0, "y", "Series ,modeled (nobs by 1)"], [155, 2, 2, 0, "z", "Instruments used for endogenous regressors (nobs by ninstr)"]], "linearmodels.iv.covariance.HeteroskedasticCovariance": [[162, 3, 1, 0, "config", ""], [163, 3, 1, 0, "cov", "Covariance of estimated parameters"], [164, 3, 1, 0, "debiased", "Flag indicating if covariance is debiased"], [165, 3, 1, 0, "s", "Heteroskedasticity-robust score covariance estimate"], [166, 3, 1, 0, "s2", "Estimated variance of residuals. Small-sample adjusted if debiased."]], "linearmodels.iv.covariance.HeteroskedasticCovariance.__init__": [[161, 2, 2, 0, "debiased", "Flag indicating whether to use a small-sample adjustment"], [161, 2, 2, 0, "kappa", "Value of kappa in k-class estimator"], [161, 2, 2, 0, "params", "Estimated model parameters (nvar by 1)"], [161, 2, 2, 0, "x", "Model regressors (nobs by nvar)"], [161, 2, 2, 0, "y", "Series ,modeled (nobs by 1)"], [161, 2, 2, 0, "z", "Instruments used for endogenous regressors (nobs by ninstr)"]], "linearmodels.iv.covariance.HomoskedasticCovariance": [[168, 3, 1, 0, "config", ""], [169, 3, 1, 0, "cov", "Covariance of estimated parameters"], [170, 3, 1, 0, "debiased", "Flag indicating if covariance is debiased"], [171, 3, 1, 0, "s", "Score covariance estimate"], [172, 3, 1, 0, "s2", "Estimated variance of residuals. Small-sample adjusted if debiased."]], "linearmodels.iv.covariance.HomoskedasticCovariance.__init__": [[167, 2, 2, 0, "debiased", "Flag indicating whether to use a small-sample adjustment"], [167, 2, 2, 0, "kappa", "Value of kappa in k-class estimator"], [167, 2, 2, 0, "params", "Estimated model parameters (nvar by 1)"], [167, 2, 2, 0, "x", "Model regressors (nobs by nvar)"], [167, 2, 2, 0, "y", "Series modeled (nobs by 1)"], [167, 2, 2, 0, "z", "Instruments used for endogenous regressors (nobs by ninstr)"]], "linearmodels.iv.covariance.KernelCovariance": [[174, 3, 1, 0, "config", ""], [175, 3, 1, 0, "cov", "Covariance of estimated parameters"], [176, 3, 1, 0, "debiased", "Flag indicating if covariance is debiased"], [177, 3, 1, 0, "s", "HAC score covariance estimate"], [178, 3, 1, 0, "s2", "Estimated variance of residuals. Small-sample adjusted if debiased."]], "linearmodels.iv.covariance.KernelCovariance.__init__": [[173, 2, 2, 0, "bandwidth", "Non-negative bandwidth to use with kernel."], [173, 2, 2, 0, "debiased", "Flag indicating whether to use a small-sample adjustment"], [173, 2, 2, 0, "kappa", "Value of kappa in k-class estimator"], [173, 2, 2, 0, "kernel", "Kernel name."], [173, 2, 2, 0, "params", "Estimated model parameters (nvar by 1)"], [173, 2, 2, 0, "x", "Model regressors (nobs by nvar)"], [173, 2, 2, 0, "y", "Series ,modeled (nobs by 1)"], [173, 2, 2, 0, "z", "Instruments used for endogenous regressors (nobs by ninstr)"]], "linearmodels.iv.covariance.kernel_optimal_bandwidth": [[179, 2, 2, 0, "kernel", "Name of kernel to use."], [179, 2, 2, 0, "x", "Array of data to use when computing optimal bandwidth"]], "linearmodels.iv.covariance.kernel_weight_bartlett": [[180, 2, 2, "linearmodels.iv.covariance.kernel_weight_bartlett", "args", "Kernel weights from a Bartlett kernel"], [180, 2, 2, 0, "bw", "Maximum lag to used in kernel"]], "linearmodels.iv.covariance.kernel_weight_parzen": [[181, 2, 2, "linearmodels.iv.covariance.kernel_weight_parzen", "args", "Kernel weights from a Parzen kernel"], [181, 2, 2, 0, "bw", "Maximum lag to used in kernel"]], "linearmodels.iv.covariance.kernel_weight_quadratic_spectral": [[182, 2, 2, 0, "bw", "Maximum lag to used in kernel"], [182, 2, 2, 0, "n", "Positive number of weight to return"]], "linearmodels.iv.data": [[183, 1, 1, 0, "IVData", "Type abstraction for use in univariate models."]], "linearmodels.iv.data.IVData": [[184, 3, 1, 0, "cols", "Column labels"], [185, 4, 1, 0, "drop", ""], [186, 3, 1, 0, "isnull", ""], [187, 3, 1, 0, "labels", "Dictionary containing row and column labels keyed by axis"], [188, 3, 1, 0, "ndarray", "ndarray view of data, always 2d"], [189, 3, 1, 0, "ndim", "Number of dimensions"], [190, 3, 1, 0, "pandas", "DataFrame view of data"], [191, 3, 1, 0, "rows", "Row labels (index)"], [192, 3, 1, 0, "shape", "Tuple containing shape"]], "linearmodels.iv.data.IVData.__init__": [[183, 2, 2, 0, "convert_dummies", "Flat indicating whether pandas categoricals or string input data should be converted to dummy variables"], [183, 2, 2, 0, "drop_first", "Flag indicating to drop first dummy category"], [183, 2, 2, 0, "nobs", "Number of observation, used when x is None."], [183, 2, 2, 0, "var_name", "Variable name to use when naming variables in NumPy arrays or xarray DataArrays"], [183, 2, 2, 0, "x", "Data to wrap and standardize."]], "linearmodels.iv.data.IVData.drop": [[185, 2, 2, "linearmodels.iv.data.IVData.drop", "locs", ""]], "linearmodels.iv.gmm": [[193, 1, 1, 0, "HeteroskedasticWeightMatrix", "Heteroskedasticity robust weight estimation"], [196, 1, 1, 0, "HomoskedasticWeightMatrix", "Homoskedastic (unadjusted) weight estimation"], [199, 1, 1, 0, "IVGMMCovariance", "Covariance estimation for GMM models"], [205, 1, 1, 0, "KernelWeightMatrix", "Heteroskedasticity, autocorrelation robust weight estimation"], [209, 1, 1, 0, "OneWayClusteredWeightMatrix", "Clustered (one-way) weight estimation"]], "linearmodels.iv.gmm.HeteroskedasticWeightMatrix": [[194, 3, 1, 0, "config", "Weight estimator configuration"], [195, 4, 1, 0, "weight_matrix", "Model regressors (exog and endog), (nobs by nvar)"]], "linearmodels.iv.gmm.HeteroskedasticWeightMatrix.__init__": [[193, 2, 2, 0, "center", "Flag indicating whether to center the moment conditions by subtracting the mean before computing the weight matrix."], [193, 2, 2, 0, "debiased", "Flag indicating whether to use small-sample adjustments"]], "linearmodels.iv.gmm.HeteroskedasticWeightMatrix.weight_matrix": [[195, 2, 2, 0, "eps", "Model errors (nobs by 1)"], [195, 2, 2, 0, "x", "Model regressors (exog and endog), (nobs by nvar)"], [195, 2, 2, 0, "z", "Model instruments (exog and instruments), (nobs by ninstr)"]], "linearmodels.iv.gmm.HomoskedasticWeightMatrix": [[197, 3, 1, 0, "config", "Weight estimator configuration"], [198, 4, 1, 0, "weight_matrix", "Model regressors (exog and endog), (nobs by nvar)"]], "linearmodels.iv.gmm.HomoskedasticWeightMatrix.__init__": [[196, 2, 2, 0, "center", "Flag indicating whether to center the moment conditions by subtracting the mean before computing the weight matrix."], [196, 2, 2, 0, "debiased", "Flag indicating whether to use small-sample adjustments"]], "linearmodels.iv.gmm.HomoskedasticWeightMatrix.weight_matrix": [[198, 2, 2, 0, "eps", "Model errors (nobs by 1)"], [198, 2, 2, 0, "x", "Model regressors (exog and endog), (nobs by nvar)"], [198, 2, 2, 0, "z", "Model instruments (exog and instruments), (nobs by ninstr)"]], "linearmodels.iv.gmm.IVGMMCovariance": [[200, 3, 1, 0, "config", ""], [201, 3, 1, 0, "cov", "Covariance of estimated parameters"], [202, 3, 1, 0, "debiased", "Flag indicating if covariance is debiased"], [203, 3, 1, 0, "s", "Score covariance estimate"], [204, 3, 1, 0, "s2", "Estimated variance of residuals. Small-sample adjusted if debiased."]], "linearmodels.iv.gmm.IVGMMCovariance.__init__": [[199, 2, 2, 0, "cov_config", "Optional keyword arguments that are specific to a particular cov_type"], [199, 2, 2, 0, "cov_type", "Covariance estimator to use  Valid choices are"], [199, 2, 2, 0, "debiased", "Flag indicating whether to debias the covariance estimator"], [199, 2, 2, 0, "params", "Estimated model parameters (nvar by 1)"], [199, 2, 2, 0, "w", "Weighting matrix used in GMM estimation"], [199, 2, 2, 0, "x", "Model regressors (nobs by nvar)"], [199, 2, 2, 0, "y", "Series ,modeled (nobs by 1)"], [199, 2, 2, 0, "z", "Instruments used for endogenous regressors (nobs by ninstr)"]], "linearmodels.iv.gmm.KernelWeightMatrix": [[206, 3, 1, 0, "bandwidth", "Actual bandwidth used in estimating the weight matrix"], [207, 3, 1, 0, "config", "Weight estimator configuration"], [208, 4, 1, 0, "weight_matrix", "Model regressors (exog and endog), (nobs by nvar)"]], "linearmodels.iv.gmm.KernelWeightMatrix.__init__": [[205, 2, 2, 0, "bandwidth", "Bandwidth to use when computing kernel weights"], [205, 2, 2, 0, "center", "Flag indicating whether to center the moment conditions by subtracting the mean before computing the weight matrix."], [205, 2, 2, 0, "debiased", "Flag indicating whether to use small-sample adjustments"], [205, 2, 2, 0, "kernel", "Name of kernel weighting function to use"], [205, 2, 2, 0, "optimal_bw", "Flag indicating whether to estimate the optimal bandwidth, when bandwidth is None."]], "linearmodels.iv.gmm.KernelWeightMatrix.weight_matrix": [[208, 2, 2, 0, "eps", "Model errors (nobs by 1)"], [208, 2, 2, 0, "x", "Model regressors (exog and endog), (nobs by nvar)"], [208, 2, 2, 0, "z", "Model instruments (exog and instruments), (nobs by ninstr)"]], "linearmodels.iv.gmm.OneWayClusteredWeightMatrix": [[210, 3, 1, 0, "config", "Weight estimator configuration"], [211, 4, 1, 0, "weight_matrix", "Model regressors (exog and endog), (nobs by nvar)"]], "linearmodels.iv.gmm.OneWayClusteredWeightMatrix.__init__": [[209, 2, 2, 0, "center", "Flag indicating whether to center the moment conditions by subtracting the mean before computing the weight matrix."], [209, 2, 2, 0, "clusters", "Array indicating cluster membership"], [209, 2, 2, 0, "debiased", "Flag indicating whether to use small-sample adjustments"]], "linearmodels.iv.gmm.OneWayClusteredWeightMatrix.weight_matrix": [[211, 2, 2, 0, "eps", "Model errors (nobs by 1)"], [211, 2, 2, 0, "x", "Model regressors (exog and endog), (nobs by nvar)"], [211, 2, 2, 0, "z", "Model instruments (exog and instruments), (nobs by ninstr)"]], "linearmodels.iv.model": [[212, 1, 1, 0, "IV2SLS", "Estimation of IV models using two-stage least squares"], [223, 1, 1, 0, "IVGMM", "Estimation of IV models using the generalized method of moments (GMM)"], [234, 1, 1, 0, "IVGMMCUE", "Estimation of IV models using continuously updating GMM"], [246, 1, 1, 0, "IVLIML", "Limited information ML and k-class estimation of IV models"], [257, 1, 1, 0, "_OLS", "Computes OLS estimates when required"]], "linearmodels.iv.model.IV2SLS": [[213, 4, 1, 0, "estimate_parameters", "Parameter estimation without error checking"], [214, 4, 1, 0, "fit", "Estimate model parameters"], [215, 3, 1, 0, "formula", "Formula used to create the model"], [216, 4, 1, 0, "from_formula", "Formula modified for the IV syntax described in the notes section"], [217, 3, 1, 0, "has_constant", "Flag indicating the model includes a constant or equivalent"], [218, 3, 1, 0, "isnull", "Locations of observations with missing values"], [219, 3, 1, 0, "notnull", "Locations of observations included in estimation"], [220, 4, 1, 0, "predict", "Predict values for additional data"], [221, 4, 1, 0, "resids", "Compute model residuals"], [222, 4, 1, 0, "wresids", "Compute weighted model residuals"]], "linearmodels.iv.model.IV2SLS.__init__": [[212, 2, 2, 0, "dependent", "Endogenous variables (nobs by 1)"], [212, 2, 2, 0, "endog", "Endogenous regressors (nobs by nendog)"], [212, 2, 2, 0, "exog", "Exogenous regressors  (nobs by nexog)"], [212, 2, 2, 0, "instruments", "Instrumental variables (nobs by ninstr)"], [212, 2, 2, 0, "weights", "Observation weights used in estimation"]], "linearmodels.iv.model.IV2SLS.estimate_parameters": [[213, 2, 2, 0, "kappa", "Parameter value for k-class estimator"], [213, 2, 2, 0, "x", "Regressor matrix (nobs by nvar)"], [213, 2, 2, 0, "y", "Regressand matrix (nobs by 1)"], [213, 2, 2, 0, "z", "Instrument matrix (nobs by ninstr)"]], "linearmodels.iv.model.IV2SLS.fit": [[214, 2, 2, 0, "cov_config", "Additional parameters to pass to covariance estimator."], [214, 2, 2, 0, "cov_type", "Name of covariance estimator to use."], [214, 2, 2, 0, "debiased", "Flag indicating whether to debiased the covariance estimator using a degree of freedom adjustment."]], "linearmodels.iv.model.IV2SLS.from_formula": [[216, 2, 2, 0, "data", "DataFrame containing the variables used in the formula"], [216, 2, 2, 0, "formula", "Formula modified for the IV syntax described in the notes section"], [216, 2, 2, 0, "weights", "Observation weights used in estimation"]], "linearmodels.iv.model.IV2SLS.predict": [[220, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [220, 2, 2, 0, "endog", "Endogenous regressors (nobs by nendog)"], [220, 2, 2, 0, "eval_env", "Depth of use when evaluating formulas."], [220, 2, 2, 0, "exog", "Exogenous regressors (nobs by nexog)"], [220, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model.IV2SLS.resids": [[221, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model.IV2SLS.wresids": [[222, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model.IVGMM": [[224, 4, 1, 0, "estimate_parameters", "Regressor matrix (nobs by nvar)"], [225, 4, 1, 0, "fit", "Estimate model parameters"], [226, 3, 1, 0, "formula", "Formula used to create the model"], [227, 4, 1, 0, "from_formula", "Formula modified for the IV syntax described in the notes section"], [228, 3, 1, 0, "has_constant", "Flag indicating the model includes a constant or equivalent"], [229, 3, 1, 0, "isnull", "Locations of observations with missing values"], [230, 3, 1, 0, "notnull", "Locations of observations included in estimation"], [231, 4, 1, 0, "predict", "Predict values for additional data"], [232, 4, 1, 0, "resids", "Compute model residuals"], [233, 4, 1, 0, "wresids", "Compute weighted model residuals"]], "linearmodels.iv.model.IVGMM.__init__": [[223, 2, 2, 0, "dependent", "Endogenous variables (nobs by 1)"], [223, 2, 2, 0, "endog", "Endogenous regressors (nobs by nendog)"], [223, 2, 2, 0, "exog", "Exogenous regressors  (nobs by nexog)"], [223, 2, 2, 0, "instruments", "Instrumental variables (nobs by ninstr)"], [223, 2, 2, 0, "weight_config", "Additional keyword arguments to pass to the moment condition weight function"], [223, 2, 2, 0, "weight_type", "Name of moment condition weight function to use in the GMM estimation"], [223, 2, 2, 0, "weights", "Observation weights used in estimation"]], "linearmodels.iv.model.IVGMM.estimate_parameters": [[224, 2, 2, 0, "w", "GMM weight matrix (ninstr by ninstr)"], [224, 2, 2, 0, "x", "Regressor matrix (nobs by nvar)"], [224, 2, 2, 0, "y", "Regressand matrix (nobs by 1)"], [224, 2, 2, 0, "z", "Instrument matrix (nobs by ninstr)"]], "linearmodels.iv.model.IVGMM.fit": [[225, 2, 2, 0, "cov_config", "Additional parameters to pass to covariance estimator."], [225, 2, 2, 0, "cov_type", "Name of covariance estimator to use."], [225, 2, 2, 0, "debiased", "Flag indicating whether to debiased the covariance estimator using a degree of freedom adjustment."], [225, 2, 2, 0, "initial_weight", "Initial weighting matrix to use in the first step."], [225, 2, 2, 0, "iter_limit", "Maximum number of iterations."], [225, 2, 2, 0, "tol", "Convergence criteria."]], "linearmodels.iv.model.IVGMM.from_formula": [[227, 2, 2, 0, "data", "DataFrame containing the variables used in the formula"], [227, 2, 2, 0, "formula", "Formula modified for the IV syntax described in the notes section"], [227, 2, 2, 0, "weight_config", "Additional keyword arguments to pass to the moment condition weight function"], [227, 2, 2, 0, "weight_type", "Name of moment condition weight function to use in the GMM estimation"], [227, 2, 2, 0, "weights", "Observation weights used in estimation"]], "linearmodels.iv.model.IVGMM.predict": [[231, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [231, 2, 2, 0, "endog", "Endogenous regressors (nobs by nendog)"], [231, 2, 2, 0, "eval_env", "Depth of use when evaluating formulas."], [231, 2, 2, 0, "exog", "Exogenous regressors (nobs by nexog)"], [231, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model.IVGMM.resids": [[232, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model.IVGMM.wresids": [[233, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model.IVGMMCUE": [[235, 4, 1, 0, "estimate_parameters", "Starting values for the optimization"], [236, 4, 1, 0, "fit", "Estimate model parameters"], [237, 3, 1, 0, "formula", "Formula used to create the model"], [238, 4, 1, 0, "from_formula", "Formula modified for the IV syntax described in the notes section"], [239, 3, 1, 0, "has_constant", "Flag indicating the model includes a constant or equivalent"], [240, 3, 1, 0, "isnull", "Locations of observations with missing values"], [241, 4, 1, 0, "j", "Optimization target"], [242, 3, 1, 0, "notnull", "Locations of observations included in estimation"], [243, 4, 1, 0, "predict", "Predict values for additional data"], [244, 4, 1, 0, "resids", "Compute model residuals"], [245, 4, 1, 0, "wresids", "Compute weighted model residuals"]], "linearmodels.iv.model.IVGMMCUE.__init__": [[234, 2, 2, 0, "dependent", "Endogenous variables (nobs by 1)"], [234, 2, 2, 0, "endog", "Endogenous regressors (nobs by nendog)"], [234, 2, 2, 0, "exog", "Exogenous regressors  (nobs by nexog)"], [234, 2, 2, 0, "instruments", "Instrumental variables (nobs by ninstr)"], [234, 2, 2, 0, "weight_config", "Additional keyword arguments to pass to the moment condition weight function"], [234, 2, 2, 0, "weight_type", "Name of moment condition weight function to use in the GMM estimation"], [234, 2, 2, 0, "weights", "Observation weights used in estimation"]], "linearmodels.iv.model.IVGMMCUE.estimate_parameters": [[235, 2, 2, 0, "display", "Number of iterations between displaying."], [235, 2, 2, 0, "opt_options", "Dictionary containing additional keyword arguments to pass to scipy.optimize.minimize."], [235, 2, 2, 0, "starting", "Starting values for the optimization"], [235, 2, 2, 0, "x", "Regressor matrix (nobs by nvar)"], [235, 2, 2, 0, "y", "Regressand matrix (nobs by 1)"], [235, 2, 2, 0, "z", "Instrument matrix (nobs by ninstr)"]], "linearmodels.iv.model.IVGMMCUE.fit": [[236, 2, 2, 0, "cov_config", "Additional parameters to pass to covariance estimator."], [236, 2, 2, 0, "cov_type", "Name of covariance estimator to use"], [236, 2, 2, 0, "debiased", "Flag indicating whether to debiased the covariance estimator using a degree of freedom adjustment."], [236, 2, 2, 0, "display", "Flag indicating whether to display optimization output"], [236, 2, 2, 0, "opt_options", "Additional options to pass to scipy.optimize.minimize when optimizing the objective function."], [236, 2, 2, 0, "starting", "Starting values to use in optimization."]], "linearmodels.iv.model.IVGMMCUE.from_formula": [[238, 2, 2, 0, "data", "DataFrame containing the variables used in the formula"], [238, 2, 2, 0, "formula", "Formula modified for the IV syntax described in the notes section"], [238, 2, 2, 0, "weight_config", "Additional keyword arguments to pass to the moment condition weight function"], [238, 2, 2, 0, "weight_type", "Name of moment condition weight function to use in the GMM estimation"], [238, 2, 2, 0, "weights", "Observation weights used in estimation"]], "linearmodels.iv.model.IVGMMCUE.j": [[241, 2, 2, 0, "params", "Parameter vector (nvar)"], [241, 2, 2, 0, "x", "Regressor matrix (nobs by nvar)"], [241, 2, 2, 0, "y", "Regressand matrix (nobs by 1)"], [241, 2, 2, 0, "z", "Instrument matrix (nobs by ninstr)"]], "linearmodels.iv.model.IVGMMCUE.predict": [[243, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [243, 2, 2, 0, "endog", "Endogenous regressors (nobs by nendog)"], [243, 2, 2, 0, "eval_env", "Depth of use when evaluating formulas."], [243, 2, 2, 0, "exog", "Exogenous regressors (nobs by nexog)"], [243, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model.IVGMMCUE.resids": [[244, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model.IVGMMCUE.wresids": [[245, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model.IVLIML": [[247, 4, 1, 0, "estimate_parameters", "Parameter estimation without error checking"], [248, 4, 1, 0, "fit", "Estimate model parameters"], [249, 3, 1, 0, "formula", "Formula used to create the model"], [250, 4, 1, 0, "from_formula", "Formula modified for the IV syntax described in the notes section"], [251, 3, 1, 0, "has_constant", "Flag indicating the model includes a constant or equivalent"], [252, 3, 1, 0, "isnull", "Locations of observations with missing values"], [253, 3, 1, 0, "notnull", "Locations of observations included in estimation"], [254, 4, 1, 0, "predict", "Predict values for additional data"], [255, 4, 1, 0, "resids", "Compute model residuals"], [256, 4, 1, 0, "wresids", "Compute weighted model residuals"]], "linearmodels.iv.model.IVLIML.__init__": [[246, 2, 2, 0, "dependent", "Endogenous variables (nobs by 1)"], [246, 2, 2, 0, "endog", "Endogenous regressors (nobs by nendog)"], [246, 2, 2, 0, "exog", "Exogenous regressors  (nobs by nexog)"], [246, 2, 2, 0, "fuller", "Fuller's alpha to modify LIML estimator."], [246, 2, 2, 0, "instruments", "Instrumental variables (nobs by ninstr)"], [246, 2, 2, 0, "kappa", "Parameter value for k-class estimation."], [246, 2, 2, 0, "weights", "Observation weights used in estimation"]], "linearmodels.iv.model.IVLIML.estimate_parameters": [[247, 2, 2, 0, "kappa", "Parameter value for k-class estimator"], [247, 2, 2, 0, "x", "Regressor matrix (nobs by nvar)"], [247, 2, 2, 0, "y", "Regressand matrix (nobs by 1)"], [247, 2, 2, 0, "z", "Instrument matrix (nobs by ninstr)"]], "linearmodels.iv.model.IVLIML.fit": [[248, 2, 2, 0, "cov_config", "Additional parameters to pass to covariance estimator."], [248, 2, 2, 0, "cov_type", "Name of covariance estimator to use."], [248, 2, 2, 0, "debiased", "Flag indicating whether to debiased the covariance estimator using a degree of freedom adjustment."]], "linearmodels.iv.model.IVLIML.from_formula": [[250, 2, 2, 0, "data", "DataFrame containing the variables used in the formula"], [250, 2, 2, 0, "formula", "Formula modified for the IV syntax described in the notes section"], [250, 2, 2, 0, "fuller", "Fuller's alpha to modify LIML estimator."], [250, 2, 2, 0, "kappa", "Parameter value for k-class estimation."], [250, 2, 2, 0, "weights", "Observation weights used in estimation"]], "linearmodels.iv.model.IVLIML.predict": [[254, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [254, 2, 2, 0, "endog", "Endogenous regressors (nobs by nendog)"], [254, 2, 2, 0, "eval_env", "Depth of use when evaluating formulas."], [254, 2, 2, 0, "exog", "Exogenous regressors (nobs by nexog)"], [254, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model.IVLIML.resids": [[255, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model.IVLIML.wresids": [[256, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model._OLS": [[258, 4, 1, 0, "estimate_parameters", "Parameter estimation without error checking"], [259, 4, 1, 0, "fit", "Estimate model parameters"], [260, 3, 1, 0, "formula", "Formula used to create the model"], [261, 4, 1, 0, "from_formula", "Formula modified for the IV syntax described in the notes section"], [262, 3, 1, 0, "has_constant", "Flag indicating the model includes a constant or equivalent"], [263, 3, 1, 0, "isnull", "Locations of observations with missing values"], [264, 3, 1, 0, "notnull", "Locations of observations included in estimation"], [265, 4, 1, 0, "predict", "Predict values for additional data"], [266, 4, 1, 0, "resids", "Compute model residuals"], [267, 4, 1, 0, "wresids", "Compute weighted model residuals"]], "linearmodels.iv.model._OLS.__init__": [[257, 2, 2, 0, "dependent", "Endogenous variables (nobs by 1)"], [257, 2, 2, 0, "exog", "Exogenous regressors  (nobs by nexog)"], [257, 2, 2, 0, "weights", "Observation weights used in estimation"]], "linearmodels.iv.model._OLS.estimate_parameters": [[258, 2, 2, 0, "kappa", "Parameter value for k-class estimator"], [258, 2, 2, 0, "x", "Regressor matrix (nobs by nvar)"], [258, 2, 2, 0, "y", "Regressand matrix (nobs by 1)"], [258, 2, 2, 0, "z", "Instrument matrix (nobs by ninstr)"]], "linearmodels.iv.model._OLS.fit": [[259, 2, 2, 0, "cov_config", "Additional parameters to pass to covariance estimator."], [259, 2, 2, 0, "cov_type", "Name of covariance estimator to use."], [259, 2, 2, 0, "debiased", "Flag indicating whether to debiased the covariance estimator using a degree of freedom adjustment."]], "linearmodels.iv.model._OLS.from_formula": [[261, 2, 2, 0, "data", "DataFrame containing the variables used in the formula"], [261, 2, 2, 0, "formula", "Formula modified for the IV syntax described in the notes section"], [261, 2, 2, 0, "fuller", "Fuller's alpha to modify LIML estimator."], [261, 2, 2, 0, "kappa", "Parameter value for k-class estimation."], [261, 2, 2, 0, "weights", "Observation weights used in estimation"]], "linearmodels.iv.model._OLS.predict": [[265, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [265, 2, 2, 0, "endog", "Endogenous regressors (nobs by nendog)"], [265, 2, 2, 0, "eval_env", "Depth of use when evaluating formulas."], [265, 2, 2, 0, "exog", "Exogenous regressors (nobs by nexog)"], [265, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model._OLS.resids": [[266, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model._OLS.wresids": [[267, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.results": [[268, 1, 1, 0, "FirstStageResults", "First stage estimation results and diagnostics"], [272, 1, 1, 0, "IVGMMResults", "Results from GMM estimation of IV models"], [310, 1, 1, 0, "IVModelComparison", "Comparison of multiple models"], [322, 1, 1, 0, "IVResults", "Results from IV estimation"], [363, 1, 1, 0, "OLSResults", "Results from OLS model estimation"], [394, 5, 1, 0, "compare", "Compare the results of multiple models"]], "linearmodels.iv.results.FirstStageResults": [[269, 3, 1, 0, "diagnostics", "Post estimation diagnostics of first-stage fit"], [270, 3, 1, 0, "individual", "Individual model results from first-stage regressions"], [271, 3, 1, 0, "summary", "Model estimation summary."]], "linearmodels.iv.results.FirstStageResults.__init__": [[268, 2, 2, "linearmodels.iv.results.FirstStageResults", "cov_config", "First stage estimation results and diagnostics"], [268, 2, 2, "linearmodels.iv.results.FirstStageResults", "cov_type", "First stage estimation results and diagnostics"], [268, 2, 2, "linearmodels.iv.results.FirstStageResults", "dep", "First stage estimation results and diagnostics"], [268, 2, 2, "linearmodels.iv.results.FirstStageResults", "endog", "First stage estimation results and diagnostics"], [268, 2, 2, "linearmodels.iv.results.FirstStageResults", "exog", "First stage estimation results and diagnostics"], [268, 2, 2, "linearmodels.iv.results.FirstStageResults", "instr", "First stage estimation results and diagnostics"], [268, 2, 2, "linearmodels.iv.results.FirstStageResults", "weights", "First stage estimation results and diagnostics"]], "linearmodels.iv.results.IVGMMResults": [[273, 4, 1, 0, "c_stat", "C-test of endogeneity"], [274, 4, 1, 0, "conf_int", "Confidence interval construction"], [275, 3, 1, 0, "cov", "Estimated covariance of parameters"], [276, 3, 1, 0, "cov_config", "Parameter values from covariance estimator"], [277, 3, 1, 0, "cov_estimator", "Type of covariance estimator used to compute covariance"], [278, 3, 1, 0, "cov_type", "Covariance estimator used"], [279, 3, 1, 0, "debiased", "Flag indicating whether covariance uses a small-sample adjustment"], [280, 3, 1, 0, "df_model", "Model degree of freedom"], [281, 3, 1, 0, "df_resid", "Residual degree of freedom"], [282, 3, 1, 0, "f_statistic", "Model F-statistic"], [283, 3, 1, 0, "first_stage", "First stage regression results"], [284, 3, 1, 0, "fitted_values", "Fitted values"], [285, 3, 1, 0, "has_constant", "Flag indicating the model includes a constant or equivalent"], [286, 3, 1, 0, "idiosyncratic", "Idiosyncratic error"], [287, 3, 1, 0, "iterations", "Iterations used in GMM estimation"], [288, 3, 1, 0, "j_stat", "J-test of overidentifying restrictions"], [289, 3, 1, 0, "kappa", "k-class estimator value"], [290, 3, 1, 0, "method", "Method used to estimate model parameters"], [291, 3, 1, 0, "model_ss", "Residual sum of squares"], [292, 3, 1, 0, "nobs", "Number of observations"], [293, 3, 1, 0, "params", "Estimated parameters"], [294, 4, 1, 0, "predict", "In- and out-of-sample predictions"], [295, 3, 1, 0, "pvalues", "Parameter p-vals. Uses t(df_resid) if debiased is True, else normal"], [296, 3, 1, 0, "resid_ss", "Residual sum of squares"], [297, 3, 1, 0, "resids", "Estimated residuals"], [298, 3, 1, 0, "rsquared", "Coefficient of determination (R**2)"], [299, 3, 1, 0, "rsquared_adj", "Sample-size adjusted coefficient of determination (R**2)"], [300, 3, 1, 0, "s2", "Residual variance estimator"], [301, 3, 1, 0, "std_errors", "Estimated parameter standard errors"], [302, 3, 1, 0, "summary", "Model estimation summary."], [303, 3, 1, 0, "total_ss", "Total sum of squares"], [304, 3, 1, 0, "tstats", "Parameter t-statistics"], [305, 4, 1, 0, "wald_test", "Test linear equality constraints using a Wald test"], [306, 3, 1, 0, "weight_config", "Weighting matrix configuration used in estimation"], [307, 3, 1, 0, "weight_matrix", "Weight matrix used in the final-step GMM estimation"], [308, 3, 1, 0, "weight_type", "Weighting matrix method used in estimation"], [309, 3, 1, 0, "wresids", "Weighted estimated residuals"]], "linearmodels.iv.results.IVGMMResults.__init__": [[272, 2, 2, 0, "model", "The model used to estimate parameters."], [272, 2, 2, 0, "results", "A dictionary of results from the model estimation."]], "linearmodels.iv.results.IVGMMResults.c_stat": [[273, 2, 2, 0, "variables", "List of variables to test for exogeneity."]], "linearmodels.iv.results.IVGMMResults.conf_int": [[274, 2, 2, 0, "level", "Confidence level for interval"]], "linearmodels.iv.results.IVGMMResults.predict": [[294, 2, 2, 0, "data", "DataFrame to use for out-of-sample predictions when model was constructed using a formula."], [294, 2, 2, 0, "endog", "Endogenous values to use in out-of-sample prediction (nobs by nendog)"], [294, 2, 2, 0, "exog", "Exogenous values to use in out-of-sample prediction (nobs by nexog)"], [294, 2, 2, 0, "fitted", "Flag indicating whether to include the fitted values"], [294, 2, 2, 0, "idiosyncratic", "Flag indicating whether to include the estimated idiosyncratic shock"], [294, 2, 2, 0, "missing", "Flag indicating to adjust for dropped observations."]], "linearmodels.iv.results.IVGMMResults.wald_test": [[305, 2, 2, 0, "formula", "formulaic linear constraints."], [305, 2, 2, 0, "restriction", "q by nvar array containing linear weights to apply to parameters when forming the restrictions."], [305, 2, 2, 0, "value", "q element array containing the restricted values."]], "linearmodels.iv.results.IVModelComparison": [[311, 3, 1, 0, "cov_estimator", "Covariance estimator descriptions"], [312, 3, 1, 0, "estimator_method", "Estimation methods"], [313, 3, 1, 0, "f_statistic", "F-statistics and P-values"], [314, 3, 1, 0, "nobs", "Parameters for all models"], [315, 3, 1, 0, "params", "Parameters for all models"], [316, 3, 1, 0, "pvalues", "Parameter p-vals for all models"], [317, 3, 1, 0, "rsquared", "Coefficients of determination (R**2)"], [318, 3, 1, 0, "rsquared_adj", "Sample-size adjusted coefficients of determination (R**2)"], [319, 3, 1, 0, "std_errors", "Parameter standard errors for all models"], [320, 3, 1, 0, "summary", "Model estimation summary."], [321, 3, 1, 0, "tstats", "Parameter t-stats for all models"]], "linearmodels.iv.results.IVModelComparison.__init__": [[310, 2, 2, 0, "precision", "Estimator precision estimator to include in the comparison output. Default is \"tstats\"."], [310, 2, 2, 0, "results", "Set of results to compare."], [310, 2, 2, 0, "stars", "Add stars based on the p-value of the coefficient where 1, 2 and 3-stars correspond to p-values of 10%, 5% and 1%, respectively."]], "linearmodels.iv.results.IVResults": [[323, 3, 1, 0, "anderson_rubin", "Anderson-Rubin test of overidentifying restrictions"], [324, 3, 1, 0, "basmann", "Basmann's test of overidentifying restrictions"], [325, 3, 1, 0, "basmann_f", "Basmann's F test of overidentifying restrictions"], [326, 4, 1, 0, "conf_int", "Confidence interval construction"], [327, 3, 1, 0, "cov", "Estimated covariance of parameters"], [328, 3, 1, 0, "cov_config", "Parameter values from covariance estimator"], [329, 3, 1, 0, "cov_estimator", "Type of covariance estimator used to compute covariance"], [330, 3, 1, 0, "cov_type", "Covariance estimator used"], [331, 3, 1, 0, "debiased", "Flag indicating whether covariance uses a small-sample adjustment"], [332, 3, 1, 0, "df_model", "Model degree of freedom"], [333, 3, 1, 0, "df_resid", "Residual degree of freedom"], [334, 4, 1, 0, "durbin", "Durbin's test of exogeneity"], [335, 3, 1, 0, "f_statistic", "Model F-statistic"], [336, 3, 1, 0, "first_stage", "First stage regression results"], [337, 3, 1, 0, "fitted_values", "Fitted values"], [338, 3, 1, 0, "has_constant", "Flag indicating the model includes a constant or equivalent"], [339, 3, 1, 0, "idiosyncratic", "Idiosyncratic error"], [340, 3, 1, 0, "kappa", "k-class estimator value"], [341, 3, 1, 0, "method", "Method used to estimate model parameters"], [342, 3, 1, 0, "model_ss", "Residual sum of squares"], [343, 3, 1, 0, "nobs", "Number of observations"], [344, 3, 1, 0, "params", "Estimated parameters"], [345, 4, 1, 0, "predict", "In- and out-of-sample predictions"], [346, 3, 1, 0, "pvalues", "Parameter p-vals. Uses t(df_resid) if debiased is True, else normal"], [347, 3, 1, 0, "resid_ss", "Residual sum of squares"], [348, 3, 1, 0, "resids", "Estimated residuals"], [349, 3, 1, 0, "rsquared", "Coefficient of determination (R**2)"], [350, 3, 1, 0, "rsquared_adj", "Sample-size adjusted coefficient of determination (R**2)"], [351, 3, 1, 0, "s2", "Residual variance estimator"], [352, 3, 1, 0, "sargan", "Sargan test of overidentifying restrictions"], [353, 3, 1, 0, "std_errors", "Estimated parameter standard errors"], [354, 3, 1, 0, "summary", "Model estimation summary."], [355, 3, 1, 0, "total_ss", "Total sum of squares"], [356, 3, 1, 0, "tstats", "Parameter t-statistics"], [357, 4, 1, 0, "wald_test", "Test linear equality constraints using a Wald test"], [358, 3, 1, 0, "wooldridge_overid", "Wooldridge's score test of overidentification"], [359, 3, 1, 0, "wooldridge_regression", "Wooldridge's regression test of exogeneity"], [360, 3, 1, 0, "wooldridge_score", "Wooldridge's score test of exogeneity"], [361, 3, 1, 0, "wresids", "Weighted estimated residuals"], [362, 4, 1, 0, "wu_hausman", "Wu-Hausman test of exogeneity"]], "linearmodels.iv.results.IVResults.__init__": [[322, 2, 2, 0, "model", "The model used to estimate parameters."], [322, 2, 2, 0, "results", "A dictionary of results from the model estimation."]], "linearmodels.iv.results.IVResults.conf_int": [[326, 2, 2, 0, "level", "Confidence level for interval"]], "linearmodels.iv.results.IVResults.durbin": [[334, 2, 2, 0, "variables", "List of variables to test for exogeneity."]], "linearmodels.iv.results.IVResults.predict": [[345, 2, 2, 0, "data", "DataFrame to use for out-of-sample predictions when model was constructed using a formula."], [345, 2, 2, 0, "endog", "Endogenous values to use in out-of-sample prediction (nobs by nendog)"], [345, 2, 2, 0, "exog", "Exogenous values to use in out-of-sample prediction (nobs by nexog)"], [345, 2, 2, 0, "fitted", "Flag indicating whether to include the fitted values"], [345, 2, 2, 0, "idiosyncratic", "Flag indicating whether to include the estimated idiosyncratic shock"], [345, 2, 2, 0, "missing", "Flag indicating to adjust for dropped observations."]], "linearmodels.iv.results.IVResults.wald_test": [[357, 2, 2, 0, "formula", "formulaic linear constraints."], [357, 2, 2, 0, "restriction", "q by nvar array containing linear weights to apply to parameters when forming the restrictions."], [357, 2, 2, 0, "value", "q element array containing the restricted values."]], "linearmodels.iv.results.IVResults.wu_hausman": [[362, 2, 2, 0, "variables", "List of variables to test for exogeneity."]], "linearmodels.iv.results.OLSResults": [[364, 4, 1, 0, "conf_int", "Confidence interval construction"], [365, 3, 1, 0, "cov", "Estimated covariance of parameters"], [366, 3, 1, 0, "cov_config", "Parameter values from covariance estimator"], [367, 3, 1, 0, "cov_estimator", "Type of covariance estimator used to compute covariance"], [368, 3, 1, 0, "cov_type", "Covariance estimator used"], [369, 3, 1, 0, "debiased", "Flag indicating whether covariance uses a small-sample adjustment"], [370, 3, 1, 0, "df_model", "Model degree of freedom"], [371, 3, 1, 0, "df_resid", "Residual degree of freedom"], [372, 3, 1, 0, "f_statistic", "Model F-statistic"], [373, 3, 1, 0, "fitted_values", "Fitted values"], [374, 3, 1, 0, "has_constant", "Flag indicating the model includes a constant or equivalent"], [375, 3, 1, 0, "idiosyncratic", "Idiosyncratic error"], [376, 3, 1, 0, "kappa", "k-class estimator value"], [377, 3, 1, 0, "method", "Method used to estimate model parameters"], [378, 3, 1, 0, "model_ss", "Residual sum of squares"], [379, 3, 1, 0, "nobs", "Number of observations"], [380, 3, 1, 0, "params", "Estimated parameters"], [381, 4, 1, 0, "predict", "In- and out-of-sample predictions"], [382, 3, 1, 0, "pvalues", "Parameter p-vals. Uses t(df_resid) if debiased is True, else normal"], [383, 3, 1, 0, "resid_ss", "Residual sum of squares"], [384, 3, 1, 0, "resids", "Estimated residuals"], [385, 3, 1, 0, "rsquared", "Coefficient of determination (R**2)"], [386, 3, 1, 0, "rsquared_adj", "Sample-size adjusted coefficient of determination (R**2)"], [387, 3, 1, 0, "s2", "Residual variance estimator"], [388, 3, 1, 0, "std_errors", "Estimated parameter standard errors"], [389, 3, 1, 0, "summary", "Model estimation summary."], [390, 3, 1, 0, "total_ss", "Total sum of squares"], [391, 3, 1, 0, "tstats", "Parameter t-statistics"], [392, 4, 1, 0, "wald_test", "Test linear equality constraints using a Wald test"], [393, 3, 1, 0, "wresids", "Weighted estimated residuals"]], "linearmodels.iv.results.OLSResults.__init__": [[363, 2, 2, 0, "model", "The model used to estimate parameters."], [363, 2, 2, 0, "results", "A dictionary of results from the model estimation."]], "linearmodels.iv.results.OLSResults.conf_int": [[364, 2, 2, 0, "level", "Confidence level for interval"]], "linearmodels.iv.results.OLSResults.predict": [[381, 2, 2, 0, "data", "DataFrame to use for out-of-sample predictions when model was constructed using a formula."], [381, 2, 2, 0, "endog", "Endogenous values to use in out-of-sample prediction (nobs by nendog)"], [381, 2, 2, 0, "exog", "Exogenous values to use in out-of-sample prediction (nobs by nexog)"], [381, 2, 2, 0, "fitted", "Flag indicating whether to include the fitted values"], [381, 2, 2, 0, "idiosyncratic", "Flag indicating whether to include the estimated idiosyncratic shock"], [381, 2, 2, 0, "missing", "Flag indicating to adjust for dropped observations."]], "linearmodels.iv.results.OLSResults.wald_test": [[392, 2, 2, 0, "formula", "formulaic linear constraints."], [392, 2, 2, 0, "restriction", "q by nvar array containing linear weights to apply to parameters when forming the restrictions."], [392, 2, 2, 0, "value", "q element array containing the restricted values."]], "linearmodels.iv.results.compare": [[394, 2, 2, 0, "precision", "Estimator precision estimator to include in the comparison output. Default is \"tstats\"."], [394, 2, 2, 0, "results", "Set of results to compare."], [394, 2, 2, 0, "stars", "Add stars based on the p-value of the coefficient where 1, 2 and 3-stars correspond to p-values of 10%, 5% and 1%, respectively."]], "linearmodels.panel": [[712, 0, 0, 1, "covariance", ""], [712, 0, 0, 1, "data", ""], [712, 0, 0, 1, "model", ""], [712, 0, 0, 1, "results", ""], [712, 0, 0, 1, "utility", ""]], "linearmodels.panel.covariance": [[405, 1, 1, 0, "ACCovariance", "Autocorrelation robust covariance estimation"], [413, 1, 1, 0, "ClusteredCovariance", "One-way (Rogers) or two-way clustered covariance estimation"], [421, 1, 1, 0, "DriscollKraay", "Driscoll-Kraay heteroskedasticity-autocorrelation robust covariance estimation"], [429, 1, 1, 0, "FamaMacBethCovariance", "HAC estimator for Fama-MacBeth estimator"], [439, 1, 1, 0, "HeteroskedasticCovariance", "Covariance estimation using White estimator"], [447, 1, 1, 0, "HomoskedasticCovariance", "Homoskedastic covariance estimation"]], "linearmodels.panel.covariance.ACCovariance": [[406, 6, 1, 0, "ALLOWED_KWARGS", ""], [407, 6, 1, 0, "DEFAULT_KERNEL", ""], [408, 3, 1, 0, "cov", "Estimated covariance"], [409, 4, 1, 0, "deferred_cov", "Covariance calculation deferred until executed"], [410, 3, 1, 0, "eps", "Model residuals"], [411, 3, 1, 0, "name", "Covariance estimator name"], [412, 3, 1, 0, "s2", "Error variance"]], "linearmodels.panel.covariance.ACCovariance.__init__": [[405, 2, 2, 0, "bandwidth", "Non-negative integer to use as bandwidth."], [405, 2, 2, 0, "debiased", "Flag indicating whether to debias the estimator"], [405, 2, 2, 0, "entity_ids", "(entity x time) by 1 stacked array of entity ids"], [405, 2, 2, 0, "extra_df", "Additional degrees of freedom consumed by models beyond the number of columns in x, e.g., fixed effects."], [405, 2, 2, 0, "kernel", "Name of one of the supported kernels."], [405, 2, 2, 0, "params", "variables by 1 array of estimated model parameters"], [405, 2, 2, 0, "time_ids", "(entity x time) by 1 stacked array of time ids"], [405, 2, 2, 0, "x", "(entity x time) by variables stacked array of exogenous"], [405, 2, 2, 0, "y", "(entity x time) by 1 stacked array of dependent"]], "linearmodels.panel.covariance.ClusteredCovariance": [[414, 6, 1, 0, "ALLOWED_KWARGS", ""], [415, 6, 1, 0, "DEFAULT_KERNEL", ""], [416, 3, 1, 0, "cov", "Estimated covariance"], [417, 4, 1, 0, "deferred_cov", "Covariance calculation deferred until executed"], [418, 3, 1, 0, "eps", "Model residuals"], [419, 3, 1, 0, "name", "Covariance estimator name"], [420, 3, 1, 0, "s2", "Error variance"]], "linearmodels.panel.covariance.ClusteredCovariance.__init__": [[413, 2, 2, 0, "clusters", "nobs by 1 or nobs by 2 array of cluster group ids"], [413, 2, 2, 0, "debiased", "Flag indicating whether to debias the estimator"], [413, 2, 2, 0, "entity_ids", "(entity x time) by 1 stacked array of entity ids"], [413, 2, 2, 0, "extra_df", "Additional degrees of freedom consumed by models beyond the number of columns in x, e.g., fixed effects."], [413, 2, 2, 0, "group_debias", "Flag indicating whether to apply small-number of groups adjustment."], [413, 2, 2, 0, "params", "variables by 1 array of estimated model parameters"], [413, 2, 2, 0, "time_ids", "(entity x time) by 1 stacked array of time ids"], [413, 2, 2, 0, "x", "nobs by variables stacked array of exogenous"], [413, 2, 2, 0, "y", "nobs by 1 stacked array of dependent"]], "linearmodels.panel.covariance.DriscollKraay": [[422, 6, 1, 0, "ALLOWED_KWARGS", ""], [423, 6, 1, 0, "DEFAULT_KERNEL", ""], [424, 3, 1, 0, "cov", "Estimated covariance"], [425, 4, 1, 0, "deferred_cov", "Covariance calculation deferred until executed"], [426, 3, 1, 0, "eps", "Model residuals"], [427, 3, 1, 0, "name", "Covariance estimator name"], [428, 3, 1, 0, "s2", "Error variance"]], "linearmodels.panel.covariance.DriscollKraay.__init__": [[421, 2, 2, 0, "bandwidth", "Non-negative integer to use as bandwidth."], [421, 2, 2, 0, "debiased", "Flag indicating whether to debias the estimator"], [421, 2, 2, 0, "entity_ids", "(entity x time) by 1 stacked array of entity ids"], [421, 2, 2, 0, "extra_df", "Additional degrees of freedom consumed by models beyond the number of columns in x, e.g., fixed effects."], [421, 2, 2, 0, "kernel", "Name of one of the supported kernels."], [421, 2, 2, 0, "params", "variables by 1 array of estimated model parameters"], [421, 2, 2, 0, "time_ids", "(entity x time) by 1 stacked array of time ids"], [421, 2, 2, 0, "x", "(entity x time) by variables stacked array of exogenous"], [421, 2, 2, 0, "y", "(entity x time) by 1 stacked array of dependent"]], "linearmodels.panel.covariance.FamaMacBethCovariance": [[430, 6, 1, 0, "ALLOWED_KWARGS", ""], [431, 6, 1, 0, "DEFAULT_KERNEL", ""], [432, 3, 1, 0, "all_params", "The set of parameters estimated for each of the time periods"], [433, 3, 1, 0, "bandwidth", "Estimator bandwidth"], [434, 3, 1, 0, "cov", "Estimated covariance"], [435, 4, 1, 0, "deferred_cov", "Covariance calculation deferred until executed"], [436, 3, 1, 0, "eps", "Model residuals"], [437, 3, 1, 0, "name", "Covariance estimator name"], [438, 3, 1, 0, "s2", "Error variance"]], "linearmodels.panel.covariance.FamaMacBethCovariance.__init__": [[429, 2, 2, 0, "all_params", "(nobs by variables) array of all estimated model parameters"], [429, 2, 2, 0, "bandwidth", "Non-negative integer to use as bandwidth."], [429, 2, 2, 0, "debiased", "Flag indicating whether to debias the estimator."], [429, 2, 2, 0, "kernel", "Name of one of the supported kernels."], [429, 2, 2, 0, "params", "(variables by 1) array of estimated model parameters"], [429, 2, 2, 0, "x", "(entity x time) by variables stacked array of exogenous"], [429, 2, 2, 0, "y", "(entity x time) by 1 stacked array of dependent"]], "linearmodels.panel.covariance.HeteroskedasticCovariance": [[440, 6, 1, 0, "ALLOWED_KWARGS", ""], [441, 6, 1, 0, "DEFAULT_KERNEL", ""], [442, 3, 1, 0, "cov", "Estimated covariance"], [443, 4, 1, 0, "deferred_cov", "Covariance calculation deferred until executed"], [444, 3, 1, 0, "eps", "Model residuals"], [445, 3, 1, 0, "name", "Covariance estimator name"], [446, 3, 1, 0, "s2", "Error variance"]], "linearmodels.panel.covariance.HeteroskedasticCovariance.__init__": [[439, 2, 2, 0, "debiased", "Flag indicating whether to debias the estimator"], [439, 2, 2, 0, "entity_ids", "(entity x time) by 1 stacked array of entity ids"], [439, 2, 2, 0, "extra_df", "Additional degrees of freedom consumed by models beyond the number of columns in x, e.g., fixed effects."], [439, 2, 2, 0, "params", "variables by 1 array of estimated model parameters"], [439, 2, 2, 0, "time_ids", "(entity x time) by 1 stacked array of time ids"], [439, 2, 2, 0, "x", "(entity x time) by variables stacked array of exogenous"], [439, 2, 2, 0, "y", "(entity x time) by 1 stacked array of dependent"]], "linearmodels.panel.covariance.HomoskedasticCovariance": [[448, 6, 1, 0, "ALLOWED_KWARGS", ""], [449, 6, 1, 0, "DEFAULT_KERNEL", ""], [450, 3, 1, 0, "cov", "Estimated covariance"], [451, 4, 1, 0, "deferred_cov", "Covariance calculation deferred until executed"], [452, 3, 1, 0, "eps", "Model residuals"], [453, 3, 1, 0, "name", "Covariance estimator name"], [454, 3, 1, 0, "s2", "Error variance"]], "linearmodels.panel.covariance.HomoskedasticCovariance.__init__": [[447, 2, 2, 0, "debiased", "Flag indicating whether to debias the estimator"], [447, 2, 2, 0, "entity_ids", "(entity x time) by 1 stacked array of entity ids"], [447, 2, 2, 0, "extra_df", "Additional degrees of freedom consumed by models beyond the number of columns in x, e.g., fixed effects."], [447, 2, 2, 0, "params", "variables by 1 array of estimated model parameters"], [447, 2, 2, 0, "time_ids", "(entity x time) by 1 stacked array of time ids"], [447, 2, 2, 0, "x", "(entity x time) by variables stacked array of exogenous"], [447, 2, 2, 0, "y", "(entity x time) by 1 stacked array of dependent"]], "linearmodels.panel.data": [[455, 1, 1, 0, "PanelData", "Abstraction to handle alternative formats for panel data"], [480, 1, 1, 0, "_Panel", "Convert a MI DataFrame to a 3-d structure where columns are items."]], "linearmodels.panel.data.PanelData": [[456, 4, 1, 0, "copy", "Return a deep copy"], [457, 4, 1, 0, "count", "Count number of observations by entity or time"], [458, 3, 1, 0, "dataframe", "pandas DataFrame view of data"], [459, 4, 1, 0, "demean", "Demeans data by either entity or time group"], [460, 4, 1, 0, "drop", "Drop observations from the panel."], [461, 4, 1, 0, "dummies", "Generate entity or time dummies"], [462, 3, 1, 0, "entities", "List of entity index names"], [463, 3, 1, 0, "entity_ids", "Get array containing entity group membership information"], [464, 4, 1, 0, "first_difference", "Compute first differences of variables"], [465, 4, 1, 0, "general_demean", "Multi-way demeaning using only groupby"], [466, 3, 1, 0, "index", "Return the index of the multi-index dataframe view"], [467, 3, 1, 0, "isnull", "Locations with missing observations"], [468, 4, 1, 0, "mean", "Compute data mean by either entity or time group"], [469, 3, 1, 0, "ndim", "Number of dimensions of panel view of data"], [470, 3, 1, 0, "nentity", "Number of entities"], [471, 3, 1, 0, "nobs", "Number of time observations"], [472, 3, 1, 0, "nvar", "Number of variables"], [473, 3, 1, 0, "panel", "pandas Panel view of data"], [474, 3, 1, 0, "shape", "Shape of panel view of data"], [475, 3, 1, 0, "time", "List of time index names"], [476, 3, 1, 0, "time_ids", "Get array containing time membership information"], [477, 3, 1, 0, "values2d", "NumPy ndarray view of dataframe"], [478, 3, 1, 0, "values3d", "NumPy ndarray view of panel"], [479, 3, 1, 0, "vars", "List of variable names"]], "linearmodels.panel.data.PanelData.__init__": [[455, 2, 2, 0, "convert_dummies", "Flat indicating whether pandas categoricals or string input data should be converted to dummy variables"], [455, 2, 2, 0, "copy", "Flag indicating whether to copy the input."], [455, 2, 2, 0, "drop_first", "Flag indicating to drop first dummy category when converting"], [455, 2, 2, 0, "var_name", "Variable name to use when naming variables in NumPy arrays or xarray DataArrays"], [455, 2, 2, 0, "x", "Input data"]], "linearmodels.panel.data.PanelData.count": [[457, 2, 2, 0, "group", "Group to count"]], "linearmodels.panel.data.PanelData.demean": [[459, 2, 2, 0, "group", "Group to use in demeaning"], [459, 2, 2, 0, "low_memory", "Flag indicating whether to use a low memory implementation that avoids constructing dummy variables."], [459, 2, 2, 0, "return_panel", "Flag indicating to return a PanelData object."], [459, 2, 2, 0, "weights", "Weights to implement weighted averaging"]], "linearmodels.panel.data.PanelData.drop": [[460, 2, 2, 0, "locs", "Boolean array indicating observations to drop with reference to the dataframe view of the data"]], "linearmodels.panel.data.PanelData.dummies": [[461, 2, 2, 0, "drop_first", "Flag indicating that the dummy column corresponding to the first entity or time period should be dropped"], [461, 2, 2, 0, "group", "Type of dummies to generate"]], "linearmodels.panel.data.PanelData.general_demean": [[465, 2, 2, 0, "groups", "Arrays with the same size containing group identifiers"], [465, 2, 2, 0, "weights", "Weights to use in the weighted demeaning"]], "linearmodels.panel.data.PanelData.mean": [[468, 2, 2, 0, "group", "Group to use in demeaning"], [468, 2, 2, 0, "weights", "Weights to implement weighted averaging"]], "linearmodels.panel.data._Panel": [[481, 4, 1, 0, "from_array", ""], [482, 3, 1, 0, "items", ""], [483, 3, 1, 0, "major_axis", ""], [484, 3, 1, 0, "minor_axis", ""], [485, 3, 1, 0, "shape", ""], [486, 4, 1, 0, "to_frame", ""], [487, 3, 1, 0, "values", ""]], "linearmodels.panel.data._Panel.__init__": [[480, 2, 2, 0, "df", "MultiIndex DataFrame containing floats"]], "linearmodels.panel.data._Panel.from_array": [[481, 2, 2, "linearmodels.panel.data._Panel.from_array", "items", ""], [481, 2, 2, "linearmodels.panel.data._Panel.from_array", "major_axis", ""], [481, 2, 2, "linearmodels.panel.data._Panel.from_array", "minor_axis", ""], [481, 2, 2, "linearmodels.panel.data._Panel.from_array", "values", ""]], "linearmodels.panel.model": [[488, 1, 1, 0, "BetweenOLS", "Between estimator for panel data"], [496, 1, 1, 0, "FamaMacBeth", "Pooled coefficient estimator for panel data"], [504, 1, 1, 0, "FirstDifferenceOLS", "First difference model for panel data"], [512, 1, 1, 0, "PanelOLS", "One- and two-way fixed effects estimator for panel data"], [523, 1, 1, 0, "PooledOLS", "Pooled coefficient estimator for panel data"], [531, 1, 1, 0, "RandomEffects", "One-way Random Effects model for panel data"]], "linearmodels.panel.model.BetweenOLS": [[489, 4, 1, 0, "fit", "Estimate model parameters"], [490, 3, 1, 0, "formula", "Formula used to construct the model"], [491, 4, 1, 0, "from_formula", "Create a model from a formula"], [492, 3, 1, 0, "has_constant", "Flag indicating the model a constant or implicit constant"], [493, 3, 1, 0, "not_null", "Locations of non-missing observations"], [494, 4, 1, 0, "predict", "Predict values for additional data"], [495, 4, 1, 0, "reformat_clusters", "Reformat cluster variables"]], "linearmodels.panel.model.BetweenOLS.__init__": [[488, 2, 2, "linearmodels.panel.model.BetweenOLS", "check_rank", "Between estimator for panel data"], [488, 2, 2, 0, "dependent", "Dependent (left-hand-side) variable (time by entity)"], [488, 2, 2, 0, "exog", "Exogenous or right-hand-side variables (variable by time by entity)."], [488, 2, 2, 0, "weights", "Weights to use in estimation."]], "linearmodels.panel.model.BetweenOLS.fit": [[489, 2, 2, 0, "cov_config", "Additional covariance-specific options."], [489, 2, 2, 0, "cov_type", "Name of covariance estimator."], [489, 2, 2, 0, "debiased", "Flag indicating whether to debiased the covariance estimator using a degree of freedom adjustment."], [489, 2, 2, 0, "reweight", "Flag indicating to reweight observations if the input data is unbalanced using a WLS estimator."]], "linearmodels.panel.model.BetweenOLS.from_formula": [[491, 2, 2, 0, "check_rank", "Flag indicating whether to perform a rank check on the exogenous variables to ensure that the model is identified."], [491, 2, 2, 0, "data", "Data structure that can be coerced into a PanelData."], [491, 2, 2, 0, "formula", "Formula to transform into model."], [491, 2, 2, 0, "weights", "Weights to use in estimation."]], "linearmodels.panel.model.BetweenOLS.predict": [[494, 2, 2, 0, "context", "Depth of use when evaluating formulas."], [494, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [494, 2, 2, "linearmodels.panel.model.BetweenOLS.predict", "eval_env", "Predict values for additional data"], [494, 2, 2, 0, "exog", "Exogenous regressors (nobs by nvar)"], [494, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.panel.model.BetweenOLS.reformat_clusters": [[495, 2, 2, 0, "clusters", "Values to use for variance clustering"]], "linearmodels.panel.model.FamaMacBeth": [[497, 4, 1, 0, "fit", "Estimate model parameters"], [498, 3, 1, 0, "formula", "Formula used to construct the model"], [499, 4, 1, 0, "from_formula", "Create a model from a formula"], [500, 3, 1, 0, "has_constant", "Flag indicating the model a constant or implicit constant"], [501, 3, 1, 0, "not_null", "Locations of non-missing observations"], [502, 4, 1, 0, "predict", "Predict values for additional data"], [503, 4, 1, 0, "reformat_clusters", "Reformat cluster variables"]], "linearmodels.panel.model.FamaMacBeth.__init__": [[496, 2, 2, "linearmodels.panel.model.FamaMacBeth", "check_rank", "Pooled coefficient estimator for panel data"], [496, 2, 2, 0, "dependent", "Dependent (left-hand-side) variable (time by entity)"], [496, 2, 2, 0, "exog", "Exogenous or right-hand-side variables (variable by time by entity)."], [496, 2, 2, 0, "weights", "Weights to use in estimation."]], "linearmodels.panel.model.FamaMacBeth.fit": [[497, 2, 2, 0, "bandwidth", "The bandwidth to use when cov_type is \"kernel\"."], [497, 2, 2, 0, "cov_type", "Name of covariance estimator (see notes)."], [497, 2, 2, 0, "debiased", "Flag indicating whether to debiased the covariance estimator using a degree of freedom adjustment."], [497, 2, 2, 0, "kernel", "The kernel to use."]], "linearmodels.panel.model.FamaMacBeth.from_formula": [[499, 2, 2, 0, "check_rank", "Flag indicating whether to perform a rank check on the exogenous variables to ensure that the model is identified."], [499, 2, 2, 0, "data", "Data structure that can be coerced into a PanelData."], [499, 2, 2, 0, "formula", "Formula to transform into model."], [499, 2, 2, 0, "weights", "Weights to use in estimation."]], "linearmodels.panel.model.FamaMacBeth.predict": [[502, 2, 2, 0, "context", "Depth of use when evaluating formulas."], [502, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [502, 2, 2, "linearmodels.panel.model.FamaMacBeth.predict", "eval_env", "Predict values for additional data"], [502, 2, 2, 0, "exog", "Exogenous regressors (nobs by nvar)"], [502, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.panel.model.FamaMacBeth.reformat_clusters": [[503, 2, 2, 0, "clusters", "Values to use for variance clustering"]], "linearmodels.panel.model.FirstDifferenceOLS": [[505, 4, 1, 0, "fit", "Estimate model parameters"], [506, 3, 1, 0, "formula", "Formula used to construct the model"], [507, 4, 1, 0, "from_formula", "Create a model from a formula"], [508, 3, 1, 0, "has_constant", "Flag indicating the model a constant or implicit constant"], [509, 3, 1, 0, "not_null", "Locations of non-missing observations"], [510, 4, 1, 0, "predict", "Predict values for additional data"], [511, 4, 1, 0, "reformat_clusters", "Reformat cluster variables"]], "linearmodels.panel.model.FirstDifferenceOLS.__init__": [[504, 2, 2, "linearmodels.panel.model.FirstDifferenceOLS", "check_rank", "First difference model for panel data"], [504, 2, 2, 0, "dependent", "Dependent (left-hand-side) variable (time by entity)"], [504, 2, 2, 0, "exog", "Exogenous or right-hand-side variables (variable by time by entity)."], [504, 2, 2, 0, "weights", "Weights to use in estimation."]], "linearmodels.panel.model.FirstDifferenceOLS.fit": [[505, 2, 2, 0, "cov_config", "Additional covariance-specific options."], [505, 2, 2, 0, "cov_type", "Name of covariance estimator."], [505, 2, 2, 0, "debiased", "Flag indicating whether to debiased the covariance estimator using a degree of freedom adjustment."]], "linearmodels.panel.model.FirstDifferenceOLS.from_formula": [[507, 2, 2, 0, "check_rank", "Flag indicating whether to perform a rank check on the exogenous variables to ensure that the model is identified."], [507, 2, 2, 0, "data", "Data structure that can be coerced into a PanelData."], [507, 2, 2, 0, "formula", "Formula to transform into model."], [507, 2, 2, 0, "weights", "Weights to use in estimation."]], "linearmodels.panel.model.FirstDifferenceOLS.predict": [[510, 2, 2, 0, "context", "Depth of use when evaluating formulas."], [510, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [510, 2, 2, "linearmodels.panel.model.FirstDifferenceOLS.predict", "eval_env", "Predict values for additional data"], [510, 2, 2, 0, "exog", "Exogenous regressors (nobs by nvar)"], [510, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.panel.model.FirstDifferenceOLS.reformat_clusters": [[511, 2, 2, 0, "clusters", "Values to use for variance clustering"]], "linearmodels.panel.model.PanelOLS": [[513, 3, 1, 0, "entity_effects", "Flag indicating whether entity effects are included"], [514, 4, 1, 0, "fit", "Estimate model parameters"], [515, 3, 1, 0, "formula", "Formula used to construct the model"], [516, 4, 1, 0, "from_formula", "Create a model from a formula"], [517, 3, 1, 0, "has_constant", "Flag indicating the model a constant or implicit constant"], [518, 3, 1, 0, "not_null", "Locations of non-missing observations"], [519, 3, 1, 0, "other_effects", "Flag indicating whether other (generic) effects are included"], [520, 4, 1, 0, "predict", "Predict values for additional data"], [521, 4, 1, 0, "reformat_clusters", "Reformat cluster variables"], [522, 3, 1, 0, "time_effects", "Flag indicating whether time effects are included"]], "linearmodels.panel.model.PanelOLS.__init__": [[512, 2, 2, 0, "check_rank", "Flag indicating whether to perform a rank check on the exogenous variables to ensure that the model is identified."], [512, 2, 2, 0, "dependent", "Dependent (left-hand-side) variable (time by entity)."], [512, 2, 2, 0, "drop_absorbed", "Flag indicating whether to drop absorbed variables"], [512, 2, 2, 0, "entity_effects", "Flag whether to include entity (fixed) effects in the model"], [512, 2, 2, 0, "exog", "Exogenous or right-hand-side variables (variable by time by entity)."], [512, 2, 2, 0, "other_effects", "Category codes to use for any effects that are not entity or time effects."], [512, 2, 2, 0, "singletons", "Flag indicating whether to drop singleton observation"], [512, 2, 2, 0, "time_effects", "Flag whether to include time effects in the model"], [512, 2, 2, 0, "weights", "Weights to use in estimation."]], "linearmodels.panel.model.PanelOLS.fit": [[514, 2, 2, 0, "auto_df", "Flag indicating that the treatment of estimated effects in degree of freedom adjustment is automatically handled."], [514, 2, 2, 0, "count_effects", "Flag indicating that the covariance estimator should be adjusted to account for the estimation of effects in the model."], [514, 2, 2, 0, "cov_config", "Additional covariance-specific options."], [514, 2, 2, 0, "cov_type", "Name of covariance estimator."], [514, 2, 2, 0, "debiased", "Flag indicating whether to debiased the covariance estimator using a degree of freedom adjustment."], [514, 2, 2, 0, "low_memory", "Flag indicating whether to use a low-memory algorithm when a model contains two-way fixed effects."], [514, 2, 2, 0, "use_lsdv", "Flag indicating to use the Least Squares Dummy Variable estimator to eliminate effects."], [514, 2, 2, 0, "use_lsmr", "Flag indicating to use LSDV with the Sparse Equations and Least Squares estimator to eliminate the fixed effects."]], "linearmodels.panel.model.PanelOLS.from_formula": [[516, 2, 2, 0, "check_rank", "Flag indicating whether to perform a rank check on the exogenous variables to ensure that the model is identified."], [516, 2, 2, 0, "data", "Data structure that can be coerced into a PanelData."], [516, 2, 2, 0, "drop_absorbed", "Flag indicating whether to drop absorbed variables"], [516, 2, 2, 0, "formula", "Formula to transform into model."], [516, 2, 2, 0, "other_effects", "Category codes to use for any effects that are not entity or time effects."], [516, 2, 2, 0, "singletons", "Flag indicating whether to drop singleton observation"], [516, 2, 2, 0, "weights", "Weights to use in estimation."]], "linearmodels.panel.model.PanelOLS.predict": [[520, 2, 2, 0, "context", "Depth of use when evaluating formulas."], [520, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [520, 2, 2, "linearmodels.panel.model.PanelOLS.predict", "eval_env", "Predict values for additional data"], [520, 2, 2, 0, "exog", "Exogenous regressors (nobs by nvar)"], [520, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.panel.model.PanelOLS.reformat_clusters": [[521, 2, 2, 0, "clusters", "Values to use for variance clustering"]], "linearmodels.panel.model.PooledOLS": [[524, 4, 1, 0, "fit", "Estimate model parameters"], [525, 3, 1, 0, "formula", "Formula used to construct the model"], [526, 4, 1, 0, "from_formula", "Create a model from a formula"], [527, 3, 1, 0, "has_constant", "Flag indicating the model a constant or implicit constant"], [528, 3, 1, 0, "not_null", "Locations of non-missing observations"], [529, 4, 1, 0, "predict", "Predict values for additional data"], [530, 4, 1, 0, "reformat_clusters", "Reformat cluster variables"]], "linearmodels.panel.model.PooledOLS.__init__": [[523, 2, 2, 0, "check_rank", "Flag indicating whether to perform a rank check on the exogenous variables to ensure that the model is identified."], [523, 2, 2, 0, "dependent", "Dependent (left-hand-side) variable (time by entity)"], [523, 2, 2, 0, "exog", "Exogenous or right-hand-side variables (variable by time by entity)."], [523, 2, 2, 0, "weights", "Weights to use in estimation."]], "linearmodels.panel.model.PooledOLS.fit": [[524, 2, 2, 0, "cov_config", "Additional covariance-specific options."], [524, 2, 2, 0, "cov_type", "Name of covariance estimator."], [524, 2, 2, 0, "debiased", "Flag indicating whether to debiased the covariance estimator using a degree of freedom adjustment."]], "linearmodels.panel.model.PooledOLS.from_formula": [[526, 2, 2, 0, "check_rank", "Flag indicating whether to perform a rank check on the exogenous variables to ensure that the model is identified."], [526, 2, 2, 0, "data", "Data structure that can be coerced into a PanelData."], [526, 2, 2, 0, "formula", "Formula to transform into model."], [526, 2, 2, 0, "weights", "Weights to use in estimation."]], "linearmodels.panel.model.PooledOLS.predict": [[529, 2, 2, 0, "context", "Depth to use when evaluating formulas."], [529, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [529, 2, 2, "linearmodels.panel.model.PooledOLS.predict", "eval_env", "Predict values for additional data"], [529, 2, 2, 0, "exog", "Exogenous regressors (nobs by nvar)"], [529, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.panel.model.PooledOLS.reformat_clusters": [[530, 2, 2, 0, "clusters", "Values to use for variance clustering"]], "linearmodels.panel.model.RandomEffects": [[532, 4, 1, 0, "fit", "Estimate model parameters"], [533, 3, 1, 0, "formula", "Formula used to construct the model"], [534, 4, 1, 0, "from_formula", "Create a model from a formula"], [535, 3, 1, 0, "has_constant", "Flag indicating the model a constant or implicit constant"], [536, 3, 1, 0, "not_null", "Locations of non-missing observations"], [537, 4, 1, 0, "predict", "Predict values for additional data"], [538, 4, 1, 0, "reformat_clusters", "Reformat cluster variables"]], "linearmodels.panel.model.RandomEffects.__init__": [[531, 2, 2, "linearmodels.panel.model.RandomEffects", "check_rank", "One-way Random Effects model for panel data"], [531, 2, 2, 0, "dependent", "Dependent (left-hand-side) variable (time by entity)"], [531, 2, 2, 0, "exog", "Exogenous or right-hand-side variables (variable by time by entity)."], [531, 2, 2, 0, "weights", "Weights to use in estimation."]], "linearmodels.panel.model.RandomEffects.fit": [[532, 2, 2, 0, "cov_config", "Additional covariance-specific options."], [532, 2, 2, 0, "cov_type", "Name of covariance estimator (see notes)."], [532, 2, 2, 0, "debiased", "Flag indicating whether to debiased the covariance estimator using a degree of freedom adjustment."], [532, 2, 2, 0, "small_sample", "Apply a small-sample correction to the estimate of the variance of the random effect."]], "linearmodels.panel.model.RandomEffects.from_formula": [[534, 2, 2, 0, "check_rank", "Flag indicating whether to perform a rank check on the exogenous variables to ensure that the model is identified."], [534, 2, 2, 0, "data", "Data structure that can be coerced into a PanelData."], [534, 2, 2, 0, "formula", "Formula to transform into model."], [534, 2, 2, 0, "weights", "Weights to use in estimation."]], "linearmodels.panel.model.RandomEffects.predict": [[537, 2, 2, 0, "context", "Depth of use when evaluating formulas."], [537, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [537, 2, 2, "linearmodels.panel.model.RandomEffects.predict", "eval_env", "Predict values for additional data"], [537, 2, 2, 0, "exog", "Exogenous regressors (nobs by nvar)"], [537, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.panel.model.RandomEffects.reformat_clusters": [[538, 2, 2, 0, "clusters", "Values to use for variance clustering"]], "linearmodels.panel.results": [[539, 1, 1, 0, "FamaMacBethResults", "Results container for Fama MacBeth panel data models"], [577, 1, 1, 0, "PanelEffectsResults", "Results container for panel data models that include effects"], [617, 1, 1, 0, "PanelModelComparison", "Comparison of multiple models"], [631, 1, 1, 0, "PanelResults", "Results container for panel data models that do not include effects"], [666, 1, 1, 0, "RandomEffectsResults", "Results container for random effect panel data models"], [703, 5, 1, 0, "compare", "Compare the results of multiple models"]], "linearmodels.panel.results.FamaMacBethResults": [[540, 3, 1, 0, "all_params", "The set of parameters estimated for each of the time periods"], [541, 3, 1, 0, "avg_adj_rsquared", "The average coefficient of determination, adjusted for sample size."], [542, 3, 1, 0, "avg_rsquared", "The average coefficient of determination"], [543, 4, 1, 0, "conf_int", "Confidence interval construction"], [544, 3, 1, 0, "corr_squared_between", "Between Coefficient of determination using squared correlation"], [545, 3, 1, 0, "corr_squared_overall", "Overall coefficient of determination using squared correlation"], [546, 3, 1, 0, "corr_squared_within", "Within coefficient of determination using squared correlation"], [547, 3, 1, 0, "cov", "Estimated covariance of parameters"], [548, 3, 1, 0, "df_model", "Model degree of freedom"], [549, 3, 1, 0, "df_resid", "Residual degree of freedom"], [550, 3, 1, 0, "entity_info", "Statistics on observations per entity"], [551, 3, 1, 0, "estimated_effects", "Estimated effects"], [552, 3, 1, 0, "f_statistic", "Joint test of significance for non-constant regressors"], [553, 3, 1, 0, "f_statistic_robust", "Joint test of significance for non-constant regressors"], [554, 3, 1, 0, "fitted_values", "Fitted values"], [555, 3, 1, 0, "idiosyncratic", "Idiosyncratic error"], [556, 3, 1, 0, "loglik", "Log-likelihood of model"], [557, 3, 1, 0, "model_ss", "Residual sum of squares"], [558, 3, 1, 0, "name", "Model name"], [559, 3, 1, 0, "nobs", "Number of observations used to estimate the model"], [560, 3, 1, 0, "params", "Estimated parameters"], [561, 4, 1, 0, "predict", "In- and out-of-sample predictions"], [562, 3, 1, 0, "pvalues", "Parameter p-vals. Uses t(df_resid) if debiased is True, else normal"], [563, 3, 1, 0, "resid_ss", "Residual sum of squares"], [564, 3, 1, 0, "resids", "Model residuals"], [565, 3, 1, 0, "rsquared", "Model Coefficient of determination"], [566, 3, 1, 0, "rsquared_between", "Between Coefficient of determination"], [567, 3, 1, 0, "rsquared_overall", "Overall coefficient of determination"], [568, 3, 1, 0, "rsquared_within", "Within coefficient of determination"], [569, 3, 1, 0, "s2", "Residual variance estimator"], [570, 3, 1, 0, "std_errors", "Estimated parameter standard errors"], [571, 3, 1, 0, "summary", "Model estimation summary."], [572, 3, 1, 0, "time_info", "Statistics on observations per time interval"], [573, 3, 1, 0, "total_ss", "Total sum of squares"], [574, 3, 1, 0, "tstats", "Parameter t-statistics"], [575, 4, 1, 0, "wald_test", "Test linear equality constraints using a Wald test"], [576, 3, 1, 0, "wresids", "Weighted model residuals"]], "linearmodels.panel.results.FamaMacBethResults.__init__": [[539, 2, 2, "linearmodels.panel.results.FamaMacBethResults", "res", "Results container for Fama MacBeth panel data models"]], "linearmodels.panel.results.FamaMacBethResults.conf_int": [[543, 2, 2, 0, "level", "Confidence level for interval"]], "linearmodels.panel.results.FamaMacBethResults.predict": [[561, 2, 2, 0, "data", "DataFrame to use for out-of-sample predictions when model was constructed using a formula."], [561, 2, 2, 0, "effects", "Flag indicating whether to include estimated effects"], [561, 2, 2, 0, "exog", "Exogenous values to use in out-of-sample prediction (nobs by nexog)"], [561, 2, 2, 0, "fitted", "Flag indicating whether to include the fitted values"], [561, 2, 2, 0, "idiosyncratic", "Flag indicating whether to include the estimated idiosyncratic shock"], [561, 2, 2, 0, "missing", "Flag indicating to adjust for dropped observations."]], "linearmodels.panel.results.FamaMacBethResults.wald_test": [[575, 2, 2, 0, "formula", "formulaic linear constraints."], [575, 2, 2, 0, "restriction", "q by nvar array containing linear weights to apply to parameters when forming the restrictions."], [575, 2, 2, 0, "value", "q element array containing the restricted values."]], "linearmodels.panel.results.PanelEffectsResults": [[578, 4, 1, 0, "conf_int", "Confidence interval construction"], [579, 3, 1, 0, "corr_squared_between", "Between Coefficient of determination using squared correlation"], [580, 3, 1, 0, "corr_squared_overall", "Overall coefficient of determination using squared correlation"], [581, 3, 1, 0, "corr_squared_within", "Within coefficient of determination using squared correlation"], [582, 3, 1, 0, "cov", "Estimated covariance of parameters"], [583, 3, 1, 0, "df_model", "Model degree of freedom"], [584, 3, 1, 0, "df_resid", "Residual degree of freedom"], [585, 3, 1, 0, "entity_info", "Statistics on observations per entity"], [586, 3, 1, 0, "estimated_effects", "Estimated effects"], [587, 3, 1, 0, "f_pooled", "Test that included effects are jointly zero."], [588, 3, 1, 0, "f_statistic", "Joint test of significance for non-constant regressors"], [589, 3, 1, 0, "f_statistic_robust", "Joint test of significance for non-constant regressors"], [590, 3, 1, 0, "fitted_values", "Fitted values"], [591, 3, 1, 0, "idiosyncratic", "Idiosyncratic error"], [592, 3, 1, 0, "included_effects", "List of effects included in the model"], [593, 3, 1, 0, "loglik", "Log-likelihood of model"], [594, 3, 1, 0, "model_ss", "Residual sum of squares"], [595, 3, 1, 0, "name", "Model name"], [596, 3, 1, 0, "nobs", "Number of observations used to estimate the model"], [597, 3, 1, 0, "other_info", "Statistics on observations per group for other effects"], [598, 3, 1, 0, "params", "Estimated parameters"], [599, 4, 1, 0, "predict", "In- and out-of-sample predictions"], [600, 3, 1, 0, "pvalues", "Parameter p-vals. Uses t(df_resid) if debiased is True, else normal"], [601, 3, 1, 0, "resid_ss", "Residual sum of squares"], [602, 3, 1, 0, "resids", "Model residuals"], [603, 3, 1, 0, "rsquared", "Model Coefficient of determination"], [604, 3, 1, 0, "rsquared_between", "Between Coefficient of determination"], [605, 3, 1, 0, "rsquared_inclusive", "Model Coefficient of determination including fit of included effects"], [606, 3, 1, 0, "rsquared_overall", "Overall coefficient of determination"], [607, 3, 1, 0, "rsquared_within", "Within coefficient of determination"], [608, 3, 1, 0, "s2", "Residual variance estimator"], [609, 3, 1, 0, "std_errors", "Estimated parameter standard errors"], [610, 3, 1, 0, "summary", "Model estimation summary."], [611, 3, 1, 0, "time_info", "Statistics on observations per time interval"], [612, 3, 1, 0, "total_ss", "Total sum of squares"], [613, 3, 1, 0, "tstats", "Parameter t-statistics"], [614, 3, 1, 0, "variance_decomposition", "Decomposition of total variance into effects and residuals"], [615, 4, 1, 0, "wald_test", "Test linear equality constraints using a Wald test"], [616, 3, 1, 0, "wresids", "Weighted model residuals"]], "linearmodels.panel.results.PanelEffectsResults.__init__": [[577, 2, 2, "linearmodels.panel.results.PanelEffectsResults", "res", "Results container for panel data models that include effects"]], "linearmodels.panel.results.PanelEffectsResults.conf_int": [[578, 2, 2, 0, "level", "Confidence level for interval"]], "linearmodels.panel.results.PanelEffectsResults.predict": [[599, 2, 2, 0, "data", "DataFrame to use for out-of-sample predictions when model was constructed using a formula."], [599, 2, 2, 0, "effects", "Flag indicating whether to include estimated effects"], [599, 2, 2, 0, "exog", "Exogenous values to use in out-of-sample prediction (nobs by nexog)"], [599, 2, 2, 0, "fitted", "Flag indicating whether to include the fitted values"], [599, 2, 2, 0, "idiosyncratic", "Flag indicating whether to include the estimated idiosyncratic shock"], [599, 2, 2, 0, "missing", "Flag indicating to adjust for dropped observations."]], "linearmodels.panel.results.PanelEffectsResults.wald_test": [[615, 2, 2, 0, "formula", "formulaic linear constraints."], [615, 2, 2, 0, "restriction", "q by nvar array containing linear weights to apply to parameters when forming the restrictions."], [615, 2, 2, 0, "value", "q element array containing the restricted values."]], "linearmodels.panel.results.PanelModelComparison": [[618, 3, 1, 0, "cov_estimator", "Covariance estimator descriptions"], [619, 3, 1, 0, "estimator_method", "Estimation methods"], [620, 3, 1, 0, "f_statistic", "F-statistics and P-values"], [621, 3, 1, 0, "nobs", "Parameters for all models"], [622, 3, 1, 0, "params", "Parameters for all models"], [623, 3, 1, 0, "pvalues", "Parameter p-vals for all models"], [624, 3, 1, 0, "rsquared", "Coefficients of determination (R**2)"], [625, 3, 1, 0, "rsquared_between", "Coefficients of determination (R**2)"], [626, 3, 1, 0, "rsquared_overall", "Coefficients of determination (R**2)"], [627, 3, 1, 0, "rsquared_within", "Coefficients of determination (R**2)"], [628, 3, 1, 0, "std_errors", "Parameter standard errors for all models"], [629, 3, 1, 0, "summary", "Model estimation summary."], [630, 3, 1, 0, "tstats", "Parameter t-stats for all models"]], "linearmodels.panel.results.PanelModelComparison.__init__": [[617, 2, 2, 0, "precision", "Estimator precision estimator to include in the comparison output. Default is \"tstats\"."], [617, 2, 2, 0, "results", "Set of results to compare."], [617, 2, 2, 0, "stars", "Add stars based on the p-value of the coefficient where 1, 2 and 3-stars correspond to p-values of 10%, 5% and 1%, respectively."]], "linearmodels.panel.results.PanelResults": [[632, 4, 1, 0, "conf_int", "Confidence interval construction"], [633, 3, 1, 0, "corr_squared_between", "Between Coefficient of determination using squared correlation"], [634, 3, 1, 0, "corr_squared_overall", "Overall coefficient of determination using squared correlation"], [635, 3, 1, 0, "corr_squared_within", "Within coefficient of determination using squared correlation"], [636, 3, 1, 0, "cov", "Estimated covariance of parameters"], [637, 3, 1, 0, "df_model", "Model degree of freedom"], [638, 3, 1, 0, "df_resid", "Residual degree of freedom"], [639, 3, 1, 0, "entity_info", "Statistics on observations per entity"], [640, 3, 1, 0, "estimated_effects", "Estimated effects"], [641, 3, 1, 0, "f_statistic", "Joint test of significance for non-constant regressors"], [642, 3, 1, 0, "f_statistic_robust", "Joint test of significance for non-constant regressors"], [643, 3, 1, 0, "fitted_values", "Fitted values"], [644, 3, 1, 0, "idiosyncratic", "Idiosyncratic error"], [645, 3, 1, 0, "loglik", "Log-likelihood of model"], [646, 3, 1, 0, "model_ss", "Residual sum of squares"], [647, 3, 1, 0, "name", "Model name"], [648, 3, 1, 0, "nobs", "Number of observations used to estimate the model"], [649, 3, 1, 0, "params", "Estimated parameters"], [650, 4, 1, 0, "predict", "In- and out-of-sample predictions"], [651, 3, 1, 0, "pvalues", "Parameter p-vals. Uses t(df_resid) if debiased is True, else normal"], [652, 3, 1, 0, "resid_ss", "Residual sum of squares"], [653, 3, 1, 0, "resids", "Model residuals"], [654, 3, 1, 0, "rsquared", "Model Coefficient of determination"], [655, 3, 1, 0, "rsquared_between", "Between Coefficient of determination"], [656, 3, 1, 0, "rsquared_overall", "Overall coefficient of determination"], [657, 3, 1, 0, "rsquared_within", "Within coefficient of determination"], [658, 3, 1, 0, "s2", "Residual variance estimator"], [659, 3, 1, 0, "std_errors", "Estimated parameter standard errors"], [660, 3, 1, 0, "summary", "Model estimation summary."], [661, 3, 1, 0, "time_info", "Statistics on observations per time interval"], [662, 3, 1, 0, "total_ss", "Total sum of squares"], [663, 3, 1, 0, "tstats", "Parameter t-statistics"], [664, 4, 1, 0, "wald_test", "Test linear equality constraints using a Wald test"], [665, 3, 1, 0, "wresids", "Weighted model residuals"]], "linearmodels.panel.results.PanelResults.__init__": [[631, 2, 2, "linearmodels.panel.results.PanelResults", "res", "Results container for panel data models that do not include effects"]], "linearmodels.panel.results.PanelResults.conf_int": [[632, 2, 2, 0, "level", "Confidence level for interval"]], "linearmodels.panel.results.PanelResults.predict": [[650, 2, 2, 0, "data", "DataFrame to use for out-of-sample predictions when model was constructed using a formula."], [650, 2, 2, 0, "effects", "Flag indicating whether to include estimated effects"], [650, 2, 2, 0, "exog", "Exogenous values to use in out-of-sample prediction (nobs by nexog)"], [650, 2, 2, 0, "fitted", "Flag indicating whether to include the fitted values"], [650, 2, 2, 0, "idiosyncratic", "Flag indicating whether to include the estimated idiosyncratic shock"], [650, 2, 2, 0, "missing", "Flag indicating to adjust for dropped observations."]], "linearmodels.panel.results.PanelResults.wald_test": [[664, 2, 2, 0, "formula", "formulaic linear constraints."], [664, 2, 2, 0, "restriction", "q by nvar array containing linear weights to apply to parameters when forming the restrictions."], [664, 2, 2, 0, "value", "q element array containing the restricted values."]], "linearmodels.panel.results.RandomEffectsResults": [[667, 4, 1, 0, "conf_int", "Confidence interval construction"], [668, 3, 1, 0, "corr_squared_between", "Between Coefficient of determination using squared correlation"], [669, 3, 1, 0, "corr_squared_overall", "Overall coefficient of determination using squared correlation"], [670, 3, 1, 0, "corr_squared_within", "Within coefficient of determination using squared correlation"], [671, 3, 1, 0, "cov", "Estimated covariance of parameters"], [672, 3, 1, 0, "df_model", "Model degree of freedom"], [673, 3, 1, 0, "df_resid", "Residual degree of freedom"], [674, 3, 1, 0, "entity_info", "Statistics on observations per entity"], [675, 3, 1, 0, "estimated_effects", "Estimated effects"], [676, 3, 1, 0, "f_statistic", "Joint test of significance for non-constant regressors"], [677, 3, 1, 0, "f_statistic_robust", "Joint test of significance for non-constant regressors"], [678, 3, 1, 0, "fitted_values", "Fitted values"], [679, 3, 1, 0, "idiosyncratic", "Idiosyncratic error"], [680, 3, 1, 0, "loglik", "Log-likelihood of model"], [681, 3, 1, 0, "model_ss", "Residual sum of squares"], [682, 3, 1, 0, "name", "Model name"], [683, 3, 1, 0, "nobs", "Number of observations used to estimate the model"], [684, 3, 1, 0, "params", "Estimated parameters"], [685, 4, 1, 0, "predict", "In- and out-of-sample predictions"], [686, 3, 1, 0, "pvalues", "Parameter p-vals. Uses t(df_resid) if debiased is True, else normal"], [687, 3, 1, 0, "resid_ss", "Residual sum of squares"], [688, 3, 1, 0, "resids", "Model residuals"], [689, 3, 1, 0, "rsquared", "Model Coefficient of determination"], [690, 3, 1, 0, "rsquared_between", "Between Coefficient of determination"], [691, 3, 1, 0, "rsquared_overall", "Overall coefficient of determination"], [692, 3, 1, 0, "rsquared_within", "Within coefficient of determination"], [693, 3, 1, 0, "s2", "Residual variance estimator"], [694, 3, 1, 0, "std_errors", "Estimated parameter standard errors"], [695, 3, 1, 0, "summary", "Model estimation summary."], [696, 3, 1, 0, "theta", "Values used in generalized demeaning"], [697, 3, 1, 0, "time_info", "Statistics on observations per time interval"], [698, 3, 1, 0, "total_ss", "Total sum of squares"], [699, 3, 1, 0, "tstats", "Parameter t-statistics"], [700, 3, 1, 0, "variance_decomposition", "Decomposition of total variance into effects and residuals"], [701, 4, 1, 0, "wald_test", "Test linear equality constraints using a Wald test"], [702, 3, 1, 0, "wresids", "Weighted model residuals"]], "linearmodels.panel.results.RandomEffectsResults.__init__": [[666, 2, 2, "linearmodels.panel.results.RandomEffectsResults", "res", "Results container for random effect panel data models"]], "linearmodels.panel.results.RandomEffectsResults.conf_int": [[667, 2, 2, 0, "level", "Confidence level for interval"]], "linearmodels.panel.results.RandomEffectsResults.predict": [[685, 2, 2, 0, "data", "DataFrame to use for out-of-sample predictions when model was constructed using a formula."], [685, 2, 2, 0, "effects", "Flag indicating whether to include estimated effects"], [685, 2, 2, 0, "exog", "Exogenous values to use in out-of-sample prediction (nobs by nexog)"], [685, 2, 2, 0, "fitted", "Flag indicating whether to include the fitted values"], [685, 2, 2, 0, "idiosyncratic", "Flag indicating whether to include the estimated idiosyncratic shock"], [685, 2, 2, 0, "missing", "Flag indicating to adjust for dropped observations."]], "linearmodels.panel.results.RandomEffectsResults.wald_test": [[701, 2, 2, 0, "formula", "formulaic linear constraints."], [701, 2, 2, 0, "restriction", "q by nvar array containing linear weights to apply to parameters when forming the restrictions."], [701, 2, 2, 0, "value", "q element array containing the restricted values."]], "linearmodels.panel.results.compare": [[703, 2, 2, 0, "precision", "Estimator precision estimator to include in the comparison output. Default is \"tstats\"."], [703, 2, 2, 0, "results", "Set of results to compare."], [703, 2, 2, 0, "stars", "Add stars based on the p-value of the coefficient where 1, 2 and 3-stars correspond to p-values of 10%, 5% and 1%, respectively."]], "linearmodels.panel.utility": [[704, 1, 1, 0, "PanelModelData", "Typed namedtuple to hold simulated panel data"], [711, 5, 1, 0, "generate_panel_data", "Simulate panel data for testing"]], "linearmodels.panel.utility.PanelModelData": [[705, 6, 1, 0, "clusters", "Alias for field number 3"], [706, 4, 1, 0, "count", "Return number of occurrences of value."], [707, 6, 1, 0, "data", "Alias for field number 0"], [708, 4, 1, 0, "index", "Return first index of value."], [709, 6, 1, 0, "other_effects", "Alias for field number 2"], [710, 6, 1, 0, "weights", "Alias for field number 1"]], "linearmodels.panel.utility.PanelModelData.__init__": [[704, 2, 2, 0, "clusters", "DataFrame containing cluster ids."], [704, 2, 2, 0, "data", "DataFrame containing the panel model's data"], [704, 2, 2, 0, "other_effects", "DataFrame containing the panel model's effects, excluding time and entity effects."], [704, 2, 2, 0, "weights", "DataFrame containing  the panel model's weights"]], "linearmodels.panel.utility.PanelModelData.count": [[706, 2, 2, "linearmodels.panel.utility.PanelModelData.count", "value", "Return number of occurrences of value."]], "linearmodels.panel.utility.PanelModelData.index": [[708, 2, 2, "linearmodels.panel.utility.PanelModelData.index", "start", "Return first index of value."], [708, 2, 2, "linearmodels.panel.utility.PanelModelData.index", "stop", "Return first index of value."], [708, 2, 2, "linearmodels.panel.utility.PanelModelData.index", "value", "Return first index of value."]], "linearmodels.panel.utility.generate_panel_data": [[711, 2, 2, 0, "const", "Flag indicating that the model should include a constant."], [711, 2, 2, 0, "missing", "The percentage of values that are missing."], [711, 2, 2, 0, "ncats", "The number of categories to use in other_effects and variance clusters."], [711, 2, 2, 0, "nentity", "The number of entities in the panel."], [711, 2, 2, 0, "nexog", "The number of explanatory variables in the dataset."], [711, 2, 2, 0, "ntime", "The number of time periods in the panel."], [711, 2, 2, 0, "other_effects", "The number of other effects generated."], [711, 2, 2, 0, "rng", "A NumPy RandomState instance."]], "linearmodels.shared.covariance": [[869, 5, 1, 0, "cov_cluster", "Core cluster covariance estimator"], [870, 5, 1, 0, "cov_kernel", "Core kernel covariance estimator"], [871, 5, 1, 0, "group_debias_coefficient", "Compute the group debiasing scale."]], "linearmodels.shared.covariance.cov_cluster": [[869, 2, 2, 0, "clusters", "n by 1 array"], [869, 2, 2, 0, "z", "n by k mean zero data array"]], "linearmodels.shared.covariance.cov_kernel": [[870, 2, 2, 0, "w", "m by 1"], [870, 2, 2, 0, "z", "n by k mean zero data array"]], "linearmodels.shared.covariance.group_debias_coefficient": [[871, 2, 2, 0, "clusters", "One-dimensional array containing cluster group membership."]], "linearmodels.shared.hypotheses": [[872, 1, 1, 0, "InvalidTestStatistic", "Class returned if a requested test is not valid for a model"], [877, 1, 1, 0, "WaldTestStatistic", "Test statistic holder for Wald-type tests"]], "linearmodels.shared.hypotheses.InvalidTestStatistic": [[873, 3, 1, 0, "critical_values", "Always returns None"], [874, 3, 1, 0, "null", "Null hypothesis"], [875, 3, 1, 0, "pval", "Always returns np.nan"], [876, 3, 1, 0, "stat", "Test statistic"]], "linearmodels.shared.hypotheses.InvalidTestStatistic.__init__": [[872, 2, 2, 0, "name", "Name of test"], [872, 2, 2, 0, "reason", "Explanation why test is invalid"]], "linearmodels.shared.hypotheses.WaldTestStatistic": [[878, 3, 1, 0, "critical_values", "Critical values test for common test sizes"], [879, 3, 1, 0, "null", "Null hypothesis"], [880, 3, 1, 0, "pval", "P-value of test statistic"], [881, 3, 1, 0, "stat", "Test statistic"]], "linearmodels.shared.hypotheses.WaldTestStatistic.__init__": [[877, 2, 2, 0, "df", "Degree of freedom."], [877, 2, 2, 0, "df_denom", "Numerator degree of freedom."], [877, 2, 2, 0, "name", "Name of test"], [877, 2, 2, 0, "null", "A statement of the test's null hypothesis"], [877, 2, 2, 0, "stat", "The test statistic"]], "linearmodels.shared.utility": [[882, 1, 1, 0, "AttrDict", "Ordered dictionary-like object that exposes keys as attributes"]], "linearmodels.shared.utility.AttrDict": [[883, 4, 1, 0, "clear", "Remove all items from AD."], [884, 4, 1, 0, "copy", "Create a shallow copy of AD"], [885, 4, 1, 0, "get", ""], [886, 4, 1, 0, "items", "Return an ordered list-like object providing a view on AD's items"], [887, 4, 1, 0, "keys", "Return an ordered list-like object providing a view on AD's keys"], [888, 4, 1, 0, "pop", "Remove specified key and return the corresponding value. If key is not found, default is returned if given, otherwise KeyError is raised"], [889, 4, 1, 0, "popitem", "as a 2-tuple; but raise KeyError if D is empty."], [890, 4, 1, 0, "setdefault", ""], [891, 4, 1, 0, "update", "Update AD from dictionary or iterable E and F. If E is present and has a .keys() method, then does:  for k in E: AD[k] = E[k] If E is present and lacks a .keys() method, then does:  for k, v in E: AD[k] = v In either case, this is followed by: for k in F:  AD[k] = F[k]"], [892, 4, 1, 0, "values", "Return an ordered list-like object object providing a view on AD's values"]], "linearmodels.shared.utility.AttrDict.__init__": [[882, 2, 2, "linearmodels.shared.utility.AttrDict", "args", "Ordered dictionary-like object that exposes keys as attributes"], [882, 2, 2, "linearmodels.shared.utility.AttrDict", "kwargs", "Ordered dictionary-like object that exposes keys as attributes"]], "linearmodels.shared.utility.AttrDict.get": [[885, 2, 2, "linearmodels.shared.utility.AttrDict.get", "d", ""], [885, 2, 2, "linearmodels.shared.utility.AttrDict.get", "k", ""]], "linearmodels.shared.utility.AttrDict.pop": [[888, 2, 2, "linearmodels.shared.utility.AttrDict.pop", "default", "Remove specified key and return the corresponding value. If key is not found, default is returned if given, otherwise KeyError is raised"], [888, 2, 2, "linearmodels.shared.utility.AttrDict.pop", "key", "Remove specified key and return the corresponding value. If key is not found, default is returned if given, otherwise KeyError is raised"]], "linearmodels.shared.utility.AttrDict.setdefault": [[890, 2, 2, "linearmodels.shared.utility.AttrDict.setdefault", "d", ""], [890, 2, 2, "linearmodels.shared.utility.AttrDict.setdefault", "k", ""]], "linearmodels.shared.utility.AttrDict.update": [[891, 2, 2, "linearmodels.shared.utility.AttrDict.update", "args", "Update AD from dictionary or iterable E and F. If E is present and has a .keys() method, then does:  for k in E: AD[k] = E[k] If E is present and lacks a .keys() method, then does:  for k, v in E: AD[k] = v In either case, this is followed by: for k in F:  AD[k] = F[k]"], [891, 2, 2, "linearmodels.shared.utility.AttrDict.update", "kwargs", "Update AD from dictionary or iterable E and F. If E is present and has a .keys() method, then does:  for k in E: AD[k] = E[k] If E is present and lacks a .keys() method, then does:  for k, v in E: AD[k] = v In either case, this is followed by: for k in F:  AD[k] = F[k]"]], "linearmodels.system": [[720, 0, 0, 1, "covariance", ""], [720, 0, 0, 1, "gmm", ""], [720, 0, 0, 1, "model", ""], [720, 0, 0, 1, "results", ""]], "linearmodels.system.covariance": [[721, 1, 1, 0, "ClusteredCovariance", "Heteroskedastic covariance estimation for system regression"], [725, 1, 1, 0, "GMMHeteroskedasticCovariance", "Covariance estimator for IV system estimation with homoskedastic data"], [728, 1, 1, 0, "GMMHomoskedasticCovariance", "Covariance estimator for IV system estimation with homoskedastic data"], [731, 1, 1, 0, "GMMKernelCovariance", "Covariance estimator for IV system estimation with homoskedastic data"], [736, 1, 1, 0, "HeteroskedasticCovariance", "Heteroskedastic covariance estimation for system regression"], [740, 1, 1, 0, "HomoskedasticCovariance", "Homoskedastic covariance estimation for system regression"], [744, 1, 1, 0, "KernelCovariance", "Kernel (HAC) covariance estimation for system regression"]], "linearmodels.system.covariance.ClusteredCovariance": [[722, 3, 1, 0, "cov", "Parameter covariance"], [723, 3, 1, 0, "cov_config", "Optional configuration information used in covariance"], [724, 3, 1, 0, "sigma", "Error covariance"]], "linearmodels.system.covariance.ClusteredCovariance.__init__": [[721, 2, 2, 0, "clusters", "Optional array of cluster id."], [721, 2, 2, 0, "constraints", "Constraints used in estimation, if any"], [721, 2, 2, 0, "debiased", "Flag indicating to apply a small sample adjustment"], [721, 2, 2, 0, "eps", "Model residuals, ndependent by nobs"], [721, 2, 2, "linearmodels.system.covariance.ClusteredCovariance", "full_sigma", "Heteroskedastic covariance estimation for system regression"], [721, 2, 2, 0, "gls", "Flag indicating to compute the GLS covariance estimator."], [721, 2, 2, 0, "group_debias", "Flag indicating whether to debias by the number of groups."], [721, 2, 2, 0, "sigma", "Covariance matrix estimator of eps"], [721, 2, 2, 0, "x", "ndependent element list of regressor"]], "linearmodels.system.covariance.GMMHeteroskedasticCovariance": [[726, 3, 1, 0, "cov", "Parameter covariance"], [727, 3, 1, 0, "cov_config", "Optional configuration information used in covariance"]], "linearmodels.system.covariance.GMMHeteroskedasticCovariance.__init__": [[725, 2, 2, 0, "constraints", "Constraints used in estimation, if any"], [725, 2, 2, "linearmodels.system.covariance.GMMHeteroskedasticCovariance", "debiased", "Covariance estimator for IV system estimation with homoskedastic data"], [725, 2, 2, 0, "eps", "nobs by neq array of residuals where each column corresponds an equation in the system"], [725, 2, 2, 0, "sigma", "Residual covariance used in estimation"], [725, 2, 2, 0, "w", "Weighting matrix used in estimation"], [725, 2, 2, 0, "x", "List containing the model regressors for each equation in the system"], [725, 2, 2, 0, "z", "List containing the model instruments for each equation in the system"]], "linearmodels.system.covariance.GMMHomoskedasticCovariance": [[729, 3, 1, 0, "cov", "Parameter covariance"], [730, 3, 1, 0, "cov_config", "Optional configuration information used in covariance"]], "linearmodels.system.covariance.GMMHomoskedasticCovariance.__init__": [[728, 2, 2, 0, "constraints", "Constraints used in estimation, if any"], [728, 2, 2, "linearmodels.system.covariance.GMMHomoskedasticCovariance", "debiased", "Covariance estimator for IV system estimation with homoskedastic data"], [728, 2, 2, 0, "eps", "nobs by neq array of residuals where each column corresponds an equation in the system"], [728, 2, 2, 0, "sigma", "Residual covariance used in estimation"], [728, 2, 2, 0, "w", "Weighting matrix used in estimation"], [728, 2, 2, 0, "x", "List containing the model regressors for each equation in the system"], [728, 2, 2, 0, "z", "List containing the model instruments for each equation in the system"]], "linearmodels.system.covariance.GMMKernelCovariance": [[732, 3, 1, 0, "bandwidth", "Bandwidth used in estimation"], [733, 3, 1, 0, "cov", "Parameter covariance"], [734, 3, 1, 0, "cov_config", "Optional configuration information used in covariance"], [735, 3, 1, 0, "kernel", "Kernel used in estimation"]], "linearmodels.system.covariance.GMMKernelCovariance.__init__": [[731, 2, 2, 0, "bandwidth", "Bandwidth to use for the kernel."], [731, 2, 2, 0, "constraints", "Constraints used in estimation, if any"], [731, 2, 2, "linearmodels.system.covariance.GMMKernelCovariance", "debiased", "Covariance estimator for IV system estimation with homoskedastic data"], [731, 2, 2, 0, "eps", "nobs by neq array of residuals where each column corresponds an equation in the system"], [731, 2, 2, 0, "kernel", "Name of kernel to use."], [731, 2, 2, 0, "sigma", "Residual covariance used in estimation"], [731, 2, 2, 0, "w", "Weighting matrix used in estimation"], [731, 2, 2, 0, "x", "List containing the model regressors for each equation in the system"], [731, 2, 2, 0, "z", "List containing the model instruments for each equation in the system"]], "linearmodels.system.covariance.HeteroskedasticCovariance": [[737, 3, 1, 0, "cov", "Parameter covariance"], [738, 3, 1, 0, "cov_config", "Optional configuration information used in covariance"], [739, 3, 1, 0, "sigma", "Error covariance"]], "linearmodels.system.covariance.HeteroskedasticCovariance.__init__": [[736, 2, 2, 0, "constraints", "Constraints used in estimation, if any"], [736, 2, 2, 0, "debiased", "Flag indicating to apply a small sample adjustment"], [736, 2, 2, 0, "eps", "Model residuals, ndependent by nobs"], [736, 2, 2, "linearmodels.system.covariance.HeteroskedasticCovariance", "full_sigma", "Heteroskedastic covariance estimation for system regression"], [736, 2, 2, 0, "gls", "Flag indicating to compute the GLS covariance estimator."], [736, 2, 2, 0, "sigma", "Covariance matrix estimator of eps"], [736, 2, 2, 0, "x", "ndependent element list of regressor"]], "linearmodels.system.covariance.HomoskedasticCovariance": [[741, 3, 1, 0, "cov", "Parameter covariance"], [742, 3, 1, 0, "cov_config", "Optional configuration information used in covariance"], [743, 3, 1, 0, "sigma", "Error covariance"]], "linearmodels.system.covariance.HomoskedasticCovariance.__init__": [[740, 2, 2, 0, "constraints", "Constraints used in estimation, if any"], [740, 2, 2, 0, "debiased", "Flag indicating to apply a small sample adjustment"], [740, 2, 2, 0, "eps", "Model residuals, ndependent by nobs"], [740, 2, 2, "linearmodels.system.covariance.HomoskedasticCovariance", "full_sigma", "Homoskedastic covariance estimation for system regression"], [740, 2, 2, 0, "gls", "Flag indicating to compute the GLS covariance estimator."], [740, 2, 2, 0, "sigma", "Covariance matrix estimator of eps"], [740, 2, 2, 0, "x", "List of regressor arrays (ndependent)"]], "linearmodels.system.covariance.KernelCovariance": [[745, 3, 1, 0, "bandwidth", "Bandwidth used in estimation"], [746, 3, 1, 0, "cov", "Parameter covariance"], [747, 3, 1, 0, "cov_config", "Optional configuration information used in covariance"], [748, 3, 1, 0, "kernel", "Kernel used in estimation"], [749, 3, 1, 0, "sigma", "Error covariance"]], "linearmodels.system.covariance.KernelCovariance.__init__": [[744, 2, 2, 0, "bandwidth", "Bandwidth to use for the kernel."], [744, 2, 2, "linearmodels.system.covariance.KernelCovariance", "constraints", "Kernel (HAC) covariance estimation for system regression"], [744, 2, 2, 0, "debiased", "Flag indicating to apply a small sample adjustment"], [744, 2, 2, 0, "eps", "Model residuals, ndependent by nobs"], [744, 2, 2, "linearmodels.system.covariance.KernelCovariance", "full_sigma", "Kernel (HAC) covariance estimation for system regression"], [744, 2, 2, 0, "gls", "Flag indicating to compute the GLS covariance estimator."], [744, 2, 2, 0, "kernel", "Name of kernel to use."], [744, 2, 2, 0, "sigma", "Covariance matrix estimator of eps"], [744, 2, 2, 0, "x", "ndependent element list of regressor"]], "linearmodels.system.gmm": [[750, 1, 1, 0, "HeteroskedasticWeightMatrix", "Heteroskedasticity robust weight estimation"], [754, 1, 1, 0, "HomoskedasticWeightMatrix", "Homoskedastic (unadjusted) weight estimation"], [758, 1, 1, 0, "KernelWeightMatrix", "Heteroskedasticity robust weight estimation"]], "linearmodels.system.gmm.HeteroskedasticWeightMatrix": [[751, 3, 1, 0, "config", "Weight estimator configuration"], [752, 4, 1, 0, "sigma", "Estimate residual covariance."], [753, 4, 1, 0, "weight_matrix", "Construct a GMM weight matrix for a model."]], "linearmodels.system.gmm.HeteroskedasticWeightMatrix.__init__": [[750, 2, 2, 0, "center", "Flag indicating whether to center the moment conditions by subtracting the mean before computing the weight matrix."], [750, 2, 2, 0, "debiased", "Flag indicating whether to use small-sample adjustments"]], "linearmodels.system.gmm.HeteroskedasticWeightMatrix.sigma": [[752, 2, 2, 0, "eps", "The residuals from the system of equations."], [752, 2, 2, 0, "x", "A list of the regressor matrices for each equation in the system."]], "linearmodels.system.gmm.HeteroskedasticWeightMatrix.weight_matrix": [[753, 2, 2, 0, "eps", "Model errors (nobs by 1)"], [753, 2, 2, 0, "sigma", "Fixed covariance of model errors."], [753, 2, 2, 0, "x", "Model regressors (exog and endog), (nobs by nvar)"], [753, 2, 2, 0, "z", "Model instruments (exog and instruments), (nobs by ninstr)"]], "linearmodels.system.gmm.HomoskedasticWeightMatrix": [[755, 3, 1, 0, "config", "Weight estimator configuration"], [756, 4, 1, 0, "sigma", "Estimate residual covariance."], [757, 4, 1, 0, "weight_matrix", "Construct a GMM weight matrix for a model."]], "linearmodels.system.gmm.HomoskedasticWeightMatrix.__init__": [[754, 2, 2, 0, "center", "Flag indicating whether to center the moment conditions by subtracting the mean before computing the weight matrix."], [754, 2, 2, 0, "debiased", "Flag indicating whether to use small-sample adjustments"]], "linearmodels.system.gmm.HomoskedasticWeightMatrix.sigma": [[756, 2, 2, 0, "eps", "The residuals from the system of equations."], [756, 2, 2, 0, "x", "A list of the regressor matrices for each equation in the system."]], "linearmodels.system.gmm.HomoskedasticWeightMatrix.weight_matrix": [[757, 2, 2, 0, "eps", "Model errors (nobs by neqn)"], [757, 2, 2, 0, "sigma", "Fixed covariance of model errors."], [757, 2, 2, 0, "x", "List of containing model regressors for each equation in the system"], [757, 2, 2, 0, "z", "List of containing instruments for each equation in the system"]], "linearmodels.system.gmm.KernelWeightMatrix": [[759, 3, 1, 0, "bandwidth", "Bandwidth used to estimate covariance of moment conditions"], [760, 3, 1, 0, "config", "Weight estimator configuration"], [761, 3, 1, 0, "kernel", "Kernel used in estimation"], [762, 4, 1, 0, "sigma", "Estimate residual covariance."], [763, 4, 1, 0, "weight_matrix", "Construct a GMM weight matrix for a model."]], "linearmodels.system.gmm.KernelWeightMatrix.__init__": [[758, 2, 2, 0, "bandwidth", "Bandwidth to use for the kernel."], [758, 2, 2, 0, "center", "Flag indicating whether to center the moment conditions by subtracting the mean before computing the weight matrix."], [758, 2, 2, 0, "debiased", "Flag indicating whether to use small-sample adjustments"], [758, 2, 2, 0, "kernel", "Name of kernel to use."], [758, 2, 2, 0, "optimal_bw", "Flag indicating whether to estimate the optimal bandwidth, when bandwidth is None."]], "linearmodels.system.gmm.KernelWeightMatrix.sigma": [[762, 2, 2, 0, "eps", "The residuals from the system of equations."], [762, 2, 2, 0, "x", "A list of the regressor matrices for each equation in the system."]], "linearmodels.system.gmm.KernelWeightMatrix.weight_matrix": [[763, 2, 2, 0, "eps", "Model errors (nobs by nequation)"], [763, 2, 2, 0, "sigma", "Fixed covariance of model errors."], [763, 2, 2, 0, "x", "Model regressors (exog and endog)"], [763, 2, 2, 0, "z", "Model instruments (exog and instruments)"]], "linearmodels.system.model": [[764, 1, 1, 0, "IV3SLS", "Three-stage Least Squares (3SLS) Estimator"], [775, 1, 1, 0, "IVSystemGMM", "System Generalized Method of Moments (GMM) estimation of linear IV models"], [785, 1, 1, 0, "LinearConstraint", "Linear constraint for regression estimation"], [790, 1, 1, 0, "SUR", "Seemingly unrelated regression estimation (SUR/SURE)"]], "linearmodels.system.model.IV3SLS": [[765, 4, 1, 0, "add_constraints", "Add parameter constraints to a model."], [766, 3, 1, 0, "constraints", "Model constraints"], [767, 4, 1, 0, "fit", "Estimate model parameters"], [768, 3, 1, 0, "formula", "Set or get the formula used to construct the model"], [769, 4, 1, 0, "from_formula", "Specify a 3SLS using the formula interface"], [770, 3, 1, 0, "has_constant", "Vector indicating which equations contain constants"], [771, 4, 1, 0, "multivariate_iv", "Interface for specification of multivariate IV models"], [772, 3, 1, 0, "param_names", "Model parameter names"], [773, 4, 1, 0, "predict", "Predict values for additional data"], [774, 4, 1, 0, "reset_constraints", "Remove all model constraints"]], "linearmodels.system.model.IV3SLS.__init__": [[764, 2, 2, 0, "equations", "Dictionary-like structure containing dependent, exogenous, endogenous and instrumental variables."], [764, 2, 2, 0, "sigma", "Prespecified residual covariance to use in GLS estimation."]], "linearmodels.system.model.IV3SLS.add_constraints": [[765, 2, 2, 0, "q", "Constraint values (nconstraints)."], [765, 2, 2, 0, "r", "Constraint matrix."]], "linearmodels.system.model.IV3SLS.fit": [[767, 2, 2, 0, "cov_config", "Additional parameters to pass to covariance estimator."], [767, 2, 2, 0, "cov_type", "Name of covariance estimator."], [767, 2, 2, 0, "full_cov", "Flag indicating whether to utilize information in correlations when estimating the model with GLS"], [767, 2, 2, 0, "iter_limit", "Maximum number of iterations for iterative GLS"], [767, 2, 2, 0, "iterate", "Flag indicating to iterate GLS until convergence of iter limit iterations have been completed"], [767, 2, 2, 0, "method", "Estimation method."], [767, 2, 2, 0, "tol", "Tolerance to use when checking for convergence in iterative GLS"]], "linearmodels.system.model.IV3SLS.from_formula": [[769, 2, 2, 0, "data", "Frame containing named variables"], [769, 2, 2, 0, "formula", "Either a string or a dictionary of strings where each value in the dictionary represents a single equation."], [769, 2, 2, 0, "sigma", "Prespecified residual covariance to use in GLS estimation."], [769, 2, 2, 0, "weights", "Dictionary like object (e.g."]], "linearmodels.system.model.IV3SLS.multivariate_iv": [[771, 2, 2, 0, "dependent", "nobs by ndep array of dependent variables"], [771, 2, 2, 0, "endog", "nobs by nendog array of endogenous regressors common to all models"], [771, 2, 2, 0, "exog", "nobs by nexog array of exogenous regressors common to all models"], [771, 2, 2, 0, "instruments", "nobs by ninstr array of instruments to use in all equations"]], "linearmodels.system.model.IV3SLS.predict": [[773, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [773, 2, 2, 0, "equations", "Dictionary-like structure containing exogenous and endogenous variables."], [773, 2, 2, 0, "eval_env", "Depth to  use when evaluating formulas."], [773, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.system.model.IVSystemGMM": [[776, 4, 1, 0, "add_constraints", "Add parameter constraints to a model."], [777, 3, 1, 0, "constraints", "Model constraints"], [778, 4, 1, 0, "fit", "Estimate model parameters"], [779, 3, 1, 0, "formula", "Set or get the formula used to construct the model"], [780, 4, 1, 0, "from_formula", "Specify a 3SLS using the formula interface"], [781, 3, 1, 0, "has_constant", "Vector indicating which equations contain constants"], [782, 3, 1, 0, "param_names", "Model parameter names"], [783, 4, 1, 0, "predict", "Predict values for additional data"], [784, 4, 1, 0, "reset_constraints", "Remove all model constraints"]], "linearmodels.system.model.IVSystemGMM.__init__": [[775, 2, 2, 0, "equations", "Dictionary-like structure containing dependent, exogenous, endogenous and instrumental variables."], [775, 2, 2, 0, "sigma", "Prespecified residual covariance to use in GLS estimation."], [775, 2, 2, 0, "weight_config", "Additional keyword arguments to pass to the moment condition weight function"], [775, 2, 2, 0, "weight_type", "Name of moment condition weight function to use in the GMM estimation"]], "linearmodels.system.model.IVSystemGMM.add_constraints": [[776, 2, 2, 0, "q", "Constraint values (nconstraints)."], [776, 2, 2, 0, "r", "Constraint matrix."]], "linearmodels.system.model.IVSystemGMM.fit": [[778, 2, 2, 0, "cov_config", "Additional parameters to pass to covariance estimator."], [778, 2, 2, 0, "cov_type", "Name of covariance estimator."], [778, 2, 2, 0, "initial_weight", "Initial weighting matrix to use in the first step."], [778, 2, 2, 0, "iter_limit", "Maximum number of iterations for iterative GLS"], [778, 2, 2, 0, "tol", "Tolerance to use when checking for convergence in iterative GLS"]], "linearmodels.system.model.IVSystemGMM.from_formula": [[780, 2, 2, 0, "data", "Frame containing named variables"], [780, 2, 2, 0, "formula", "Either a string or a dictionary of strings where each value in the dictionary represents a single equation."], [780, 2, 2, 0, "weight_config", "Additional keyword arguments to pass to the moment condition weight function"], [780, 2, 2, 0, "weight_type", "Name of moment condition weight function to use in the GMM estimation."], [780, 2, 2, 0, "weights", "Dictionary like object (e.g."]], "linearmodels.system.model.IVSystemGMM.predict": [[783, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [783, 2, 2, 0, "equations", "Dictionary-like structure containing exogenous and endogenous variables."], [783, 2, 2, 0, "eval_env", "Depth to  use when evaluating formulas."], [783, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.system.model.LinearConstraint": [[786, 3, 1, 0, "a", "Transformed constraint target"], [787, 3, 1, 0, "q", "Constrain target values"], [788, 3, 1, 0, "r", "Constraint loading matrix"], [789, 3, 1, 0, "t", "Constraint transformation matrix"]], "linearmodels.system.model.LinearConstraint.__init__": [[785, 2, 2, 0, "num_params", "Number of model parameter."], [785, 2, 2, 0, "q", "Restriction value"], [785, 2, 2, 0, "r", "Restriction loading matrix"], [785, 2, 2, 0, "require_pandas", "Flag indicating whether r and q must be pandas"]], "linearmodels.system.model.SUR": [[791, 4, 1, 0, "add_constraints", "Add parameter constraints to a model."], [792, 3, 1, 0, "constraints", "Model constraints"], [793, 4, 1, 0, "fit", "Estimate model parameters"], [794, 3, 1, 0, "formula", "Set or get the formula used to construct the model"], [795, 4, 1, 0, "from_formula", "Specify a SUR using the formula interface"], [796, 3, 1, 0, "has_constant", "Vector indicating which equations contain constants"], [797, 4, 1, 0, "multivariate_ls", "Interface for specification of multivariate regression models"], [798, 3, 1, 0, "param_names", "Model parameter names"], [799, 4, 1, 0, "predict", "Predict values for additional data"], [800, 4, 1, 0, "reset_constraints", "Remove all model constraints"]], "linearmodels.system.model.SUR.__init__": [[790, 2, 2, 0, "equations", "Dictionary-like structure containing dependent and exogenous variable values."], [790, 2, 2, 0, "sigma", "Prespecified residual covariance to use in GLS estimation."]], "linearmodels.system.model.SUR.add_constraints": [[791, 2, 2, 0, "q", "Constraint values (nconstraints)."], [791, 2, 2, 0, "r", "Constraint matrix."]], "linearmodels.system.model.SUR.fit": [[793, 2, 2, 0, "cov_config", "Additional parameters to pass to covariance estimator."], [793, 2, 2, 0, "cov_type", "Name of covariance estimator."], [793, 2, 2, 0, "full_cov", "Flag indicating whether to utilize information in correlations when estimating the model with GLS"], [793, 2, 2, 0, "iter_limit", "Maximum number of iterations for iterative GLS"], [793, 2, 2, 0, "iterate", "Flag indicating to iterate GLS until convergence of iter limit iterations have been completed"], [793, 2, 2, 0, "method", "Estimation method."], [793, 2, 2, 0, "tol", "Tolerance to use when checking for convergence in iterative GLS"]], "linearmodels.system.model.SUR.from_formula": [[795, 2, 2, 0, "data", "Frame containing named variables"], [795, 2, 2, 0, "formula", "Either a string or a dictionary of strings where each value in the dictionary represents a single equation."], [795, 2, 2, 0, "sigma", "Prespecified residual covariance to use in GLS estimation."], [795, 2, 2, 0, "weights", "Dictionary like object (e.g."]], "linearmodels.system.model.SUR.multivariate_ls": [[797, 2, 2, 0, "dependent", "nobs by ndep array of dependent variables"], [797, 2, 2, 0, "exog", "nobs by nvar array of exogenous regressors common to all models"]], "linearmodels.system.model.SUR.predict": [[799, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [799, 2, 2, 0, "equations", "Dictionary-like structure containing exogenous and endogenous variables."], [799, 2, 2, 0, "eval_env", "Depth to  use when evaluating formulas."], [799, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.system.results": [[801, 1, 1, 0, "GMMSystemResults", "Results from GMM System Estimators"], [836, 1, 1, 0, "SystemResults", "Results from Seemingly Unrelated Regression Estimators"]], "linearmodels.system.results.GMMSystemResults": [[802, 4, 1, 0, "breusch_pagan", "Breusch-Pagan LM test for no cross-correlation"], [803, 4, 1, 0, "conf_int", "Confidence interval construction"], [804, 3, 1, 0, "cov", "Estimated covariance of parameters"], [805, 3, 1, 0, "cov_config", "Configuration of covariance estimator used to compute covariance"], [806, 3, 1, 0, "cov_estimator", "Type of covariance estimator used to compute covariance"], [807, 3, 1, 0, "debiased", "Flag indicating whether covariance uses a small-sample adjustment"], [808, 3, 1, 0, "df_model", "Model degree of freedom"], [809, 3, 1, 0, "df_resid", "Residual degree of freedom"], [810, 3, 1, 0, "equation_labels", "Individual equation labels"], [811, 3, 1, 0, "equations", "Individual equation results"], [812, 3, 1, 0, "fitted_values", "Fitted values"], [813, 3, 1, 0, "iterations", "Number of iterations of the GLS executed"], [814, 3, 1, 0, "j_stat", "J-test of overidentifying restrictions"], [815, 4, 1, 0, "likelihood_ratio", "Likelihood ratio test of no cross-correlation"], [816, 3, 1, 0, "method", "Estimation method"], [817, 3, 1, 0, "model", "Model used in estimation"], [818, 3, 1, 0, "model_ss", "Residual sum of squares"], [819, 3, 1, 0, "nobs", "Number of observations"], [820, 3, 1, 0, "params", "Estimated parameters"], [821, 4, 1, 0, "predict", "In- and out-of-sample predictions"], [822, 3, 1, 0, "pvalues", "Parameter p-vals. Uses t(df_resid) if debiased is True, else normal"], [823, 3, 1, 0, "resid_ss", "Residual sum of squares"], [824, 3, 1, 0, "resids", "Estimated residuals"], [825, 3, 1, 0, "rsquared", "Coefficient of determination (R2)"], [826, 3, 1, 0, "sigma", "Estimated residual covariance"], [827, 3, 1, 0, "std_errors", "Estimated parameter standard errors"], [828, 3, 1, 0, "summary", "Model estimation summary."], [829, 3, 1, 0, "system_rsquared", "Alternative measure of system fit"], [830, 3, 1, 0, "total_ss", "Total sum of squares"], [831, 3, 1, 0, "tstats", "Parameter t-statistics"], [832, 3, 1, 0, "w", "GMM weight matrix used in estimation"], [833, 3, 1, 0, "weight_config", "Weight configuration options used in GMM estimation"], [834, 3, 1, 0, "weight_type", "Type of weighting used in GMM estimation"], [835, 3, 1, 0, "wresids", "Weighted estimated residuals"]], "linearmodels.system.results.GMMSystemResults.__init__": [[801, 2, 2, 0, "results", "Dictionary of model estimation results"]], "linearmodels.system.results.GMMSystemResults.conf_int": [[803, 2, 2, 0, "level", "Confidence level for interval"]], "linearmodels.system.results.GMMSystemResults.predict": [[821, 2, 2, 0, "data", "DataFrame to use for out-of-sample predictions when model was constructed using a formula."], [821, 2, 2, 0, "dataframe", "Flag indicating to return output as a dataframe."], [821, 2, 2, 0, "equations", "Dictionary-like structure containing exogenous and endogenous variables."], [821, 2, 2, 0, "fitted", "Flag indicating whether to include the fitted values"], [821, 2, 2, 0, "idiosyncratic", "Flag indicating whether to include the estimated idiosyncratic shock"], [821, 2, 2, 0, "missing", "Flag indicating to adjust for dropped observations."]], "linearmodels.system.results.SystemResults": [[837, 4, 1, 0, "breusch_pagan", "Breusch-Pagan LM test for no cross-correlation"], [838, 4, 1, 0, "conf_int", "Confidence interval construction"], [839, 3, 1, 0, "cov", "Estimated covariance of parameters"], [840, 3, 1, 0, "cov_config", "Configuration of covariance estimator used to compute covariance"], [841, 3, 1, 0, "cov_estimator", "Type of covariance estimator used to compute covariance"], [842, 3, 1, 0, "debiased", "Flag indicating whether covariance uses a small-sample adjustment"], [843, 3, 1, 0, "df_model", "Model degree of freedom"], [844, 3, 1, 0, "df_resid", "Residual degree of freedom"], [845, 3, 1, 0, "equation_labels", "Individual equation labels"], [846, 3, 1, 0, "equations", "Individual equation results"], [847, 3, 1, 0, "fitted_values", "Fitted values"], [848, 3, 1, 0, "iterations", "Number of iterations of the GLS executed"], [849, 4, 1, 0, "likelihood_ratio", "Likelihood ratio test of no cross-correlation"], [850, 3, 1, 0, "method", "Estimation method"], [851, 3, 1, 0, "model", "Model used in estimation"], [852, 3, 1, 0, "model_ss", "Residual sum of squares"], [853, 3, 1, 0, "nobs", "Number of observations"], [854, 3, 1, 0, "params", "Estimated parameters"], [855, 4, 1, 0, "predict", "In- and out-of-sample predictions"], [856, 3, 1, 0, "pvalues", "Parameter p-vals. Uses t(df_resid) if debiased is True, else normal"], [857, 3, 1, 0, "resid_ss", "Residual sum of squares"], [858, 3, 1, 0, "resids", "Estimated residuals"], [859, 3, 1, 0, "rsquared", "Coefficient of determination (R2)"], [860, 3, 1, 0, "sigma", "Estimated residual covariance"], [861, 3, 1, 0, "std_errors", "Estimated parameter standard errors"], [862, 3, 1, 0, "summary", "Model estimation summary."], [863, 3, 1, 0, "system_rsquared", "Alternative measure of system fit"], [864, 3, 1, 0, "total_ss", "Total sum of squares"], [865, 3, 1, 0, "tstats", "Parameter t-statistics"], [866, 3, 1, 0, "wresids", "Weighted estimated residuals"]], "linearmodels.system.results.SystemResults.__init__": [[836, 2, 2, 0, "results", "Dictionary of model estimation results"]], "linearmodels.system.results.SystemResults.conf_int": [[838, 2, 2, 0, "level", "Confidence level for interval"]], "linearmodels.system.results.SystemResults.predict": [[855, 2, 2, 0, "data", "DataFrame to use for out-of-sample predictions when model was constructed using a formula."], [855, 2, 2, 0, "dataframe", "Flag indicating to return output as a dataframe."], [855, 2, 2, 0, "equations", "Dictionary-like structure containing exogenous and endogenous variables."], [855, 2, 2, 0, "fitted", "Flag indicating whether to include the fitted values"], [855, 2, 2, 0, "idiosyncratic", "Flag indicating whether to include the estimated idiosyncratic shock"], [855, 2, 2, 0, "missing", "Flag indicating to adjust for dropped observations."]], "linearmodels.typing": [[867, 6, 1, 0, "Numeric", "alias of int | float"], [867, 6, 1, 0, "OptionalNumeric", "alias of int | float | None"]], "linearmodels.typing.data": [[867, 6, 1, 0, "AnyArray", "alias of ndarray[tuple[int, ...], Any]"], [867, 6, 1, 0, "ArrayLike", "alias of ndarray | DataArray | DataFrame | Series"], [867, 6, 1, 0, "BoolArray", "alias of ndarray[tuple[int, ...], dtype[bool]]"], [867, 6, 1, 0, "Float64Array", "alias of ndarray[tuple[int, ...], dtype[float64]]"], [867, 6, 1, 0, "Int32Array", "alias of ndarray[tuple[int, ...], dtype[int32]]"], [867, 6, 1, 0, "Int64Array", "alias of ndarray[tuple[int, ...], dtype[int64]]"], [867, 6, 1, 0, "IntArray", "alias of ndarray[tuple[int, ...], dtype[int64]]"], [867, 6, 1, 0, "Uint32Array", "alias of ndarray[tuple[int, ...], dtype[uint32]]"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "property", "Python property"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:parameter", "3": "py:property", "4": "py:method", "5": "py:function", "6": "py:attribute"}, "terms": {"": [69, 70, 71, 72, 73, 77, 150, 151, 153, 154, 155, 161, 167, 173, 179, 196, 205, 246, 250, 261, 269, 273, 324, 325, 334, 358, 359, 360, 395, 397, 398, 401, 403, 405, 413, 421, 439, 447, 489, 505, 514, 524, 532, 704, 715, 716, 717, 719, 721, 731, 736, 744, 758, 825, 829, 859, 863, 877, 886, 887, 892], "0": [0, 7, 21, 69, 70, 72, 73, 85, 106, 133, 140, 144, 149, 150, 151, 152, 154, 173, 181, 183, 225, 235, 246, 250, 257, 261, 274, 305, 326, 357, 359, 364, 392, 395, 397, 398, 399, 401, 402, 403, 404, 405, 413, 421, 429, 439, 447, 455, 491, 499, 507, 516, 526, 534, 543, 575, 578, 615, 632, 664, 667, 701, 707, 708, 711, 715, 716, 717, 718, 719, 764, 765, 775, 776, 790, 791, 802, 803, 815, 837, 838, 849], "00": [149, 398, 402, 717], "000": [77, 397, 399, 404, 715], "0000": [69, 70, 72, 149, 150, 151, 152, 154, 397, 398, 399, 402, 404, 715, 716, 717, 718], "00000": 397, "000000": [69, 150, 151, 397], "00000000000000e": 149, "000000e": 151, "00000e": 149, "0001": [72, 150, 151, 152, 225, 398, 404, 715, 716, 717], "0001153166806434": 150, "0002": [69, 70, 72, 150, 151, 397, 402, 715, 716], "0003": [150, 151, 152, 399, 715, 716, 717], "0004": [69, 151, 398, 715, 716, 717], "0005": [69, 151, 715, 716, 717], "0006": [69, 397, 398, 715, 716, 717], "0007": [69, 70, 398, 715, 716, 717], "0008": [149, 151, 398, 715], "0009": [69, 149, 151, 398, 715, 716, 717], "000e": 149, "001": 715, "0010": [69, 70, 149, 151, 399, 715, 716, 717], "0011": [72, 398, 715, 716, 717], "0012": [69, 70, 72, 398, 715], "0013": [69, 715, 717], "0014": [69, 70, 149, 398, 715, 717, 718], "0015": [69, 151, 715], "0016": [69, 70, 72, 151, 715, 716], "0017": [69, 151, 715], "0018": [151, 715], "0019": [150, 152, 715], "001914": 69, "001e": 149, "002": 715, "0020": [715, 717], "0021": [70, 72, 715, 717], "002124": 715, "0022": [70, 72, 151, 398, 717], "0023": [69, 72, 151, 397, 398, 715], "0024": [70, 151, 397, 398], "0025": [69, 151, 715, 716, 718], "0026": 715, "0027": [69, 715, 717], "002744": 69, "002783": 69, "0028": [149, 151, 398, 717], "0029": [72, 151, 715, 717], "003": [69, 715], "0030": [69, 150, 151, 152, 715], "0031": [69, 150, 715], "0032": [69, 715], "0033": [69, 398, 402, 715], "0034": [69, 398, 715, 718], "0035": [69, 150, 152, 715], "003529": 150, "0036": [70, 151], "0037": [69, 150, 151, 398, 402, 715], "0038": [69, 70, 398, 716], "0039": [69, 398, 715, 718], "003e": 149, "0040": [69, 70, 398, 715], "0041": 402, "0042": [70, 151, 398, 715], "0044": [70, 151, 716], "0045": [69, 72, 150, 151, 152], "0046": [69, 398], "0047": [398, 716], "0048": 715, "0049": 715, "005": 715, "0050": [70, 716], "0051": [151, 398, 715], "0052": [398, 715], "0053": [69, 70, 717], "0054": [397, 404, 715], "0055": [69, 70, 398, 399, 715], "0056": [69, 70], "0057": [151, 715], "0058": [69, 397], "005801": 715, "0059": [151, 715, 716], "006": 715, "0060": [72, 151, 715], "0061": 398, "0062": 718, "0063": [70, 715, 716, 717], "0064": 715, "0065": [69, 399], "0066": [69, 398, 715], "0067": [69, 151, 398, 716], "0068": [72, 398, 715], "007": 715, "0070": [69, 151], "0071": [70, 150, 397], "0072": 715, "0073": [69, 150, 152, 154, 715], "0074": 69, "0075": [70, 716], "0076": [69, 151], "0077": 151, "0078": [69, 399], "0079": 69, "008": 715, "0080": [150, 151, 398, 715], "0081": [70, 150, 152, 715], "0082": 715, "008232": 150, "0083": 715, "0084": [69, 151, 715], "0085": 151, "0086": [69, 150, 715], "0088": [70, 717], "0089": 150, "0090": [69, 151, 715, 717], "0091": 69, "0092": 72, "0093": [715, 717], "0094": [69, 150, 152, 715], "0095": [151, 715], "0096": 69, "0097": [69, 151, 715, 716], "009726": 69, "0099": [398, 715, 716], "009952": 69, "00e": 149, "01": [149, 717], "0100": [69, 398], "010000": 151, "010064": 69, "0101": [151, 715], "0102": [69, 150, 152, 397, 404], "0103": [69, 70], "010335": 151, "010482": 150, "0105": [69, 150, 152, 715], "0106": [69, 715], "010643": 69, "0107": 398, "0108": [398, 715], "0109": [70, 715], "0110": 69, "0111": 69, "011102": 151, "0112": [69, 398], "0113": [69, 398, 399, 404], "0114": [69, 715], "0116": 717, "0117": 715, "0118": 398, "0119": [150, 398], "0120": [715, 717], "012009": 69, "0121": 717, "0123": [69, 70, 402], "0126": 715, "0128": [150, 715], "0129": [151, 399, 715], "0130": 715, "0132": [150, 151, 152, 715], "0133": [69, 150], "0134": [151, 398, 715], "0135": 69, "0136": [69, 70, 715], "0137": [69, 150, 152, 398], "0138": 717, "0139": [398, 715], "0141": [150, 715], "0142": [150, 151], "0143": [69, 715], "0144": [151, 398], "0145": 715, "0148": 715, "0149": [151, 715], "015197": 69, "0152": [69, 716], "0154": 398, "0156": 715, "015628": 69, "0157": 398, "0158": 151, "0159": [151, 715, 717], "016": 715, "0160": [398, 715], "016018": 151, "0161": 715, "0162": [715, 717], "0164": [150, 152], "0165": [399, 404], "0166": 715, "0168": 398, "017": 715, "017078": 69, "0171": 715, "0172": [398, 715], "0176": 716, "0177": 150, "0179": [150, 398], "018": 715, "0180": [69, 151], "0181": [69, 151], "0182": 402, "0183": 398, "0184": 151, "0185": 151, "0186": 718, "0187": 715, "019": 715, "0190": [70, 717], "0191": [150, 152], "0192": 151, "0193": 398, "0195": 69, "0196": 398, "019665546492007": 69, "0197": 398, "0198": [154, 402], "0199": 151, "02": [149, 151, 717], "020": 715, "0200": 69, "0201": 715, "020135": 151, "0202": 398, "0204": [150, 152], "020407": 715, "0205": [151, 715], "0206": 715, "0208": [151, 398], "0210": [399, 716], "0211": 715, "0212": 715, "0213": 716, "0214": [69, 715], "0216": [398, 716], "0217": [151, 398], "0218": 151, "0219": [398, 399], "0222": 717, "0223": 151, "0224": 151, "0226": [150, 151, 152, 715], "0227": 715, "0228": 716, "0229": 398, "0230": [150, 152, 717], "023286": 151, "0233": 151, "023360": 69, "0234": 398, "0236": 398, "0238": 151, "0239": 715, "0240": [716, 718], "0241": [151, 398], "0242": 399, "024215": 69, "0243": [150, 398, 404], "0244": [398, 716], "0245": [150, 151], "0247": [151, 398, 716], "0248": [398, 715], "024812": 717, "0252": 716, "0253": 398, "0254": [150, 152], "0255": 151, "0256": 716, "0257": 151, "0258": 715, "0259": 69, "026": 715, "0260": [150, 151, 152, 715], "0261": 715, "0262": 151, "0263": [151, 715], "0266": [398, 715, 717], "0267": [397, 404], "0268": 398, "02689e": 149, "0269": 399, "027": 717, "0270": 402, "0275": 151, "0276": 715, "0278": [150, 151, 398], "027800": 151, "0279": [151, 715], "027988": 151, "028": 715, "0280": 151, "0282": 150, "0283": [150, 718], "0285": 151, "0286": 150, "0288": [150, 151, 397, 715], "0289": 716, "029": 715, "0290": [150, 154], "0291": 151, "0292": [150, 398], "0293": [151, 715], "029383": 69, "0295": [717, 718], "0296": 398, "0297": [398, 399], "0299": 717, "03": [149, 404], "030": 150, "0303": [151, 715], "0304": 398, "0307": 715, "0308": 151, "0309": [398, 715], "030919": 69, "031": 715, "0311": 151, "0312": 715, "0313": [151, 715], "0316": [69, 718], "0317": 715, "0318": 715, "031946": 151, "0320": [151, 398], "0324": 398, "0326": [150, 152], "032668": 151, "0327": [151, 398], "033183": 151, "0332": 398, "033345": 69, "0335": [150, 151], "0337": 151, "0339": 404, "034": [69, 715], "0341": [150, 152, 154, 715], "0342": 715, "0343": 716, "0345": 717, "0346": [151, 716], "0347": 398, "035": [151, 715], "0350": [151, 716], "0351": 151, "0352": [151, 715], "0354": [151, 715], "0355": 151, "0356": 151, "0357": [151, 715, 716], "0359": [150, 715], "0361": 717, "0362": [69, 398], "0363": 717, "0365": [151, 398], "036528": 151, "0366": 715, "0367": 398, "037": 715, "0371": 716, "0373": [150, 152], "037352": 150, "0375": 715, "0376": 715, "0378": 398, "037845": 151, "0379": 397, "038": 717, "0380": 715, "0381": [151, 398], "0382": 150, "0386": 715, "0387": 151, "0388": 150, "0389": 715, "0390": 715, "0392": 716, "0393": 718, "039375": 151, "0394": [150, 151], "0395": [150, 152], "0397": [715, 717], "04": [69, 149, 715, 716, 717], "0400": 150, "0401": [151, 398], "0403": 715, "0404": 398, "040453": 151, "0406": 150, "0409": [150, 151], "0410": [150, 151], "0411": 151, "0412": 398, "0414": 150, "0417": 398, "0421": [151, 398], "0424": 404, "0425": 151, "042576": 151, "0426": [150, 152, 398], "04265e": 149, "0427": 717, "0428": [151, 398], "042818": 715, "043": 715, "0430": 398, "0433": 715, "0434": [398, 716], "0435": [150, 151, 152], "0438": 154, "043e": 151, "0440": 402, "044042": 69, "0441": 151, "0442": 151, "0445": 716, "044578": 150, "0449": [151, 399, 718], "0450": 151, "0452": [398, 715], "0453": [398, 715], "0453647242602209": 150, "0455": 151, "0455969164423224": 150, "0458": 715, "0459": 154, "0459299321858915": 150, "0460": 398, "046135159548402": 150, "0462": [151, 716], "0462465870174984": 150, "0463088742521145": 150, "0463424840551647": 150, "0464": 398, "0464130356965964": 150, "0464502883543296": 150, "046470037960651": 150, "046520": 397, "046531": 69, "0467": [398, 716], "0471": 715, "047256": 69, "0473": [716, 717], "0474": 716, "0475": [150, 715], "047832": 397, "0480": 398, "0481": 151, "0482": 715, "0484": 150, "048489": 715, "0485": [154, 398], "0489": 398, "049": [150, 152], "0490": 716, "0491": 151, "049180": 151, "0492": [715, 716], "0493": 717, "0494": [398, 715], "0497": 151, "0499": 151, "05": [69, 70, 85, 149, 150, 151, 152, 397, 398, 399, 717], "0500": 151, "0501": 398, "0503": 716, "0504": 151, "0505": 151, "050760": 69, "0509": [151, 398], "051098": 69, "0514": 715, "0515": 398, "0516": 151, "0517": 715, "051740": 150, "0518": 151, "052": 717, "0522": 715, "0523": 151, "0524": [151, 715, 717], "0525": [398, 715], "052644": 397, "0527": 715, "0528": [397, 715, 716], "0533": 715, "053364": 69, "0535": 715, "0536": 715, "0538": 715, "0540": 151, "054067": 151, "0546": 717, "0548": [398, 715], "0550": 717, "0551": 151, "055570": 397, "0556": 715, "0557": 717, "0558": 716, "0561": 398, "0564": 151, "0565": 150, "0566": 151, "0567": 715, "0568": 398, "0571": 151, "057159": 151, "0572": 717, "0575": 151, "0576": 151, "0577": [398, 715], "0578": [150, 152], "057806": 150, "0579": 715, "058": 715, "0580": 398, "0582": 151, "0583": 398, "0586": 716, "058601": 151, "0587": 151, "058797": 151, "0588": 398, "059": 151, "0591": 715, "0592": [150, 151, 152], "0595": [715, 717], "059730": 69, "0598": 151, "0599": 398, "06": [149, 151, 767, 778, 793], "060": 715, "0606": [398, 715], "0607": 715, "0608": 715, "060975": 151, "060e": 149, "0611": [715, 717], "0613": 150, "0614": [151, 398], "0615": 398, "0616": 398, "0617": 151, "0619": 151, "062": 715, "0620": 398, "062048": 150, "0621": [716, 717], "0622": 398, "062397": 69, "062465": 150, "0625": 151, "0626": [151, 716, 717], "0627": 150, "0628": 398, "0629": 398, "063": 715, "063013": 397, "063067": 151, "0632": 715, "063212": 715, "0633": 716, "0634": [150, 152, 715], "063452": 151, "0635": 715, "0637": 150, "0638": 398, "0640": [150, 152], "0643": 715, "0644": 150, "064538": 151, "0647": 717, "0651": [150, 151], "0653": 715, "0654": 152, "0656": 151, "0658": [151, 715], "065849": 151, "0659": 152, "0662": 151, "0668": 398, "0669": 715, "067": [69, 398], "0672": 398, "0674": [151, 402], "0675": 151, "0676": [150, 151], "0677": 715, "067874": 151, "0679": [398, 715], "0683": [150, 152], "0684": 715, "0685": [397, 715], "0688": 398, "0695": 151, "0696": 715, "069780": 69, "07": [149, 151, 404], "070": 715, "0700": [151, 404, 715], "0702": 398, "0704": 151, "0705": 715, "0709": [151, 398], "0711": 715, "0714": 716, "0715": 151, "0716": [151, 398], "0717": [402, 715], "0720": 717, "0724": [150, 715], "0726": 399, "0727": 150, "0730": 715, "0731": 151, "0734": 150, "0736": 399, "0737": 398, "073879": 150, "0739": [150, 152], "0740": 151, "074255": 151, "0747": 151, "075": 715, "0750": [399, 716], "0751": 397, "0753": 715, "0756": 398, "0757": 718, "0758": 715, "0761": 150, "0766": 715, "076637": 715, "0768": 715, "0769": 398, "077": 715, "0773": 398, "0775": [398, 715], "077e": 149, "0780": 715, "078098": 69, "0783": 398, "0784": 151, "0786": 151, "0787": 151, "079": 715, "0791": 715, "0792": 715, "0794": 717, "0798": 718, "08": [149, 399, 404, 717], "0800": 398, "080043": 397, "0801": 717, "0804": [398, 715], "080411": 151, "0805": [151, 715], "080556": 69, "0807": [398, 716], "080893": 715, "0809": 715, "081": 715, "0811": [398, 715], "0813": 398, "0814": 151, "0817": 398, "081779": 717, "0818": 151, "0821": 150, "082546": 69, "0826": [398, 716], "0828": 402, "0829": 715, "083": 715, "0831": [151, 398, 715], "0834": 150, "0837": [154, 715], "0840": 151, "084031": 715, "0843": [150, 152], "0844": [150, 152], "084601": 151, "0847": 715, "0848": 151, "0849": [69, 715], "0857": [398, 715], "0858": 715, "085831": 715, "0859": 717, "0862": 718, "086255": 151, "0866": [715, 717], "0867": 716, "087": 398, "0870": [150, 152], "0871": [404, 717], "0873": [152, 717], "0875": 717, "0877": 151, "0879": [399, 404], "0880": 404, "08847e": 149, "088622326070173": 69, "088622402796993": 69, "088771421936666": 69, "08879828597695": 69, "0889": 398, "088949": 397, "089": 69, "0891": 399, "0892": 398, "089281": 151, "0895": 715, "09": [69, 149, 397], "090": 715, "090000": 151, "090104": 715, "0902": 715, "0905": 398, "0908": [150, 398], "0909": 715, "091": 715, "0912": 399, "09126661325285": 69, "0913": [151, 398], "0914": [151, 715], "0915": 716, "0916": 715, "0918": [70, 398, 715], "091865": 715, "0919": [398, 715], "092021": 69, "0921": 398, "0923": 151, "0925": 715, "092537": 151, "0926": 715, "092658": 69, "0928": [151, 715], "0930": 398, "0932": [151, 715], "0934": [151, 397], "0938": 398, "094": 397, "0941": 398, "09415705992026": 69, "0943": 150, "0944": 398, "0945": 150, "0946": 69, "094600": 69, "0947": 150, "0948": 715, "0949": 715, "0950": 150, "0952": 717, "095270": 69, "0957": 150, "095886": 715, "096": 715, "0961": 717, "0963": [398, 715], "0964": 151, "0966": 715, "0967": [398, 717], "096876": 151, "0973": [151, 715], "0976": 715, "0980": 151, "09819e": 149, "0988": [151, 715], "0989": 398, "0994": 398, "0999": 717, "0_": 73, "0e": 149, "0rc1": 79, "0x282ca8f7b70": 718, "0x2aeec70b7f0": 404, "0x7f0c7db47050": 151, "0x7f0c7dbcd5d0": 151, "0x7f0c7fe48250": 151, "0x7fd946574b50": 150, "0x7fd946a982f0": 150, "0x7fd94705d910": 150, "0x7fd9494323f0": 150, "0x7fd949624170": 150, "0x7fd94966ebd0": 150, "1": [70, 73, 75, 77, 80, 91, 92, 100, 102, 133, 140, 144, 148, 149, 150, 151, 152, 154, 155, 161, 167, 173, 179, 180, 181, 182, 193, 195, 196, 198, 199, 205, 208, 211, 212, 213, 216, 220, 221, 222, 223, 224, 227, 231, 232, 233, 234, 235, 238, 241, 243, 244, 245, 246, 247, 250, 254, 255, 256, 257, 258, 261, 265, 266, 267, 288, 305, 310, 352, 357, 358, 360, 392, 394, 395, 397, 398, 399, 402, 403, 404, 405, 413, 421, 429, 439, 447, 455, 489, 491, 494, 496, 499, 502, 505, 507, 510, 514, 516, 520, 524, 526, 529, 532, 534, 537, 553, 575, 589, 615, 617, 642, 664, 677, 701, 703, 710, 714, 715, 716, 717, 719, 721, 725, 728, 731, 736, 740, 744, 750, 753, 758, 764, 767, 769, 773, 775, 780, 783, 790, 793, 795, 797, 799, 802, 814, 815, 825, 829, 837, 849, 859, 863, 869, 870, 871], "10": [21, 69, 70, 75, 80, 149, 150, 151, 152, 310, 394, 397, 398, 399, 617, 703, 714, 715, 716, 717], "100": [151, 397, 399, 711, 717, 767, 793], "1000": [21, 92, 151], "10000": 717, "100000": [140, 144, 404], "1000000": 149, "100000e": 151, "100067": 69, "1008": 151, "10081": 150, "10089": [150, 152], "101": [397, 715], "1010": 715, "1011": 715, "101564": 715, "1016": 398, "1019": 398, "1020": [398, 715], "10258618881301": 69, "1035": 151, "1037": 399, "104124": 69, "1043": 715, "104344": 715, "1045": 399, "105": 151, "10500": 397, "1052": 715, "1057": [149, 398], "1058": 398, "1059": 398, "106946": 398, "107": [151, 715], "1070": 151, "1071": 399, "1073": 402, "1074": 716, "1075": [150, 152], "1077": [398, 715], "1078": 151, "107e": 149, "108": [151, 715], "1082": [398, 715], "1083": [151, 398], "1084": 150, "1086": 151, "109": [72, 715, 717], "1091": 69, "1092": 398, "109851": 69, "11": [69, 150, 151, 398, 399, 404, 575, 615, 664, 701, 715, 717, 719], "110": 398, "11000": 397, "110000": 151, "1101": [399, 404, 715], "1103": 151, "1107": 715, "1109": 151, "111": [715, 717], "1110": 717, "1111": [715, 716], "1118": 151, "1121": 150, "1123": 398, "112368": 69, "1125": 398, "1126588681969989": 151, "1128": 717, "1129": 398, "112936": 69, "113": 402, "1131": [151, 715], "1134": 715, "1138": 715, "1139": 151, "1141": 398, "1145": 399, "1146": 397, "114650": 151, "114834": 715, "115": 715, "1151": 150, "115118": 151, "1153": 399, "1155": 398, "1158": [151, 398], "1159": 151, "116": 398, "116219": 151, "1163": 718, "1164": 151, "116419": 150, "1166": 151, "1167": [399, 404], "1170": 150, "1171": 717, "1172": 151, "1174": 398, "117587": 151, "1176": [397, 715], "1178": [398, 715], "1179": [151, 398], "118": [715, 717], "1180": 151, "118024": 717, "1183": 151, "118316": 715, "1186": 151, "119": [151, 715], "1191": 715, "1193": [715, 717], "1195": 715, "119765": 151, "119849": 150, "12": [69, 70, 73, 78, 149, 150, 151, 397, 398, 399, 404, 715, 717, 718, 719], "1202": [715, 717], "1207": 151, "121": 398, "1213": 398, "1215": 402, "1218": 151, "122": [404, 717], "1222": 716, "1223": [150, 151], "1224": [151, 716], "1225": 715, "1226": 151, "1227": 151, "1228": 715, "123": [151, 397, 715], "1233": 715, "123324": 398, "1234": 715, "124": 717, "1240": 397, "1241": 151, "1246": 716, "1247": 716, "1248": [150, 152], "125": 151, "1251": 715, "125377": 717, "1254": [399, 718], "1258": [397, 715], "1260": 151, "1261": 717, "126e": 149, "127": 404, "1270": 716, "1273": 715, "1276": 717, "1279": [151, 398, 715], "1280": 151, "1281": 72, "128861": 69, "128995": 151, "1292": 715, "1296": 151, "129601": 69, "13": [69, 75, 79, 80, 149, 150, 151, 154, 397, 398, 404, 714, 715, 717], "130": 715, "1301": 399, "130621": 397, "1307": [151, 715], "131": [151, 397, 715], "1310": 151, "1312": 715, "131329": 715, "1314": [150, 152, 398], "1315": 151, "1317": 715, "132": 715, "1320": 715, "1323": 404, "1324": [398, 399, 404], "1328": 151, "1334": 715, "1337": 70, "1338": 717, "1339": 398, "133e": 717, "1344": 715, "1346": [151, 399], "1348": 398, "1350": 398, "1352": 151, "135465": 69, "1356": 151, "1357": 151, "135802": 69, "136": [715, 717], "1360": [151, 715], "1361": 398, "1362": 717, "1363": [715, 717], "1364": 151, "1365": 402, "13664": 151, "1368": 151, "1377": 151, "138": 151, "138597": 69, "1388": 151, "1390": 398, "1391": 715, "1392": 398, "1394": 398, "14": [69, 70, 150, 151, 154, 398, 404, 715, 718], "140": [397, 715], "1400": [150, 152], "140007": 717, "1405": [151, 154], "140529": 150, "1408": 715, "1409": [398, 715], "140e": 149, "141": 715, "1410": 716, "1414": 398, "1416": [151, 398], "142": 398, "1420": 398, "1421": 151, "1422": 399, "142355": 715, "1424": 715, "1426": 715, "143": 151, "1430": [398, 402, 717], "1433": [69, 716], "1435": 716, "1436": 151, "1438": 398, "1439": 402, "144": [151, 404], "1440": 398, "1444": 716, "1445": [151, 715], "1447": 151, "1450": 69, "145294": 151, "1453": 715, "1456": 151, "1463": 151, "1468": 151, "1471": 151, "147715": 717, "1479": 398, "147949": 69, "1480": 151, "1483": 151, "1484": 150, "1488": 398, "1498": 716, "1499": [151, 715], "15": [69, 70, 150, 151, 398, 399, 404, 715, 717], "150": 151, "1501": 150, "1506": 715, "1508": 715, "1512": 398, "1513": [150, 152], "151307": 150, "1514": 398, "1519": 715, "152119": 69, "15243e": 149, "152554": 151, "152601": 715, "1528": 718, "153": 715, "1536": 151, "1540": 151, "1542": 398, "154386": 151, "1544": 151, "1546": 398, "1547": 715, "1553": 151, "1559": 716, "156": 399, "1560000": 397, "1562": [151, 715], "1563": 717, "1564": 717, "1565": 715, "1568": 398, "156849": 69, "1569": 715, "157": [150, 151, 152, 717], "1570": [150, 151, 152], "1571": 398, "158": 717, "1580": 715, "158395": 69, "1587": 717, "1591": 397, "1599": 151, "16": [69, 150, 151, 398, 399, 404, 715], "1608": 715, "1617": 716, "162": 715, "1622": 398, "1624": 151, "1626": 717, "1629": 151, "163": [150, 398], "1633": 716, "1635": 151, "163544": 150, "163546": 715, "1637": 404, "1638": 151, "164": 715, "1640": 716, "164922": 151, "165": 404, "1650": 151, "1653": 152, "165385": 397, "1658": 715, "1659": 151, "165995": 715, "1662": 150, "1669": 715, "167": 715, "167054": 151, "1671": 715, "167307": 715, "1674": 715, "1678": 715, "1679": 398, "167e": 149, "1683": 398, "1684": 397, "1685": 715, "1686": 398, "1689": [150, 152], "168993": 151, "169": [715, 717], "1690": [150, 716], "1691": 398, "1692": 398, "1694": 151, "1699": 715, "169950": 715, "17": [69, 70, 97, 149, 150, 151, 152, 397, 398, 399, 402, 404, 715, 716, 717, 718], "170": [715, 717], "1700": [150, 399], "170389": 150, "1706": [151, 715], "1708": 715, "1714": 716, "17160": 151, "1717": 715, "1722": 151, "17247e": 149, "1726": 151, "1727": 151, "1728": 398, "173": [404, 715], "1733": 715, "1734": 150, "1736": [715, 717], "1738": [151, 398], "1739": 151, "174": 715, "1742": 717, "1746": [399, 715], "175549": 69, "1760": [150, 151, 715], "1761": 398, "1763": [150, 398], "1765": [150, 152, 715], "176659": 69, "1767": 398, "1768": 150, "176e": 149, "1770": [150, 151, 152], "1773": 716, "1774": 715, "1775": 716, "178": 715, "1782": 398, "1784": 398, "1785": 715, "1789": 151, "179": [150, 151], "1794": 151, "179466": 69, "1798": [151, 399], "1799": 398, "18": [69, 70, 72, 150, 151, 397, 398, 399, 404, 715, 717, 718], "180": 715, "1801": 398, "180172": 150, "1802": 151, "1806": 398, "1807": 717, "1812": 716, "1813": 715, "182299": 69, "182321": 151, "1825": [398, 399], "1828": 398, "183": [398, 717], "18326": 151, "184": 150, "1842": 150, "1843": 715, "1848": 151, "1852": 151, "1853": 398, "1854": 151, "1855": 398, "185697": 151, "186": [151, 715], "1860": 716, "18637": 714, "1864": 402, "1866": 398, "1870": 715, "1872": 717, "187275": 150, "1873": 716, "187432": 150, "1875": 140, "1876": 150, "188": 399, "1880": 716, "188094": 151, "1881": 151, "1882": [150, 715], "1887": 715, "189191": 717, "1893": 398, "1898": 715, "19": [78, 150, 151, 360, 397, 402, 715, 717], "190": 715, "1900": 399, "1901": 715, "1903": 717, "190433": 150, "1908": 151, "1916": 150, "1924": 715, "1928": 715, "193": 150, "193080894810542": 69, "1933": 717, "193340": 151, "1934": 398, "1935": 399, "1936": 399, "1937": 399, "1938": 399, "1939": 399, "194": 398, "1942": 398, "1944": 151, "1947": 150, "1949": 150, "195": 717, "1950": 151, "1952": 150, "1955": 150, "196": [151, 717], "1966": [151, 399], "197": 717, "1970000": 397, "197135": 69, "1972": 715, "1974": 154, "197452": 151, "1975": 151, "197540": 398, "1976": 151, "1977": 719, "1980": 398, "1981": 398, "1982": 398, "1983": 398, "1984": 398, "1985": [397, 398], "198597": 397, "1986": 398, "198676": 149, "1987": [151, 397, 398], "1988": [151, 397], "1989": [151, 397], "1990": [151, 399], "1992": 151, "1993": [151, 715, 716], "1994": [398, 403, 714], "1995": 151, "1996": 151, "1997": 151, "199722": 151, "1998": 398, "1_": [20, 73, 395], "1_000_000": 149, "1e": [149, 767, 778, 793], "1i": [154, 359, 395, 719, 750, 758], "1k": 719, "1kb": 397, "2": [16, 21, 44, 64, 70, 71, 72, 73, 75, 77, 79, 84, 91, 92, 105, 126, 127, 133, 140, 144, 149, 150, 151, 152, 154, 155, 161, 167, 181, 182, 196, 199, 205, 216, 225, 227, 238, 250, 261, 298, 299, 305, 310, 317, 318, 349, 350, 352, 357, 358, 360, 385, 386, 392, 394, 395, 397, 398, 399, 402, 404, 413, 439, 447, 455, 459, 480, 489, 505, 512, 514, 524, 532, 575, 615, 617, 624, 625, 626, 627, 664, 701, 703, 709, 711, 713, 714, 715, 716, 717, 718, 721, 736, 744, 758, 767, 778, 793, 802, 815, 825, 829, 837, 849, 859, 863, 889], "20": [69, 70, 150, 151, 154, 397, 399, 401, 404, 714, 715, 717], "200": [402, 715], "2000": [150, 152], "20000": 92, "200052": 69, "2002": [360, 714, 715, 716, 717], "2003": [714, 802, 815, 837, 849], "2004": 152, "2005": 714, "2007": 714, "2008": 714, "2009": 714, "200966": 715, "201": [151, 715], "2010": [714, 715], "2011": 714, "2012": 714, "2013": 714, "20158": 140, "2016": [151, 714], "2017": [72, 154, 402, 404, 718], "20195": 140, "2020": 398, "20220224": 717, "2025": [69, 70, 149, 150, 151, 152, 397, 398, 399, 715, 716, 717], "20251": 140, "202584": 151, "2027": 398, "2028": 151, "203": 399, "2031": 151, "20331": 140, "204": [715, 717], "2040": 715, "2051": 398, "205417": 715, "2057": 715, "206": 150, "206248": 715, "2066": 398, "2067": 716, "207": [399, 404], "2070": 151, "2071": 151, "208": 398, "2087": 715, "209": 399, "2091": 150, "21": [72, 73, 150, 151, 398, 399, 404, 715, 718, 719], "2103": 151, "2106": 151, "2107": [151, 715], "211083": 715, "2119": 151, "212431": 150, "2127": 716, "2130": 715, "213336": 69, "2135": 151, "2138": 404, "214": [151, 404, 715], "2141": 715, "2145": 150, "2146": 715, "2148": 151, "2153": 715, "215391": 151, "2155": [398, 716], "2159": 715, "216": 717, "2161": 398, "2168": [151, 152], "217": [151, 399], "2171": 715, "2174": [150, 152, 715], "2178": 151, "2182": [150, 152], "2186": 151, "2188": 717, "2189": 715, "219": 397, "2197": 716, "22": [69, 75, 78, 79, 80, 150, 151, 715, 717, 719], "220": [399, 404, 718], "22000": 151, "2201": 715, "2211": [150, 152], "222": 151, "22221725814185": 69, "2224": 151, "2226": 398, "2230": 151, "2231": 150, "2236": 150, "2237": [150, 151], "2240": 715, "2241": 150, "224223": 69, "2250": 150, "2253": 398, "2256": 717, "2259": 151, "226": 715, "2262": [150, 152], "22642653941578": 69, "227": 717, "2270": 715, "227368": 717, "2275": 399, "227847": 151, "2280": 150, "2284": 397, "2285": 715, "2287": [151, 715], "22889e": 149, "2297": 715, "2298": 717, "23": [150, 151, 154, 714, 715, 718], "2305": 398, "2309": [151, 404], "231": 717, "2320": 398, "2321": [398, 715], "2327": 716, "233": [398, 715], "2330": 398, "233347": 397, "2334": [151, 398], "233403": 715, "2339": 716, "234012": 69, "2342": 715, "2343": 151, "2345": 151, "2346": 398, "2352": 716, "235229": 151, "2355": 398, "2361": [151, 715], "237": 151, "2373": 151, "2375": 398, "237830": 69, "238": 714, "2382": 151, "23829810": 715, "2384": 715, "2389": 151, "2393": 404, "2396": 398, "239957": 69, "24": [150, 151, 397, 398, 715, 717], "2403": 717, "2405": 717, "2409": 715, "241": 715, "2411": 715, "241254": 150, "2417": 151, "2418": 715, "2425": [150, 151], "2428": 398, "2442": 398, "244844": 69, "2449": 715, "2453": 715, "2455": 398, "2457": 715, "246": [150, 152], "2473": [150, 715], "2475": [715, 717], "2476": 717, "2478": 718, "2479": 150, "248": 399, "248274": 151, "2485": 151, "249": 714, "2494": [151, 715], "249684": 151, "24b": 397, "25": [69, 150, 151, 152, 397, 398, 399, 404, 715], "250000": 151, "2502": 715, "250620": 150, "251180": 151, "2513": [151, 715, 716], "2514": 151, "2518": 716, "252": 715, "2528": 397, "2530": 398, "253675": 69, "2539": 716, "253946": 150, "2542": 716, "2551": 717, "2553": 398, "2557": 715, "2558": 715, "256": 97, "2562": 151, "2566": 398, "2569": 70, "257": 399, "2578": 717, "258": [151, 715], "2587": 398, "259": 715, "259130": 397, "2596": [150, 404], "26": [69, 150, 151, 152, 398, 404, 715, 717], "260051": 69, "2602": [150, 152], "2618": 717, "262": 715, "2624": 716, "2632": 151, "2634": [151, 715], "2637": 715, "264": [404, 715], "2641": 151, "264609": 69, "2648": 715, "2650": 716, "2656": 715, "2657": [715, 716], "266": 151, "2666": 717, "266e": 149, "267": [150, 151, 715], "2672": 398, "267500": 151, "2683": 715, "2688": [150, 152], "269": 715, "2694": 151, "2696": 715, "27": [150, 151, 398, 715], "270027": 397, "2707": 398, "271": 69, "2713": 715, "272": 399, "2726": [151, 715], "2727": 715, "272727": 151, "2732": 715, "2735": 398, "2737": 715, "2747": 398, "2749": 715, "2753": [151, 399, 716], "2759": 151, "276": 151, "2760": 715, "2762": 715, "2770": 717, "2774": [399, 404], "2776": [404, 715, 717], "2777": 715, "278": 399, "2786": 399, "2792": 399, "279472": 715, "2797": [150, 152], "28": [69, 150, 151, 399, 715], "2801": 404, "28031931715628": 69, "2806": 717, "281": 715, "2819": 150, "2826": 151, "2834": 398, "2835": 715, "2836": 398, "2839": 718, "28390328": 715, "2840": [151, 715], "284644": 151, "2847": [151, 716], "2850": 151, "285621": 715, "2857": 715, "2862": 715, "2864": 717, "2866": 151, "2869": 715, "2870": 717, "2873": 716, "2876": 717, "2880": 151, "2886": 151, "2892": 398, "2895": 716, "29": [151, 399, 404, 714, 715], "290": [151, 715], "2903": 151, "2917": 151, "2918": 715, "2923": 716, "29233e": 149, "2925": 717, "2926": 715, "292858": 150, "293087": 151, "293820": 717, "294": 715, "2940": [398, 717], "294570": 715, "2947": 715, "2948": [150, 152], "294855": 715, "295": 715, "2950": [398, 715], "2956": 715, "296": 398, "2960": 398, "2963": 151, "2965": 150, "2969": 717, "2971": 398, "2975": 715, "2978": 404, "297941": 69, "298": 715, "2982": 398, "2987": 715, "2989": 398, "299": [150, 717], "2990": 715, "2995": 404, "2998": 151, "29984e": 149, "29985e": 149, "29990e": 149, "2_": [71, 273, 323, 324, 334, 358, 360, 553, 589, 642, 677, 802, 815, 837, 849], "2_1": 151, "2_i": [151, 173, 829, 863], "2_p": 71, "2_q": [133, 288, 305, 357, 392, 575, 615, 664, 701, 814], "2d": [188, 397, 463, 476], "2e": 149, "2i": [154, 359, 395, 719, 750, 758], "2k": 719, "2sl": [21, 76, 91, 151, 152, 212, 236, 713, 717, 719], "2t_": 395, "3": [69, 70, 71, 72, 73, 75, 77, 79, 80, 140, 149, 150, 151, 152, 154, 181, 182, 310, 394, 395, 397, 398, 399, 402, 403, 404, 455, 480, 575, 615, 617, 664, 701, 703, 705, 715, 716, 717, 718], "30": [69, 151, 154, 397, 404, 715, 717], "3002": 715, "3004": 715, "300481": 149, "30067e": 149, "30071e": 149, "3008": 398, "3010": 151, "301235": 715, "301290": 151, "302": 404, "3024": 715, "3028": 151, "3031": 716, "3034": 715, "303730189544734": 69, "3038": 151, "3043": 404, "304442": 69, "3045": 715, "3050": 715, "305651": 397, "306": 715, "3061": 150, "3068": 716, "3071": 398, "3074": 716, "3078": 399, "3079": 150, "308": 717, "3080": 716, "30830472911881": 69, "3085": 69, "3092": 404, "3093": 715, "3094": 69, "3095": [715, 717], "3098": 715, "3099": 399, "309e": 149, "31": [151, 717], "310": 715, "3100": [399, 404], "3103": 715, "310861": 715, "311": 715, "3110": 715, "3114": 150, "3124": 715, "3134": 151, "314": [151, 715], "3141": [150, 152], "3142": 150, "3145": 398, "3146": 717, "315180": 69, "3161": 715, "3163": 151, "3165": 716, "317": 399, "3172": [151, 397], "319107": 151, "3199": 151, "32": 151, "320": [150, 152], "3203": 398, "321": 715, "3210": 716, "3216": 151, "322": 715, "3223": 398, "3226": 151, "3231": 151, "3238": 715, "3246": 715, "3247": 398, "3248": 715, "325": 715, "3253": [150, 151], "325343252968423": 69, "3254": [150, 715], "3255": 151, "3259": 715, "326": 150, "3266": 150, "3271": 715, "3275": 715, "3276": 715, "3289": 150, "328e": 149, "3291": 151, "33": [150, 151, 152, 399, 715, 717], "330": [399, 715], "3308": 716, "3310": [150, 152], "3318": 715, "332500": 151, "3333": 150, "333330": 151, "333619": 69, "3342": 715, "3345": 715, "3360": 402, "3367": 715, "3372": 718, "3381": 69, "3382": 404, "338574": 151, "339713": 151, "339801125802502": 69, "34": [151, 398, 404, 715], "340": [399, 404, 715], "3402": 151, "3407": [715, 718], "3408": 151, "3412": 398, "3413": 715, "342269": 151, "3424": 715, "3425": 404, "3426": [399, 404], "343": 715, "3433": 150, "3439": 715, "344": 715, "344462": 398, "34541049972333": 150, "3459": 150, "3464": 151, "347": 715, "3470": 715, "34706e": 149, "3476": 715, "3478": 716, "348": [399, 715], "3482": 398, "3491": 398, "3496": 397, "3498": [151, 404], "35": 151, "350": 715, "3500": 715, "35000": 397, "350983": 151, "351": 715, "3514": 399, "351611": 151, "3520": 715, "353": 152, "353818": 151, "3539": 151, "3544": 398, "3547": [715, 716], "3552": 150, "3553": 69, "3556": 716, "355820": 151, "3559": [150, 151], "356": 715, "3573": 716, "3575": 404, "358": 715, "3580": 151, "36": [69, 151, 404, 715], "360": 398, "3606": 715, "3608": 716, "3612": 398, "36138406887324": 69, "3615": 715, "362": 715, "362052": 150, "3636": 404, "3639": 715, "3640": 151, "3645": 151, "3649": 715, "365": 151, "3657": 715, "3658": 715, "3659": 715, "366": 715, "3663": 151, "367": 151, "3673": 399, "3675": [151, 715], "367818": 150, "3681": 151, "3682": 716, "3693": 151, "369880": 150, "37": [150, 151, 152, 715], "37000": 397, "3708": 715, "3712": 402, "3719": 715, "3719811106150277": 151, "3723": 715, "3730": 399, "3736": 715, "3744": 715, "3752": 715, "376": 715, "3766": 715, "3771": 715, "3775": 716, "377570": 715, "377778": 151, "377e": 149, "378": 715, "3780": 715, "378365": 69, "3785": 151, "3788": 404, "3792": 404, "38": [151, 399, 715], "380": 715, "3805": 398, "3806": 404, "3811": 398, "3812": 402, "3815": 398, "3819": 715, "382198": 150, "3825": 399, "3834": 404, "384b": 397, "3856": 69, "385885": 715, "386": [70, 715], "38605101192894": 69, "3862": 717, "3864": 717, "386498": 151, "3866": 717, "3867": 715, "3868": 397, "388": 715, "3888": 397, "3892": 717, "3896": 715, "39": [69, 70, 72, 150, 151, 715, 716, 717], "39000": 397, "3901": 398, "390277": 150, "3904": [399, 716], "391": 399, "3920": 716, "3923": 151, "3928": 715, "3930": 399, "3938": 715, "394": 399, "394449": 151, "3953": 402, "3959": 715, "3965": 715, "3975": 715, "397895": 151, "3985": 151, "398712": 151, "399": [398, 717], "3d": 397, "3e": 149, "3f": 715, "3kb": 397, "3sl": [77, 91, 713, 718, 764, 769, 780, 790], "4": [69, 70, 72, 75, 79, 80, 97, 140, 144, 149, 150, 151, 152, 154, 220, 231, 243, 254, 265, 397, 398, 399, 402, 404, 711, 714, 715, 716, 717, 718, 764, 795], "40": [69, 151, 399, 714], "40000": 717, "40001": 717, "40002": 717, "40003": 717, "40004": 717, "400651": 151, "4008": 398, "401": [397, 398], "4010": 717, "4011": 715, "4022": 151, "4025": 151, "4029": 715, "4035": 715, "4037": 398, "4041": 715, "4043": 715, "4044": 715, "405": 715, "4051": 70, "40563": 151, "4058": 715, "406": 69, "4065": 715, "4083": 715, "409": 398, "4092": [150, 152], "40968e": 149, "41": 404, "410": 399, "410032": [151, 397], "410440": 397, "410523": [151, 397], "410538": 397, "410563": [151, 397], "410565": 151, "410566": 151, "410567": 151, "410577": 151, "410593": 151, "410596": 151, "410604": 151, "410606": 151, "410626": 151, "4108": 154, "411099": 151, "4117": 715, "4118": 398, "412": 717, "4121": 715, "4125": 151, "412e": 149, "4134": [399, 715], "4136": 717, "413705": 69, "41447e": 149, "4149": 717, "4153": 151, "4157": 69, "415708": 151, "41643e": 149, "417": 151, "417e": 149, "4180": 715, "418011": 151, "418021": 151, "418035": 151, "418045": 151, "418054": 151, "418065": 151, "418076": 151, "418084": 151, "418091": 151, "418097": 151, "418107": 151, "418118": 151, "418125": 151, "418140": 151, "418163": 151, "418168": 151, "418177": 151, "418237": 151, "41880e": 149, "419": 151, "4191": 398, "419198": 151, "419201": 151, "419242": 151, "419268": 151, "419272": 151, "419289": 151, "419297": 151, "419307": 151, "419309": 151, "419339": 151, "419343": 151, "419357": 151, "419378": 151, "419381": 151, "419388": 151, "41939e": 149, "4194": 402, "419409": 151, "419459": [151, 397], "419482": [151, 397], "419483": [151, 397], "419486": 151, "4195": 399, "4196": 150, "42": [150, 404], "42126e": 149, "4220": [150, 152], "423050": 151, "4231": 69, "4237": [151, 152, 715], "4242": 151, "4247": 716, "425": 715, "4260": 398, "4267": 715, "4270": 715, "4274": 715, "428": [151, 717], "4285": 715, "4287": 399, "4288": 715, "429": 717, "43": [69, 150], "430": 398, "43000000": 397, "4303": [150, 152], "4305": 715, "4312": 151, "4313": 399, "4323": 399, "4326": 716, "433213": 398, "4335": 69, "4345": 398, "4346": 398, "434747": 151, "4352": 398, "4353": [150, 151, 152], "4360": [398, 402], "4361": 69, "437": 151, "4373": 151, "4398": 151, "4399": 150, "44": [150, 152, 404], "4400": 150, "440381": 150, "4404": [150, 152], "441": 715, "4411": 151, "4412": 398, "441e": 150, "442": 398, "4420": [151, 715], "4428": 398, "4435": 151, "444": 399, "4442": 717, "4445": [150, 152], "445": 717, "4451": 151, "4468": 151, "446e": 149, "447": 715, "4472": 716, "4473": 716, "4476": 151, "4482": 150, "4488": 716, "4498": 152, "45": [151, 398, 404], "450": 398, "450000e": 151, "4503": [150, 152], "4504": 715, "4510": 150, "4512": 150, "4513": 150, "4524": 716, "4526": 715, "453": [152, 398], "4532": 715, "4538": 398, "45416e": 149, "4542": [150, 715], "4548": 150, "454e": 149, "4552": 151, "4559": 715, "456": 151, "4566": 715, "457": 715, "4587": [150, 152], "4588": 715, "459": [397, 398], "459326": 69, "46": [69, 151, 397], "4600": 716, "4605": 715, "461": 717, "4612": 716, "4613": 404, "4617": 717, "4620": [397, 398], "462017": 717, "4626": 717, "463": 715, "4631": 717, "463100": 397, "4636": 69, "4642": [150, 152, 715], "464438": 398, "4646": 717, "465": 714, "4654": 716, "466": 715, "4661": [399, 715], "4662": 716, "466510": 69, "467172": 69, "467783": 69, "4680": 715, "4690": 715, "4692": 154, "469395": 151, "4694": 715, "4698": 715, "47": [69, 150, 151, 152, 397, 399], "470": 714, "47000000": 397, "4701": 715, "4703": [150, 152, 715], "470e": 149, "4710": 150, "472": 717, "472e": 149, "4745": 151, "475": 715, "4750": 715, "4752": 151, "4757": 151, "476": 399, "4771": 151, "4773": 715, "4795": 715, "4799": 150, "48": [397, 402, 404, 715, 717], "4800": 715, "4809": 398, "481": 714, "4812": 715, "4813": 715, "481361": 150, "4822": 715, "4829": 404, "4840": 398, "484e": 149, "485949": 150, "486": 398, "4862": 151, "487": 399, "489": 715, "489422": 151, "4896": 150, "4898": 717, "48980": 397, "489893": 717, "49": [69, 397, 398, 399, 404, 715], "49000000": 397, "4901": 398, "490310": 151, "4912": 154, "4921": 715, "4933": 715, "4934": 150, "494": 715, "494050": 150, "4953": 715, "4956": 151, "496392": 151, "497": 151, "4984": 69, "4992": 715, "49995": 717, "49996": 717, "49997": 717, "49998": 717, "49999": 717, "4e": 149, "5": [69, 70, 75, 140, 144, 149, 150, 151, 152, 154, 181, 182, 310, 394, 395, 397, 398, 399, 402, 404, 617, 703, 711, 714, 715, 716, 717], "50": [149, 150, 151, 402, 404, 715], "500": [151, 399, 769, 780, 795], "5000": 715, "50000": 717, "500000": 151, "5001": 715, "5007": 715, "500798": 151, "5016": 715, "5017": 69, "502169": 151, "502170": 151, "504522": 150, "505": 715, "5052": [150, 152], "5055": 151, "506": 714, "5065": 715, "507": 151, "5076": 151, "5078": 398, "508": 717, "5086": 717, "509": [398, 399], "51": [715, 717], "5100": 151, "510755": 717, "5120": 715, "5139": 69, "5142": 715, "5147": 715, "5148": 715, "515": 715, "5159": 398, "5160": 715, "5165": 398, "5167": 715, "5169": 715, "5179": 716, "5181": 715, "518670": 397, "519": 717, "5190": 715, "519350241414017": 69, "52": [69, 154, 399, 715], "520": 151, "5200": 398, "521": 717, "5212": 404, "5216": 715, "522": 715, "5224": 151, "5225": 151, "522509": 151, "5230": 151, "523825": 151, "5239": [151, 716], "5240": 715, "5242": 151, "524476248542637": 69, "525": 715, "5252": 152, "5260": 716, "5265": 715, "527000e": 151, "5273": 715, "5288": 398, "529": [398, 717], "53": [69, 149], "5303": 716, "5311": 151, "5312": 150, "5314": 715, "5315": [150, 152], "5316": 715, "5322": 715, "5328": 398, "533": 715, "5338": 404, "5339": 716, "5343": [398, 715], "535": 717, "5360": 398, "536544": 150, "5369": 150, "537": 715, "538": 398, "5385": 69, "5387": [399, 715], "539": 715, "539e": 149, "54": [151, 398, 399, 717], "540": 151, "542e": 149, "543462": 69, "544": [398, 402], "5440": 717, "5443": 715, "545": [398, 402], "5456": 717, "5459": 715, "546": 715, "547": 715, "5474": 151, "5479": 715, "5486": 715, "549": 715, "5491": 398, "5494": 398, "5497": [150, 715], "55": [151, 399], "5501": 715, "5507": 715, "5509": 718, "551": 398, "551e": 149, "5520": 716, "5525": 70, "5533": [150, 152], "5538": 717, "553e": 149, "5540": 715, "5547": 715, "555000": 151, "5557": 398, "5565": 715, "5569": 151, "557": 715, "5596": 715, "56": [72, 151, 716], "560": 402, "5607": 69, "5611": 398, "5617": 718, "5628": 151, "5635": 715, "5639": 150, "563e": 149, "5640": 715, "565": 715, "5654": 399, "5655": [404, 715], "5660": 151, "567": 715, "5675": 715, "5678": 715, "568125": 398, "568912": 151, "5699": 151, "57": [69, 151, 717], "5704": 715, "571320": 397, "5714": 151, "5716": 154, "5719": 154, "573": 718, "574": 715, "5743": 718, "5744": 398, "5750": 69, "5759": 715, "577": 150, "577064": 150, "5776": 715, "5782": 404, "5791": 716, "58": [398, 402], "5806": 151, "5819": 715, "5820": 404, "5833": 715, "5837": 715, "5839": 715, "584305": 151, "5845": 715, "5875": 715, "5892": 398, "5894": 716, "5897": 398, "589774": 151, "59": 717, "590": 715, "5903": 150, "5918": 69, "5919": 715, "592": [151, 717], "5927": 715, "5929": 715, "593": 151, "5934": [151, 716], "5939": 151, "5940": 70, "5947": 717, "5953": 151, "596": 151, "5974": 716, "5982": 151, "598795": 151, "5988": 715, "5993": 715, "5995": 151, "5e": 149, "5m": 395, "6": [69, 70, 72, 75, 78, 140, 144, 149, 150, 151, 152, 182, 360, 395, 397, 398, 399, 715, 716, 717, 718], "60": [404, 717], "6000": 151, "6021": 69, "6023": 404, "6025": 715, "604": 715, "6049": 715, "605203": 69, "6054": 715, "6066": 150, "6068": 716, "6087": 715, "61": [69, 398, 399, 717], "6100": 151, "6101": 716, "610610": 151, "6111": 715, "6116": 398, "6117": 151, "6119": 151, "612": 715, "6121": 715, "6132": 715, "6142": 715, "616": [715, 716, 717, 718], "6161": 718, "617": 69, "6175": 398, "6196": 151, "62": 151, "620": 715, "6208": 151, "62098e": 149, "621": 715, "6211": 715, "6214": 398, "6226": 150, "623684": 69, "623e": 149, "625": 151, "6255": 151, "6257": [150, 152], "626": 398, "626858": 151, "6275": 715, "6284": 398, "628805": 717, "631": 714, "6317": 151, "6321": 715, "6323": 398, "6327": 715, "633": 398, "6340": 398, "6342": 715, "6344": [150, 715], "635": 398, "636": 151, "6362": 398, "6363": [404, 715], "637": 715, "6376": 151, "638": [151, 398], "638056": 69, "6388": 404, "6390": 718, "64": [97, 150, 398, 717], "641": 715, "6421": 150, "6424": 715, "642580": 151, "6428": 715, "6435": 715, "6449": 717, "645059": 398, "6456": 151, "6466": 715, "648": 398, "6480": 715, "648551": 151, "649": 397, "6494": 150, "65": [150, 399], "6504": 398, "6507": 151, "6509": 716, "651": 717, "6513": 398, "6514": 150, "6520": 715, "653": [151, 714, 717], "6531": 150, "6551": 716, "6555": 398, "6564": 715, "657": 150, "6576": 715, "658": 150, "6586": 715, "659": 715, "6599": 151, "66": [404, 717], "660": 150, "6608": 716, "661": 151, "6610": 716, "662": [151, 715], "6628": 715, "662e": 149, "663": 151, "6633": 398, "664": 151, "6644": 715, "66462e": 149, "6649": 154, "665": [151, 715], "6652": 404, "666": 151, "6662": 151, "6664": 149, "667": [151, 397], "668": 151, "6685": 715, "6689": 151, "668e": 149, "669": 151, "6714": 151, "673": 715, "6732": 398, "673976": 151, "674": 717, "6771": 404, "677e": 149, "678342": 150, "6787": 717, "679": 399, "6793": 715, "679815e": 151, "68": 398, "6810": 151, "682109": 150, "6837": 151, "6849": 715, "6850": 151, "6852": 404, "6859": 715, "6861": 399, "6867": 715, "6878": 151, "69": 717, "6907": 715, "6910": 69, "691191": 69, "6915": 398, "6929": 70, "694": 715, "694834": 151, "6950": 716, "6951": 716, "6957": 397, "696": 399, "6963": 715, "697": 715, "6971": 715, "6975": 151, "698136": 717, "6985": 715, "6993": 69, "6e": 149, "6z_": 395, "6z_i": 181, "7": [69, 149, 150, 151, 152, 397, 398, 399, 404, 711, 714, 715, 716, 717], "70": [69, 151, 404], "700": 717, "700000e": 151, "701": 150, "7036": 715, "705": 150, "7051": 715, "7058": 70, "7062": 398, "707565": 717, "7085": 715, "7086": 150, "7087": 715, "71": [151, 404], "7102": 715, "7111": 151, "7117": 715, "7118": 69, "7127": 716, "7128": 151, "713": 715, "7132": 716, "713403": 69, "7137": 717, "7145": 715, "715": 151, "7155": 151, "716": 717, "717": 715, "7183": 715, "7185": 715, "719": 69, "72": [398, 399, 404, 715], "720": 144, "7203": 151, "7207": 151, "7209": 404, "7219": 404, "7229": 70, "723": 715, "7236": 151, "7253": 399, "7267": 150, "7268": 717, "7270": 718, "7277": 150, "727702": 717, "7279": 717, "7282": 715, "73": [151, 717], "730": [150, 715], "7303": 715, "732": [399, 717], "7322": 398, "7329": 151, "732983": 717, "733916": 69, "7349": 715, "7353": 69, "7357": 399, "738": 150, "7381": 72, "7386": 715, "7389": 404, "739": 715, "74": [150, 404, 717], "741": 717, "743": 399, "743160": 150, "743275": 150, "744": [399, 404], "744476": 150, "7457": 70, "7461": [399, 404], "748": 398, "7496": 715, "75": [150, 151, 404], "7501": 717, "750337": 151, "7507": 69, "752": 715, "7520": 404, "7521": 150, "753": 399, "7531": 151, "753490": 151, "7539": [399, 717], "7540": 717, "7547": 151, "754753": 151, "755032": 69, "7559": 717, "756181": 717, "7566": 399, "7579158282351": 69, "7582": 717, "76": 399, "760059": 69, "7616": 399, "763": 715, "7644": 151, "7646": [150, 152], "765": [151, 397], "7655": 398, "7656": 151, "7659": [151, 716], "7667": [399, 404], "767500": 151, "768": 717, "769": 150, "77": [151, 398, 399, 717], "7702": 151, "7703": 398, "7709": 152, "771": 717, "7720": 715, "7723": 70, "773": 715, "7768": 715, "777": 151, "7776": 717, "7778": 717, "778": 715, "7790": 717, "78": [397, 404, 715], "7805": 150, "7822": 717, "782811": 69, "783": 715, "7847": 715, "7856": 399, "7868": 717, "7872": [150, 152, 715], "7881": 398, "7883": 715, "789e": 149, "79": 151, "7901": 69, "7902": 398, "7903": 69, "7904": [69, 72], "7915": 69, "791759": 397, "7918": 715, "7924": 151, "7944": 399, "7951": 151, "7952": 398, "7964": 398, "7975": 149, "799": 151, "7993": 716, "7e": 149, "8": [69, 75, 79, 80, 149, 150, 151, 397, 398, 399, 402, 404, 715, 716, 717, 718, 769, 780], "80": 151, "800": 399, "8005": 398, "802": 398, "8031": 151, "803334": 69, "8035": 398, "805": 715, "806": 150, "8071": 399, "8072": 69, "8080": 715, "81": [404, 715], "8100": 715, "8115": 715, "8116": 715, "812321": 151, "813": 397, "8132": [399, 404], "813411": 397, "8139": [151, 398], "8145": 398, "8154": 715, "8165": 716, "8169": 151, "8174": 151, "817556": 151, "8179": 399, "8183": 715, "819": [69, 70, 72, 715], "8193": 399, "82": [151, 397, 404], "8200": 715, "8201": 150, "8204": 715, "8223": [399, 404, 715], "8228": [150, 152], "8231": 715, "8234": 716, "8235": 151, "82353": 397, "8248": 151, "8256": 151, "828": 399, "8291": 151, "8293": 151, "83": [151, 398], "833": [69, 150], "8339": 716, "834": 150, "83446e": 149, "8348": 152, "8350": 398, "8361": 150, "8363": 151, "8365": 715, "8371": 69, "8377": 149, "838": 404, "8386": 150, "8398": [150, 717], "840": 151, "8408": 716, "841": 69, "8426": 399, "843101": 151, "8434": 154, "8436": [150, 152], "8441": [150, 152], "8461": 399, "846154": 151, "8469": [398, 715], "8471": 715, "8472": 715, "8475": 717, "8487": 151, "848988": 717, "8491": 716, "8494": 715, "8497": 151, "85": [399, 717], "8500": 715, "8501": 715, "850180": 151, "851": 398, "851e": 149, "8528": 715, "8530": 150, "853060": 398, "8547": 715, "855": 715, "8579": 715, "857e": 149, "8597": 399, "86": 70, "8605": 716, "86056e": 149, "860938": 150, "8611": [150, 152], "861131": 150, "862183": 717, "8622": 717, "8623": [398, 717], "8627": 715, "864135": 69, "8643": 399, "8644": 399, "8647": 715, "8653": 150, "8666": 717, "866e": 149, "868e": 149, "8692": 399, "87": 402, "87000e": 149, "8703": 715, "8706": [69, 398], "87108e": 149, "872": 154, "8725": 715, "87255e": 149, "8726": 69, "8727": 398, "87319e": 149, "8741": 715, "874285": 69, "8749": 404, "8752": 150, "8753": 150, "8755": 398, "8759": 151, "8760": 715, "8771": 398, "8773": 150, "8776": [150, 715], "8778": 150, "8781": 150, "8787": 715, "879": 715, "8790": 715, "88": [404, 717], "88004e": 149, "8807": 150, "881": [398, 399], "8810": 150, "881880": 69, "882e": 149, "883537": 151, "8844": 715, "8846": 398, "8847": 150, "8852": 716, "885350": 151, "8855": 151, "8856": 715, "886": 715, "8879": 72, "8881": 69, "8883": 398, "8892": 152, "8897": 715, "8899": 716, "89": [149, 151, 397, 717], "8900": 398, "891": 399, "8915": 398, "8927": 715, "8928": 150, "8929": 715, "8933": 150, "8942": 404, "8953": 404, "896": 151, "896701": 151, "8969": 150, "8971": 69, "8976": [150, 152, 715], "8980": 72, "8987": 715, "8989": 398, "8992": 402, "8997": 398, "8e": 149, "9": [69, 70, 78, 79, 149, 150, 151, 152, 154, 397, 398, 399, 402, 404, 715, 716, 717], "90": [397, 715, 717], "900000e": 151, "9002": 715, "9004": 715, "9024": 151, "9026": 715, "903448": 151, "9035": 151, "9039": 151, "9045": 398, "9049": 398, "9051": 69, "9053": 150, "9054": [398, 404], "9064": 150, "9077": 151, "907755": 150, "9080": 404, "9085": 151, "9095": 398, "9096": 398, "91": [150, 397], "9114": 715, "913143": 150, "913425": 69, "9145": 715, "9161": 715, "9167": 397, "917": 715, "9192": 151, "9201": 715, "921": 151, "9213": 715, "9214": 398, "921e": 149, "9223372036854775807": 708, "9237": 715, "9250": 398, "9257": 715, "9259": 715, "9262": 715, "9263": 715, "927": 715, "9280": 716, "9286": 150, "9289": 398, "929": 69, "9297": 397, "9315": [69, 151], "932164": 397, "9323": 150, "9337": 715, "934": [151, 154, 398, 715], "9350": 150, "9355": 151, "9364": 715, "9368": 715, "9383": 398, "939": 715, "9399": 715, "94": 404, "9413": [398, 715], "941e": 151, "942": 150, "9429": 404, "942997": 69, "9436": 404, "9448": 398, "9450": 70, "9452": 151, "9460": 149, "9461": 404, "946214": 69, "9465": 151, "946565": 397, "946e": 149, "9477": 149, "948556": 69, "9495": 149, "9499": 69, "95": [106, 274, 326, 364, 543, 578, 632, 667, 715, 717, 803, 838], "950": 150, "9517": 718, "9519": 398, "953": 715, "9533": 715, "953e": 149, "954": 151, "9557": [715, 717], "9582": 715, "959": [150, 398], "9595": 404, "9598": 718, "96": 717, "960": 715, "9602": 715, "9615": 715, "9622": 151, "962398": 149, "962e": 149, "9637": 717, "9660": 404, "968": 717, "9683": 404, "969": [715, 717], "9692": 715, "97": [399, 404], "9707": 151, "970844": 69, "971": 711, "9733": 151, "9746": 151, "9753": 715, "9773": 715, "9775": 151, "9777": 715, "977975e": 151, "9794": 151, "98": 404, "9809": 717, "982874": 151, "983476381": 715, "9840": 717, "9847": 717, "985": [151, 715], "9851": 715, "986": 715, "9861": 715, "9868": 717, "9877": 717, "987e": 149, "9882": 715, "989": [149, 715], "9891": 715, "9899": 150, "99": 717, "990": 149, "9900": 715, "9903": [151, 717], "9911": 151, "9912": [151, 404], "9913": 716, "992": 399, "9932": 151, "9933": 150, "9937": 715, "99381e": 149, "994": 715, "9945": 715, "9947": 715, "995": 715, "9957": 150, "995732": 397, "996": 397, "9965": 715, "9966": 715, "997": [399, 715, 717], "9970": 717, "9974": [149, 715], "9979": 715, "998": 715, "9982": 717, "998414": 151, "998797": 151, "9988": 715, "9989": 149, "999": 715, "9992": 717, "9994": [149, 715], "999e": 149, "9e": 149, "A": [49, 71, 72, 79, 103, 133, 149, 151, 152, 216, 227, 238, 250, 261, 272, 305, 322, 357, 363, 392, 395, 398, 575, 615, 664, 701, 711, 714, 715, 716, 717, 719, 752, 756, 762, 797, 877], "And": 150, "As": [150, 715], "At": 771, "BE": 398, "By": [77, 150, 154, 398, 399, 715, 764, 775, 790], "For": [73, 90, 140, 395, 397, 398, 403, 719], "IF": 151, "IN": 715, "If": [7, 16, 19, 20, 21, 23, 73, 84, 93, 94, 97, 115, 149, 150, 154, 155, 161, 167, 173, 183, 199, 205, 220, 225, 231, 236, 243, 246, 250, 254, 261, 265, 273, 282, 294, 310, 334, 335, 345, 362, 372, 381, 394, 395, 397, 403, 404, 405, 421, 429, 455, 459, 489, 494, 497, 502, 505, 510, 512, 514, 520, 524, 529, 532, 537, 553, 589, 617, 642, 677, 703, 711, 715, 719, 721, 731, 736, 740, 744, 753, 757, 758, 763, 764, 765, 769, 773, 775, 776, 778, 780, 783, 790, 791, 795, 799, 821, 855, 877, 888, 891], "In": [69, 77, 79, 150, 151, 152, 154, 234, 294, 345, 381, 395, 397, 398, 399, 402, 403, 491, 499, 505, 507, 516, 526, 534, 561, 599, 650, 685, 715, 717, 718, 719, 815, 821, 849, 855, 891], "It": [88, 118, 133, 150, 151, 286, 305, 339, 357, 375, 392, 395, 397, 398, 399, 402, 403, 404, 555, 566, 567, 568, 575, 591, 604, 606, 607, 615, 644, 655, 656, 657, 664, 679, 690, 691, 692, 701, 715, 716, 717, 719, 769, 780, 795, 802, 815, 825, 837, 849, 859], "No": [69, 70, 72, 149, 150, 151, 152, 154, 397, 398, 399, 402, 404, 715, 716, 717, 718], "OR": 715, "Of": 90, "On": [395, 403], "One": [0, 7, 73, 97, 154, 214, 248, 259, 413, 489, 505, 512, 514, 524, 531, 532, 715, 871], "The": [4, 7, 12, 16, 17, 19, 20, 21, 23, 24, 25, 27, 69, 70, 71, 72, 77, 79, 92, 97, 103, 118, 133, 148, 149, 150, 151, 152, 154, 193, 196, 205, 212, 214, 216, 220, 223, 227, 231, 238, 241, 243, 246, 248, 250, 254, 259, 261, 265, 269, 272, 273, 286, 288, 305, 322, 323, 324, 325, 334, 339, 352, 357, 358, 359, 360, 362, 363, 375, 392, 394, 395, 397, 399, 400, 401, 402, 403, 404, 405, 413, 421, 432, 439, 447, 455, 488, 496, 497, 504, 512, 514, 523, 531, 540, 541, 542, 544, 545, 546, 552, 553, 555, 566, 567, 568, 575, 579, 580, 581, 587, 588, 589, 591, 604, 606, 607, 615, 633, 634, 635, 641, 642, 644, 655, 656, 657, 664, 668, 669, 670, 676, 677, 679, 690, 691, 692, 701, 703, 711, 713, 714, 715, 716, 717, 718, 719, 725, 728, 731, 750, 752, 754, 756, 758, 762, 764, 765, 767, 769, 775, 776, 780, 786, 790, 791, 793, 795, 802, 814, 815, 825, 829, 837, 849, 859, 863, 871, 877], "Then": [395, 403], "There": [69, 70, 72, 73, 90, 149, 151, 154, 395, 397, 403, 715, 718], "These": [16, 69, 77, 90, 118, 150, 151, 154, 286, 339, 375, 395, 397, 398, 404, 512, 555, 564, 591, 602, 644, 653, 679, 688, 715, 716, 717, 719, 773, 783, 799, 821, 825, 855, 859], "To": 70, "With": [150, 455], "_": [71, 73, 140, 173, 212, 223, 234, 246, 358, 359, 360, 395, 403, 405, 413, 421, 439, 447, 488, 553, 589, 642, 677, 715, 719, 721, 764, 775, 790, 802, 825, 829, 837, 859, 863], "_0": [173, 421, 758], "_1": 360, "__future__": [77, 78], "__init__": 397, "_c": [334, 362], "_e": [334, 362], "_g": 155, "_i": [16, 24, 35, 55, 155, 161, 167, 173, 205, 241, 288, 358, 359, 405, 439, 544, 546, 579, 581, 633, 635, 668, 670, 758, 815, 849], "_ig_": 758, "_ig_i": [193, 750], "_ij": [829, 863], "_ivgmmbas": 272, "_ivlsmodelbas": 322, "_ivmodelbas": 363, "_j": [173, 421, 758], "_panel": 473, "_squar": 403, "_t": [421, 496], "_weak": 151, "abil": [151, 715], "abl": 69, "about": [73, 151, 715, 717], "abov": [154, 717, 719], "absorb": [77, 78, 91, 153, 512, 516], "absorb_opt": [97, 149], "absorbingl": [77, 91, 103, 149], "absorbinglsresult": 97, "abstract": [183, 455], "accept": [154, 398, 455, 769, 780, 795], "access": [398, 715], "accid": 151, "accord": [97, 214, 248, 259, 457, 459, 465, 468], "account": [150, 398, 413, 489, 514, 544, 545, 546, 566, 567, 568, 579, 580, 581, 604, 606, 607, 633, 634, 635, 655, 656, 657, 668, 669, 670, 690, 691, 692, 715], "accovari": 77, "accuraci": [77, 719, 764, 790], "achiev": 398, "across": [77, 154, 225, 397, 398, 541, 542, 715, 718, 719, 750, 758], "actual": [150, 151, 206, 273, 398, 400, 403], "ad": [76, 77, 83, 150, 398, 403, 715, 883, 884, 886, 887, 891, 892], "add": [77, 83, 84, 85, 92, 151, 310, 394, 398, 617, 703, 713, 765, 776, 791], "add_const": [150, 151, 154, 398, 402, 575, 615, 664, 701, 715, 718], "add_constraint": 715, "addit": [17, 21, 25, 76, 77, 83, 97, 150, 151, 154, 214, 220, 223, 225, 227, 231, 234, 235, 236, 238, 243, 248, 254, 259, 265, 398, 399, 405, 413, 421, 439, 447, 489, 494, 502, 505, 510, 514, 520, 524, 529, 532, 537, 715, 718, 767, 773, 775, 778, 780, 783, 793, 799], "addition": [398, 512], "address": [398, 402], "adequ": 70, "adj": [149, 150, 151, 152, 154, 404, 715, 717], "adjust": [17, 21, 25, 77, 97, 111, 127, 155, 160, 161, 166, 167, 172, 173, 178, 193, 196, 204, 205, 209, 214, 225, 236, 246, 248, 259, 279, 294, 299, 318, 331, 345, 350, 369, 381, 386, 395, 398, 400, 403, 405, 413, 421, 439, 447, 489, 497, 505, 514, 524, 532, 541, 542, 561, 599, 650, 685, 715, 719, 721, 736, 740, 744, 750, 754, 758, 767, 778, 793, 807, 821, 842, 855], "adrian": 714, "advanc": 153, "advantag": [150, 715], "affect": [77, 78, 154, 358, 398], "affin": 400, "after": [73, 93, 94, 153, 395, 399, 400, 401, 404], "ag": [150, 151, 152, 715, 717], "against": [79, 115, 150, 282, 335, 372, 395, 398], "age2": [150, 152], "agg_data": 715, "aggreg": [400, 715], "agre": 403, "ak": 715, "al": 715, "algorithm": [77, 514], "alia": [705, 707, 709, 710, 867], "alias": 91, "align": [73, 77, 220, 231, 243, 254, 265, 395, 403, 717, 719], "all": [21, 35, 55, 69, 70, 71, 72, 73, 77, 102, 115, 140, 144, 149, 150, 151, 154, 182, 222, 233, 236, 245, 256, 267, 269, 273, 282, 294, 314, 315, 316, 319, 321, 334, 335, 345, 362, 372, 381, 395, 397, 398, 399, 400, 402, 403, 404, 429, 455, 489, 496, 505, 531, 552, 561, 587, 588, 599, 621, 622, 623, 628, 630, 641, 650, 676, 685, 715, 717, 719, 750, 758, 764, 767, 771, 774, 775, 778, 784, 793, 797, 800, 802, 815, 829, 837, 849, 863, 883], "all_param": [77, 429], "allow": [16, 69, 70, 71, 77, 97, 150, 151, 152, 154, 199, 223, 225, 234, 398, 399, 400, 403, 715, 717, 718, 719, 750, 758, 767, 780, 793], "along": [16, 19, 20, 23, 69, 273, 715, 717], "alpha": [16, 24, 35, 55, 69, 71, 73, 85, 154, 246, 250, 261, 395, 403, 797], "alpha_": [73, 398, 403], "alpha_i": [24, 398, 402, 512], "also": [69, 70, 90, 150, 151, 154, 241, 395, 397, 398, 403, 404, 455, 512, 553, 589, 642, 677, 711, 717, 718, 719, 769, 780, 786, 795, 890], "alter": [150, 154], "altern": [70, 77, 97, 152, 214, 248, 259, 269, 395, 398, 401, 404, 455, 717, 719, 764, 829, 863], "although": [69, 71, 92, 150, 151, 152, 397, 398, 402, 489, 505, 514, 524, 532, 715, 719, 764], "alwai": [90, 115, 151, 188, 196, 282, 335, 372, 395, 397, 400, 405, 413, 421, 439, 447, 719, 754, 873, 875], "among": 151, "an": [21, 69, 70, 72, 73, 77, 92, 115, 149, 150, 151, 152, 154, 183, 236, 246, 282, 335, 359, 372, 395, 397, 398, 399, 402, 403, 404, 455, 489, 505, 512, 514, 516, 541, 542, 552, 553, 587, 588, 589, 641, 642, 676, 677, 715, 716, 717, 718, 719, 725, 728, 731, 764, 769, 773, 775, 780, 783, 790, 795, 799, 802, 815, 821, 825, 829, 837, 849, 855, 859, 863, 877, 886, 887, 892], "analysi": [401, 404, 714, 715, 802, 815, 837, 849], "andersen": 395, "anderson": [323, 395], "andrew": [154, 173, 179, 205, 405, 421, 715, 731, 744, 758], "ani": [21, 79, 97, 103, 108, 118, 135, 145, 151, 152, 155, 156, 162, 168, 174, 184, 187, 188, 191, 209, 214, 223, 225, 227, 234, 235, 236, 238, 248, 259, 268, 272, 276, 286, 306, 322, 328, 339, 363, 366, 375, 395, 397, 398, 477, 478, 481, 494, 502, 510, 512, 516, 520, 529, 537, 545, 548, 549, 553, 555, 567, 580, 583, 584, 589, 591, 606, 634, 637, 638, 642, 644, 656, 669, 672, 673, 677, 679, 691, 715, 721, 725, 728, 731, 736, 740, 833, 867, 869, 882, 886, 887, 888, 891, 892], "annben": 715, "annearn": 715, "annhr": 715, "annhrssq": 715, "annihil": [352, 395], "annual": [69, 151, 398, 715], "anoth": 151, "anyarrai": 867, "api": [151, 154, 257, 398, 402, 575, 615, 664, 701, 715, 718], "appear": [70, 150, 269, 715, 716, 717], "append": 715, "appli": [133, 150, 151, 152, 246, 305, 357, 392, 398, 403, 413, 532, 575, 615, 664, 701, 715, 719, 721, 736, 740, 744], "applic": [24, 76, 97, 151, 395, 402, 714, 717], "approach": [69, 71, 73, 150, 714], "appropri": [21, 72, 73, 236, 395, 398, 403], "approx0": 403, "approx1": 403, "apr": [402, 404], "ar": [16, 19, 20, 21, 23, 24, 25, 35, 55, 69, 70, 71, 72, 73, 77, 79, 83, 84, 85, 90, 91, 92, 97, 102, 115, 133, 140, 144, 149, 150, 151, 152, 153, 154, 173, 182, 199, 214, 216, 220, 222, 223, 225, 227, 231, 233, 234, 236, 238, 243, 245, 248, 250, 254, 256, 259, 261, 265, 267, 269, 270, 273, 282, 288, 294, 305, 334, 335, 345, 352, 357, 359, 360, 362, 372, 381, 392, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 413, 421, 439, 447, 455, 459, 480, 489, 494, 496, 497, 502, 505, 510, 512, 513, 514, 516, 519, 520, 522, 524, 529, 532, 537, 561, 564, 575, 587, 599, 602, 615, 650, 653, 664, 685, 688, 701, 711, 715, 716, 717, 718, 719, 758, 764, 765, 767, 773, 775, 776, 778, 780, 783, 789, 790, 791, 793, 799, 802, 814, 815, 821, 829, 837, 849, 855, 863], "arbitrari": [512, 715, 719, 750], "area": [90, 150, 152], "arg": [21, 180, 181, 236, 882, 891], "argument": [17, 21, 25, 69, 70, 77, 92, 199, 223, 227, 234, 235, 238, 398, 403, 715, 716, 767, 775, 780, 793], "arrai": [20, 70, 72, 73, 77, 79, 133, 150, 154, 179, 180, 181, 182, 183, 199, 209, 220, 231, 243, 254, 265, 294, 305, 345, 357, 381, 392, 398, 405, 413, 421, 429, 439, 447, 455, 460, 463, 465, 476, 494, 502, 510, 514, 520, 529, 537, 561, 575, 599, 615, 650, 664, 685, 701, 715, 719, 721, 725, 728, 731, 740, 764, 771, 773, 775, 783, 790, 797, 799, 821, 855, 869, 870, 871], "array_lik": 183, "arraylik": [220, 231, 783, 867], "as_csv": [46, 66, 130, 271, 302, 320, 354, 389, 571, 610, 629, 660, 695, 828, 862], "as_html": [46, 66, 130, 271, 302, 320, 354, 389, 571, 610, 629, 660, 695, 828, 862], "as_latex": [46, 66, 130, 271, 302, 320, 354, 389, 571, 610, 629, 660, 695, 828, 862], "as_latex_tabular": 88, "as_text": 715, "asarrai": 397, "asid": [152, 717], "aspect": 151, "ass": 97, "assembl": [773, 783, 799, 821, 855], "assess": 150, "asset": [69, 70, 72, 76, 77, 91, 714], "asset_pr": [69, 70, 72, 713], "assign": 155, "associ": [71, 715], "assum": [16, 19, 20, 23, 69, 73, 150, 151, 154, 199, 223, 225, 234, 236, 273, 395, 455, 488, 489, 491, 496, 499, 504, 505, 507, 512, 514, 516, 523, 524, 526, 531, 532, 534, 715, 716, 717, 719, 721, 736, 740, 744, 780], "assumpt": [151, 273, 402, 403, 552, 587, 588, 641, 676, 715, 717, 719], "astyp": [151, 397, 404], "asymptot": [395, 402, 719, 802, 815, 837, 849, 869, 870], "atlant": 404, "atol": 149, "attach": 85, "attempt": [69, 71, 400], "attrdict": [28, 49, 539, 577, 631, 666, 723, 727, 730, 734, 738, 742, 747, 751, 755, 760, 801, 811, 836, 846], "attribut": [151, 715, 882], "augment": 151, "auto": [97, 767, 793], "auto_df": [398, 400, 514], "autocorrel": [7, 25, 69, 97, 150, 154, 199, 205, 214, 223, 225, 234, 248, 259, 395, 405, 421, 429, 758, 767, 793], "automat": [77, 151, 152, 173, 400, 497, 514, 714, 715], "avail": [7, 69, 72, 77, 97, 150, 153, 154, 182, 199, 214, 223, 225, 234, 236, 248, 259, 395, 398, 401, 404, 413, 496, 561, 599, 650, 685, 713, 715, 716, 719], "averag": [16, 24, 71, 73, 77, 149, 151, 154, 225, 241, 395, 398, 402, 403, 459, 468, 488, 541, 542, 544, 566, 579, 604, 633, 655, 668, 690, 715, 719, 778, 814, 829, 863], "avg": [397, 398, 399, 402, 404], "avg_adj_rsquar": 77, "avg_corr": 715, "avg_rsquar": 77, "avgsal": [151, 397], "avoid": [77, 92, 234, 397, 459, 717, 719], "awai": 73, "ax": [69, 149, 397], "axi": [92, 140, 144, 150, 151, 187, 397, 495, 503, 511, 521, 530, 538, 715], "az": 715, "b": [149, 395, 403, 714, 715], "babi": 151, "back": 786, "badi": 714, "balanc": [398, 489], "baltagi": [395, 403, 714], "bandwidth": [7, 17, 21, 25, 69, 70, 72, 73, 77, 154, 173, 179, 182, 199, 205, 405, 406, 421, 422, 429, 497, 505, 514, 524, 532, 715, 731, 744, 758], "bar": [16, 73, 196, 234, 241, 288, 395, 403, 488, 544, 546, 579, 581, 633, 635, 668, 670, 719, 814], "bartlett": [7, 17, 21, 25, 69, 71, 72, 154, 173, 179, 180, 182, 205, 395, 403, 405, 421, 505, 514, 524, 532, 715, 731, 744, 758], "base": [69, 72, 73, 77, 85, 97, 115, 150, 151, 225, 282, 310, 335, 372, 394, 398, 400, 403, 496, 544, 545, 546, 579, 580, 581, 617, 633, 634, 635, 668, 669, 670, 703, 714, 721, 736, 744, 764, 767, 769, 775, 790, 793, 795], "basi": [152, 399, 717], "basic": [72, 153, 401], "basman": 395, "basmann": [325, 395], "baum": 714, "baumet": [395, 714], "be_r": 398, "becom": 73, "been": [77, 79, 93, 94, 150, 269, 334, 362, 397, 402, 767, 793], "befor": [21, 77, 93, 94, 150, 193, 196, 205, 209, 294, 345, 381, 397, 398, 561, 599, 650, 685, 715, 750, 754, 758, 821, 855], "begin": [20, 73, 395, 403, 717, 719, 764, 775, 790], "behavior": [77, 151], "being": [77, 151, 273, 395, 455], "belong": 403, "below": [398, 403, 715], "benefici": 715, "benefit": [715, 716, 718], "beratio": 715, "berndt": [77, 715, 716, 717, 829, 863], "best": [140, 397, 769, 780, 795], "beta": [16, 20, 69, 73, 92, 149, 212, 223, 234, 241, 246, 395, 398, 402, 403, 488, 496, 504, 512, 523, 531, 544, 545, 546, 553, 579, 580, 581, 589, 633, 634, 635, 642, 668, 669, 670, 677, 715, 719, 764, 765, 775, 776, 785, 786, 790, 791], "beta_": [73, 395, 715, 719], "beta_0": 717, "beta_1": [154, 717], "beta_2": [154, 359, 717], "beta_3": 717, "beta_4": 717, "beta_5": 717, "beta_c": 786, "beta_i": [16, 24, 71, 359, 715, 764, 775, 790], "beta_j": 775, "better": [77, 150, 151], "between": [21, 69, 70, 76, 77, 90, 91, 92, 150, 151, 225, 235, 269, 273, 324, 334, 352, 358, 359, 360, 362, 395, 397, 401, 402, 404, 488, 544, 545, 546, 566, 567, 579, 580, 581, 604, 606, 633, 634, 635, 655, 656, 668, 669, 670, 690, 691, 711, 713, 715, 719, 750, 758, 802, 837], "betweenol": [91, 398, 399, 400, 402, 713], "beyond": [151, 398, 405, 413, 421, 439, 447], "binari": [97, 140], "birthweight": 151, "bit": 97, "black": [150, 151, 152, 398], "blackburn": 151, "blacken": 77, "blhisp": [150, 152], "block": [73, 151, 152, 216, 227, 238, 250, 261, 273, 395, 715, 719, 721, 736, 740, 744, 754, 764, 775, 790], "board": 398, "book": [153, 401], "bool": [0, 6, 7, 15, 16, 17, 19, 20, 21, 23, 25, 92, 97, 98, 111, 117, 137, 143, 155, 158, 161, 164, 167, 170, 173, 176, 183, 193, 194, 196, 197, 199, 200, 202, 205, 207, 209, 210, 214, 217, 218, 219, 225, 228, 229, 230, 236, 239, 240, 242, 248, 251, 252, 253, 259, 262, 263, 264, 279, 285, 294, 310, 331, 338, 345, 369, 374, 381, 394, 405, 413, 421, 429, 439, 447, 455, 459, 460, 461, 488, 489, 491, 492, 493, 496, 497, 499, 500, 501, 504, 505, 507, 508, 509, 512, 513, 514, 516, 517, 518, 519, 522, 523, 524, 526, 527, 528, 531, 532, 534, 535, 536, 561, 599, 617, 650, 685, 703, 711, 721, 725, 728, 731, 736, 740, 744, 750, 754, 758, 767, 775, 778, 780, 785, 793, 805, 807, 821, 840, 842, 855, 867], "boolarrai": 867, "boolean": [460, 505, 514, 524, 532], "bootstrap": [212, 213, 223, 224, 235, 246, 247, 258], "both": [24, 69, 70, 71, 72, 77, 92, 133, 152, 154, 193, 196, 205, 216, 223, 227, 238, 246, 250, 261, 269, 273, 288, 305, 357, 392, 395, 398, 399, 459, 512, 514, 561, 575, 599, 615, 650, 664, 685, 701, 715, 716, 719, 754, 821, 855], "bottom": 73, "brace": [769, 780, 795], "braces_formula": 716, "braces_mod": 716, "braces_r": 716, "branch": 90, "break": 150, "breusch": [719, 802, 837], "breusch_pagan": 77, "brief": [153, 401], "bring": 715, "broadli": 398, "brthord": [133, 151, 216, 227, 238, 250, 261, 305, 357, 392], "bryzgalova": [73, 714], "btol": 149, "bug": [77, 78], "build": [77, 150], "built": 79, "bump": 78, "buseq": [69, 70], "busi": [69, 70, 714], "bw": [73, 173, 180, 181, 182, 395, 403, 405, 421], "bwght": 151, "bwghtlb": 151, "c": [20, 73, 133, 273, 305, 357, 392, 395, 403, 575, 615, 664, 701, 719], "c_": 73, "c_i": [16, 148], "ca": 715, "cach": [77, 78, 97], "cached_properti": 78, "calcul": [77, 409, 417, 425, 435, 443, 451, 718], "call": [93, 94, 150, 398, 404, 715], "cambridg": 714, "cameron": [150, 153, 714], "camet": [395, 714], "camtri05": [395, 714], "camtri09": [395, 714], "can": [19, 21, 23, 27, 69, 70, 71, 72, 73, 77, 79, 90, 92, 97, 149, 150, 151, 152, 154, 220, 225, 231, 236, 243, 246, 254, 265, 294, 345, 360, 381, 395, 397, 398, 399, 400, 401, 402, 403, 404, 455, 459, 491, 494, 499, 502, 507, 510, 512, 516, 520, 523, 526, 529, 534, 537, 561, 599, 650, 685, 715, 716, 717, 719, 764, 765, 769, 773, 775, 776, 780, 783, 790, 791, 795, 797, 799, 821, 855], "candid": 150, "cannot": [73, 151, 359, 360, 398, 399, 402, 719], "canon": 404, "cap": [69, 71, 403, 797], "capabl": 92, "capit": [399, 404, 715], "capm": 715, "captur": 92, "card": 151, "care": [69, 70], "cart": [140, 144], "cartesian": [92, 140, 148], "case": [69, 72, 150, 151, 152, 154, 212, 216, 227, 238, 250, 261, 395, 399, 400, 403, 491, 499, 507, 516, 526, 534, 713, 715, 716, 718, 719, 790, 815, 849, 891], "cat": [92, 135, 140, 144, 149], "categor": [77, 92, 135, 140, 141, 144, 149, 183, 398, 399, 455, 489, 505, 512, 514, 524, 532, 575, 615, 664, 701], "categori": [77, 140, 148, 151, 183, 395, 397, 455, 512, 516, 711, 764], "cats_df": 140, "caution": [77, 151, 715, 719], "caveat": 399, "ccc": 73, "cccc": [719, 764, 775, 790], "cdf": 395, "cdot": 395, "censor": [715, 716], "cent": 151, "center": [0, 7, 21, 193, 196, 205, 209, 234, 395, 400, 717, 719, 750, 754, 758], "central": 715, "certain": [398, 764, 790], "cgrant": [151, 397], "cgrant_1": [151, 397], "challeng": 398, "chang": [69, 77, 79, 90, 91, 152, 154, 225, 398, 400, 403, 715, 717], "chapter": [150, 151, 398, 715], "charact": 77, "characterist": [150, 152, 398], "cheatham": 151, "check": [77, 150, 183, 213, 224, 235, 247, 258, 491, 499, 507, 512, 516, 523, 526, 534, 767, 778, 793], "check_rank": [397, 488, 491, 496, 499, 504, 507, 512, 516, 523, 526, 531, 534], "chem": [69, 70], "chemic": [69, 70], "chi": [71, 133, 150, 151, 273, 288, 305, 323, 324, 334, 357, 358, 360, 392, 553, 575, 589, 615, 642, 664, 677, 701, 802, 814, 815, 837, 849], "chi2": [69, 70, 72, 115, 149, 150, 151, 152, 154, 269, 282, 335, 372, 715, 717], "chi_": [73, 352, 395, 719], "child": 151, "chisquar": 716, "choic": [150, 154, 199, 395, 401, 404, 514, 553, 589, 642, 677, 717, 719], "choos": [21, 236, 497], "christoph": 714, "christophid": 151, "chronic": [150, 152], "chrsemp": [151, 397], "chrysler": 404, "ci": [69, 70, 72, 90, 149, 150, 151, 152, 154, 397, 398, 399, 402, 404, 715, 716, 717, 718], "ci_": 395, "cig": 151, "cigarett": 151, "cigpric": 151, "cigtax": 151, "circumst": [234, 398, 718], "citi": 151, "clarifi": 77, "class": [0, 7, 16, 17, 20, 21, 24, 25, 28, 49, 76, 77, 82, 90, 92, 103, 135, 140, 150, 153, 154, 155, 161, 167, 173, 183, 193, 196, 199, 205, 209, 212, 213, 223, 234, 246, 247, 250, 257, 258, 261, 268, 272, 289, 310, 322, 340, 363, 376, 401, 405, 413, 421, 429, 439, 447, 455, 480, 488, 496, 504, 512, 523, 531, 539, 577, 617, 631, 666, 704, 711, 713, 718, 721, 725, 728, 731, 736, 740, 744, 750, 754, 758, 764, 775, 785, 790, 801, 836, 872, 877, 882], "classic": [97, 150, 151, 214, 248, 259, 398, 402, 552, 588, 641, 676, 767, 778, 793], "classmethod": [19, 23, 27, 481, 491, 499, 507, 516, 526, 534, 769, 771, 780, 795, 797], "clavgsal": [151, 397], "clean": 77, "cleaner": 151, "clear": 90, "clemploi": [151, 397], "clhrsemp": [151, 397], "close": [69, 149, 150, 151, 288, 323, 325, 395, 814], "clsale": [151, 397], "clscrap": [151, 397], "clust_ent": 398, "clust_entity_tim": 398, "cluster": [76, 77, 97, 150, 154, 155, 159, 199, 209, 214, 223, 225, 234, 248, 259, 395, 413, 414, 489, 495, 503, 505, 511, 514, 516, 521, 524, 530, 532, 538, 704, 711, 714, 719, 721, 767, 793, 869, 871], "cluster_ent": [398, 505, 514, 516, 524, 532], "cluster_tim": [398, 514, 524, 532], "clustered_r": 715, "clusteredcovari": [77, 97, 154, 199, 214, 248, 259, 767, 793], "cn": 715, "cn_unemp": 715, "co": [182, 395, 398, 715], "coast": 715, "cochran": [73, 714], "code": [73, 77, 90, 151, 395, 397, 398, 512, 516, 719], "coef": 404, "coeffici": [44, 64, 73, 105, 115, 126, 127, 149, 150, 151, 269, 282, 298, 299, 310, 317, 318, 335, 349, 350, 372, 385, 386, 394, 398, 403, 404, 496, 523, 541, 542, 544, 545, 546, 552, 565, 566, 567, 568, 575, 579, 580, 581, 588, 603, 604, 605, 606, 607, 615, 617, 624, 625, 626, 627, 633, 634, 635, 641, 654, 655, 656, 657, 664, 668, 669, 670, 676, 689, 690, 691, 692, 701, 703, 715, 719, 764, 775, 790, 825, 859, 871], "coerc": [489, 491, 499, 505, 507, 514, 516, 524, 526, 532, 534], "col": [150, 715, 769, 780], "colin": 714, "collaps": 395, "collect": [150, 398, 715, 716, 718], "colleg": [151, 714], "column": [73, 77, 84, 88, 140, 144, 148, 149, 150, 151, 184, 187, 269, 273, 294, 345, 381, 395, 397, 398, 405, 413, 421, 439, 447, 455, 461, 480, 561, 599, 650, 685, 711, 715, 716, 717, 719, 725, 728, 731, 769, 773, 780, 783, 795, 799, 821, 855], "column_stack": [149, 717], "combin": [70, 92, 398], "come": [69, 70, 150, 395], "comma": [86, 133, 305, 357, 392, 575, 615, 664, 701], "command": [97, 150, 214, 248, 259, 397, 399], "common": [69, 91, 151, 154, 273, 398, 405, 421, 512, 531, 719, 771, 797, 802, 815, 837, 849, 878], "commonli": [71, 401], "compactli": [395, 764, 775, 790], "compar": [77, 151, 310, 617, 715, 717], "comparison": [77, 150, 151, 152, 310, 394, 398, 401, 617, 703, 715], "compat": [46, 66, 77, 78, 79, 91, 130, 149, 271, 302, 320, 354, 389, 395, 571, 610, 629, 660, 695, 828, 862], "compens": 73, "complet": [33, 54, 69, 70, 72, 97, 153, 214, 248, 259, 399, 401, 718, 719, 767, 793], "complex": 715, "complic": [715, 716], "compon": [92, 135, 153, 358, 359, 360, 395, 398, 402, 403, 717, 719], "compris": 715, "comput": [0, 2, 7, 10, 21, 32, 53, 73, 100, 102, 109, 115, 140, 179, 182, 193, 196, 199, 205, 209, 220, 221, 222, 231, 232, 233, 236, 241, 243, 244, 245, 246, 250, 254, 255, 256, 257, 261, 265, 266, 267, 273, 277, 282, 294, 323, 325, 329, 335, 345, 358, 367, 372, 381, 395, 398, 403, 413, 464, 468, 494, 496, 497, 502, 505, 510, 514, 520, 524, 529, 532, 537, 715, 719, 721, 736, 740, 744, 750, 754, 758, 773, 783, 799, 805, 806, 821, 840, 841, 855, 871], "con": [766, 777, 792], "concat": [92, 140, 144, 150, 151, 715], "concaten": [86, 87], "conceiv": 77, "concept": [151, 152], "concern": 151, "concis": [71, 153, 401], "conclus": [150, 151], "cond": [149, 150, 152], "conda": 149, "condit": [0, 5, 7, 14, 21, 69, 73, 77, 149, 150, 154, 193, 195, 196, 198, 199, 205, 208, 209, 211, 223, 225, 227, 234, 238, 241, 273, 288, 395, 403, 717, 719, 725, 731, 750, 753, 754, 757, 758, 759, 763, 764, 775, 780, 790, 814], "condition": [717, 719], "conduct": [73, 153, 401], "confid": [85, 106, 274, 326, 364, 543, 578, 632, 667, 803, 838], "configur": [97, 154, 194, 197, 207, 210, 214, 225, 236, 248, 259, 306, 489, 497, 505, 514, 524, 532, 723, 727, 730, 734, 738, 742, 747, 751, 755, 760, 805, 833, 840], "conform": [491, 499, 507, 516, 526, 534], "conlim": 149, "consid": [398, 717, 718, 719], "consider": 398, "consist": [25, 69, 73, 79, 92, 150, 151, 273, 288, 395, 398, 399, 402, 403, 404, 715, 716, 719, 764, 790, 814], "const": [150, 151, 154, 398, 402, 711, 715, 718], "constant": [69, 73, 97, 115, 117, 137, 150, 152, 216, 217, 227, 228, 238, 239, 250, 251, 261, 262, 282, 285, 335, 338, 372, 374, 398, 403, 491, 492, 499, 500, 507, 508, 517, 526, 527, 534, 535, 552, 553, 588, 589, 641, 642, 676, 677, 711, 715, 719, 770, 781, 796, 825, 829, 859, 863], "constrain": [787, 789], "constrained_r": 715, "constraint": [77, 133, 305, 357, 392, 399, 575, 615, 664, 701, 716, 717, 718, 721, 725, 728, 731, 736, 740, 744, 765, 774, 776, 784, 785, 786, 788, 789, 791, 800], "construct": [69, 77, 92, 106, 135, 145, 148, 151, 216, 220, 227, 231, 238, 243, 250, 254, 261, 265, 274, 294, 326, 345, 364, 381, 395, 397, 398, 459, 490, 494, 498, 502, 506, 510, 514, 515, 520, 525, 529, 533, 537, 543, 561, 578, 599, 632, 650, 667, 685, 715, 719, 753, 757, 763, 768, 771, 773, 779, 783, 789, 794, 797, 799, 803, 821, 838, 855], "consum": [405, 413, 421, 439, 447], "cont": [92, 135, 140, 144], "contain": [19, 23, 27, 70, 71, 77, 92, 97, 133, 140, 144, 151, 152, 153, 154, 155, 187, 192, 193, 194, 196, 197, 199, 205, 207, 210, 214, 216, 223, 225, 227, 235, 236, 238, 246, 248, 250, 259, 261, 269, 270, 273, 283, 294, 305, 323, 324, 325, 334, 336, 345, 352, 357, 358, 359, 360, 362, 381, 392, 395, 397, 399, 401, 402, 403, 463, 465, 476, 480, 489, 491, 499, 505, 507, 514, 516, 524, 526, 532, 534, 539, 541, 542, 561, 575, 577, 599, 615, 631, 650, 664, 666, 685, 701, 704, 711, 715, 717, 718, 719, 725, 728, 731, 751, 754, 755, 757, 760, 764, 769, 770, 773, 775, 778, 780, 781, 783, 790, 795, 796, 799, 821, 855, 871], "content": 97, "context": [152, 397, 494, 502, 510, 520, 529, 537], "continu": [21, 72, 76, 77, 91, 92, 97, 135, 140, 142, 144, 148, 154, 234, 715], "contribut": 91, "control": [150, 151, 154, 398, 489, 505, 514, 524, 532], "conveni": 144, "converg": [21, 150, 154, 225, 465, 717, 767, 778, 793], "convert": [140, 183, 397, 455, 480], "convert_dummi": [183, 455], "coordin": 397, "copi": [72, 77, 455, 797], "core": [77, 398, 869, 870], "corpor": 399, "corr": [69, 150, 403, 544, 545, 546, 579, 580, 581, 633, 634, 635, 668, 669, 670, 715], "corr_squared_between": 77, "corr_squared_overal": 77, "corr_squared_within": 77, "correct": [16, 19, 20, 23, 73, 77, 151, 154, 395, 514, 532, 552, 587, 588, 641, 676, 715, 785], "correctli": [77, 150, 395], "correl": [69, 77, 150, 151, 154, 269, 358, 359, 360, 395, 400, 405, 544, 545, 546, 579, 580, 581, 633, 634, 635, 668, 669, 670, 715, 718, 767, 793, 802, 815, 837, 849], "correspond": [21, 73, 133, 154, 220, 231, 243, 254, 265, 273, 294, 305, 310, 345, 357, 381, 392, 394, 395, 461, 463, 476, 494, 502, 510, 520, 529, 537, 575, 615, 617, 664, 701, 703, 719, 725, 728, 731, 773, 783, 799, 821, 855, 888], "could": [151, 399, 715], "count": [78, 140, 150, 151, 398, 403], "count_effect": [398, 400, 514], "counti": 151, "countri": [402, 716], "cours": 90, "cov": [69, 70, 72, 149, 150, 151, 152, 154, 397, 398, 399, 402, 404, 715, 716, 717, 718], "cov_clust": 721, "cov_config": [17, 21, 25, 97, 199, 214, 225, 236, 248, 259, 268, 489, 505, 514, 524, 532, 767, 778, 793], "cov_typ": [17, 21, 25, 69, 70, 71, 72, 97, 150, 151, 152, 154, 199, 214, 225, 236, 248, 259, 268, 398, 402, 489, 496, 497, 505, 514, 516, 524, 532, 715, 716, 717, 718, 767, 778, 793], "covari": [16, 17, 19, 21, 25, 31, 32, 35, 52, 53, 55, 69, 70, 71, 72, 73, 77, 97, 107, 108, 109, 110, 111, 115, 151, 152, 153, 195, 198, 199, 201, 202, 203, 205, 208, 211, 214, 225, 236, 248, 259, 269, 275, 276, 277, 278, 279, 282, 311, 327, 328, 329, 330, 331, 335, 359, 365, 366, 367, 368, 369, 372, 401, 402, 404, 489, 496, 497, 505, 514, 524, 532, 547, 553, 582, 589, 618, 636, 642, 671, 677, 711, 714, 717, 718, 752, 753, 754, 756, 757, 759, 762, 763, 764, 767, 769, 775, 778, 790, 793, 795, 804, 805, 806, 807, 815, 826, 829, 839, 840, 841, 842, 849, 860, 863], "cover": [90, 398], "creat": [77, 84, 85, 97, 150, 215, 226, 237, 249, 260, 398, 491, 499, 507, 516, 526, 534, 561, 599, 650, 685, 884], "credibl": 150, "criteria": 225, "critic": [395, 878], "cross": [69, 71, 77, 398, 405, 541, 542, 714, 718, 719, 750, 802, 815, 837, 849], "csc_matrix": [139, 148], "csv": [46, 66, 86, 130, 271, 302, 320, 354, 389, 571, 610, 629, 660, 695, 828, 862], "ct": 715, "cue": [69, 91, 150, 234, 713], "curli": [769, 780, 795], "current": [88, 151, 715], "custom": [77, 154], "cython": 77, "d": [151, 395, 398, 455, 459, 480, 714, 885, 889, 890], "d88": 151, "d89": 151, "d_": 403, "da": 397, "dad": 151, "dai": [151, 715], "damp": 149, "dartmouth": [69, 70], "data": [19, 23, 27, 72, 77, 91, 102, 118, 133, 149, 151, 154, 155, 161, 167, 179, 213, 216, 220, 222, 224, 225, 227, 231, 233, 235, 238, 243, 245, 247, 250, 254, 256, 258, 261, 265, 267, 286, 294, 305, 339, 345, 357, 375, 381, 392, 395, 400, 402, 403, 404, 488, 489, 491, 494, 495, 496, 499, 502, 503, 504, 507, 510, 511, 512, 516, 520, 521, 523, 526, 529, 530, 531, 534, 537, 538, 539, 555, 561, 564, 575, 577, 591, 599, 602, 615, 631, 644, 650, 653, 664, 666, 679, 685, 688, 701, 704, 711, 714, 716, 718, 719, 721, 725, 728, 731, 736, 740, 744, 769, 773, 780, 783, 795, 797, 799, 821, 855, 867, 869, 870], "data_librari": [69, 70], "dataarrai": [16, 19, 20, 21, 24, 92, 97, 140, 183, 185, 212, 216, 223, 227, 234, 238, 243, 246, 250, 254, 257, 261, 265, 294, 345, 381, 413, 455, 465, 488, 491, 494, 495, 496, 499, 502, 503, 504, 507, 510, 511, 512, 516, 520, 521, 523, 526, 529, 530, 531, 534, 537, 538, 561, 599, 650, 685, 764, 769, 771, 773, 775, 780, 790, 795, 797, 799, 821, 855, 867], "datafram": [16, 19, 20, 21, 23, 24, 27, 30, 31, 38, 39, 45, 48, 51, 52, 58, 59, 65, 68, 70, 77, 92, 93, 94, 97, 104, 106, 107, 133, 135, 140, 141, 142, 144, 149, 151, 152, 183, 185, 190, 212, 216, 220, 223, 227, 231, 234, 238, 243, 246, 250, 254, 257, 261, 265, 269, 274, 275, 294, 305, 313, 315, 316, 319, 321, 326, 327, 345, 357, 364, 365, 381, 392, 398, 399, 404, 413, 429, 432, 455, 457, 460, 461, 463, 465, 466, 468, 476, 477, 480, 486, 488, 489, 491, 494, 495, 496, 499, 502, 503, 504, 505, 507, 510, 511, 512, 514, 516, 520, 521, 523, 524, 526, 529, 530, 531, 532, 534, 537, 538, 540, 543, 547, 561, 575, 578, 582, 597, 599, 615, 620, 622, 623, 628, 630, 632, 636, 650, 664, 667, 671, 685, 696, 701, 704, 705, 707, 709, 710, 711, 715, 716, 717, 764, 765, 769, 771, 773, 775, 776, 780, 783, 785, 788, 790, 791, 795, 797, 799, 803, 804, 812, 821, 824, 826, 835, 838, 839, 847, 855, 858, 860, 866, 867], "dataset": [19, 23, 27, 69, 70, 72, 77, 133, 150, 151, 152, 154, 216, 227, 238, 250, 261, 305, 357, 392, 397, 398, 399, 402, 404, 575, 615, 664, 701, 711, 713, 715, 716, 717, 718, 797], "date": [69, 70, 72, 149, 150, 151, 152, 154, 397, 398, 399, 402, 404, 715, 716, 717, 718], "datetim": 149, "ddot": [403, 719, 764, 775, 790], "de": 715, "debia": [17, 21, 25, 199, 403, 405, 413, 421, 429, 439, 447, 715, 721, 871], "debias": [0, 7, 17, 21, 25, 39, 59, 97, 106, 115, 123, 150, 151, 152, 154, 155, 160, 161, 166, 167, 172, 173, 178, 193, 196, 199, 204, 205, 209, 214, 225, 236, 248, 259, 274, 282, 295, 326, 335, 346, 364, 372, 382, 395, 403, 404, 405, 413, 421, 429, 439, 447, 489, 497, 505, 514, 524, 532, 543, 553, 562, 578, 589, 600, 632, 642, 651, 667, 677, 686, 715, 716, 717, 719, 721, 725, 728, 731, 736, 740, 744, 750, 754, 758, 767, 778, 793, 803, 822, 838, 856, 871], "decomposit": [398, 614, 700], "decreas": 398, "deep": 456, "def": 715, "default": [0, 7, 69, 72, 77, 78, 84, 85, 97, 115, 150, 151, 154, 214, 225, 236, 246, 248, 250, 259, 261, 282, 310, 335, 372, 394, 398, 399, 404, 497, 505, 514, 524, 532, 617, 703, 715, 717, 767, 793, 885, 888], "default_rng": 717, "defer": [21, 77, 236, 409, 417, 425, 435, 443, 451], "defici": 77, "defin": [73, 212, 223, 241, 246, 288, 334, 358, 362, 395, 403, 404, 548, 549, 552, 583, 584, 587, 588, 637, 638, 641, 672, 673, 676, 719, 802, 814, 815, 825, 829, 837, 849, 859, 863, 871], "definit": [16, 19, 223, 395, 404, 566, 567, 568, 604, 606, 607, 655, 656, 657, 690, 691, 692, 775], "degre": [0, 7, 17, 21, 25, 73, 97, 113, 114, 214, 225, 236, 248, 259, 280, 281, 288, 324, 332, 333, 352, 370, 371, 395, 398, 400, 403, 404, 405, 413, 421, 439, 447, 489, 497, 505, 514, 524, 532, 548, 549, 552, 553, 583, 584, 587, 588, 589, 637, 638, 641, 642, 672, 673, 676, 677, 808, 809, 814, 843, 844, 877], "delimit": 86, "delta": [151, 154, 334, 362, 395, 403, 504, 719], "demean": [71, 73, 395, 398, 404, 465, 468, 546, 581, 635, 670, 696, 719, 786, 825, 859], "demonstr": [151, 715, 717], "denomin": [825, 859], "denot": [273, 496, 719, 764, 775, 790], "dep": [92, 149, 150, 151, 152, 154, 268, 397, 398, 399, 402, 404, 715, 716, 717], "depend": [70, 77, 78, 92, 93, 97, 118, 149, 150, 151, 154, 173, 199, 212, 214, 216, 223, 225, 227, 234, 236, 238, 241, 246, 248, 250, 257, 259, 261, 286, 339, 375, 395, 397, 398, 399, 402, 403, 405, 413, 421, 429, 439, 447, 488, 496, 504, 512, 523, 531, 541, 544, 545, 546, 555, 561, 566, 567, 568, 579, 580, 581, 591, 599, 604, 606, 607, 633, 634, 635, 644, 650, 655, 656, 657, 668, 669, 670, 679, 685, 690, 691, 692, 715, 716, 717, 718, 719, 750, 758, 764, 771, 775, 786, 790, 797, 829, 863], "deprec": [97, 401, 404], "depth": [220, 231, 243, 254, 265, 494, 502, 510, 520, 529, 537, 773, 783, 799], "deriv": 711, "descr": [69, 70, 150, 151, 152, 398, 715], "describ": [19, 23, 27, 73, 140, 150, 151, 154, 216, 227, 238, 250, 261, 398, 401, 402, 512], "descript": [311, 618, 769, 780, 795], "design": [400, 402, 403], "desir": [397, 399, 404], "despit": [115, 151, 282, 335, 372], "detail": [71, 149, 151, 153, 199, 225, 236, 401, 802, 815, 837, 849], "detect": 400, "determin": [44, 64, 105, 126, 127, 298, 299, 317, 318, 349, 350, 385, 386, 398, 399, 403, 541, 542, 544, 545, 546, 565, 566, 567, 568, 579, 580, 581, 603, 604, 605, 606, 607, 624, 625, 626, 627, 633, 634, 635, 654, 655, 656, 657, 668, 669, 670, 689, 690, 691, 692, 716, 719, 765, 776, 791, 825, 859], "devel": 91, "develop": [91, 402], "deviat": 403, "df": [0, 7, 73, 405, 421, 439, 447, 480, 553, 589, 642, 677, 717, 877], "df_": 587, "df_denom": 877, "df_resid": [39, 59, 106, 123, 274, 295, 326, 346, 364, 382, 543, 562, 578, 600, 632, 651, 667, 686, 803, 822, 838, 856], "df_u": [552, 588, 641, 676], "dhryme": [715, 716, 717, 829, 863], "diag": 715, "diagnos": [283, 336], "diagnost": [268, 719], "diagon": [77, 719, 721, 736, 740, 744, 754, 764, 775, 790, 815, 849], "diamond": 404, "dict": [1, 9, 21, 97, 103, 108, 133, 156, 162, 168, 174, 187, 194, 197, 200, 207, 210, 235, 236, 268, 270, 272, 276, 305, 306, 310, 322, 328, 357, 363, 366, 392, 394, 398, 617, 703, 718, 768, 769, 779, 780, 794, 795, 805, 821, 833, 840, 855, 878], "dictionari": [49, 77, 97, 103, 133, 149, 150, 187, 194, 197, 207, 210, 235, 270, 272, 305, 322, 357, 363, 392, 398, 575, 615, 664, 701, 715, 717, 751, 755, 760, 764, 769, 771, 773, 775, 780, 783, 790, 795, 797, 799, 801, 821, 836, 855, 882, 891], "did": 77, "differ": [69, 71, 73, 76, 77, 88, 90, 91, 97, 118, 150, 151, 214, 248, 259, 273, 286, 324, 334, 339, 352, 362, 375, 395, 397, 400, 401, 402, 404, 455, 464, 504, 505, 555, 564, 591, 602, 644, 653, 679, 688, 713, 715, 716, 719, 825, 859], "differenc": [151, 398, 399, 400, 403, 404, 464], "differenti": 151, "dimens": [118, 189, 286, 339, 375, 397, 398, 455, 469, 555, 591, 644, 679], "dimension": [77, 91, 92, 149, 396, 455, 719, 871], "direct": [151, 152], "directli": [24, 84, 85, 88, 115, 150, 151, 154, 282, 335, 372, 395, 398, 717, 719], "disabl": 429, "discuss": [151, 153], "disp": [21, 69], "dispers": 69, "displai": [69, 150, 154, 235, 236, 715], "display_png": 715, "dist": 269, "distinct": [148, 413, 715, 769, 780, 795], "distn": [150, 151], "distribut": [69, 70, 71, 72, 73, 85, 115, 133, 149, 150, 151, 152, 154, 269, 273, 282, 305, 323, 324, 325, 334, 335, 352, 357, 358, 359, 360, 362, 372, 392, 395, 397, 398, 399, 402, 404, 552, 553, 575, 587, 588, 589, 615, 641, 642, 664, 676, 677, 701, 715, 717, 719, 802, 815, 837, 849, 877], "diverg": 402, "divid": [115, 150, 282, 335, 372, 553, 589, 642, 677], "do": [69, 90, 398, 402, 403, 514, 551, 586, 631, 640, 675, 715, 717, 825, 859], "doc": [79, 91], "docstr": [77, 90, 97, 214, 248, 259], "document": [77, 90, 91, 97, 152, 214, 248, 259, 398, 566, 567, 568, 604, 606, 607, 655, 656, 657, 690, 691, 692], "doe": [69, 71, 73, 149, 151, 358, 398, 402, 403, 404, 455, 496, 514, 544, 545, 546, 553, 579, 580, 581, 589, 633, 634, 635, 642, 668, 669, 670, 677, 713, 715, 717, 719, 891], "doi": 714, "don": 151, "done": [149, 716], "dot": [395, 719, 764, 775, 790], "doubl": [84, 151], "doubt": 73, "dougla": 714, "dramat": 97, "driscol": [421, 505, 514, 524, 532], "driven": 395, "drop": [69, 77, 78, 92, 149, 151, 152, 183, 294, 345, 381, 395, 397, 398, 403, 404, 455, 461, 495, 503, 511, 512, 516, 521, 530, 538, 561, 599, 650, 685, 715, 717, 821, 855], "drop_absorb": [77, 92, 512, 516], "drop_first": [183, 455, 461], "dropna": [150, 151, 152, 397, 717], "drug": [150, 152], "drugexp": [150, 152], "dt": 149, "dtype": [0, 2, 3, 4, 5, 7, 10, 11, 12, 14, 69, 100, 102, 135, 143, 155, 157, 159, 160, 161, 163, 165, 166, 167, 169, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 188, 195, 198, 199, 201, 203, 204, 208, 211, 213, 218, 219, 221, 222, 224, 229, 230, 232, 233, 235, 236, 240, 241, 242, 244, 245, 247, 252, 253, 255, 256, 258, 263, 264, 266, 267, 307, 397, 398, 405, 408, 409, 410, 413, 416, 417, 418, 421, 424, 425, 426, 429, 434, 435, 436, 439, 442, 443, 444, 447, 450, 451, 452, 459, 460, 463, 476, 481, 487, 489, 493, 495, 501, 503, 505, 509, 511, 514, 518, 521, 524, 528, 530, 532, 536, 538, 575, 615, 664, 701, 715, 722, 724, 726, 729, 733, 737, 739, 741, 743, 746, 749, 752, 753, 756, 757, 762, 763, 778, 786, 789, 832, 867, 869, 870, 871], "due": [77, 150, 398, 403, 715, 717], "dummi": [77, 92, 140, 148, 149, 151, 183, 395, 402, 403, 404, 455, 459, 514], "dummy_interact": 148, "durabl": [69, 70], "durbin": [150, 395], "durbl": [69, 70], "dure": [154, 398], "dx": 714, "dynam": 398, "e": [24, 69, 71, 73, 77, 133, 149, 151, 213, 224, 235, 247, 258, 305, 357, 359, 392, 395, 402, 403, 404, 405, 413, 421, 439, 447, 575, 615, 664, 701, 714, 715, 716, 717, 719, 769, 780, 795, 891], "e_": 395, "each": [69, 73, 77, 92, 106, 133, 140, 148, 150, 151, 154, 269, 274, 305, 326, 334, 357, 362, 364, 392, 395, 398, 402, 403, 432, 496, 512, 514, 516, 540, 543, 575, 578, 615, 632, 664, 667, 701, 715, 716, 717, 718, 719, 725, 728, 731, 752, 756, 757, 762, 764, 769, 773, 775, 780, 783, 790, 795, 799, 803, 821, 829, 838, 855, 863], "earn": [151, 715, 716, 718], "easili": [69, 151], "econom": [16, 71, 151, 714, 715], "econometr": [151, 398, 714, 715, 802, 815, 837, 849], "econometrica": 151, "ed": 151, "edit": [714, 715], "edu": [69, 70], "educ": [133, 150, 152, 154, 216, 227, 238, 250, 261, 305, 357, 392, 398, 714, 715, 716, 717, 802, 815, 837, 849], "educ_hat": 151, "educyr": [150, 152], "effect": [69, 71, 73, 76, 77, 78, 91, 92, 93, 94, 118, 149, 150, 151, 152, 196, 286, 339, 375, 395, 396, 397, 402, 404, 405, 413, 421, 439, 447, 455, 489, 496, 512, 513, 514, 516, 519, 522, 531, 532, 545, 546, 548, 549, 551, 555, 561, 567, 568, 577, 580, 581, 583, 584, 586, 587, 591, 592, 597, 599, 605, 606, 607, 614, 631, 634, 635, 637, 638, 640, 644, 650, 656, 657, 666, 669, 670, 672, 673, 675, 679, 685, 691, 692, 700, 704, 711, 713, 715, 754], "effici": [21, 69, 71, 72, 73, 150, 151, 225, 273, 395, 398, 402, 403, 715, 717, 718, 802, 815, 837, 849], "eig": 395, "eigenvalu": 395, "eight": 72, "either": [71, 73, 97, 149, 150, 155, 220, 231, 243, 254, 265, 294, 345, 381, 395, 455, 457, 459, 468, 494, 496, 502, 510, 520, 529, 537, 715, 718, 719, 764, 769, 773, 775, 780, 783, 790, 795, 799, 821, 855, 891], "electr": 404, "element": [73, 84, 133, 154, 155, 305, 357, 392, 575, 615, 664, 701, 711, 715, 719, 721, 736, 744], "elimin": [151, 402, 514], "els": [39, 59, 106, 123, 274, 295, 326, 346, 364, 382, 543, 562, 578, 600, 632, 651, 667, 686, 803, 822, 838, 856, 885], "emp": [150, 152, 715], "emp_shar": 715, "empir": 151, "emploi": [151, 397, 767, 778, 793], "employ": [150, 151, 715], "employe": [151, 715], "empti": [764, 775, 889], "enabl": 77, "encapsul": [769, 780, 795], "encod": 92, "end": [20, 73, 83, 395, 398, 403, 404, 717, 719, 764, 775, 790], "endog": [77, 151, 152, 154, 195, 198, 208, 211, 212, 216, 220, 223, 227, 231, 234, 238, 243, 246, 250, 254, 257, 261, 265, 268, 288, 294, 323, 324, 325, 345, 358, 362, 381, 717, 753, 763, 764, 771, 773, 775, 783, 799, 814, 821, 855], "endogen": [84, 85, 92, 151, 154, 155, 161, 167, 173, 199, 212, 216, 220, 223, 227, 231, 234, 238, 243, 246, 250, 254, 257, 261, 265, 269, 270, 273, 294, 324, 334, 345, 352, 358, 359, 360, 362, 381, 395, 715, 716, 717, 718, 719, 764, 771, 773, 775, 783, 790, 799, 821, 855], "energi": [69, 70], "enforc": [715, 719], "engog": 398, "enhanc": [152, 714], "enough": 149, "enrgi": [69, 70], "enrol": 151, "ensur": [395, 491, 499, 507, 512, 516, 523, 526, 534, 715, 716, 718], "enter": 715, "entir": [90, 764, 775, 790], "entiti": [77, 78, 397, 400, 402, 403, 404, 405, 413, 421, 429, 439, 447, 455, 457, 459, 461, 463, 468, 470, 488, 489, 491, 496, 499, 504, 505, 507, 512, 513, 514, 516, 523, 524, 526, 531, 532, 534, 544, 546, 550, 568, 579, 581, 585, 607, 633, 635, 639, 657, 668, 670, 674, 692, 704, 711], "entity_effect": [77, 397, 398, 402, 404, 512, 514, 575, 615, 664, 701], "entity_id": [405, 413, 421, 439, 447], "entityeffect": [399, 402, 516], "entrant": 397, "entri": [718, 769, 780, 795], "environ": 79, "ep": [149, 195, 198, 208, 211, 721, 725, 728, 731, 736, 740, 744, 752, 753, 756, 757, 762, 763], "epsilon": [73, 155, 161, 167, 173, 196, 241, 288, 334, 352, 358, 360, 362, 395, 403, 439, 447, 488, 715, 717, 719, 764, 775, 790, 825, 829, 859, 863], "epsilon_": [16, 20, 24, 73, 395, 398, 402, 403, 405, 496, 504, 512, 523, 531, 719, 750, 758, 764, 775, 790], "epsilon_1": 717, "epsilon_2": 717, "epsilon_i": [92, 149, 154, 193, 196, 205, 234, 359, 421, 715], "epsilon_j": 715, "eq": [360, 715], "eq1": [769, 780, 795], "eq2": [769, 780, 795], "eqn": [773, 783, 799, 821, 855], "eqnarrai": 717, "equal": [71, 73, 133, 150, 305, 357, 392, 395, 575, 615, 664, 701], "equat": [91, 514, 714, 716, 718, 719, 725, 728, 731, 750, 752, 756, 757, 758, 762, 764, 769, 770, 771, 773, 775, 780, 781, 783, 790, 795, 796, 797, 799, 810, 821, 825, 829, 845, 855, 859, 863], "equation_label": [715, 716], "equicorrel": 715, "equip": [69, 70], "equival": [117, 137, 217, 228, 239, 251, 262, 285, 338, 374, 395, 398, 399, 402, 719], "err": [69, 70, 72, 149, 150, 151, 152, 154, 397, 398, 399, 402, 404, 715, 716, 717, 718], "error": [42, 45, 62, 65, 69, 73, 77, 118, 129, 150, 154, 195, 198, 208, 211, 213, 224, 235, 247, 258, 286, 301, 319, 339, 353, 360, 375, 388, 398, 400, 402, 412, 420, 428, 438, 446, 454, 514, 555, 561, 570, 591, 599, 609, 628, 644, 650, 659, 679, 685, 694, 715, 724, 739, 743, 749, 750, 753, 757, 758, 763, 767, 793, 827, 861], "escap": 77, "especi": 150, "essai": 151, "essenti": 69, "est": [150, 151, 152, 398], "estim": [0, 7, 8, 13, 16, 17, 19, 20, 21, 23, 24, 25, 29, 30, 31, 32, 34, 35, 38, 41, 42, 45, 46, 49, 50, 51, 52, 53, 55, 58, 61, 62, 65, 66, 70, 71, 72, 76, 77, 85, 91, 92, 97, 103, 107, 108, 109, 110, 115, 118, 119, 122, 125, 128, 129, 130, 134, 149, 155, 157, 159, 160, 161, 163, 165, 166, 167, 169, 171, 172, 173, 175, 177, 178, 193, 194, 196, 197, 199, 201, 203, 204, 205, 206, 207, 209, 210, 212, 213, 214, 216, 219, 220, 223, 224, 225, 227, 230, 231, 234, 235, 236, 238, 241, 242, 243, 246, 247, 248, 250, 253, 254, 257, 258, 259, 261, 264, 265, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 282, 286, 287, 288, 289, 290, 293, 294, 297, 300, 301, 302, 306, 307, 308, 309, 310, 311, 312, 320, 322, 323, 325, 327, 328, 329, 330, 335, 339, 340, 341, 344, 345, 348, 351, 352, 353, 354, 359, 361, 363, 365, 366, 367, 368, 372, 375, 376, 377, 380, 381, 384, 387, 388, 389, 393, 394, 397, 399, 400, 402, 404, 405, 408, 411, 413, 416, 419, 421, 424, 427, 429, 432, 433, 434, 437, 439, 442, 445, 447, 450, 453, 459, 488, 489, 491, 495, 496, 497, 499, 503, 504, 505, 507, 511, 512, 514, 516, 521, 523, 524, 526, 530, 531, 532, 534, 538, 540, 547, 551, 553, 555, 559, 560, 561, 564, 566, 567, 568, 569, 570, 571, 582, 586, 589, 591, 596, 598, 599, 602, 604, 606, 607, 608, 609, 610, 617, 618, 619, 629, 636, 640, 642, 644, 648, 649, 650, 653, 655, 656, 657, 658, 659, 660, 671, 675, 677, 679, 683, 684, 685, 688, 690, 691, 692, 693, 694, 695, 703, 711, 714, 718, 721, 725, 728, 731, 732, 735, 736, 740, 744, 745, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 769, 773, 775, 778, 780, 783, 785, 786, 790, 793, 795, 797, 799, 801, 802, 804, 805, 806, 814, 815, 816, 817, 820, 821, 824, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 839, 840, 841, 849, 850, 851, 854, 855, 858, 860, 861, 862, 863, 866, 869, 870], "eta": [16, 73, 395, 719, 825, 829, 859, 863], "eta_": [73, 395], "eta_i": [16, 360], "etdata": 404, "etext": 83, "eval_env": [220, 231, 243, 254, 265, 494, 502, 510, 520, 529, 537, 773, 783, 799], "evalu": [152, 220, 231, 243, 254, 265, 494, 502, 510, 520, 529, 537, 773, 783, 799], "even": [70, 92, 149, 398, 404, 715], "everi": 69, "evid": 150, "exact": [150, 719], "examin": [133, 150, 151, 305, 323, 325, 357, 358, 359, 360, 392, 395, 575, 615, 664, 701, 719], "exampl": [19, 23, 27, 70, 71, 72, 77, 90, 92, 133, 140, 144, 152, 153, 216, 227, 238, 250, 261, 305, 357, 392, 397, 401, 402, 403, 489, 491, 497, 499, 505, 507, 514, 516, 524, 526, 532, 534, 575, 615, 664, 701, 716, 717, 718, 719, 769, 780, 795, 797], "except": [21, 69, 73, 236, 395, 398, 455, 715, 717], "excess": [16, 19, 20, 23, 24, 72, 73], "exclud": [77, 115, 282, 335, 372, 395, 398, 552, 553, 588, 589, 641, 642, 676, 677, 704, 715, 719], "exclus": 150, "execut": [395, 409, 417, 425, 435, 443, 451, 813, 848], "exist": [70, 715], "exog": [77, 92, 149, 150, 151, 152, 154, 195, 198, 208, 211, 212, 216, 220, 223, 227, 231, 234, 238, 243, 246, 250, 254, 257, 261, 265, 268, 273, 294, 324, 345, 352, 362, 381, 397, 398, 402, 488, 494, 496, 502, 504, 510, 512, 520, 523, 529, 531, 537, 552, 561, 575, 588, 599, 615, 641, 650, 664, 676, 685, 701, 715, 716, 717, 718, 753, 763, 764, 771, 773, 775, 783, 790, 797, 799, 821, 855], "exog_ben": 715, "exog_earn": 715, "exog_var": [398, 575, 615, 664, 701], "exogen": [77, 84, 85, 92, 94, 151, 152, 154, 155, 161, 167, 173, 193, 196, 205, 212, 220, 223, 225, 231, 234, 243, 246, 254, 257, 265, 269, 273, 288, 294, 324, 334, 345, 358, 359, 360, 362, 381, 395, 397, 405, 413, 421, 429, 439, 447, 488, 491, 494, 496, 499, 502, 504, 507, 510, 512, 516, 520, 523, 526, 529, 531, 534, 537, 546, 561, 568, 581, 599, 607, 635, 650, 657, 670, 685, 692, 715, 717, 718, 719, 721, 736, 740, 744, 754, 764, 771, 773, 775, 778, 783, 790, 797, 799, 821, 855], "exp": 151, "expand": [69, 77, 90, 150, 151, 395], "expect": [69, 71, 73, 150, 395, 404], "expenditur": [150, 152], "expens": [150, 152], "exper": [133, 151, 154, 216, 227, 238, 250, 261, 305, 357, 392, 398, 715, 716, 717, 718], "experi": [70, 90, 133, 151, 305, 357, 392, 398, 402, 715], "experienc": 90, "expersq": [151, 398, 402, 575, 615, 664, 701, 715, 716, 717], "explain": [71, 151, 154, 179, 359, 360, 398], "explan": [71, 153, 401, 872], "explanatori": 711, "explicit": [241, 395], "explicitli": [216, 227, 238, 250, 261, 399, 404, 491, 496, 499, 507, 526, 534], "exploit": [150, 403], "export": [46, 66, 130, 271, 302, 320, 354, 389, 571, 610, 629, 660, 695, 828, 862], "expos": [213, 224, 235, 247, 258, 403, 495, 503, 511, 521, 530, 538, 882], "exposur": [69, 71], "express": [70, 154, 216, 227, 238, 250, 261, 360, 395, 397, 403, 715, 716, 719, 764, 775, 790], "extend": [77, 151, 395, 719], "extens": [90, 398, 399, 717, 719], "extern": 77, "extra": [69, 88, 89], "extra_df": [405, 413, 421, 439, 447], "ey": 715, "f": [77, 115, 149, 150, 151, 152, 154, 269, 282, 313, 325, 335, 372, 395, 397, 398, 399, 402, 404, 552, 587, 588, 620, 641, 676, 714, 715, 716, 717, 719, 877, 891], "f_": [20, 73, 325, 362, 395, 552, 553, 587, 588, 589, 641, 642, 676, 677], "f_t": [16, 20, 24], "face": [77, 151], "facilit": [213, 224, 235, 247, 258, 398, 715], "fact": 150, "factor": [16, 19, 20, 23, 24, 27, 30, 33, 41, 42, 49, 51, 54, 61, 62, 69, 72, 76, 77, 91, 92, 135, 151, 397, 713, 714, 715, 797], "factor1": 70, "factork": 70, "faculti": [69, 70], "fail": 77, "fair": [150, 152], "fairli": [150, 398, 715], "fallback": 97, "fals": [0, 7, 16, 19, 20, 21, 23, 77, 85, 92, 97, 149, 150, 151, 152, 154, 155, 161, 167, 173, 193, 196, 199, 205, 209, 214, 225, 236, 248, 259, 294, 310, 345, 381, 394, 398, 400, 405, 413, 421, 429, 439, 447, 459, 461, 489, 512, 514, 516, 532, 561, 599, 617, 650, 685, 703, 711, 715, 716, 717, 721, 725, 728, 731, 736, 740, 744, 750, 754, 758, 767, 793, 821, 855], "fama": [71, 76, 77, 91, 429, 496, 539, 713], "famamacbeth": [77, 91, 401, 713], "famamacbethresult": [77, 497], "famili": 151, "faminc": 151, "fatheduc": 151, "father": 151, "favor": 78, "fcode": [151, 397], "fd_re": 398, "fdata": 715, "fe_b": 404, "fe_oe_r": 398, "fe_r": [398, 575, 615, 664, 701], "fe_te_r": 398, "feasibl": [151, 404, 719], "featur": [77, 79, 90, 152, 715], "fed": 151, "feduc": 151, "femal": [150, 152], "few": [77, 404], "fewer": 92, "fgl": [719, 764, 769, 775, 790, 795], "fgls_mod": 151, "fgls_re": 151, "field": [705, 707, 709, 710], "fill": [551, 586, 640, 675], "filter": [294, 345, 381, 561, 599, 650, 685, 821, 855], "final": [69, 73, 150, 273, 307, 401, 403, 715], "financ": [69, 70, 714], "finish": 149, "finit": [150, 154], "fir": [773, 783, 799], "firm": [69, 70, 72, 149, 150, 151, 152, 397, 399, 402, 403, 404], "firm_effect": 149, "firm_id": 149, "firmli": 69, "firmsz": [150, 152], "first": [16, 19, 23, 27, 69, 71, 72, 73, 76, 77, 91, 151, 152, 154, 183, 225, 268, 269, 270, 273, 283, 336, 358, 397, 402, 404, 455, 461, 464, 504, 505, 708, 713, 715, 717, 719, 769, 778, 780, 786, 795], "first_stag": [150, 151], "firstdifferenceol": [91, 398, 399, 400, 402, 713], "firststageresult": [283, 336], "fit": [69, 70, 72, 77, 92, 93, 94, 104, 116, 133, 145, 149, 150, 151, 152, 154, 220, 231, 243, 254, 265, 269, 284, 294, 305, 337, 345, 357, 358, 359, 360, 373, 381, 392, 395, 397, 398, 399, 400, 402, 403, 404, 491, 494, 499, 502, 507, 510, 516, 520, 526, 529, 534, 537, 544, 545, 546, 554, 561, 566, 567, 568, 575, 579, 580, 581, 590, 599, 604, 605, 606, 607, 615, 633, 634, 635, 643, 650, 655, 656, 657, 664, 668, 669, 670, 678, 685, 690, 691, 692, 701, 715, 716, 717, 718, 773, 783, 799, 812, 821, 829, 847, 855, 863], "fix": [69, 76, 77, 78, 79, 91, 92, 149, 402, 404, 405, 413, 421, 439, 447, 512, 514, 711, 713, 753, 757, 763], "fl": 715, "flag": [0, 6, 7, 15, 16, 17, 19, 20, 21, 23, 25, 69, 92, 97, 111, 117, 137, 155, 158, 161, 164, 167, 170, 173, 176, 183, 193, 196, 199, 202, 205, 209, 214, 217, 225, 228, 236, 239, 248, 251, 259, 262, 279, 285, 294, 331, 338, 345, 369, 374, 381, 395, 405, 413, 421, 429, 439, 447, 455, 459, 461, 489, 491, 492, 497, 499, 500, 505, 507, 508, 512, 513, 514, 516, 517, 519, 522, 523, 524, 526, 527, 532, 534, 535, 561, 599, 650, 685, 711, 719, 721, 736, 740, 744, 750, 754, 758, 767, 785, 793, 807, 821, 842, 855], "flat": [183, 455], "float": [1, 7, 8, 9, 25, 40, 44, 47, 60, 64, 67, 97, 105, 106, 120, 124, 126, 127, 128, 131, 133, 155, 161, 167, 173, 180, 181, 182, 188, 213, 225, 241, 246, 247, 250, 258, 261, 274, 289, 291, 296, 298, 299, 300, 303, 305, 326, 340, 342, 347, 349, 350, 351, 355, 357, 364, 376, 378, 383, 385, 386, 387, 390, 392, 405, 412, 420, 421, 428, 429, 433, 438, 446, 454, 480, 481, 489, 497, 505, 514, 524, 532, 541, 542, 543, 544, 545, 546, 556, 557, 563, 565, 566, 567, 568, 569, 573, 578, 579, 580, 581, 593, 594, 601, 603, 604, 605, 606, 607, 608, 612, 632, 633, 634, 635, 645, 646, 652, 654, 655, 656, 657, 658, 662, 667, 668, 669, 670, 680, 681, 687, 689, 690, 691, 692, 693, 698, 711, 731, 732, 744, 745, 758, 759, 767, 775, 778, 780, 793, 803, 818, 823, 825, 830, 838, 852, 857, 859, 864, 867, 871, 875, 876, 877, 878, 880, 881], "float64": [0, 2, 3, 4, 5, 7, 10, 11, 12, 14, 69, 100, 102, 135, 155, 157, 159, 160, 161, 163, 165, 166, 167, 169, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 195, 198, 199, 201, 203, 204, 208, 211, 213, 221, 222, 224, 232, 233, 235, 236, 241, 244, 245, 247, 255, 256, 258, 266, 267, 307, 397, 398, 405, 408, 409, 410, 413, 416, 417, 418, 421, 424, 425, 426, 429, 434, 435, 436, 439, 442, 443, 444, 447, 450, 451, 452, 459, 487, 575, 615, 664, 701, 715, 722, 724, 726, 729, 733, 737, 739, 741, 743, 746, 749, 752, 753, 756, 757, 762, 763, 778, 786, 789, 832, 867, 869, 870], "float64arrai": [225, 721, 725, 728, 731, 736, 740, 744, 867], "fmod": 715, "fmod_data": 715, "fmod_r": 715, "foc": 73, "follow": [150, 153, 715, 891], "foral": 716, "forc": [97, 151, 154, 398, 715, 767, 793], "fork": 90, "form": [69, 71, 73, 92, 106, 115, 133, 149, 150, 151, 216, 227, 238, 250, 261, 274, 282, 305, 326, 335, 357, 364, 372, 392, 395, 403, 404, 413, 455, 512, 543, 575, 578, 615, 632, 664, 667, 701, 715, 717, 719, 750, 758, 764, 765, 775, 776, 790, 791, 803, 821, 838, 855], "formal": [151, 566, 567, 568, 604, 606, 607, 655, 656, 657, 690, 691, 692], "format": [70, 83, 86, 87, 133, 140, 144, 305, 357, 392, 398, 401, 404, 455, 575, 615, 664, 701, 715, 769, 780, 795], "formul": 719, "formula": [19, 23, 27, 71, 75, 77, 78, 79, 80, 133, 153, 216, 220, 227, 231, 238, 243, 250, 254, 261, 265, 294, 305, 345, 357, 381, 392, 401, 402, 404, 491, 494, 499, 502, 507, 510, 516, 520, 526, 529, 534, 537, 561, 575, 599, 615, 650, 664, 685, 701, 718, 719, 769, 773, 780, 783, 795, 799, 821, 855], "forward": 399, "found": [719, 888], "four": [69, 154, 395, 524, 532], "fph": [150, 152], "frac": [73, 362, 395, 403, 552, 587, 588, 641, 676, 717, 719, 825, 829, 859, 863, 871], "fragil": 150, "frame": [144, 769, 780, 795], "free": [16, 19, 20, 23, 69, 70, 71, 73], "freedom": [0, 7, 17, 21, 25, 73, 97, 113, 114, 214, 225, 236, 248, 259, 280, 281, 288, 324, 332, 333, 352, 370, 371, 395, 398, 400, 403, 404, 405, 413, 421, 439, 447, 489, 497, 505, 514, 524, 532, 548, 549, 552, 553, 583, 584, 587, 588, 589, 637, 638, 641, 642, 672, 673, 676, 677, 808, 809, 814, 843, 844, 877], "french": [19, 23, 27, 69, 70, 71, 72, 715, 797], "freq": 140, "fres_het": 715, "fri": [69, 70, 149, 150, 151, 152, 397, 398, 399, 715, 716, 717], "fring": [715, 716, 718], "frish": 92, "from": [16, 19, 20, 23, 27, 49, 69, 70, 72, 73, 77, 84, 85, 91, 92, 97, 103, 104, 108, 118, 133, 135, 140, 144, 148, 149, 150, 151, 152, 153, 154, 180, 181, 182, 216, 220, 227, 231, 238, 243, 250, 254, 261, 265, 269, 270, 272, 276, 286, 294, 305, 322, 328, 334, 339, 345, 352, 357, 359, 360, 362, 363, 366, 375, 381, 392, 395, 397, 398, 399, 400, 401, 402, 403, 404, 413, 460, 489, 491, 494, 497, 499, 502, 505, 507, 510, 514, 516, 520, 524, 526, 529, 532, 534, 537, 552, 553, 555, 564, 575, 587, 588, 589, 591, 602, 615, 641, 642, 644, 653, 664, 676, 677, 679, 688, 701, 715, 716, 717, 718, 719, 752, 753, 756, 757, 762, 763, 769, 771, 773, 780, 783, 795, 797, 799, 801, 821, 825, 829, 836, 855, 859, 863, 883, 891], "from_formula": [70, 77, 133, 151, 152, 305, 357, 392, 399, 402, 716, 717], "full": [78, 491, 499, 507, 512, 516, 523, 526, 534, 541, 542, 715, 719, 786], "full_cov": [715, 767, 793], "full_sigma": [721, 736, 740, 744], "full_summari": [69, 70, 72], "fuller": [154, 246, 250, 261], "fun": [21, 236], "function": [20, 21, 69, 73, 77, 144, 150, 151, 152, 205, 223, 225, 227, 234, 236, 238, 241, 395, 402, 403, 404, 405, 421, 771, 775, 780, 797], "functool": 78, "further": 153, "futur": [77, 78, 397], "fuur": 79, "g": [69, 73, 77, 133, 155, 193, 205, 213, 224, 234, 235, 241, 247, 258, 288, 305, 357, 392, 395, 402, 403, 404, 405, 413, 421, 439, 447, 575, 615, 664, 701, 715, 716, 719, 721, 750, 758, 769, 780, 795, 814, 871], "g_": [73, 205, 395, 403, 719], "g_i": [193, 205, 750, 758], "ga": 715, "gain": [715, 718, 719, 802, 815, 837, 849], "gallant": [77, 173, 179, 205, 405, 421, 715, 731, 744, 758], "gamma": [73, 92, 149, 154, 155, 161, 173, 359, 395, 403, 758], "gamma_": [395, 403], "gamma_0": [205, 717], "gamma_1": [358, 360, 717], "gamma_2": 717, "gamma_3": 717, "gamma_4": 717, "gamma_i": 512, "gamma_j": 205, "gamma_p": 360, "gamma_q": 358, "gamma_t": 512, "gdp": [715, 716], "gelbach": 714, "gener": [71, 72, 73, 91, 150, 151, 154, 216, 223, 227, 238, 250, 261, 397, 399, 402, 403, 404, 461, 519, 561, 599, 650, 685, 696, 711, 713, 714, 717, 718, 775], "generate_panel_data": [491, 499, 507, 516, 526, 534], "geograph": 151, "georgio": 714, "geq": [182, 395], "geq1": 395, "get": [69, 140, 463, 476, 768, 779, 794, 890], "get_loc": 397, "gf": 715, "gf_intercept": 715, "gf_lnemp": 715, "gf_lnhwy": 715, "gf_lnpc": 715, "gf_lnutil": 715, "gf_lnwater": 715, "gf_unemp": 715, "gh157": 77, "gh170": 77, "gh172": 77, "gh173": 77, "gh176": 77, "gh178": 77, "gh182": 77, "gh185": 77, "gh191": 77, "gh206": 77, "gh211": 77, "gh215": 77, "gh217": 77, "gh222": 77, "gh228": 77, "gh229": 77, "gh230": 77, "gh232": 77, "gh234": 77, "gh235": 77, "gh238": 77, "gh239": 77, "gh240": 77, "gh241": 77, "gh242": 77, "gh434": 77, "gh435": 77, "gh438": 77, "gh439": 77, "gh440": 77, "gh534": 78, "gh545": 78, "gh546": 78, "gh548": 78, "gib": [77, 514], "github": 90, "given": [21, 149, 403, 488, 496, 504, 523, 531, 775, 888], "gl": [16, 77, 151, 257, 398, 713, 716, 717, 718, 719, 721, 736, 740, 744, 764, 767, 769, 775, 778, 790, 793, 795, 802, 813, 815, 837, 848, 849], "gleft": 84, "gmm": [20, 21, 34, 71, 72, 76, 77, 91, 153, 223, 224, 225, 227, 234, 236, 238, 241, 272, 273, 287, 307, 713, 714, 718, 775, 780, 801, 832, 833, 834], "gmmfactormodelresult": 21, "gmmsystemresult": 778, "good": [149, 150, 152, 395, 719], "goodyear": 404, "grand": [399, 403], "grant": [151, 397], "grant_1": [151, 397], "graph": 77, "green": [395, 714, 715, 719, 802, 815, 837, 849], "gright": 84, "group": [150, 151, 155, 395, 398, 403, 413, 457, 459, 461, 463, 465, 468, 597, 715, 721, 871], "group_debia": [413, 414, 721], "group_debias_coeffici": 721, "groupbi": [465, 715], "grow": 149, "grunfeld": [399, 404], "gsp": 715, "gt": [69, 151, 397], "h": [151, 395, 714, 802, 815, 837, 849], "h0": [150, 151], "h_": 395, "h_0": [133, 305, 357, 392, 575, 615, 664, 701], "h_i": 717, "ha": [69, 71, 73, 77, 78, 93, 94, 118, 133, 140, 149, 150, 151, 154, 196, 241, 286, 305, 324, 334, 339, 357, 362, 375, 392, 395, 397, 398, 399, 402, 403, 455, 489, 541, 542, 552, 555, 564, 575, 587, 588, 591, 602, 615, 641, 644, 653, 664, 676, 679, 688, 701, 715, 717, 754, 786, 802, 815, 837, 849, 891], "hac": [7, 25, 69, 71, 72, 73, 77, 173, 177, 403, 429, 497, 505, 514, 524, 532, 744], "hac_r": 715, "had": 77, "hamann": 714, "hand": [70, 395, 397, 403, 488, 496, 504, 512, 523, 531, 715], "handl": [77, 403, 455, 514], "has_const": 151, "hash": 97, "hashabl": [462, 475, 479, 481, 888], "hat": [16, 24, 35, 55, 71, 73, 155, 161, 167, 173, 212, 223, 234, 241, 246, 288, 323, 325, 334, 352, 358, 359, 360, 362, 395, 403, 405, 413, 421, 439, 447, 496, 544, 545, 546, 553, 579, 580, 581, 589, 633, 634, 635, 642, 668, 669, 670, 677, 715, 719, 721, 736, 744, 758, 764, 775, 790, 802, 815, 825, 829, 837, 849, 859, 863], "hausman": [150, 362, 395], "haussman": 395, "have": [69, 70, 77, 79, 92, 93, 94, 137, 149, 150, 152, 269, 294, 345, 381, 395, 397, 398, 403, 455, 561, 564, 575, 599, 602, 615, 650, 653, 664, 685, 688, 701, 711, 715, 717, 719, 721, 767, 769, 780, 793, 795, 821, 855], "hdfe": [97, 149], "head": [151, 397, 398, 399], "health": [69, 70, 150, 152], "healthcar": 69, "heatmap": [69, 715], "held": 97, "henningsen": [714, 719], "here": [69, 150, 151, 152, 397, 398, 399, 404, 715, 716, 717], "hetero": 150, "heteroskedast": [0, 7, 25, 69, 71, 72, 73, 77, 97, 150, 151, 152, 154, 161, 165, 193, 199, 205, 214, 223, 225, 234, 248, 259, 395, 421, 489, 497, 505, 514, 524, 532, 716, 717, 721, 736, 750, 758, 767, 778, 780, 793], "heteroskedasticcovari": [69, 70, 97, 154, 199, 214, 248, 259, 767, 793], "heteroskedasticweightmatrix": 154, "hi_empunion": [150, 152], "hiapan": [150, 152], "high": [69, 70, 72, 77, 91, 92, 149, 396, 719], "higher": 21, "hisp": [150, 152, 398], "hispan": [150, 152, 398], "hlth": [69, 70], "hml": [19, 23, 27, 69, 70, 72], "hold": [150, 151, 398, 704], "holder": 877, "holzer": 151, "home": [151, 397], "homo": 150, "homoskedast": [97, 150, 151, 154, 167, 196, 199, 214, 223, 225, 234, 248, 259, 395, 398, 447, 488, 489, 491, 496, 497, 499, 504, 505, 507, 512, 514, 516, 523, 524, 526, 531, 532, 534, 552, 587, 588, 641, 676, 715, 716, 717, 725, 728, 731, 740, 754, 767, 778, 780, 793, 815, 849], "homoskedasticcovari": [97, 154, 199, 214, 248, 259, 767, 793], "homoskedasticweightmatrix": 154, "honour": 151, "horizont": 84, "hour": [151, 398, 715, 717], "hourli": [151, 715, 716], "hours_mod": 717, "hours_r": 717, "how": [149, 150, 151, 395, 397, 398, 401, 715, 717, 719], "howev": [151, 402], "hrben": [715, 716, 718], "hrearn": [715, 716, 718], "hrsemp": [151, 397], "html": [46, 66, 69, 70, 87, 130, 271, 302, 320, 354, 389, 571, 610, 629, 660, 695, 828, 862], "http": [69, 70, 714], "husag": 151, "husband": 151, "huseduc": 151, "hushr": 151, "huswag": 151, "hwy": 715, "hypothes": [35, 55, 115, 133, 273, 282, 288, 305, 323, 324, 325, 334, 335, 352, 357, 358, 359, 360, 362, 372, 392, 552, 553, 575, 587, 588, 589, 615, 641, 642, 664, 676, 677, 701, 802, 814, 815, 837, 849], "hypothesi": [71, 133, 153, 305, 357, 392, 401, 575, 615, 664, 701, 719, 802, 815, 837, 849, 874, 877, 879], "i": [0, 6, 7, 15, 16, 20, 24, 39, 59, 69, 70, 71, 72, 73, 77, 78, 79, 84, 85, 88, 91, 92, 97, 106, 115, 118, 123, 133, 140, 144, 148, 149, 150, 151, 152, 154, 155, 158, 161, 164, 167, 170, 173, 176, 179, 180, 181, 182, 183, 193, 196, 199, 202, 205, 212, 214, 216, 220, 223, 225, 227, 231, 234, 236, 238, 241, 243, 246, 248, 250, 254, 259, 261, 265, 269, 273, 274, 282, 286, 288, 294, 295, 305, 310, 323, 324, 325, 326, 334, 335, 339, 345, 346, 352, 357, 358, 359, 360, 362, 364, 372, 375, 381, 382, 392, 394, 395, 397, 398, 399, 400, 402, 403, 404, 405, 413, 421, 429, 439, 447, 455, 459, 480, 488, 489, 491, 494, 495, 496, 497, 499, 502, 503, 504, 505, 507, 510, 511, 512, 514, 516, 520, 521, 523, 524, 526, 529, 530, 531, 532, 534, 537, 538, 541, 542, 543, 544, 545, 546, 552, 553, 555, 562, 564, 575, 578, 579, 580, 581, 587, 588, 589, 591, 600, 602, 615, 617, 632, 633, 634, 635, 641, 642, 644, 651, 653, 664, 667, 668, 669, 670, 676, 677, 679, 686, 688, 701, 703, 708, 711, 713, 715, 716, 717, 718, 719, 721, 725, 728, 731, 736, 740, 744, 750, 754, 758, 764, 769, 773, 775, 780, 783, 786, 790, 795, 799, 802, 803, 814, 815, 821, 822, 825, 829, 837, 838, 849, 855, 856, 859, 863, 871, 872, 888, 889, 891], "i0": 405, "i04": 714, "i_": [73, 715, 719], "i_n": [728, 754, 764, 790], "ia": 715, "iaction": 92, "ibm": 404, "id": [77, 150, 151, 398, 404, 405, 413, 421, 439, 447, 463, 476, 489, 505, 704, 715, 718, 721], "idea": 715, "ident": [70, 73, 97, 102, 149, 150, 151, 222, 233, 245, 256, 267, 359, 395, 398, 399, 402, 403, 489, 505, 715, 716, 717, 719, 767, 793], "identif": [69, 77, 152], "identifi": [71, 151, 395, 398, 399, 402, 465, 491, 499, 507, 512, 516, 523, 526, 534, 715, 719], "idiosyncrat": [294, 345, 381, 398, 402, 403, 561, 599, 650, 685, 821, 855], "ignor": [77, 105, 154, 398, 400, 402, 545, 567, 580, 606, 634, 656, 669, 691], "ii": [403, 719, 829, 863], "ij": [405, 715, 719, 775, 802, 825, 837, 859], "il": 715, "illustr": [399, 715], "iloc": [69, 70, 397, 715, 717], "imag": 715, "imbalanc": 403, "immedi": 719, "impact": 69, "implement": [16, 20, 24, 35, 55, 69, 71, 72, 73, 115, 151, 273, 282, 335, 359, 360, 372, 395, 398, 399, 401, 402, 404, 413, 459, 468, 496, 553, 589, 642, 677, 713, 715, 719, 764, 769, 775, 790, 795], "impli": 69, "implicit": [395, 492, 500, 508, 517, 527, 535], "import": [19, 23, 27, 72, 77, 78, 90, 92, 133, 140, 144, 149, 151, 152, 154, 216, 227, 238, 250, 261, 305, 357, 392, 397, 398, 399, 401, 402, 403, 404, 489, 491, 497, 499, 505, 507, 514, 516, 524, 526, 532, 534, 575, 615, 664, 701, 715, 716, 717, 718, 769, 780, 795, 797], "impos": [399, 403, 715, 718, 785], "improv": [77, 78, 79, 90, 152, 713, 715, 719, 764, 790], "in_sampl": 717, "inadequ": 70, "includ": [16, 33, 54, 69, 70, 73, 79, 117, 135, 150, 151, 152, 155, 161, 167, 173, 179, 216, 217, 219, 227, 228, 230, 238, 239, 242, 250, 251, 253, 261, 262, 264, 269, 285, 288, 294, 310, 338, 345, 374, 381, 394, 395, 397, 399, 400, 402, 403, 404, 491, 496, 499, 507, 512, 513, 519, 522, 526, 534, 541, 542, 545, 548, 549, 551, 552, 553, 561, 567, 577, 580, 583, 584, 586, 587, 588, 589, 592, 599, 605, 606, 617, 631, 634, 637, 638, 640, 641, 642, 650, 656, 669, 672, 673, 675, 676, 677, 685, 691, 703, 711, 715, 719, 731, 744, 758, 764, 769, 780, 795, 821, 825, 855, 859], "inclus": [118, 286, 339, 375, 398, 555, 591, 644, 679], "incom": [150, 151, 152], "inconsist": 404, "incorpor": 398, "incorrect": 77, "incorrectli": 77, "increas": [69, 75, 78, 79, 80, 150, 151], "ind1": 715, "ind2": 715, "ind3": 715, "ind4": 715, "ind5": 715, "ind6": 715, "ind7": 715, "ind8": 715, "ind9": 715, "independ": [70, 402, 531], "index": [77, 91, 151, 191, 397, 398, 399, 402, 403, 455, 462, 475, 482, 483, 484, 491, 499, 507, 516, 526, 534, 715, 719, 764, 775, 790], "indexwarn": 77, "indic": [0, 6, 7, 15, 16, 17, 19, 20, 21, 23, 25, 69, 77, 85, 92, 97, 111, 117, 137, 150, 151, 152, 154, 155, 158, 161, 164, 167, 170, 173, 176, 183, 193, 196, 199, 202, 205, 209, 214, 216, 217, 225, 227, 228, 236, 238, 239, 248, 250, 251, 259, 261, 262, 273, 279, 285, 288, 294, 323, 325, 331, 338, 345, 369, 374, 381, 395, 402, 403, 405, 413, 421, 429, 439, 447, 455, 459, 460, 461, 489, 491, 492, 497, 499, 500, 505, 507, 508, 512, 513, 514, 516, 517, 519, 522, 523, 524, 526, 527, 532, 534, 535, 561, 599, 650, 685, 711, 721, 736, 740, 744, 750, 754, 758, 764, 767, 770, 781, 785, 793, 796, 807, 814, 821, 842, 855], "individu": [88, 150, 151, 402, 403, 541, 542, 715, 810, 811, 845, 846], "indu": 69, "industri": [69, 70, 151, 403, 715], "ineffici": [154, 395, 402], "inevit": 397, "infer": [69, 72, 73, 77, 91, 97, 154, 214, 248, 259, 496, 553, 589, 642, 677, 714, 715, 718, 719], "inform": [77, 78, 84, 85, 91, 150, 151, 154, 194, 197, 207, 210, 246, 397, 463, 476, 715, 723, 727, 730, 734, 738, 742, 747, 751, 755, 760, 767, 793], "inherit": [77, 150, 395, 553, 589, 642, 677], "initi": [77, 152, 225, 397, 398, 711, 715, 716, 719, 778], "initial_weight": [154, 225, 778], "inlin": [69, 77], "inner": [92, 152, 397, 717], "input": [21, 70, 72, 77, 145, 150, 152, 154, 183, 236, 294, 345, 381, 397, 398, 402, 455, 489, 505, 514, 524, 532, 561, 599, 650, 685, 715, 821, 855], "insignific": [69, 715], "inspect": 715, "instal": [77, 97], "instanc": [19, 23, 27, 84, 85, 144, 183, 216, 227, 238, 250, 261, 711, 769, 771, 780, 795, 797], "instead": [77, 102, 151, 154, 222, 233, 245, 256, 267, 398, 718], "instr": [151, 246, 268, 273, 288, 323, 324, 325, 352, 358, 395, 814], "instruct": 398, "instrument": [76, 91, 151, 152, 154, 155, 161, 167, 173, 193, 195, 196, 198, 199, 205, 208, 211, 212, 213, 216, 223, 224, 225, 227, 234, 235, 238, 241, 246, 247, 250, 257, 258, 261, 269, 283, 288, 324, 334, 336, 352, 358, 359, 360, 362, 395, 714, 717, 718, 719, 725, 728, 731, 750, 753, 754, 757, 758, 763, 764, 771, 775, 778, 790], "insur": [150, 152, 715], "int": [0, 2, 3, 4, 5, 7, 10, 11, 12, 14, 17, 21, 34, 37, 57, 100, 102, 112, 113, 114, 121, 135, 136, 140, 143, 147, 155, 157, 159, 160, 161, 163, 165, 166, 167, 169, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 187, 188, 189, 192, 194, 195, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 218, 219, 220, 221, 222, 224, 225, 229, 230, 231, 232, 233, 235, 236, 240, 241, 242, 243, 244, 245, 246, 247, 250, 252, 253, 254, 255, 256, 258, 261, 263, 264, 265, 266, 267, 280, 281, 287, 292, 307, 332, 333, 343, 370, 371, 379, 405, 408, 409, 410, 413, 416, 417, 418, 421, 424, 425, 426, 429, 434, 435, 436, 439, 442, 443, 444, 447, 450, 451, 452, 459, 460, 463, 469, 470, 471, 472, 474, 476, 477, 478, 481, 485, 487, 489, 493, 494, 495, 501, 502, 503, 505, 509, 510, 511, 514, 518, 520, 521, 524, 528, 529, 530, 532, 536, 537, 538, 548, 549, 559, 575, 583, 584, 596, 615, 637, 638, 648, 664, 672, 673, 683, 701, 711, 722, 724, 726, 729, 733, 737, 739, 741, 743, 746, 749, 752, 753, 756, 757, 762, 763, 767, 773, 778, 783, 785, 786, 789, 793, 799, 808, 809, 813, 819, 832, 843, 844, 848, 853, 867, 869, 870, 871, 877], "int32": 867, "int32arrai": 867, "int64": [397, 398, 404, 405, 413, 421, 439, 447, 463, 476, 489, 495, 503, 505, 511, 514, 521, 524, 530, 532, 538, 867, 871], "int64arrai": 867, "intarrai": [721, 867], "integ": [7, 17, 21, 25, 398, 405, 421, 429, 489, 505, 514, 524, 532, 721], "intent": 713, "intention": 713, "interact": [92, 97, 135], "intercept": [149, 151, 152, 399, 400, 403, 404, 715], "interest": [16, 70, 92, 149, 151, 395, 402, 715], "interfac": [70, 77, 133, 152, 305, 357, 392, 399, 561, 599, 650, 685, 715, 717, 769, 771, 780, 795, 797], "interindustri": 151, "intern": [77, 257, 480, 715], "interpret": [151, 398, 719], "intersect": 413, "interv": [85, 106, 274, 326, 364, 543, 572, 578, 611, 632, 661, 667, 697, 803, 838], "interview": 151, "introduct": [71, 151, 153, 398, 401], "introductori": [153, 714], "inv_jacobian": [0, 7], "invalid": [77, 872], "invalidteststatist": [77, 288, 323, 324, 325, 352, 358, 802, 815, 837, 849, 877], "invari": 145, "invers": [0, 3, 7, 11, 488, 491, 496, 499, 504, 507, 512, 516, 523, 526, 531, 534, 716], "invert": 92, "invest": [69, 73, 399, 404], "involv": 179, "iota": 719, "iota_": 719, "ipython": 715, "iq": [151, 154], "iq_band": 154, "irrespect": [405, 413, 421, 439, 447], "isin": 151, "issu": [77, 115, 282, 283, 335, 336, 372, 398], "istop": 149, "item": [151, 397, 480, 481, 883], "itemsview": 886, "iter": [21, 92, 149, 150, 154, 225, 235, 465, 717, 767, 778, 793, 891], "iter_limit": [150, 154, 225, 717, 767, 778, 793], "itn": 149, "its": [73, 151, 398, 719], "iv": [7, 76, 77, 91, 149, 150, 152, 153, 154, 395, 713, 717, 718, 719, 725, 728, 731, 744, 764, 771, 775], "iv2sl": [77, 91, 92, 133, 151, 152, 154, 223, 234, 246, 257, 305, 357, 392, 713, 717], "iv3sl": [91, 713, 717, 718, 817, 851], "iv_r": 152, "iv_res2": 152, "ivdata": [16, 20, 24, 95, 96, 99, 101, 212, 216, 223, 227, 234, 238, 243, 246, 250, 254, 257, 261, 265, 268], "ivdatalik": [220, 231], "ivgmm": [91, 150, 154, 212, 234, 236, 246, 713], "ivgmmcovari": [225, 236], "ivgmmcu": [77, 91, 150, 154, 212, 223, 246, 713], "ivgmmresult": [225, 236, 310, 394], "ivliml": [91, 92, 150, 154, 212, 223, 234, 257, 261, 713], "ivmod": 150, "ivmodelcomparison": 394, "ivolsmod": 150, "ivresult": [214, 248, 259, 310, 394], "ivsystemgmm": [91, 713, 717], "iw": 403, "j": [20, 35, 55, 69, 70, 71, 72, 150, 151, 173, 205, 273, 288, 360, 395, 405, 421, 714, 715, 719, 750, 758, 775, 802, 814, 837], "j_": 395, "j_c": 273, "j_e": 273, "j_stat": 150, "jacobian": [0, 3, 6, 7, 11, 15, 73], "jagannathan": 714, "jagannathanet": [73, 714], "jeffrei": [151, 398, 714], "ji": [719, 750, 758], "job": 397, "jobtrain": [151, 397], "john": [151, 714], "join": [152, 715], "joint": [35, 55, 552, 553, 587, 588, 589, 641, 642, 676, 677, 715, 718, 719], "jointli": [69, 273, 334, 362, 587, 717, 718, 719], "jonah": 714, "journal": [151, 398, 714], "jss": 714, "judg": [715, 716, 717, 825, 829, 859, 863], "jun": 718, "just": [73, 151, 152, 398, 403, 717], "k": [71, 72, 73, 76, 150, 151, 154, 155, 161, 167, 173, 205, 212, 213, 246, 247, 250, 258, 261, 289, 340, 376, 403, 405, 421, 439, 447, 552, 553, 587, 588, 589, 641, 642, 676, 677, 713, 714, 715, 719, 764, 775, 790, 802, 815, 837, 849, 869, 870, 885, 889, 890, 891], "k1": 395, "k2": [395, 719], "k_": 395, "k_1": 154, "k_2": 154, "kappa": [77, 150, 154, 155, 161, 167, 173, 212, 213, 246, 247, 250, 257, 258, 261, 323, 325, 395], "kei": [77, 79, 133, 150, 154, 187, 270, 305, 310, 357, 392, 394, 397, 398, 455, 575, 615, 617, 664, 701, 703, 713, 715, 716, 717, 718, 764, 769, 773, 775, 780, 783, 790, 795, 799, 821, 855, 882, 888, 889, 891], "ken": [69, 70, 72], "kenneth": 714, "kernel": [7, 17, 21, 25, 69, 70, 71, 72, 73, 77, 97, 150, 154, 173, 179, 180, 181, 182, 199, 205, 214, 223, 225, 234, 248, 259, 403, 405, 406, 421, 422, 429, 496, 497, 505, 514, 524, 532, 731, 744, 758, 767, 793, 870], "kernel_optimal_bandwidth": 77, "kernel_weight_bartlett": [7, 173, 179, 205, 744], "kernel_weight_parzen": [7, 173, 179, 205, 744], "kernel_weight_quadratic_spectr": [7, 173, 179, 205, 744], "kernelcovari": [69, 70, 72, 97, 154, 199, 214, 248, 259, 767, 793], "kernelweightmatrix": 154, "keyerror": [888, 889], "keysview": [397, 887], "keyword": [69, 70, 77, 150, 199, 223, 227, 234, 235, 238, 398, 715, 716, 775, 780], "ki": [719, 750, 758], "kid": 151, "kidsge6": 151, "kidslt6": [151, 717], "kk": 719, "knott": 151, "knowledg": 151, "known": [92, 151, 241, 719], "kraai": [421, 505, 514, 524, 532], "kwarg": [882, 891], "kww": 151, "ky": 715, "l": [149, 150, 151, 714], "la": 715, "label": [77, 184, 191, 715, 717, 764, 769, 773, 775, 780, 783, 790, 795, 799, 810, 821, 845, 855], "labeled_formula": 716, "labeled_r": 716, "labels_mod": 716, "labor": [151, 398], "labour": 151, "lack": 891, "lag": [151, 180, 181, 182, 205, 714], "lambda": [16, 20, 41, 61, 71, 73], "lambda_": 73, "lambda_0": [16, 71], "lambda_i": 24, "languag": 151, "lannearn": 715, "lannhr": 715, "lapack_driv": 77, "larg": [69, 70, 72, 77, 97, 149, 151, 398, 402, 403, 404, 713, 715], "larger": [179, 225, 514, 541], "largest": 69, "later": [79, 151], "latest": 91, "latex": [46, 66, 88, 130, 271, 302, 320, 354, 389, 571, 610, 629, 660, 695, 828, 862], "lavgsal": [151, 397], "lbwght": 151, "ldot": [73, 358, 360, 395, 715, 719, 750, 758, 764, 775, 790], "ldrugexp": [150, 152], "lead": [150, 152, 512, 719, 764, 790], "least": [69, 77, 91, 149, 150, 151, 154, 212, 403, 514, 718, 764, 771], "leav": [334, 362, 395, 715], "left": [20, 70, 73, 84, 273, 395, 403, 488, 496, 504, 512, 523, 531, 715, 717, 719, 764, 775, 790, 815, 849], "legaci": 480, "lemploi": 151, "leq": 181, "leq0": 395, "less": [77, 150, 154, 398], "let": 395, "level": [85, 106, 274, 326, 364, 397, 455, 480, 491, 499, 507, 516, 526, 534, 543, 578, 632, 667, 715, 803, 838], "lhrsemp": 151, "lib": 151, "libcrd14": 151, "librari": [69, 70, 72, 715], "licens": [77, 78], "like": [150, 152, 395, 398, 401, 402, 480, 711, 715, 716, 719, 764, 769, 773, 775, 780, 783, 790, 795, 799, 821, 855, 882, 886, 887, 892], "likelihood": [150, 154, 397, 398, 399, 402, 404, 556, 593, 645, 680, 719, 815, 849], "likelihood_ratio": 77, "limit": [91, 150, 154, 246, 713, 767, 793], "liml": [76, 77, 91, 246, 250, 261, 323, 325, 713], "linalg": [77, 92, 97, 149], "linc": [150, 152], "line": [83, 715], "linear": [16, 20, 24, 49, 69, 72, 76, 77, 90, 91, 92, 133, 154, 305, 357, 392, 398, 575, 615, 664, 701, 713, 714, 715, 775, 785], "linear_model": [257, 713], "linearconstraint": [721, 725, 728, 731, 736, 740, 744, 766, 777, 792], "linearfactormodel": [23, 69, 70, 71, 72, 91, 713], "linearfactormodelgmm": [69, 71, 72, 91, 713], "linearfactormodelresult": [17, 25], "linearli": 92, "linearmodel": [69, 70, 72, 77, 78, 79, 149, 150, 151, 152, 154, 397, 398, 399, 402, 404, 713, 715, 716, 717, 718, 867], "liner": 404, "list": [77, 97, 133, 135, 145, 150, 151, 152, 184, 191, 214, 216, 227, 238, 248, 250, 259, 261, 273, 305, 334, 357, 362, 392, 398, 462, 475, 479, 575, 592, 615, 617, 664, 701, 703, 711, 715, 721, 725, 728, 731, 736, 740, 744, 752, 756, 757, 762, 772, 782, 798, 810, 845, 886, 887, 892], "littl": [69, 150], "live": [151, 715], "lm": [150, 802, 837], "ln": [323, 395, 715, 717, 719], "lnemp": 715, "lngsp": 715, "lnhwy": 715, "lnpc": 715, "lnutil": 715, "lnwage": 151, "lnwater": 715, "load": [16, 19, 20, 23, 24, 27, 30, 33, 51, 54, 69, 70, 71, 72, 73, 133, 150, 151, 152, 154, 216, 227, 238, 250, 261, 305, 357, 392, 397, 402, 575, 615, 664, 701, 715, 716, 717, 718, 785, 788, 797], "load_panda": [399, 404], "loc": [72, 143, 151, 185, 460, 715], "locat": [77, 91, 150, 152, 218, 219, 229, 230, 240, 242, 252, 253, 263, 264, 395, 467, 493, 501, 509, 518, 528, 536, 715], "log": [91, 133, 150, 151, 152, 154, 216, 227, 238, 250, 261, 305, 357, 392, 397, 398, 399, 402, 404, 556, 593, 645, 680, 715, 719, 815, 849], "logic": 480, "long": [241, 403, 715, 719, 802, 815, 837, 849], "longer": [73, 398, 715], "look": [398, 715], "loser": [69, 70], "loss": 73, "lost": 398, "lovel": 92, "low": [69, 70, 72, 77, 150, 152, 403, 459, 514], "low_memori": [459, 514], "lower": [69, 70, 72, 106, 149, 150, 151, 152, 154, 274, 326, 364, 395, 397, 398, 399, 402, 404, 543, 578, 632, 667, 715, 716, 717, 718, 803, 838], "lowincom": [150, 152], "lr": [815, 849], "lrework": 151, "lsale": 151, "lscrap": [151, 397], "lscrap_1": 151, "lsdv": [403, 404, 514], "lsmr": [77, 92, 97, 149], "lsmr_option": 97, "lstsq": 77, "lt": [69, 151, 397], "lwage": [151, 398, 402, 575, 615, 664, 701, 717], "lwage_mod": 717, "lwage_r": 717, "m": [69, 70, 71, 151, 180, 181, 182, 273, 395, 398, 714, 715, 719, 728, 797, 870], "m_": [246, 352, 395], "ma": 715, "ma_unemp": 715, "macbeth": [76, 77, 91, 429, 496, 539, 713], "macroeconom": [69, 71], "made": [496, 553, 589, 642, 677, 717], "magnitud": 395, "mai": [72, 77, 92, 149, 150, 395, 403, 491, 499, 507, 512, 516, 523, 526, 534, 719, 764, 775], "main": [150, 400, 413, 715, 717, 718], "major_axi": 481, "make": [69, 72, 90, 151, 154, 220, 231, 243, 254, 265, 398, 403, 404, 494, 502, 510, 520, 529, 537, 717, 773, 783, 799], "male": [151, 715, 716], "man": 402, "manag": 77, "mani": [70, 77, 90, 150, 151, 399, 402, 512, 711, 719], "manner": 152, "manual": [397, 714, 715], "manuf": [69, 70], "manufactur": [69, 70], "map": [494, 502, 510, 520, 529, 537, 715, 764, 769, 773, 775, 783, 790, 795, 799, 882], "map_region": 715, "mar": 154, "margin": [151, 715], "mark": [152, 714], "market": [69, 70, 71, 72, 151, 398, 399], "marri": [150, 152, 398, 402, 575, 615, 664, 701, 715, 716], "match": [84, 150, 400, 403, 404, 495, 503, 511, 521, 530, 538, 561, 599, 650, 685, 715, 773, 783, 799, 821, 855], "mathcal": [155, 395, 403, 413, 721], "mathemat": [71, 149, 153, 179, 401, 402, 566, 567, 568, 604, 606, 607, 655, 656, 657, 690, 691, 692], "mathrm": [395, 719], "matplotlib": [69, 715], "matric": [154, 395, 752, 756, 762], "matrix": [21, 69, 70, 77, 133, 135, 140, 148, 149, 151, 154, 155, 161, 167, 173, 193, 196, 199, 205, 206, 209, 213, 220, 223, 224, 225, 231, 234, 235, 241, 243, 247, 254, 258, 265, 273, 305, 306, 307, 308, 334, 352, 357, 362, 392, 395, 491, 499, 507, 512, 516, 523, 526, 534, 575, 615, 664, 701, 714, 715, 719, 721, 725, 728, 731, 736, 740, 744, 750, 752, 753, 754, 756, 757, 758, 762, 763, 764, 765, 775, 776, 778, 785, 788, 789, 790, 791, 815, 832, 849], "matrix_rank": 77, "matter": 398, "max": [149, 150, 151, 397, 398, 399, 402, 403, 404], "max_it": 21, "maximum": [21, 150, 154, 180, 181, 182, 225, 767, 778, 793], "maxit": 149, "maxlag": [180, 181, 182], "mba": [69, 70], "mcelroi": [77, 715, 716, 717, 829, 863], "md": 715, "me": 715, "mean": [150, 151, 152, 193, 196, 205, 209, 395, 399, 403, 514, 715, 719, 750, 754, 758, 869, 870], "meaning": [149, 404, 715], "meaningfulli": 717, "meaningless": 716, "measur": [33, 54, 69, 77, 151, 152, 154, 225, 269, 400, 403, 404, 544, 545, 546, 566, 567, 568, 579, 580, 581, 604, 606, 607, 633, 634, 635, 655, 656, 657, 668, 669, 670, 690, 691, 692, 715, 718, 829, 863], "medic": [150, 152], "medium": [69, 70], "meduc": 151, "member": [395, 402, 715], "membership": [154, 209, 463, 476, 871], "memori": [77, 459, 514, 718], "men": [398, 402], "mep": 150, "merg": [84, 88], "messag": 77, "method": [0, 7, 16, 20, 24, 28, 46, 49, 66, 69, 70, 77, 82, 91, 92, 97, 103, 130, 135, 140, 149, 150, 152, 153, 154, 155, 161, 167, 173, 183, 193, 196, 199, 205, 209, 212, 213, 223, 224, 234, 246, 247, 257, 258, 268, 271, 272, 302, 308, 310, 312, 320, 322, 354, 363, 389, 397, 398, 401, 404, 405, 413, 421, 429, 439, 447, 455, 480, 488, 496, 504, 512, 523, 531, 539, 571, 577, 610, 617, 619, 629, 631, 660, 666, 695, 704, 713, 714, 715, 716, 717, 718, 721, 725, 728, 731, 736, 740, 744, 750, 754, 758, 764, 767, 775, 785, 790, 793, 801, 828, 836, 862, 872, 877, 882, 891], "metropolitan": [150, 152], "mi": [480, 715], "mi_data": 397, "michigan": 151, "microeconometr": [150, 714], "middl": [150, 152], "midincom": [150, 152], "might": [69, 70, 73, 150, 151, 398, 403, 715], "miller": 714, "million": 92, "min": [150, 151, 395, 397, 398, 399, 402, 404], "min_": [234, 395, 719], "minim": [21, 69, 235, 236, 395, 480, 719], "minimum": [75, 78, 79, 80, 395], "minor": 77, "minor_axi": 481, "minu": [395, 549, 584, 638, 673], "mirror": 149, "mispric": [29, 33, 50, 54], "miss": [77, 91, 151, 218, 229, 240, 252, 263, 294, 345, 381, 397, 467, 493, 495, 501, 503, 509, 511, 518, 521, 528, 530, 536, 538, 561, 599, 650, 685, 711, 713, 717, 821, 855], "missingvaluewarn": 397, "misspecifi": 69, "mit": 714, "mkt": 151, "mktrf": [19, 23, 27, 69, 70, 72, 715, 797], "ml": [91, 246], "mn": 715, "mo": 715, "mod": [19, 23, 27, 69, 70, 72, 92, 149, 151, 152, 154, 216, 227, 238, 250, 261, 397, 398, 399, 402, 489, 491, 497, 499, 505, 507, 514, 516, 524, 526, 532, 534, 575, 615, 664, 701, 715, 716, 717, 718, 769, 780, 795, 797], "mod_data": 715, "mod_pre_sigma": 715, "model": [35, 36, 46, 49, 55, 56, 66, 69, 70, 72, 76, 77, 78, 84, 90, 91, 92, 97, 100, 102, 103, 113, 115, 117, 118, 119, 130, 133, 149, 150, 151, 153, 155, 161, 167, 173, 183, 195, 198, 199, 208, 211, 269, 270, 271, 272, 273, 280, 282, 285, 286, 288, 290, 294, 302, 305, 310, 314, 315, 316, 319, 320, 321, 322, 323, 325, 332, 334, 335, 338, 339, 341, 345, 354, 357, 358, 360, 362, 363, 370, 372, 374, 375, 377, 381, 389, 392, 394, 395, 397, 400, 402, 404, 405, 410, 413, 418, 421, 426, 429, 436, 439, 444, 447, 452, 539, 548, 551, 552, 553, 555, 556, 558, 559, 561, 564, 565, 566, 567, 568, 571, 576, 577, 583, 586, 587, 588, 589, 591, 592, 593, 595, 596, 599, 602, 603, 604, 605, 606, 607, 610, 616, 617, 621, 622, 623, 628, 629, 630, 631, 637, 640, 641, 642, 644, 645, 647, 648, 650, 653, 654, 655, 656, 657, 660, 665, 666, 672, 675, 676, 677, 679, 680, 682, 683, 685, 688, 689, 690, 691, 692, 695, 702, 703, 704, 711, 714, 715, 719, 721, 725, 728, 731, 736, 740, 744, 753, 754, 757, 763, 801, 802, 808, 814, 815, 821, 828, 836, 837, 843, 849, 855, 862, 872], "moder": 404, "modern": 714, "modifi": [19, 23, 27, 70, 77, 216, 227, 238, 246, 250, 261, 395, 716, 718], "modul": [71, 91, 153, 401, 403, 715, 718], "mom": [69, 70, 151], "momdad14": 151, "moment": [0, 5, 7, 14, 20, 21, 69, 73, 91, 150, 154, 193, 195, 196, 198, 199, 205, 208, 209, 211, 223, 225, 227, 234, 238, 241, 273, 288, 713, 714, 717, 718, 725, 728, 731, 750, 753, 754, 757, 758, 759, 763, 775, 780, 814], "momentum": [69, 70], "mon": [154, 404], "monei": [69, 70], "month": [69, 70], "monthli": [69, 151], "more": [69, 71, 77, 90, 150, 151, 153, 273, 324, 352, 395, 398, 402, 514, 715, 716, 717, 718, 719, 773, 783, 799, 821, 825, 855, 859], "morz": 717, "most": [234, 395, 397, 398, 402, 403, 491, 499, 505, 507, 512, 516, 526, 534, 715, 719], "mostli": 716, "motheduc": 151, "mother": 151, "motor": [399, 404], "mroz": [151, 717], "msa": [150, 152], "mss": 395, "mt": 715, "mt_unemp": 715, "mtr": 151, "mu": [20, 73, 719], "much": [69, 151, 398], "mullahi": 151, "multi": [73, 465, 466, 491, 499, 507, 516, 526, 534], "multiindex": [398, 399, 404, 455, 466, 480], "multipl": [70, 151, 154, 310, 394, 397, 402, 617, 703, 715, 716, 718, 719], "multipli": 403, "multivari": [713, 771, 797], "multivariate_l": 715, "multiwai": 714, "multlc": [150, 152], "munnel": 715, "must": [0, 7, 19, 21, 23, 24, 69, 71, 79, 84, 92, 150, 152, 183, 216, 220, 227, 231, 238, 243, 250, 254, 261, 265, 294, 345, 381, 397, 398, 399, 404, 489, 494, 502, 505, 510, 520, 529, 537, 561, 599, 650, 685, 711, 715, 716, 721, 764, 769, 771, 773, 775, 780, 783, 785, 790, 795, 799, 821, 855], "mv": 715, "mv_ol": 715, "mv_ols_r": 715, "mw": 715, "mw_unemp": 715, "mypi": 77, "n": [20, 73, 140, 144, 151, 155, 161, 167, 173, 182, 193, 196, 205, 234, 246, 288, 323, 324, 325, 334, 352, 358, 360, 362, 395, 397, 398, 402, 403, 404, 405, 413, 421, 439, 447, 715, 719, 750, 758, 802, 814, 815, 837, 849, 869, 870, 871], "n_": [246, 273, 288, 323, 324, 325, 352, 358, 362, 395, 403, 814], "n_t": 421, "naiv": [151, 505, 514, 524, 532, 719], "name": [7, 17, 21, 25, 69, 77, 84, 85, 97, 115, 150, 151, 173, 179, 183, 199, 205, 214, 223, 225, 227, 234, 236, 238, 248, 259, 270, 282, 310, 335, 372, 394, 397, 398, 405, 421, 429, 455, 462, 475, 479, 489, 497, 505, 514, 516, 524, 532, 617, 703, 711, 715, 716, 731, 744, 758, 767, 769, 772, 775, 778, 780, 782, 793, 795, 798, 872, 877], "namedtupl": [704, 711], "nan": [77, 397, 551, 586, 640, 675, 875], "natur": [118, 150, 151, 286, 339, 375, 555, 591, 644, 679, 717], "nbsp": 715, "nc": 715, "ncat": [140, 148, 711], "ncluster": [155, 721], "nconstraint": [765, 776, 791], "ncont": [140, 144, 148], "nd": 715, "ndarrai": [0, 2, 3, 4, 5, 7, 10, 11, 12, 14, 16, 19, 20, 21, 24, 92, 97, 100, 102, 133, 135, 140, 143, 155, 157, 159, 160, 161, 163, 165, 166, 167, 169, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 185, 194, 195, 197, 198, 199, 200, 201, 203, 204, 207, 208, 209, 210, 211, 212, 213, 216, 218, 219, 221, 222, 223, 224, 227, 229, 230, 232, 233, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 246, 247, 250, 252, 253, 254, 255, 256, 257, 258, 261, 263, 264, 265, 266, 267, 294, 305, 307, 345, 357, 381, 392, 405, 408, 409, 410, 413, 416, 417, 418, 421, 424, 425, 426, 429, 434, 435, 436, 439, 442, 443, 444, 447, 450, 451, 452, 455, 459, 460, 463, 465, 476, 477, 478, 481, 487, 488, 489, 491, 493, 494, 495, 496, 499, 501, 502, 503, 504, 505, 507, 509, 510, 511, 512, 514, 516, 518, 520, 521, 523, 524, 526, 528, 529, 530, 531, 532, 534, 536, 537, 538, 561, 575, 599, 615, 650, 664, 685, 701, 721, 722, 724, 725, 726, 728, 729, 731, 733, 736, 737, 739, 740, 741, 743, 744, 746, 749, 752, 753, 756, 757, 762, 763, 764, 769, 771, 773, 775, 778, 780, 785, 786, 787, 789, 790, 795, 797, 799, 821, 832, 855, 867, 869, 870, 871], "ndep": [771, 797], "ndepend": [721, 736, 740, 744], "ne": 715, "ne_unemp": 715, "nearc2": 151, "nearc4": 151, "nearli": [151, 399], "necessari": [69, 152, 398, 400, 491, 499, 507, 526, 534], "necessarili": 71, "need": [69, 70, 77, 133, 151, 152, 305, 357, 392, 480, 495, 503, 511, 521, 530, 538, 715, 719], "needless": 719, "neeed": 257, "neg": [7, 21, 150, 151, 173, 405, 421, 429, 711, 719], "nendog": [212, 220, 223, 231, 234, 243, 246, 254, 265, 294, 345, 381, 771], "nentiti": [397, 455, 711], "nep": 77, "neq": [154, 725, 728, 731], "neqn": 757, "nequat": 763, "nest": [150, 154], "neumark": 151, "neutral": [69, 70], "never": [77, 395, 399], "new": [77, 90, 397], "newei": [69, 71, 72, 154, 173, 179, 205, 405, 407, 415, 421, 423, 429, 431, 441, 449, 505, 514, 524, 532, 714, 715, 731, 744, 758], "newwes94": [395, 714], "nexog": [92, 212, 220, 223, 231, 234, 243, 246, 254, 257, 265, 294, 345, 381, 561, 599, 650, 685, 711, 771], "next": [150, 151, 398, 715], "nfactor": [16, 20, 24], "nh": 715, "ninstr": [155, 161, 167, 173, 195, 198, 199, 208, 211, 212, 213, 223, 224, 234, 235, 241, 246, 247, 258, 753, 771], "nj": 715, "nk": 719, "nl": 151, "nlf": 151, "nm": 715, "nob": [16, 20, 24, 77, 92, 140, 149, 151, 155, 161, 167, 173, 179, 183, 195, 198, 199, 205, 208, 211, 212, 213, 220, 223, 224, 231, 234, 235, 241, 243, 246, 247, 254, 257, 258, 265, 294, 345, 381, 413, 429, 432, 455, 494, 502, 510, 520, 529, 537, 540, 541, 542, 549, 561, 584, 599, 638, 650, 673, 685, 715, 721, 725, 728, 731, 736, 740, 744, 753, 757, 758, 763, 771, 797], "node": 77, "nodur": [69, 70], "non": [7, 16, 20, 69, 70, 72, 91, 92, 150, 154, 173, 395, 405, 421, 429, 493, 501, 509, 518, 528, 536, 552, 553, 588, 589, 641, 642, 676, 677, 711, 715], "none": [0, 7, 16, 18, 19, 21, 22, 23, 26, 27, 84, 85, 92, 97, 133, 135, 140, 143, 150, 151, 152, 154, 155, 173, 183, 185, 194, 197, 200, 205, 206, 207, 210, 212, 216, 220, 223, 225, 227, 231, 234, 235, 236, 238, 243, 246, 250, 254, 257, 261, 265, 273, 294, 305, 334, 345, 357, 362, 381, 392, 405, 413, 421, 429, 447, 459, 460, 462, 465, 468, 475, 479, 481, 488, 490, 491, 494, 496, 497, 498, 499, 502, 504, 506, 507, 510, 512, 514, 515, 516, 520, 523, 525, 526, 529, 531, 533, 534, 537, 561, 575, 597, 599, 615, 650, 664, 685, 701, 711, 715, 716, 717, 718, 721, 725, 728, 731, 736, 740, 744, 753, 757, 758, 763, 764, 765, 766, 767, 768, 769, 771, 773, 774, 775, 776, 777, 778, 779, 780, 783, 784, 785, 790, 791, 792, 793, 794, 795, 799, 800, 821, 855, 867, 872, 873, 877, 878, 883, 885, 888, 891], "nor": 404, "norm": 149, "norma": 149, "normal": [39, 59, 85, 106, 123, 154, 225, 274, 295, 326, 346, 364, 382, 395, 495, 503, 511, 521, 530, 538, 543, 562, 578, 600, 632, 651, 667, 686, 772, 782, 798, 803, 822, 838, 856], "normar": 149, "normr": 149, "normx": 149, "north": 715, "northeast": 715, "notabl": [395, 404], "notat": [397, 399, 715], "note": [7, 16, 17, 19, 20, 21, 23, 24, 25, 27, 35, 46, 55, 66, 69, 73, 88, 92, 97, 102, 106, 115, 118, 130, 133, 140, 148, 150, 151, 154, 155, 161, 167, 173, 179, 180, 181, 182, 193, 196, 199, 205, 212, 213, 214, 216, 220, 222, 223, 224, 227, 231, 233, 234, 235, 236, 238, 241, 243, 245, 246, 247, 248, 250, 254, 256, 257, 258, 259, 261, 265, 267, 271, 273, 274, 282, 286, 288, 294, 302, 305, 320, 323, 324, 325, 326, 334, 335, 339, 345, 352, 354, 357, 358, 359, 360, 362, 364, 372, 375, 381, 389, 392, 395, 398, 400, 402, 403, 404, 405, 413, 421, 429, 439, 447, 455, 459, 465, 480, 488, 489, 491, 494, 495, 496, 497, 499, 502, 503, 504, 505, 507, 510, 511, 512, 514, 520, 521, 523, 524, 526, 529, 530, 531, 532, 534, 537, 538, 543, 544, 545, 546, 548, 549, 551, 552, 553, 555, 561, 564, 566, 567, 568, 571, 575, 578, 579, 580, 581, 583, 584, 586, 587, 588, 589, 591, 599, 602, 604, 606, 607, 610, 615, 629, 632, 633, 634, 635, 637, 638, 640, 641, 642, 644, 650, 653, 655, 656, 657, 660, 664, 667, 668, 669, 670, 672, 673, 675, 676, 677, 679, 685, 688, 690, 691, 692, 695, 701, 715, 721, 725, 728, 731, 736, 740, 744, 750, 754, 758, 764, 765, 769, 771, 773, 775, 776, 780, 783, 785, 786, 789, 790, 791, 795, 797, 799, 802, 803, 814, 815, 821, 825, 828, 829, 837, 838, 849, 855, 859, 862, 863, 871], "notebook": [149, 151], "now": [77, 149, 152, 401], "np": [92, 133, 140, 144, 149, 151, 152, 154, 216, 227, 238, 250, 261, 305, 357, 392, 397, 404, 575, 615, 664, 701, 715, 716, 717, 769, 780, 795, 875], "np_data": 397, "np_hrsemp": 397, "np_lscrap": 397, "nparam": [77, 432, 540], "nparamet": [765, 776, 791], "nportfolio": [16, 19, 20, 24], "nr": [395, 398, 402, 575, 615, 664, 701], "nrthcen": [715, 716], "nrtheast": [715, 716], "nt": 403, "ntime": [397, 711], "nu": 395, "nu_i": 154, "null": [35, 55, 77, 115, 133, 150, 273, 282, 305, 323, 324, 325, 334, 335, 352, 357, 358, 359, 360, 362, 372, 392, 395, 575, 615, 664, 701, 719, 802, 815, 837, 849, 877], "num": [715, 716, 717, 718], "num_param": 785, "number": [21, 34, 37, 57, 69, 70, 71, 77, 78, 84, 88, 92, 112, 115, 121, 133, 148, 150, 151, 155, 182, 183, 189, 220, 225, 231, 235, 243, 254, 265, 273, 282, 292, 305, 324, 334, 335, 343, 352, 357, 362, 372, 379, 392, 395, 398, 399, 402, 403, 404, 405, 413, 421, 439, 447, 455, 457, 469, 470, 471, 472, 541, 548, 549, 552, 553, 559, 575, 583, 584, 588, 589, 596, 615, 637, 638, 641, 642, 648, 664, 672, 673, 676, 677, 683, 701, 705, 706, 707, 709, 710, 711, 715, 717, 719, 721, 728, 767, 769, 778, 780, 785, 793, 795, 813, 819, 848, 853, 871], "numer": [491, 499, 507, 512, 516, 523, 526, 534, 867, 877], "numpi": [2, 5, 10, 14, 75, 77, 78, 79, 80, 92, 100, 102, 133, 140, 144, 149, 151, 152, 154, 180, 181, 182, 183, 195, 198, 208, 211, 213, 216, 221, 222, 224, 227, 232, 233, 235, 238, 244, 245, 247, 250, 255, 256, 258, 261, 266, 267, 305, 357, 392, 404, 455, 459, 463, 476, 477, 478, 575, 615, 664, 701, 711, 715, 716, 717, 752, 753, 756, 757, 762, 763, 769, 780, 786, 789, 795, 869, 870], "nv": 715, "nvar": [100, 102, 133, 155, 161, 167, 173, 195, 198, 199, 208, 211, 213, 220, 221, 222, 224, 231, 232, 233, 235, 241, 243, 244, 245, 247, 254, 255, 256, 258, 265, 266, 267, 305, 357, 392, 455, 494, 502, 510, 520, 529, 537, 548, 549, 575, 583, 584, 615, 637, 638, 664, 672, 673, 701, 753, 773, 783, 797, 799], "nwifeinc": [151, 717], "ny": 715, "o": 403, "ob": [397, 398, 399, 402, 403, 404], "object": [20, 21, 69, 150, 154, 236, 241, 273, 283, 323, 324, 325, 334, 336, 352, 358, 359, 360, 362, 394, 397, 459, 480, 703, 715, 766, 769, 777, 780, 792, 795, 882, 886, 887, 892], "observ": [37, 57, 69, 70, 72, 73, 77, 92, 121, 149, 150, 151, 152, 154, 183, 212, 216, 218, 219, 223, 227, 229, 230, 234, 238, 240, 242, 246, 250, 252, 253, 257, 261, 263, 264, 292, 294, 343, 345, 379, 381, 395, 397, 398, 399, 402, 403, 404, 413, 457, 460, 467, 471, 489, 493, 495, 496, 501, 503, 509, 511, 512, 516, 518, 521, 528, 530, 536, 538, 550, 559, 561, 572, 585, 596, 597, 599, 611, 639, 648, 650, 661, 674, 683, 685, 697, 715, 716, 717, 718, 719, 750, 758, 764, 769, 775, 780, 790, 795, 819, 821, 853, 855], "obviou": 395, "occup": 398, "occur": [73, 398, 719], "occurr": 706, "oct": [69, 70, 149, 150, 151, 152, 397, 398, 399, 715, 716, 717], "od": 150, "odot": 719, "offic": 715, "often": [69, 402], "oh": 715, "oil": 404, "ok": 715, "ol": [76, 77, 91, 151, 154, 257, 334, 359, 360, 362, 363, 395, 396, 398, 402, 713, 716, 717, 719, 721, 736, 740, 744, 767, 790, 793], "old": 77, "ols_r": [152, 154], "olsresult": [214, 225, 236, 248, 259, 270, 310, 394], "omega": [715, 719, 721, 725, 728, 731, 736, 740, 744, 764, 790, 829, 863], "omit": [70, 151, 152, 403, 764, 773, 783, 799, 821, 855], "onc": [69, 93, 94, 97, 150, 395, 398], "one": [0, 7, 17, 19, 21, 23, 25, 27, 69, 77, 84, 89, 133, 149, 150, 151, 154, 199, 209, 223, 225, 234, 273, 305, 323, 325, 357, 392, 395, 397, 398, 403, 404, 405, 413, 421, 429, 455, 496, 552, 575, 588, 615, 641, 664, 676, 701, 711, 715, 716, 717, 719, 764, 769, 771, 773, 780, 783, 795, 799, 821, 825, 855, 859], "ones": [149, 151, 715, 719], "onewayclusteredweightmatrix": 154, "onli": [0, 7, 16, 19, 23, 27, 69, 73, 77, 91, 104, 118, 150, 151, 152, 246, 286, 334, 339, 362, 375, 395, 397, 398, 403, 404, 455, 459, 465, 480, 514, 541, 542, 552, 555, 561, 587, 588, 591, 599, 641, 644, 650, 676, 679, 685, 715, 717, 719, 767, 775, 793, 825, 829, 859, 863], "onto": [334, 362], "oo": 717, "op": 78, "oper": 77, "opportun": [90, 154], "opt_opt": [21, 235, 236], "optim": [7, 20, 21, 69, 77, 150, 154, 179, 205, 225, 235, 236, 241, 395, 731, 744, 758], "optimal_bw": [205, 758], "option": [17, 21, 25, 69, 70, 72, 73, 77, 84, 85, 97, 150, 199, 214, 225, 234, 236, 248, 259, 395, 399, 400, 403, 404, 489, 497, 505, 514, 524, 532, 717, 721, 723, 727, 730, 734, 738, 742, 747, 764, 767, 775, 778, 780, 790, 793, 833], "optionalnumer": 867, "order": [77, 78, 79, 150, 151, 180, 181, 182, 358, 395, 398, 561, 599, 650, 685, 715, 716, 718, 765, 769, 776, 780, 791, 795, 882, 886, 887, 892], "ordereddict": [150, 398, 715, 716, 718], "ordereddictionari": 715, "org": 714, "orig_mi_data": 397, "origin": [77, 150, 151, 220, 231, 243, 254, 265, 273, 294, 345, 381, 400, 494, 495, 502, 503, 510, 511, 520, 521, 529, 530, 537, 538, 561, 564, 599, 602, 650, 653, 685, 688, 773, 783, 799, 821, 855], "orthogon": [92, 149, 269, 358, 395, 403], "ot": [0, 7, 455], "other": [16, 19, 20, 23, 69, 70, 90, 92, 140, 144, 149, 150, 151, 152, 153, 213, 224, 235, 247, 258, 269, 395, 399, 400, 401, 402, 403, 404, 489, 505, 512, 514, 519, 524, 532, 597, 711, 715, 717, 767, 793], "other_effect": [398, 512, 516, 704, 711], "otherwis": [269, 716, 888], "otim": [20, 73, 715, 719, 728, 754, 764, 790], "ounc": 151, "out": [77, 150, 294, 345, 381, 561, 599, 650, 685, 717, 821, 855], "outer": [154, 225, 397, 778], "output": [21, 69, 77, 83, 150, 154, 235, 236, 294, 310, 345, 381, 394, 404, 561, 599, 617, 650, 685, 703, 821, 855], "over": [71, 77, 151, 395, 402, 719], "overal": [397, 398, 399, 402, 404, 545, 567, 580, 606, 634, 656, 669, 691, 715, 716, 717, 718, 825, 829, 859, 863], "overidentif": [151, 358, 395], "overidentifi": [150, 151, 288, 323, 324, 325, 352, 395, 814], "overlin": 395, "overridden": [21, 236, 400, 715], "overview": [153, 401], "overwritten": 77, "own": 718, "p": [39, 59, 69, 70, 71, 72, 73, 85, 115, 123, 149, 150, 151, 152, 154, 269, 273, 282, 295, 310, 313, 316, 323, 324, 325, 334, 335, 346, 352, 358, 359, 360, 362, 372, 382, 394, 397, 398, 399, 402, 404, 552, 553, 562, 587, 588, 589, 600, 617, 620, 623, 641, 642, 651, 676, 677, 686, 703, 715, 716, 717, 718, 719, 822, 856, 880], "p_": [246, 334, 362, 395, 719], "p_1": 154, "p_2": 154, "pa": 715, "pack": 151, "packag": [77, 79, 90, 154, 397, 400, 401, 404, 714], "pagan": [719, 802, 837], "page": [69, 70], "pair": [84, 716, 889], "panda": [75, 77, 78, 79, 80, 92, 93, 94, 106, 140, 144, 149, 150, 151, 154, 183, 216, 220, 227, 231, 243, 254, 265, 269, 274, 294, 326, 345, 364, 381, 397, 398, 399, 401, 432, 455, 457, 458, 461, 468, 473, 480, 494, 502, 510, 520, 529, 537, 540, 543, 561, 575, 578, 599, 615, 632, 650, 664, 667, 685, 701, 715, 716, 717, 769, 773, 780, 781, 783, 785, 795, 796, 799, 803, 829, 838, 863], "panel": [76, 77, 78, 91, 150, 152, 400, 402, 403, 404, 714], "panel_data": [491, 499, 507, 516, 526, 534], "paneldata": [398, 488, 489, 491, 494, 495, 496, 499, 502, 503, 504, 505, 507, 510, 511, 512, 514, 516, 520, 521, 523, 524, 526, 529, 530, 531, 532, 534, 537, 538], "paneleffectsresult": [404, 514, 617, 703], "panelmodelcomparison": 703, "panelmodeldata": 711, "panelol": [77, 91, 397, 398, 400, 401, 402, 575, 615, 664, 701, 713], "panelresult": [77, 489, 497, 505, 524, 617, 703], "paper": 714, "param": [100, 102, 150, 155, 161, 167, 173, 199, 220, 221, 222, 231, 232, 233, 241, 243, 244, 245, 254, 255, 256, 265, 266, 267, 402, 405, 413, 421, 429, 439, 447, 494, 502, 510, 520, 529, 537, 715, 717, 773, 783, 799], "param_nam": [715, 765, 776, 791], "paramet": [0, 2, 7, 10, 16, 17, 19, 20, 21, 23, 24, 25, 27, 31, 35, 38, 39, 45, 48, 49, 52, 55, 58, 59, 65, 68, 69, 70, 71, 72, 73, 77, 83, 84, 85, 92, 97, 100, 102, 103, 106, 107, 108, 115, 118, 119, 122, 123, 129, 132, 133, 135, 140, 144, 149, 150, 151, 152, 153, 154, 155, 157, 161, 163, 167, 169, 173, 175, 179, 180, 181, 182, 183, 193, 195, 196, 198, 199, 201, 205, 208, 209, 211, 212, 213, 214, 216, 220, 221, 222, 223, 224, 225, 227, 231, 232, 233, 234, 235, 236, 238, 241, 243, 244, 245, 246, 247, 248, 250, 254, 255, 256, 257, 258, 259, 261, 265, 266, 267, 272, 273, 274, 275, 276, 282, 286, 290, 293, 294, 295, 301, 304, 305, 310, 314, 315, 316, 319, 321, 322, 326, 327, 328, 334, 335, 339, 341, 344, 345, 346, 353, 356, 357, 362, 363, 364, 365, 366, 372, 375, 377, 380, 381, 382, 388, 391, 392, 394, 397, 399, 400, 401, 402, 403, 404, 405, 413, 421, 429, 432, 439, 447, 455, 457, 459, 460, 461, 465, 468, 480, 488, 489, 491, 494, 495, 496, 497, 499, 502, 503, 504, 505, 507, 510, 511, 512, 514, 516, 520, 521, 523, 524, 526, 529, 530, 531, 532, 534, 537, 538, 540, 543, 547, 553, 555, 560, 561, 562, 570, 574, 575, 578, 582, 589, 591, 598, 599, 600, 609, 613, 615, 617, 621, 622, 623, 628, 630, 632, 636, 642, 644, 649, 650, 651, 659, 663, 664, 667, 671, 677, 679, 684, 685, 686, 694, 699, 701, 703, 704, 711, 715, 716, 717, 718, 721, 722, 725, 726, 728, 729, 731, 733, 736, 737, 740, 741, 744, 746, 750, 752, 753, 754, 756, 757, 758, 762, 763, 764, 765, 767, 769, 771, 772, 773, 775, 776, 778, 780, 782, 783, 785, 786, 790, 791, 793, 795, 797, 798, 799, 801, 803, 804, 820, 821, 822, 827, 831, 836, 838, 839, 854, 855, 856, 861, 865, 869, 870, 871, 872, 877], "parameter": 151, "parent": 151, "parenthes": [150, 151, 152, 398], "pariti": 151, "parser": 77, "part": [246, 399], "partial": [150, 151, 269, 395, 398], "particular": [92, 151, 154, 199, 398, 402, 717, 773, 783, 799, 821, 855], "particularli": 151, "partit": 395, "parzen": [17, 21, 25, 70, 71, 72, 77, 154, 173, 179, 181, 182, 205, 395, 403, 405, 421, 497, 505, 514, 524, 532, 715, 731, 744, 758], "pass": [21, 70, 77, 97, 144, 150, 151, 154, 214, 223, 225, 227, 234, 235, 236, 238, 248, 259, 398, 715, 716, 764, 767, 775, 778, 780, 793], "patsi": 77, "pc": 715, "pd": [92, 140, 144, 149, 150, 151, 154, 397, 398, 575, 615, 664, 701, 715, 716, 717, 769, 780, 785, 787, 788, 795], "pearson": [714, 802, 815, 837, 849], "pension": 715, "per": [77, 151, 398, 550, 572, 585, 597, 611, 639, 661, 674, 697], "peratio": 715, "percent": 398, "percentag": [150, 711], "percentil": 150, "perfectli": [92, 398], "perform": [77, 154, 213, 224, 235, 247, 258, 395, 402, 491, 496, 499, 507, 512, 516, 523, 526, 534, 713], "period": [77, 78, 397, 398, 399, 402, 403, 404, 432, 455, 461, 496, 540, 711, 715, 719], "permut": 145, "person": [151, 398], "phi": 395, "pi": [182, 395], "piec": 73, "place": [154, 395, 398, 764, 775, 790], "plain": 398, "plan": 91, "plant": [151, 399], "plm": [401, 404], "plt": 715, "plu": [548, 583, 637, 672], "pm": 395, "png": 715, "pocket": 150, "pool": [76, 91, 398, 496, 523, 587, 713], "poolabl": [397, 398, 399, 402, 404], "pooled_r": [398, 715], "pooledol": [91, 398, 399, 402, 512, 713], "poor": [150, 152], "port": 70, "port1": 70, "port2": 70, "port3": 70, "port4": 70, "portfolio": [16, 19, 20, 23, 24, 27, 35, 55, 71, 72, 73, 797], "portn": 70, "posit": [16, 17, 19, 21, 25, 73, 180, 181, 182, 223, 273, 395, 775], "possibl": [71, 133, 150, 151, 152, 154, 305, 357, 392, 395, 397, 399, 575, 615, 664, 701, 715, 716, 717, 769, 780, 795], "possibli": [69, 150, 715], "post": 269, "pound": 151, "poverti": [150, 152], "power": [150, 395], "pr": 395, "practic": [69, 149, 395, 403, 715, 719, 769, 780, 795], "pravin": 714, "precis": [310, 394, 397, 617, 703, 715, 719], "precondit": 77, "pred_df": 717, "pred_exog": 151, "predict": [77, 151, 544, 545, 546, 579, 580, 581, 633, 634, 635, 668, 669, 670, 717], "prefer": [72, 77, 150, 718], "prefix": 403, "preg": 151, "premia": [16, 19, 20, 23, 24, 41, 42, 43, 61, 62, 63, 69, 70, 71, 72, 73], "premium": [71, 73], "presc": [150, 152], "presenc": 402, "present": [150, 153, 401, 404, 708, 715, 825, 859, 891], "preserv": [150, 397, 715, 716, 718], "prespecifi": [764, 769, 775, 790, 795], "press": [151, 714], "prevent": 77, "previou": [73, 151, 395, 398, 402, 715], "previous": [77, 715], "price": [16, 20, 24, 35, 55, 69, 70, 72, 73, 76, 77, 91, 151, 714], "primari": 397, "primarili": [151, 398], "prime": [16, 71, 73, 155, 161, 173, 352, 395, 403, 488, 496, 504, 512, 523, 531, 715, 719, 758, 786, 829, 863], "princeton": 714, "principl": 397, "print": [21, 69, 70, 72, 149, 150, 151, 152, 154, 397, 398, 399, 715, 716, 717], "priolist": [150, 152], "prior": [72, 403], "prioriti": [150, 152], "privat": [150, 152, 257], "probabl": [150, 398], "problem": [73, 150, 395, 717, 719], "procedur": [69, 71, 154], "process": [150, 220, 231, 243, 254, 265, 294, 345, 381, 494, 502, 510, 520, 529, 537, 773, 783, 799, 821, 855], "prod_": 148, "produc": [77, 92, 145, 150, 151, 152, 183, 225, 246, 250, 261, 360, 397, 398, 403, 505, 514, 524, 532, 715, 716, 717, 719], "product": [92, 140, 144, 148, 154, 225, 778], "program": 90, "programm": 90, "programmat": 717, "progress": 69, "project": [154, 269, 334, 352, 362, 395], "properti": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 22, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 77, 78, 92, 93, 94, 95, 96, 98, 99, 101, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 146, 147, 148, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 212, 215, 217, 218, 219, 223, 226, 228, 229, 230, 234, 237, 239, 240, 242, 246, 249, 251, 252, 253, 257, 260, 262, 263, 264, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 402, 404, 405, 408, 410, 411, 412, 413, 416, 418, 419, 420, 421, 424, 426, 427, 428, 429, 432, 433, 434, 436, 437, 438, 439, 442, 444, 445, 446, 447, 450, 452, 453, 454, 455, 458, 462, 463, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 487, 488, 490, 492, 493, 496, 498, 500, 501, 504, 506, 508, 509, 512, 513, 515, 517, 518, 519, 522, 523, 525, 527, 528, 531, 533, 535, 536, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 704, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 754, 755, 758, 759, 760, 761, 764, 765, 766, 768, 770, 772, 775, 776, 777, 779, 781, 782, 785, 786, 787, 788, 789, 790, 791, 792, 794, 796, 798, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881], "proport": [488, 491, 496, 499, 504, 507, 512, 516, 523, 526, 531, 534, 715, 716], "propto": 403, "provid": [0, 7, 16, 19, 21, 23, 27, 97, 152, 153, 154, 155, 183, 199, 214, 225, 236, 246, 248, 250, 259, 261, 397, 399, 401, 404, 405, 413, 421, 429, 459, 489, 505, 514, 524, 532, 553, 589, 642, 677, 711, 715, 719, 731, 744, 758, 764, 769, 771, 775, 790, 795, 877, 886, 887, 892], "psi": 719, "psi_": 719, "pub": 714, "public": [77, 257], "pull": 90, "purg": [97, 546, 568, 581, 607, 635, 657, 670, 692], "purpos": [72, 713], "pval": 269, "pvalu": 77, "py": 397, "pyhdf": [77, 97], "pyplot": 715, "python": [75, 77, 78, 79, 80, 90], "q": [17, 21, 25, 71, 133, 154, 173, 179, 182, 205, 273, 288, 305, 323, 325, 334, 357, 358, 362, 392, 395, 405, 421, 505, 514, 524, 532, 575, 615, 664, 701, 715, 731, 744, 758, 765, 776, 785, 791, 814], "q_": 395, "qr": 77, "quadrat": [17, 21, 25, 71, 72, 77, 115, 154, 173, 179, 182, 205, 282, 335, 372, 395, 403, 405, 421, 715, 731, 744, 758], "quantil": 395, "quantiti": [273, 398, 402], "quarterli": 151, "quasi": [398, 402, 403], "quickli": 404, "quickstart": 152, "quit": 404, "r": [16, 44, 64, 69, 70, 72, 73, 77, 105, 126, 127, 140, 144, 149, 150, 151, 152, 154, 269, 298, 299, 317, 318, 349, 350, 358, 360, 385, 386, 395, 397, 398, 399, 401, 402, 404, 624, 625, 626, 627, 714, 715, 716, 717, 718, 765, 776, 785, 791, 829, 863], "r2": [395, 715, 825, 829, 859, 863], "r_": [16, 20, 24, 71, 73, 395, 403, 719], "rag": 397, "rais": [93, 94, 97, 154, 398, 455, 708, 888, 889], "randint": [92, 140, 144, 149, 715], "randn": [769, 780, 795], "random": [76, 91, 92, 140, 144, 149, 531, 532, 666, 713, 715, 716, 717, 769, 780, 795], "random_clust": 715, "random_weight": 716, "randomeffect": [91, 398, 399, 400, 402, 713], "randomeffectsresult": [532, 617, 703], "randomst": [140, 144, 149, 711, 715], "rang": [92, 140, 144, 151, 715], "rank": [77, 395, 491, 499, 507, 512, 516, 523, 526, 534, 541, 542], "rank_check": 77, "rate": [16, 19, 20, 23, 69, 70, 71, 73, 151, 398, 715], "rather": [69, 150, 403, 717], "ratio": [150, 152, 352, 395, 719, 815, 829, 849, 863], "ravi": 714, "raw": [102, 222, 233, 245, 256, 267], "re": [69, 70, 72, 84, 85, 92, 97, 133, 149, 150, 151, 154, 305, 352, 357, 392, 397, 398, 400, 402, 403, 489, 491, 497, 499, 507, 514, 516, 524, 526, 532, 534, 539, 577, 631, 666, 715, 717], "re_r": 398, "reach": [150, 151], "readili": 152, "reason": [69, 151, 402, 718, 872], "receiv": 151, "recent": [78, 91, 715], "recommend": [88, 715, 716], "recov": 395, "rectangular": 397, "reduc": [69, 77, 257, 398, 491, 499, 507, 512, 516, 523, 526, 534, 717], "redund": 92, "refactor": 90, "refer": [71, 91, 153, 179, 395, 401, 460, 566, 567, 568, 604, 606, 607, 655, 656, 657, 690, 691, 692, 718, 802, 815, 837, 849], "referenc": 397, "refin": 404, "reflect": 403, "reformat": [495, 503, 511, 521, 530, 538], "reg": 151, "reg66": 151, "reg661": 151, "reg662": 151, "reg663": 151, "reg664": 151, "reg665": 151, "reg666": 151, "reg667": 151, "reg668": 151, "reg669": 151, "region": [151, 715], "region_data": 715, "regress": [71, 72, 73, 77, 91, 92, 151, 152, 153, 257, 269, 270, 283, 334, 336, 352, 358, 359, 360, 362, 395, 399, 402, 403, 404, 496, 541, 542, 587, 713, 715, 721, 736, 740, 744, 764, 785, 790, 797, 825, 829, 836, 859, 863], "regressand": [213, 224, 235, 241, 247, 258], "regressor": [71, 73, 77, 78, 92, 97, 137, 145, 149, 150, 151, 152, 154, 155, 161, 167, 173, 193, 195, 196, 198, 199, 205, 208, 211, 212, 213, 220, 223, 224, 231, 234, 235, 241, 243, 246, 247, 254, 257, 258, 265, 269, 270, 324, 352, 359, 395, 398, 399, 402, 403, 413, 494, 502, 510, 514, 520, 529, 537, 541, 552, 553, 588, 589, 641, 642, 676, 677, 716, 717, 719, 721, 725, 728, 731, 736, 740, 744, 752, 753, 754, 756, 757, 762, 763, 764, 767, 771, 773, 783, 789, 790, 793, 797, 799, 802, 815, 821, 837, 849, 855], "reject": [69, 719, 802, 815, 837, 849], "rel": [69, 72, 150, 151, 273, 397, 398, 403], "relat": [77, 150, 151, 154, 395, 403, 480], "relationship": 151, "releas": [77, 78, 79, 90, 91, 401], "relev": [150, 283, 336, 397, 459, 717], "reliabl": 398, "remain": [397, 403], "remov": [73, 77, 78, 79, 397, 398, 404, 480, 774, 784, 800, 883, 888, 889], "renam": 77, "reorder": 77, "reparameter": 395, "repeat": [69, 77, 152, 716], "replac": [395, 403, 405, 421, 439, 447, 719], "replic": [150, 713], "repo": 90, "report": [16, 73, 77, 150, 151, 152, 395, 398, 400, 404, 496, 715, 719], "repres": [769, 780, 795], "represent": [397, 402, 459], "reproduc": 398, "repwag": 151, "request": [90, 872], "requir": [16, 69, 71, 72, 77, 84, 85, 90, 150, 154, 216, 227, 238, 250, 257, 261, 273, 324, 352, 395, 397, 398, 399, 402, 491, 499, 505, 507, 512, 514, 516, 523, 526, 534, 715, 717, 719, 773, 783, 799, 815, 821, 849, 855], "require_panda": 785, "res2": 151, "res_2sl": [150, 151], "res_2sls_al": 150, "res_2sls_robust": 150, "res_2sls_std": 150, "res_cat": 151, "res_direct": 151, "res_first": 151, "res_formula": 151, "res_gl": 151, "res_gmm": 150, "res_gmm_al": 150, "res_gmm_clust": 150, "res_gmm_cu": 150, "res_iv": 151, "res_ivol": 150, "res_liml": 150, "res_ol": [150, 151, 715], "res_pr": 715, "res_second": 151, "rescal": 395, "reset_constraint": 715, "reset_index": [397, 404], "reshap": 397, "resid": [102, 118, 150, 151, 222, 233, 245, 256, 267, 286, 339, 375, 404, 555, 591, 644, 679], "residu": [16, 19, 40, 60, 73, 100, 102, 114, 120, 124, 125, 128, 134, 149, 150, 151, 160, 166, 172, 178, 204, 221, 222, 232, 233, 244, 245, 255, 256, 266, 267, 281, 288, 291, 296, 297, 300, 309, 333, 334, 342, 347, 348, 351, 352, 358, 359, 360, 361, 362, 371, 378, 383, 384, 387, 393, 395, 398, 403, 410, 418, 426, 436, 444, 452, 488, 489, 491, 496, 499, 504, 505, 507, 512, 514, 516, 523, 524, 526, 531, 532, 534, 549, 552, 553, 557, 563, 564, 569, 576, 584, 587, 588, 589, 594, 601, 602, 608, 614, 616, 638, 641, 642, 646, 652, 653, 658, 665, 673, 676, 677, 681, 687, 688, 693, 700, 702, 717, 719, 721, 725, 728, 731, 736, 740, 744, 752, 754, 756, 762, 764, 769, 775, 790, 795, 802, 809, 815, 818, 823, 824, 825, 826, 829, 835, 837, 844, 849, 852, 857, 858, 859, 860, 863, 866], "respect": [269, 310, 394, 403, 516, 617, 703, 829, 863], "rest": 715, "rest0": 715, "rest1": 715, "rest2": 715, "rest3": 715, "rest4": 715, "rest5": 715, "rest6": 715, "rest7": 715, "restrict": [92, 133, 288, 305, 323, 324, 325, 352, 357, 392, 395, 403, 404, 552, 553, 575, 588, 589, 615, 641, 642, 664, 676, 677, 701, 718, 719, 785, 786, 814], "result": [17, 21, 25, 69, 72, 77, 84, 85, 97, 103, 130, 151, 153, 214, 225, 236, 246, 248, 259, 397, 398, 400, 401, 402, 403, 489, 491, 497, 499, 505, 507, 512, 514, 516, 523, 524, 526, 532, 534, 715, 716, 718, 767, 778, 793], "retail": [69, 70], "retain": 77, "retriev": [77, 97], "return": [2, 5, 10, 14, 16, 17, 19, 20, 21, 23, 24, 25, 27, 35, 46, 55, 66, 69, 71, 72, 73, 77, 85, 86, 87, 88, 89, 93, 94, 97, 100, 102, 106, 115, 130, 133, 144, 148, 151, 153, 179, 180, 181, 182, 194, 195, 197, 198, 207, 208, 210, 211, 213, 214, 216, 220, 221, 222, 224, 225, 227, 231, 232, 233, 235, 236, 238, 241, 243, 244, 245, 246, 247, 248, 250, 254, 255, 256, 258, 259, 261, 265, 266, 267, 269, 270, 271, 273, 274, 282, 283, 288, 294, 302, 305, 320, 323, 324, 325, 326, 334, 335, 336, 345, 352, 354, 357, 358, 359, 360, 362, 364, 372, 381, 389, 392, 394, 395, 398, 400, 401, 432, 456, 457, 459, 461, 463, 464, 465, 466, 468, 476, 489, 491, 494, 495, 497, 499, 502, 503, 505, 507, 510, 511, 514, 516, 520, 521, 524, 526, 529, 530, 532, 534, 537, 538, 540, 543, 544, 545, 546, 552, 553, 561, 566, 567, 568, 571, 575, 578, 579, 580, 581, 587, 588, 589, 599, 604, 606, 607, 610, 615, 629, 632, 633, 634, 635, 641, 642, 650, 655, 656, 657, 660, 664, 667, 668, 669, 670, 676, 677, 685, 690, 691, 692, 695, 701, 703, 706, 708, 711, 715, 751, 752, 753, 755, 756, 757, 760, 762, 763, 766, 767, 769, 771, 772, 773, 777, 778, 780, 782, 783, 786, 789, 792, 793, 795, 797, 798, 799, 802, 803, 814, 815, 821, 825, 828, 829, 837, 838, 849, 855, 859, 862, 863, 869, 870, 871, 872, 873, 875, 886, 887, 888, 889, 892], "return_panel": 459, "reus": 97, "review": [151, 714, 715], "revis": 714, "reweight": [398, 403, 489], "rework": [151, 397], "rf": [69, 70, 72], "rho": [715, 719, 802, 837], "rho_": 403, "ri": 715, "right": [20, 70, 73, 84, 395, 403, 488, 496, 504, 512, 523, 531, 715, 717, 719, 764, 775, 790, 815, 849], "risk": [16, 19, 20, 23, 24, 41, 42, 43, 61, 62, 63, 69, 70, 71, 72, 73], "risk_fre": [16, 19, 20, 23, 69, 70], "rmse": 404, "rng": 711, "robust": [0, 7, 17, 21, 25, 69, 70, 71, 72, 73, 77, 97, 115, 149, 150, 151, 152, 154, 165, 193, 199, 205, 214, 223, 225, 227, 234, 236, 238, 248, 259, 282, 335, 372, 395, 397, 399, 402, 404, 405, 421, 429, 489, 497, 505, 514, 524, 532, 553, 589, 642, 677, 714, 716, 717, 719, 750, 758, 767, 775, 778, 780, 793], "roger": [413, 767, 793], "root": [403, 459], "routin": 714, "row": [73, 133, 149, 151, 187, 269, 273, 305, 357, 392, 395, 397, 575, 615, 664, 701, 717], "rsquar": [151, 269, 400, 541, 542, 544, 545, 546, 566, 567, 568, 579, 580, 581, 604, 606, 607, 633, 634, 635, 655, 656, 657, 668, 669, 670, 690, 691, 692, 715], "rsquared_inclus": 404, "rss": 395, "rss_": [403, 587], "rss_r": [552, 588, 641, 676], "rss_u": [552, 588, 641, 676], "rubin": [323, 395], "rule": [150, 151, 152, 405, 421, 429, 491, 499, 507, 516, 526, 534], "run": [77, 79, 150, 151, 241, 398], "runner": 397, "runtimeerror": [93, 94, 97], "s1": 72, "s1m1": [19, 23, 27, 69, 70], "s1m3": [69, 70], "s1m5": [19, 23, 27, 69, 70], "s1v1": [69, 70, 72, 715, 797], "s1v3": [69, 70, 72, 715], "s1v5": [69, 70, 72, 715, 797], "s3m1": [19, 23, 27, 69, 70], "s3m3": [19, 23, 27, 69, 70], "s3m5": [19, 23, 27, 69, 70], "s3v1": [69, 70], "s3v3": [69, 70], "s3v5": [69, 70], "s5": 72, "s5m1": [19, 23, 27, 69, 70], "s5m3": [69, 70], "s5m5": [19, 23, 27, 69, 70], "s5v1": [69, 70, 72, 715, 797], "s5v3": [69, 70, 72, 715], "s5v5": [69, 70, 72, 715, 797], "s_i": 405, "salari": 151, "sale": [151, 397], "same": [69, 71, 72, 73, 115, 118, 133, 145, 150, 151, 154, 220, 231, 243, 246, 254, 265, 273, 282, 286, 294, 305, 324, 335, 339, 345, 357, 372, 375, 381, 392, 395, 397, 398, 403, 465, 514, 555, 561, 564, 575, 591, 599, 602, 615, 644, 650, 653, 664, 679, 685, 688, 701, 715, 716, 717, 719, 769, 771, 780, 795, 797, 821, 855], "sampl": [24, 77, 111, 127, 149, 150, 151, 154, 155, 160, 161, 166, 167, 172, 173, 178, 182, 193, 196, 204, 205, 209, 213, 224, 235, 247, 258, 279, 294, 299, 318, 324, 331, 345, 350, 369, 381, 386, 395, 403, 413, 532, 541, 561, 599, 650, 685, 715, 717, 719, 721, 736, 740, 744, 750, 754, 758, 767, 778, 793, 802, 807, 815, 821, 837, 842, 849, 855, 871], "sandwich": 73, "sargan": [324, 395], "sat": 718, "satisfi": [149, 220, 231, 243, 254, 265, 395, 764, 790], "save": 151, "sc": 715, "scalar": 395, "scale": [69, 155, 161, 167, 173, 459, 719, 871], "scenario": 505, "schaffer": 714, "schedul": 397, "school": [151, 398, 715], "scipi": [21, 75, 77, 78, 79, 80, 92, 97, 148, 149, 235, 236], "score": [0, 5, 7, 14, 73, 150, 151, 154, 159, 165, 171, 177, 203, 358, 360, 395, 413, 719, 721, 736, 744, 750, 758], "scrap": [151, 397], "sd": 715, "se": 715, "seaborn": [69, 715], "second": [16, 19, 23, 27, 69, 71, 72, 73, 149, 150, 151, 273, 395, 403, 715, 769, 780, 795], "section": [69, 71, 73, 77, 216, 227, 238, 250, 261, 398, 405, 541, 542, 714, 715, 719, 750], "secur": [150, 152], "see": [17, 21, 25, 69, 70, 72, 77, 149, 150, 152, 154, 403, 489, 497, 505, 514, 516, 524, 532, 566, 567, 568, 604, 606, 607, 655, 656, 657, 690, 691, 692, 715, 769, 780, 795, 802, 815, 837, 849], "seed": 711, "seem": 715, "seemingli": [71, 73, 77, 91, 713, 715, 718, 764, 790, 836], "seen": 715, "select": [77, 154, 173, 294, 345, 381, 561, 599, 650, 685, 714, 717, 758, 767, 793, 821, 855], "sens": [150, 154, 395, 404, 715, 764, 790], "sensit": [150, 151], "separ": [19, 23, 27, 70, 92, 133, 305, 357, 392, 395, 575, 615, 664, 701, 716, 717, 719, 764, 790], "sequenc": [310, 394, 481, 752, 753, 756, 757, 762, 763, 764, 775, 790, 882], "seri": [16, 19, 20, 21, 24, 29, 41, 42, 43, 50, 61, 62, 63, 73, 76, 92, 97, 116, 118, 122, 123, 125, 129, 132, 133, 134, 140, 144, 146, 155, 161, 167, 173, 183, 185, 186, 199, 212, 216, 223, 227, 234, 236, 238, 243, 246, 250, 254, 257, 261, 265, 284, 286, 293, 294, 295, 297, 301, 304, 305, 309, 311, 312, 314, 317, 318, 337, 339, 344, 345, 346, 348, 353, 356, 357, 361, 373, 375, 380, 381, 382, 384, 388, 391, 392, 393, 397, 413, 455, 460, 465, 467, 488, 491, 494, 495, 496, 499, 502, 503, 504, 507, 510, 511, 512, 516, 520, 521, 523, 526, 529, 530, 531, 534, 537, 538, 550, 551, 554, 555, 560, 561, 562, 564, 570, 572, 574, 575, 576, 585, 586, 590, 591, 598, 599, 600, 602, 609, 611, 613, 614, 615, 616, 618, 619, 621, 624, 625, 626, 627, 639, 640, 643, 644, 649, 650, 651, 653, 659, 661, 663, 664, 665, 674, 675, 678, 679, 684, 685, 686, 688, 694, 697, 699, 700, 701, 702, 715, 719, 764, 765, 769, 770, 771, 773, 775, 776, 780, 781, 785, 787, 790, 791, 795, 796, 797, 799, 802, 815, 820, 821, 822, 827, 829, 831, 837, 849, 854, 855, 856, 861, 863, 865, 867], "serial": 69, "set": [69, 70, 71, 73, 77, 92, 97, 149, 151, 154, 179, 225, 235, 257, 310, 334, 352, 362, 394, 395, 397, 398, 399, 400, 404, 405, 413, 421, 429, 432, 439, 447, 496, 540, 617, 703, 715, 717, 719, 764, 765, 768, 769, 776, 778, 779, 780, 790, 791, 794, 795, 890], "set_index": [151, 397, 398, 399, 402, 404, 575, 615, 664, 701], "setup": 402, "sg": 73, "shallow": 884, "shape": [118, 140, 144, 151, 183, 286, 339, 375, 397, 555, 564, 591, 602, 644, 653, 679, 688, 715, 721], "share": [35, 55, 73, 90, 115, 133, 273, 282, 288, 305, 323, 324, 325, 334, 335, 352, 357, 358, 359, 360, 362, 372, 392, 552, 553, 575, 587, 588, 589, 615, 641, 642, 664, 676, 677, 701, 721, 723, 727, 730, 734, 738, 742, 747, 751, 755, 760, 802, 814, 815, 837, 849], "shea": [150, 151, 269, 395], "shim": 480, "shock": [69, 71, 72, 77, 118, 286, 294, 339, 345, 375, 381, 398, 403, 531, 555, 561, 591, 599, 644, 650, 679, 685, 802, 815, 821, 837, 849, 855], "shop": [69, 70], "shorthand": 79, "should": [16, 19, 20, 23, 72, 92, 97, 150, 151, 152, 183, 234, 246, 257, 395, 397, 398, 399, 455, 461, 488, 489, 491, 496, 499, 504, 505, 507, 512, 514, 516, 523, 524, 526, 531, 532, 534, 711, 713, 719, 802, 815, 837, 849], "show": [69, 70, 149, 151, 152, 153, 401, 715], "shown": [77, 715], "si": 72, "sib": [133, 151, 154, 216, 227, 238, 250, 261, 305, 357, 392], "sibl": 151, "sick": 715, "sicklv": 715, "side": [70, 395, 488, 496, 504, 512, 523, 531, 715], "sigma": [16, 19, 71, 73, 151, 395, 403, 405, 413, 421, 439, 447, 553, 589, 642, 677, 715, 716, 719, 721, 725, 728, 731, 736, 740, 744, 753, 754, 757, 763, 764, 769, 775, 790, 795, 815, 829, 849, 863], "sigma2_hat": 151, "sigma_": [73, 403, 715], "sigma_pr": 715, "signal": 151, "signedinteg": [188, 481], "signific": [85, 151, 398, 552, 553, 588, 589, 641, 642, 676, 677], "sim": [71, 73, 273, 288, 323, 324, 325, 334, 352, 358, 360, 395, 719, 814], "similar": [69, 71, 150, 152, 154, 395, 397, 398, 399, 400, 402, 404, 505, 514, 524, 532, 717, 825, 859], "similarli": [69, 395, 399, 403, 404, 715, 717, 719, 764], "simpl": [71, 73, 133, 150, 152, 305, 357, 392, 398, 404, 575, 615, 664, 701, 715, 716, 717, 797], "simpler": [151, 395, 717], "simplest": [133, 154, 305, 357, 392, 395, 575, 615, 664, 701, 769, 780, 795], "simplif": 90, "simplifi": [70, 77, 90, 92, 140, 144, 150, 398, 403, 719, 771, 797], "simul": [149, 704, 711, 717], "simultan": [150, 241, 246, 512, 714, 715, 716, 718], "sin": [182, 395], "sinc": [69, 70, 71, 73, 97, 118, 149, 150, 151, 154, 196, 246, 286, 339, 375, 397, 398, 399, 404, 514, 555, 591, 644, 679, 713, 715, 716, 718, 719, 754, 825, 859], "singelton": 77, "singl": [69, 77, 91, 133, 151, 152, 305, 357, 392, 397, 399, 455, 496, 575, 615, 664, 701, 716, 717, 769, 780, 795], "singleton": [77, 512, 516], "singular": [715, 719], "sinmom14": 151, "size": [69, 70, 71, 72, 92, 127, 140, 144, 149, 150, 152, 294, 299, 318, 345, 350, 381, 386, 397, 465, 541, 561, 599, 650, 685, 715, 716, 802, 815, 821, 837, 849, 855, 871, 878], "skip": [77, 491, 499, 507, 512, 516, 523, 526, 534], "skoulaki": 714, "slightli": [150, 151], "slope": [77, 92], "slow": 404, "slower": 398, "sm": [150, 154, 398, 402, 575, 615, 664, 701, 715, 718], "sm_ol": 150, "small": [69, 70, 72, 77, 79, 111, 149, 151, 155, 160, 161, 166, 167, 172, 173, 178, 193, 196, 204, 205, 209, 279, 324, 331, 369, 395, 399, 402, 403, 413, 532, 715, 719, 721, 736, 740, 744, 750, 754, 758, 767, 778, 793, 807, 842], "small_sampl": 532, "smaller": [151, 715], "smb": [19, 23, 27, 69, 70, 72], "smked": 151, "smsa": 151, "smsa66": 151, "sn": [69, 715], "so": [69, 70, 71, 72, 73, 77, 115, 150, 151, 152, 154, 182, 220, 231, 241, 243, 246, 254, 265, 273, 282, 335, 360, 372, 395, 397, 398, 399, 400, 402, 403, 404, 455, 459, 553, 589, 642, 677, 715, 716, 719, 802, 815, 825, 837, 849, 859], "so_unemp": 715, "soak": 398, "social": [150, 152], "softwar": 714, "solut": [73, 77, 149, 398, 719], "solv": [73, 395, 719], "some": [69, 71, 72, 76, 77, 84, 85, 90, 91, 149, 150, 151, 152, 241, 397, 398, 400, 401, 713, 715, 716, 718, 719, 889], "sometim": 73, "somewhat": [395, 402], "son": 714, "sort": [69, 70, 77], "sort_valu": 151, "sourc": [0, 7, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 49, 59, 68, 73, 82, 83, 84, 85, 86, 87, 88, 89, 92, 97, 100, 102, 103, 104, 135, 140, 143, 144, 150, 155, 161, 167, 173, 179, 180, 181, 182, 183, 185, 193, 195, 196, 198, 199, 205, 208, 209, 211, 212, 216, 223, 224, 225, 227, 234, 235, 236, 238, 241, 246, 250, 257, 268, 269, 270, 272, 273, 310, 322, 323, 324, 325, 334, 352, 358, 359, 360, 362, 363, 381, 394, 395, 403, 405, 408, 413, 416, 421, 424, 429, 433, 434, 439, 442, 447, 450, 451, 455, 456, 457, 459, 460, 461, 464, 465, 468, 480, 481, 486, 488, 489, 491, 496, 497, 499, 504, 505, 507, 512, 514, 516, 523, 524, 526, 529, 531, 532, 534, 539, 577, 617, 631, 632, 636, 650, 651, 664, 666, 703, 704, 711, 719, 721, 725, 728, 731, 736, 740, 744, 750, 753, 754, 756, 757, 758, 763, 764, 769, 771, 775, 778, 780, 785, 790, 795, 797, 801, 836, 837, 849, 855, 869, 870, 871, 872, 877, 882, 883, 884, 886, 887, 888, 891, 892], "south": [151, 714, 715, 716], "south66": 151, "span": [149, 397, 719], "spars": [77, 79, 92, 97, 135, 140, 144, 149, 514], "special": [151, 212, 399, 402, 403, 516, 713, 715, 718, 790], "specif": [17, 21, 25, 69, 71, 97, 115, 151, 152, 153, 182, 199, 214, 220, 225, 231, 236, 243, 248, 254, 259, 265, 282, 294, 335, 345, 372, 381, 398, 401, 402, 403, 489, 491, 494, 499, 502, 505, 507, 510, 512, 514, 516, 520, 523, 524, 526, 529, 532, 534, 537, 715, 716, 719, 771, 773, 783, 797, 799, 821, 855], "specifi": [19, 23, 27, 70, 77, 92, 140, 150, 151, 153, 154, 225, 398, 401, 402, 403, 404, 491, 499, 507, 512, 516, 526, 534, 561, 599, 650, 685, 715, 717, 718, 719, 769, 778, 780, 795, 888], "spectral": [17, 21, 25, 71, 72, 77, 154, 173, 179, 182, 205, 395, 403, 405, 421, 715, 731, 744, 758], "speed": 97, "spell": 77, "split": 715, "spuriou": 714, "sqrt": [288, 395, 403, 715, 719, 814], "squar": [40, 47, 60, 67, 69, 70, 72, 77, 91, 120, 124, 131, 149, 150, 151, 152, 154, 212, 269, 291, 296, 303, 334, 342, 347, 355, 362, 378, 383, 390, 397, 398, 399, 402, 403, 404, 459, 514, 544, 545, 546, 552, 557, 563, 573, 579, 580, 581, 587, 588, 594, 601, 612, 633, 634, 635, 641, 646, 652, 662, 668, 669, 670, 676, 681, 687, 698, 715, 716, 718, 764, 818, 823, 830, 852, 857, 864], "ssi": [150, 152], "ssiratio": [150, 152], "ssr_": [719, 829, 863], "st_abb": 715, "stabl": 91, "stack": [73, 405, 413, 421, 429, 439, 447, 715, 719, 764, 775, 790], "stacklevel": 77, "stage": [16, 69, 73, 77, 91, 151, 152, 154, 212, 268, 269, 270, 283, 336, 358, 713, 715, 718, 764], "standard": [21, 42, 45, 62, 65, 69, 70, 72, 77, 129, 150, 183, 216, 227, 238, 250, 261, 269, 301, 319, 353, 388, 398, 399, 400, 402, 491, 496, 497, 499, 507, 514, 526, 534, 570, 609, 628, 659, 694, 715, 716, 769, 780, 795, 827, 861], "standard_norm": [92, 140, 144, 149, 717], "star": [310, 394, 617, 703], "start": [21, 149, 154, 234, 235, 236, 334, 362, 708], "stat": [69, 70, 72, 77, 149, 150, 151, 152, 154, 269, 321, 395, 397, 398, 399, 401, 402, 404, 552, 588, 630, 641, 676, 715, 716, 717, 718, 877], "stata": [150, 153, 395, 400, 403, 714, 719], "statacorp": 714, "state": [149, 151, 715], "state_effect": 149, "state_id": 149, "statement": 877, "static": [144, 213, 216, 224, 227, 238, 247, 250, 258, 261], "station": 714, "statist": [17, 20, 21, 25, 35, 43, 48, 55, 63, 68, 69, 70, 71, 72, 77, 115, 132, 133, 149, 150, 151, 152, 154, 241, 269, 273, 282, 288, 304, 305, 313, 323, 324, 325, 334, 335, 352, 356, 357, 358, 359, 360, 362, 372, 391, 392, 397, 398, 399, 402, 403, 404, 550, 552, 553, 572, 574, 575, 585, 587, 588, 589, 597, 611, 613, 615, 620, 639, 641, 642, 661, 663, 664, 674, 676, 677, 697, 699, 701, 714, 715, 717, 802, 814, 815, 831, 837, 849, 865, 876, 877, 880, 881], "statsmodel": [46, 66, 75, 78, 79, 80, 91, 130, 150, 151, 152, 154, 257, 271, 302, 320, 354, 389, 398, 399, 402, 404, 571, 575, 610, 615, 629, 660, 664, 695, 701, 713, 715, 718, 828, 862], "std": [69, 70, 72, 149, 150, 151, 152, 154, 397, 398, 399, 402, 404, 715, 716, 717, 718], "std_error": 715, "steel": 404, "step": [16, 21, 34, 71, 72, 73, 76, 91, 150, 151, 154, 225, 307, 713, 715, 716, 717, 719, 778], "step1": 150, "step14": 151, "step2": 150, "steven": 714, "still": [69, 715], "stillman": 714, "stock": 399, "stop": [154, 708], "store": [97, 717, 718], "stori": 150, "str": [1, 7, 9, 13, 17, 18, 19, 21, 22, 23, 25, 26, 27, 32, 36, 53, 56, 86, 87, 88, 89, 97, 103, 108, 109, 110, 119, 133, 138, 145, 151, 156, 162, 168, 173, 174, 179, 183, 194, 197, 199, 200, 205, 207, 210, 214, 215, 216, 223, 225, 226, 227, 234, 235, 236, 237, 238, 248, 249, 250, 259, 260, 261, 268, 270, 272, 273, 276, 277, 278, 290, 305, 306, 308, 310, 322, 328, 329, 330, 334, 341, 357, 362, 363, 366, 367, 368, 377, 392, 394, 397, 405, 406, 411, 414, 419, 421, 422, 427, 429, 430, 437, 440, 445, 448, 453, 455, 457, 461, 468, 489, 490, 491, 494, 497, 498, 499, 502, 505, 506, 507, 510, 514, 515, 516, 520, 524, 525, 526, 529, 532, 533, 534, 537, 558, 575, 592, 595, 615, 617, 647, 664, 682, 701, 703, 717, 731, 735, 744, 748, 758, 761, 764, 767, 768, 769, 772, 773, 775, 778, 779, 780, 782, 783, 790, 793, 794, 795, 798, 799, 805, 806, 810, 816, 821, 833, 834, 840, 841, 845, 850, 855, 872, 874, 877, 878, 879], "straight": 399, "strategi": [72, 398], "strength": 151, "string": [77, 83, 86, 87, 88, 89, 133, 154, 183, 305, 357, 392, 402, 455, 575, 615, 664, 701, 715, 716, 764, 769, 775, 780, 790, 795], "strong": [150, 151], "stronger": 715, "strongli": [150, 715], "structur": [73, 77, 154, 216, 220, 225, 227, 231, 236, 238, 243, 250, 254, 261, 265, 397, 398, 403, 480, 491, 499, 507, 516, 526, 534, 715, 717, 718, 764, 773, 775, 783, 790, 799, 821, 855], "student": [85, 395], "studi": [154, 714], "style": 715, "sub": 69, "subject": [151, 152], "submit": 90, "submodel": 152, "subset": [69, 70, 397], "subsidi": 151, "substanti": [151, 398, 715], "substitut": 717, "subtract": [69, 193, 196, 205, 209, 395, 398, 413, 750, 754, 758], "success": 154, "suffici": [288, 323, 325, 814], "suggest": [398, 719], "suitabl": [16, 20], "sum": [40, 47, 60, 67, 120, 124, 131, 149, 288, 291, 296, 303, 334, 342, 347, 355, 362, 378, 383, 390, 395, 403, 404, 413, 552, 557, 563, 573, 587, 588, 594, 601, 612, 641, 646, 652, 662, 676, 681, 687, 698, 715, 719, 818, 823, 830, 852, 857, 864], "sum_": [73, 155, 161, 167, 173, 193, 196, 205, 234, 395, 403, 405, 421, 439, 496, 719, 750, 758, 802, 815, 837, 849], "sum__i": [829, 863], "sum_i": [825, 829, 859, 863], "sum_j": [825, 829, 859, 863], "summar": 150, "summari": [33, 54, 69, 70, 72, 77, 149, 150, 151, 152, 154, 397, 398, 399, 402, 404, 715, 716, 717, 718], "sun": 72, "super": 397, "suppli": [220, 231, 243, 254, 265, 494, 502, 510, 520, 529, 537, 773, 783, 799], "support": [25, 46, 66, 71, 77, 79, 97, 130, 151, 173, 179, 205, 214, 225, 236, 248, 257, 259, 271, 302, 320, 354, 389, 397, 403, 405, 421, 429, 455, 489, 497, 505, 512, 514, 524, 532, 571, 610, 629, 660, 695, 713, 715, 716, 717, 719, 731, 744, 758, 767, 778, 793, 828, 862], "supportskeysandgetitem": 891, "suppress": [21, 69, 235], "sur": [71, 72, 73, 77, 91, 713, 715, 716, 717, 718], "sure": [718, 790], "surround": [152, 716, 769, 780, 795], "survei": [150, 152], "svd": 77, "svetlana": 714, "sw": 715, "sw_intercept": 715, "sw_lnemp": 715, "sw_lnhwy": 715, "sw_lnpc": 715, "sw_lnutil": 715, "sw_lnwater": 715, "sw_unemp": 715, "swidinski": 151, "switch": [77, 78], "syntax": [19, 23, 27, 92, 152, 216, 227, 238, 250, 261, 399, 491, 499, 507, 526, 534, 715, 716, 717, 718, 769, 780, 795], "system": [77, 91, 714, 715, 716], "system_2sl": 717, "system_2sls_r": 717, "system_3sl": 717, "system_3sls_r": 717, "system_correct": 715, "system_gmm": 717, "system_gmm_r": 717, "systemfit": 714, "systemresult": [718, 767, 793], "t": [20, 39, 43, 48, 59, 63, 68, 69, 70, 72, 73, 77, 85, 106, 123, 132, 149, 150, 151, 152, 154, 274, 295, 304, 321, 326, 346, 356, 364, 382, 391, 397, 398, 399, 402, 403, 404, 405, 421, 496, 497, 543, 562, 574, 578, 600, 613, 630, 632, 651, 663, 667, 686, 699, 715, 716, 717, 718, 719, 786, 803, 822, 831, 838, 856, 865], "t_": [395, 403], "tabl": [46, 66, 84, 85, 86, 87, 88, 89, 130, 271, 302, 320, 354, 389, 402, 571, 610, 629, 660, 695, 715, 828, 862], "take": [17, 21, 25, 152, 395, 398, 402, 715], "taken": [84, 85, 395, 514], "target": [241, 786, 787], "task": 90, "tax": 151, "technic": [151, 715], "techniqu": 402, "tedata": 404, "telcm": [69, 70], "telecom": [69, 70], "tenur": [151, 715, 718], "tenuresq": 715, "term": [73, 104, 115, 282, 335, 372, 395, 398, 403, 719, 825, 859], "test": [16, 17, 19, 20, 21, 23, 24, 25, 27, 35, 55, 69, 71, 72, 73, 77, 91, 115, 133, 151, 153, 269, 273, 282, 288, 305, 323, 324, 325, 334, 335, 352, 357, 358, 359, 360, 362, 372, 392, 397, 398, 399, 401, 402, 404, 495, 503, 511, 521, 530, 538, 552, 553, 575, 587, 588, 589, 615, 641, 642, 664, 676, 677, 701, 711, 714, 715, 718, 785, 802, 814, 815, 837, 849, 872, 876, 877, 878, 880, 881], "test_linear_constraint": 77, "text": [83, 88, 89, 153, 401], "textrm": [395, 403], "texttt": 403, "than": [69, 73, 77, 92, 150, 151, 154, 324, 352, 402, 403, 514, 541, 716, 717], "thei": [69, 150, 151, 152, 154, 395, 398, 399, 403, 404, 459, 564, 602, 653, 688, 715, 716], "them": [404, 715], "themselv": 69, "theori": [398, 402], "theta": [133, 305, 357, 392, 398, 403, 575, 615, 664, 701], "theta_": 403, "theta_i": 398, "thi": [69, 70, 71, 72, 73, 77, 79, 88, 92, 97, 115, 118, 149, 150, 151, 152, 154, 196, 220, 231, 243, 254, 265, 273, 282, 286, 335, 339, 358, 372, 375, 395, 397, 398, 399, 400, 401, 402, 403, 404, 480, 491, 495, 499, 503, 505, 507, 511, 512, 514, 516, 521, 523, 526, 530, 534, 538, 541, 542, 544, 545, 546, 555, 566, 567, 568, 579, 580, 581, 591, 604, 606, 607, 633, 634, 635, 644, 655, 656, 657, 668, 669, 670, 679, 690, 691, 692, 713, 715, 716, 717, 718, 719, 750, 754, 758, 815, 849, 891], "third": [73, 715], "those": [150, 152, 154, 399, 715, 716], "though": 715, "three": [71, 72, 73, 77, 91, 149, 150, 395, 397, 403, 455, 489, 505, 514, 713, 715, 718, 764], "thro": [150, 152], "through": [77, 118, 150, 152, 153, 234, 286, 339, 375, 403, 555, 591, 644, 679, 715], "throw": 73, "thumb": [150, 151, 405, 421, 429], "ti": 403, "tild": [73, 358, 395, 403, 719, 721, 736, 744, 786], "time": [24, 69, 70, 72, 73, 76, 77, 78, 140, 144, 148, 149, 150, 151, 152, 154, 358, 360, 395, 397, 402, 403, 404, 405, 413, 421, 429, 432, 439, 447, 455, 457, 459, 461, 468, 471, 476, 488, 491, 496, 499, 504, 507, 512, 514, 516, 522, 523, 524, 526, 531, 532, 534, 540, 544, 566, 572, 579, 604, 611, 633, 655, 661, 668, 690, 697, 704, 711, 715, 716, 717, 718, 719], "time_effect": [77, 398, 512], "time_id": [398, 405, 413, 421, 439, 447], "timeeffect": [399, 516], "times1": 73, "titl": 84, "tn": 715, "to_xarrai": 397, "toarrai": 79, "todo": [395, 715], "tol": [154, 225, 767, 778, 793], "toler": [149, 767, 778, 793], "top": 140, "toronto": 151, "total": [47, 67, 131, 150, 151, 152, 154, 303, 355, 390, 395, 573, 612, 614, 662, 698, 700, 715, 829, 830, 863, 864], "total_emp": 715, "total_second": 149, "totchr": [150, 152], "tothr": [151, 397], "totrain": 151, "tr": [719, 829, 863], "trade": [16, 20, 24, 69, 71, 72, 76, 91, 713], "tradedfactormodel": [69, 71, 72, 91, 713], "tradit": 241, "train": [151, 397], "transform": [72, 395, 403, 404, 480, 491, 499, 507, 516, 526, 534, 564, 602, 653, 688, 715, 786, 789], "translat": [77, 786], "treat": [73, 92, 140, 151, 220, 231, 243, 254, 265, 294, 334, 345, 360, 362, 381, 395, 397, 455, 489, 494, 502, 505, 510, 512, 514, 516, 520, 524, 529, 532, 537, 773, 783, 799, 821, 855], "treatment": [398, 514], "trend": 398, "triangular": [71, 154, 173], "trick": 149, "trivedi": [150, 153, 714], "true": [0, 7, 17, 21, 25, 39, 59, 69, 70, 72, 77, 85, 97, 106, 115, 123, 149, 150, 155, 161, 167, 173, 183, 234, 273, 274, 282, 294, 295, 326, 335, 345, 346, 364, 372, 381, 382, 395, 397, 398, 402, 404, 405, 413, 421, 439, 447, 455, 459, 488, 489, 491, 496, 497, 499, 504, 505, 507, 512, 514, 516, 523, 524, 526, 531, 532, 534, 543, 553, 561, 562, 575, 578, 589, 599, 600, 615, 632, 642, 650, 651, 664, 667, 677, 685, 686, 701, 711, 715, 716, 717, 767, 785, 793, 803, 821, 822, 838, 855, 856], "truncat": 182, "tss": 395, "tss_": [719, 829, 863], "tstat": [150, 310, 394, 402, 617, 703], "tuck": [69, 70], "tune": 77, "tupl": [0, 2, 3, 4, 5, 7, 10, 11, 12, 14, 84, 100, 102, 135, 138, 143, 145, 155, 157, 159, 160, 161, 163, 165, 166, 167, 169, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 188, 192, 195, 198, 199, 201, 203, 204, 208, 209, 211, 213, 218, 219, 221, 222, 224, 229, 230, 232, 233, 235, 236, 240, 241, 242, 244, 245, 247, 252, 253, 255, 256, 258, 263, 264, 266, 267, 307, 405, 406, 408, 409, 410, 413, 414, 416, 417, 418, 421, 422, 424, 425, 426, 429, 430, 434, 435, 436, 439, 440, 442, 443, 444, 447, 448, 450, 451, 452, 459, 460, 463, 474, 476, 477, 478, 481, 485, 487, 489, 493, 495, 501, 503, 505, 509, 511, 514, 518, 521, 524, 528, 530, 532, 536, 538, 575, 615, 664, 701, 715, 722, 724, 726, 729, 733, 737, 739, 741, 743, 746, 749, 752, 753, 756, 757, 762, 763, 764, 775, 778, 786, 789, 790, 821, 832, 855, 867, 869, 870, 871, 882, 889, 891], "twice": [69, 151], "two": [19, 23, 27, 69, 70, 71, 72, 73, 76, 77, 91, 150, 151, 154, 212, 225, 273, 397, 398, 402, 403, 413, 489, 497, 512, 514, 516, 524, 532, 715, 716, 717, 719, 767, 769, 780, 786, 793, 795, 825, 859], "tx": [714, 715], "txt": 89, "type": [2, 5, 10, 14, 17, 19, 21, 23, 25, 27, 32, 35, 36, 46, 53, 55, 56, 66, 69, 77, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 100, 102, 106, 109, 115, 130, 133, 144, 148, 149, 150, 151, 154, 179, 180, 181, 182, 183, 194, 195, 197, 198, 207, 208, 210, 211, 213, 214, 216, 220, 221, 222, 224, 225, 227, 231, 232, 233, 235, 236, 238, 241, 243, 244, 245, 247, 248, 250, 254, 255, 256, 258, 259, 261, 265, 266, 267, 269, 270, 271, 273, 274, 277, 282, 283, 288, 294, 302, 305, 320, 323, 324, 325, 326, 329, 334, 335, 336, 345, 352, 354, 357, 358, 359, 360, 362, 364, 367, 372, 381, 389, 392, 394, 395, 397, 398, 432, 455, 457, 459, 461, 463, 464, 465, 468, 476, 489, 491, 494, 495, 497, 499, 502, 503, 505, 507, 510, 511, 514, 516, 520, 521, 524, 526, 529, 530, 532, 534, 537, 538, 540, 543, 544, 545, 546, 552, 553, 561, 566, 567, 568, 571, 575, 578, 579, 580, 581, 587, 588, 589, 599, 604, 606, 607, 610, 615, 629, 632, 633, 634, 635, 641, 642, 650, 655, 656, 657, 660, 664, 667, 668, 669, 670, 676, 677, 685, 690, 691, 692, 695, 701, 703, 704, 711, 721, 725, 728, 731, 736, 740, 744, 751, 752, 753, 755, 756, 757, 760, 762, 763, 766, 767, 769, 771, 772, 773, 777, 778, 780, 782, 783, 786, 789, 792, 793, 795, 797, 798, 799, 802, 803, 806, 814, 815, 821, 825, 828, 829, 834, 837, 838, 841, 849, 855, 859, 862, 863, 869, 870, 871, 877], "typeerror": 455, "typic": 715, "typo": [90, 715], "u": [73, 151, 395, 404], "u_": 395, "u_i": 531, "uint32": 867, "uint32arrai": 867, "unabl": 69, "unadjust": [97, 150, 151, 154, 196, 199, 214, 223, 225, 234, 248, 259, 269, 395, 397, 398, 399, 402, 404, 489, 497, 505, 514, 524, 532, 715, 716, 717, 718, 754, 767, 775, 778, 780, 793], "unbalanc": [398, 403, 489], "uncent": 719, "uncertainti": 69, "uncorrel": [151, 395, 402, 403, 719], "under": [395, 402, 552, 587, 588, 641, 676], "underbrac": 395, "underscor": 715, "underset": 395, "understand": 398, "understood": 398, "unem": 151, "unemp": 715, "unemploy": 715, "unexplain": 395, "union": [150, 151, 152, 397, 398, 402, 404, 575, 615, 664, 701, 715, 716], "uniqu": [69, 140, 151, 715, 716, 772, 782, 798], "uniti": [69, 102, 222, 233, 245, 256, 267, 395, 769, 780, 795], "univari": 183, "univers": [151, 714], "unlabel": 716, "unless": 395, "unlik": [152, 182, 241, 395, 398, 491, 499, 507, 526, 534, 719], "unmodifi": [246, 250, 261], "unobserv": 151, "unrel": [71, 73, 77, 91, 713, 715, 718, 764, 790, 836], "unreleas": 77, "unreli": [69, 77], "unrestrict": [552, 588, 641, 676, 719], "unsignedinteg": [188, 481], "unstabl": [491, 499, 507, 512, 516, 523, 526, 534], "unsurprisingli": [69, 715], "until": [21, 150, 225, 401, 409, 417, 425, 435, 443, 451, 465, 716, 717, 767, 793], "unweight": [77, 149], "up": [21, 77, 97, 398, 413], "updat": [21, 72, 76, 77, 91, 154, 234], "upper": [69, 70, 72, 106, 149, 150, 151, 152, 154, 273, 274, 326, 364, 397, 398, 399, 402, 404, 543, 578, 632, 667, 715, 716, 717, 718, 803, 838], "urban": 151, "us": [0, 7, 8, 13, 16, 17, 19, 20, 21, 23, 24, 25, 27, 32, 35, 39, 46, 53, 55, 59, 66, 71, 72, 76, 77, 78, 79, 84, 88, 92, 93, 94, 97, 102, 103, 106, 109, 110, 111, 115, 119, 123, 130, 133, 144, 145, 149, 150, 151, 153, 154, 155, 161, 167, 173, 179, 180, 181, 182, 183, 193, 196, 199, 205, 206, 209, 212, 214, 215, 216, 220, 222, 223, 225, 226, 227, 231, 233, 234, 236, 237, 238, 243, 245, 246, 248, 249, 250, 254, 256, 257, 259, 260, 261, 265, 267, 269, 271, 272, 273, 274, 277, 278, 279, 282, 287, 290, 294, 295, 302, 305, 306, 307, 308, 310, 320, 322, 326, 329, 330, 331, 335, 341, 345, 346, 354, 357, 359, 360, 363, 364, 367, 368, 369, 372, 377, 381, 382, 389, 392, 394, 395, 397, 400, 401, 402, 403, 404, 405, 413, 421, 429, 439, 455, 459, 465, 468, 480, 488, 489, 490, 491, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 506, 507, 510, 511, 512, 514, 515, 516, 520, 521, 523, 524, 525, 526, 529, 530, 531, 532, 533, 534, 537, 538, 543, 544, 545, 546, 553, 559, 561, 562, 566, 567, 568, 571, 575, 578, 579, 580, 581, 589, 596, 599, 600, 604, 606, 607, 610, 615, 617, 629, 632, 633, 634, 635, 642, 648, 650, 651, 655, 656, 657, 660, 664, 667, 668, 669, 670, 677, 683, 685, 686, 690, 691, 692, 695, 696, 701, 703, 711, 714, 717, 718, 719, 721, 723, 725, 727, 728, 730, 731, 732, 734, 735, 736, 738, 740, 742, 744, 745, 747, 748, 750, 754, 758, 759, 761, 764, 765, 767, 768, 769, 771, 773, 775, 776, 778, 779, 780, 783, 785, 786, 790, 791, 793, 794, 795, 797, 799, 802, 803, 805, 806, 807, 815, 817, 821, 822, 825, 828, 832, 833, 834, 837, 838, 840, 841, 842, 849, 851, 855, 856, 859, 862, 877], "usag": [72, 153, 401], "use_cach": [97, 149], "use_cu": [21, 69, 72], "use_lsdv": [398, 514], "use_lsmr": [77, 514], "use_t": 85, "user": [154, 715, 719], "usual": [20, 70, 73, 149, 150, 151, 154, 395, 397, 398, 402, 404, 715, 717], "ut": 715, "util": [69, 70, 91, 152, 154, 399, 715, 723, 727, 730, 734, 738, 742, 747, 751, 755, 760, 767, 771, 793, 797], "v": [70, 133, 150, 151, 152, 155, 161, 167, 173, 305, 324, 352, 357, 360, 362, 392, 395, 575, 615, 664, 701, 716, 889, 891], "v023": 714, "v1": 72, "v5": 72, "va": 715, "vac": 715, "vacdai": 715, "val": [39, 59, 123, 295, 316, 346, 382, 562, 600, 623, 651, 686, 822, 856], "valid": [133, 151, 152, 154, 199, 216, 227, 238, 250, 261, 305, 357, 392, 395, 491, 499, 507, 512, 516, 523, 526, 534, 575, 615, 664, 701, 717, 767, 778, 780, 793, 872], "valu": [0, 7, 16, 20, 21, 24, 69, 70, 71, 72, 73, 77, 84, 85, 97, 104, 108, 115, 116, 133, 149, 150, 151, 152, 154, 155, 161, 167, 173, 213, 218, 220, 225, 229, 231, 234, 235, 236, 240, 243, 246, 247, 250, 252, 254, 258, 261, 263, 265, 269, 273, 276, 282, 284, 289, 294, 305, 310, 313, 323, 324, 325, 328, 334, 335, 337, 340, 345, 352, 357, 358, 359, 360, 362, 366, 372, 373, 376, 381, 392, 394, 397, 398, 399, 400, 402, 403, 404, 405, 421, 429, 459, 464, 481, 489, 494, 495, 502, 503, 505, 510, 511, 514, 520, 521, 524, 529, 530, 532, 537, 538, 541, 542, 552, 553, 554, 561, 575, 587, 588, 589, 590, 599, 615, 617, 620, 641, 642, 643, 650, 664, 676, 677, 678, 685, 696, 701, 703, 706, 708, 711, 715, 716, 717, 718, 719, 721, 764, 765, 769, 773, 775, 776, 780, 783, 785, 787, 790, 791, 795, 799, 812, 821, 847, 855, 878, 880, 888, 889], "value_count": 398, "valueerror": [455, 708], "valuesview": 892, "vanderkamp": 151, "var": [334, 362, 457, 468, 715, 719], "var_nam": [183, 455], "var_xx": [84, 85], "vari": [150, 398, 715], "variabl": [19, 23, 27, 70, 76, 77, 78, 84, 85, 91, 92, 93, 94, 97, 105, 112, 135, 140, 141, 142, 144, 148, 149, 154, 155, 161, 167, 173, 183, 212, 216, 223, 225, 227, 234, 238, 246, 250, 257, 261, 269, 270, 273, 288, 324, 334, 352, 358, 359, 360, 362, 395, 397, 399, 402, 403, 404, 405, 413, 421, 429, 439, 447, 455, 459, 461, 464, 472, 479, 488, 489, 491, 495, 496, 499, 503, 504, 505, 507, 511, 512, 514, 516, 521, 523, 524, 526, 530, 531, 532, 534, 538, 541, 544, 545, 546, 552, 561, 566, 567, 579, 580, 581, 588, 599, 604, 606, 633, 634, 635, 641, 650, 655, 656, 668, 669, 670, 676, 685, 690, 691, 711, 714, 715, 716, 717, 718, 719, 721, 736, 740, 744, 764, 769, 771, 773, 775, 778, 780, 783, 786, 790, 795, 797, 799, 821, 829, 855, 863], "varianc": [128, 151, 160, 166, 172, 178, 204, 241, 288, 300, 351, 352, 387, 395, 398, 403, 412, 420, 428, 438, 446, 454, 488, 491, 495, 496, 499, 503, 504, 507, 511, 512, 516, 521, 523, 526, 530, 531, 532, 534, 538, 569, 608, 614, 658, 693, 700, 711, 715, 716, 814, 815, 829, 849, 863], "variance_decomposit": 398, "variant": 150, "variat": [69, 151, 403], "variou": [77, 152, 398], "vcv": [212, 223, 246], "vdot": [73, 719, 764, 775, 790], "vector": [73, 154, 241, 395, 715, 719, 750, 758, 770, 781, 786, 796], "vegood": [150, 152], "vella": [398, 715, 716], "verbeek": 398, "veri": [77, 150, 151, 404], "verifi": [70, 77, 715], "verison": 75, "version": [72, 97, 102, 115, 150, 151, 222, 233, 245, 256, 257, 267, 282, 324, 335, 372, 395, 404, 715], "vertic": [764, 775, 790], "vg": [150, 152], "vgh": [150, 152], "via": 715, "viabl": 397, "view": [188, 190, 458, 460, 463, 466, 469, 473, 474, 476, 477, 478, 715, 886, 887, 892], "violat": 715, "virtual": [73, 398, 715, 716], "vmax": 715, "vol": 714, "vserat": 715, "vt": 715, "w": [77, 193, 196, 199, 205, 223, 224, 234, 241, 288, 334, 362, 395, 403, 553, 589, 642, 677, 719, 725, 728, 731, 750, 758, 775, 814, 870], "w_": [395, 403], "w_0": 182, "w_e": 273, "w_i": [151, 180, 181, 182, 716, 717, 758, 829, 863], "w_j": 758, "wa": [69, 77, 150, 151, 152, 294, 345, 381, 395, 398, 401, 552, 561, 588, 599, 641, 650, 676, 685, 715, 721, 736, 740, 744, 821, 855], "wage": [133, 154, 216, 227, 238, 250, 261, 305, 357, 392, 398, 402, 715, 716, 717], "wage_panel": [398, 402, 575, 615, 664, 701], "wai": [19, 23, 27, 69, 70, 76, 77, 97, 150, 154, 199, 209, 214, 223, 225, 234, 248, 259, 395, 403, 413, 465, 489, 512, 514, 524, 531, 532, 715, 767, 769, 780, 793, 795], "wald": [35, 55, 133, 150, 269, 305, 357, 359, 392, 395, 553, 575, 589, 615, 642, 664, 677, 701, 877], "wald_r": [133, 305, 357, 392, 575, 615, 664, 701], "wald_test": 77, "waldteststatist": [35, 55, 115, 133, 150, 151, 273, 282, 288, 305, 323, 324, 325, 334, 335, 352, 357, 358, 359, 360, 362, 372, 392, 552, 553, 575, 587, 588, 589, 615, 641, 642, 664, 676, 677, 701, 802, 814, 815, 837, 849, 872], "wang": 714, "want": 403, "warn": [77, 397, 717], "warrant": 151, "water": 715, "waugh": 92, "wc": 715, "wc_unemp": 715, "we": 398, "weak": [150, 151], "weaker": 717, "websit": [69, 70], "wed": 402, "weekli": 151, "weighed_unemp": 715, "weight": [21, 69, 71, 73, 77, 78, 92, 97, 102, 133, 134, 135, 153, 154, 173, 180, 181, 182, 193, 194, 196, 197, 199, 205, 206, 207, 209, 210, 212, 216, 222, 223, 224, 225, 227, 233, 234, 238, 241, 245, 246, 250, 256, 257, 261, 267, 268, 273, 305, 306, 307, 308, 309, 357, 361, 392, 393, 397, 398, 400, 403, 405, 421, 459, 465, 468, 488, 489, 491, 496, 499, 504, 507, 512, 516, 523, 526, 531, 534, 544, 545, 546, 566, 567, 568, 575, 576, 579, 580, 581, 604, 606, 607, 615, 616, 633, 634, 635, 655, 656, 657, 664, 665, 668, 669, 670, 690, 691, 692, 701, 702, 704, 711, 715, 717, 721, 725, 728, 731, 736, 744, 750, 751, 753, 754, 755, 757, 758, 760, 763, 764, 769, 775, 778, 780, 790, 795, 825, 829, 832, 833, 834, 835, 859, 863, 866], "weight_config": [223, 227, 234, 238, 775, 780], "weight_typ": [150, 154, 223, 227, 234, 238, 717, 775, 780], "weighted_mod": 716, "welcom": 90, "well": [69, 70, 71, 72, 77, 151, 153, 334, 362, 395, 398, 401, 713, 715], "were": [73, 77, 273, 397, 398, 719], "west": [69, 71, 72, 154, 173, 179, 205, 405, 407, 415, 421, 423, 429, 431, 441, 449, 505, 514, 524, 532, 714, 715, 731, 744, 758], "western": 714, "westinghous": 404, "wh": 395, "what": [152, 398], "wheel": [77, 78, 79], "when": [0, 7, 21, 69, 70, 71, 72, 73, 77, 78, 92, 97, 133, 145, 149, 150, 151, 152, 154, 179, 183, 199, 205, 220, 231, 236, 243, 246, 254, 257, 265, 269, 294, 305, 345, 357, 360, 381, 392, 395, 397, 398, 399, 400, 401, 402, 403, 404, 455, 459, 489, 494, 497, 502, 505, 510, 514, 520, 524, 529, 532, 537, 551, 561, 575, 586, 599, 615, 640, 650, 664, 675, 685, 701, 715, 716, 717, 718, 719, 721, 736, 740, 744, 758, 764, 767, 769, 773, 778, 780, 783, 790, 793, 795, 799, 802, 815, 821, 837, 849, 855], "whenev": [77, 246, 564, 602, 653, 688], "where": [16, 20, 24, 69, 71, 72, 73, 77, 92, 133, 148, 149, 150, 151, 152, 154, 155, 161, 167, 173, 182, 193, 196, 205, 223, 225, 234, 241, 246, 269, 273, 288, 305, 310, 323, 324, 325, 334, 352, 357, 358, 359, 360, 362, 392, 394, 395, 397, 398, 399, 402, 403, 405, 413, 421, 439, 447, 480, 488, 491, 495, 499, 503, 507, 511, 512, 516, 521, 526, 530, 531, 534, 538, 552, 553, 575, 587, 588, 589, 615, 617, 641, 642, 664, 676, 677, 701, 703, 715, 716, 717, 718, 719, 721, 725, 728, 731, 736, 740, 744, 750, 754, 758, 764, 769, 773, 775, 780, 783, 790, 795, 799, 802, 814, 815, 821, 825, 829, 837, 849, 855, 859, 863, 871], "wherea": 398, "whether": [16, 17, 19, 20, 21, 23, 25, 69, 71, 77, 85, 92, 97, 111, 133, 137, 150, 151, 154, 155, 161, 167, 173, 183, 193, 196, 199, 205, 209, 214, 225, 236, 248, 259, 279, 288, 294, 305, 323, 325, 331, 345, 357, 358, 359, 360, 369, 381, 392, 395, 399, 403, 405, 413, 421, 429, 439, 447, 455, 459, 489, 491, 497, 499, 505, 507, 512, 513, 514, 516, 519, 522, 523, 524, 526, 532, 534, 561, 575, 599, 615, 650, 664, 685, 701, 719, 721, 750, 754, 758, 767, 785, 793, 807, 814, 821, 842, 855], "which": [24, 69, 71, 72, 73, 77, 92, 149, 150, 151, 152, 154, 216, 220, 225, 227, 231, 238, 243, 246, 250, 254, 261, 265, 269, 294, 345, 381, 395, 397, 398, 399, 400, 402, 403, 404, 494, 502, 505, 510, 512, 514, 516, 520, 524, 529, 532, 537, 564, 602, 653, 688, 715, 716, 717, 718, 719, 758, 764, 767, 770, 771, 773, 778, 781, 783, 790, 793, 796, 797, 799, 821, 855], "while": [69, 151, 154, 399, 400, 402, 403, 496, 514, 719], "white": [151, 398, 439, 489, 505, 514, 524, 532, 715], "whitnei": 714, "whose": [273, 398], "why": 872, "wi": 715, "widehat": 719, "wilei": 714, "william": [714, 802, 815, 837, 849], "winner": [69, 70], "wise": [398, 403, 544, 546, 579, 581, 633, 635, 668, 670], "within": [154, 397, 398, 399, 400, 402, 404, 489, 505, 546, 568, 581, 607, 635, 657, 670, 692], "without": [133, 213, 247, 258, 305, 357, 392, 404, 575, 615, 664, 701, 717], "wl": [151, 396, 399, 459, 489, 713], "wlog": 273, "woman": 151, "wool10": [395, 714], "wool12": [395, 714], "wooldridg": [77, 150, 151, 153, 358, 359, 360, 395, 398, 401, 714, 715, 716, 717], "wooldridge_overid": 151, "wooldridge_regress": [150, 151], "wooldridge_scor": 150, "word": 150, "work": [151, 397, 398, 402, 714, 715, 717], "worker": [149, 715], "world": 151, "wors": 395, "worth": [150, 151, 400, 715], "would": [77, 150, 151, 152, 273, 395, 398, 399, 719, 764, 790], "wrap": 183, "write": [73, 77, 395, 719], "written": 395, "wrong": 455, "wsw": 395, "wu": [150, 362, 395], "wu_hausman": 150, "wv": 715, "wy": 715, "x": [77, 92, 149, 151, 152, 155, 161, 167, 173, 179, 183, 195, 198, 199, 208, 211, 212, 213, 223, 224, 235, 241, 246, 247, 258, 395, 397, 398, 399, 403, 405, 413, 421, 429, 439, 447, 455, 488, 489, 497, 505, 514, 524, 532, 544, 546, 579, 581, 633, 635, 668, 670, 711, 715, 717, 719, 721, 725, 728, 731, 736, 740, 744, 752, 753, 756, 757, 762, 763, 764, 775, 786, 789, 790], "x0": [21, 236], "x1": [133, 152, 305, 357, 392, 491, 499, 507, 516, 526, 534, 575, 615, 664, 701, 717], "x1_1": [769, 780, 795], "x1_2": [769, 780], "x2": [133, 152, 305, 357, 392, 575, 615, 664, 701, 717], "x2_1": [769, 780, 795], "x2_2": [769, 780], "x3": [133, 152, 305, 357, 392, 575, 615, 664, 701], "x4": 152, "x5": 152, "x_": [154, 234, 359, 395, 398, 402, 403, 405, 421, 496, 504, 512, 523, 531, 545, 546, 580, 581, 634, 635, 669, 670, 719, 764, 775, 790], "x_1": [717, 764, 775, 790], "x_2": [717, 764, 775, 790], "x_i": [92, 149, 234, 241, 439, 715], "x_j": 360, "x_k": [764, 775, 790], "xarrai": [183, 455], "xe": [0, 7], "xi": [395, 405, 421, 719], "xi_": [155, 403, 405, 421], "xi_t": [405, 421], "xname": [84, 85], "xpersq": 151, "xx": [403, 405, 413, 421, 439, 447], "xxhash": 97, "y": [77, 84, 85, 92, 149, 152, 155, 161, 167, 173, 199, 212, 213, 223, 224, 235, 241, 246, 247, 258, 395, 398, 399, 403, 404, 405, 413, 421, 429, 439, 447, 488, 489, 491, 497, 499, 505, 507, 514, 516, 524, 526, 532, 534, 544, 546, 579, 581, 633, 635, 668, 670, 711, 715, 719, 764, 775, 786, 790], "y1": [717, 769, 780, 795], "y1_pred": 717, "y1_x1": 717, "y1_y2": 717, "y2": [717, 769, 780, 795], "y2_pred": 717, "y2_x2": 717, "y2_y1": 717, "y_": [234, 395, 398, 402, 403, 496, 504, 512, 523, 531, 545, 546, 580, 581, 634, 635, 669, 670, 719, 764, 775, 790, 825, 859], "y_1": [717, 764, 775, 790], "y_2": [717, 764, 775, 790], "y_i": [92, 149, 154, 234, 241, 359, 715, 716], "y_k": [764, 775, 790], "year": [69, 70, 150, 151, 152, 397, 398, 399, 402, 404, 575, 615, 664, 701, 715], "year_cat": 397, "year_str": 397, "yname": [84, 85], "you": [77, 397], "young": 398, "your": 90, "yr": [151, 715], "z": [77, 92, 152, 155, 161, 167, 173, 181, 195, 198, 199, 208, 211, 212, 213, 223, 224, 235, 241, 246, 247, 258, 334, 352, 358, 362, 395, 488, 719, 725, 728, 731, 753, 754, 757, 763, 764, 775, 869, 870], "z1": [152, 769, 780], "z2": [152, 769, 780], "z3": 152, "z_": [154, 234, 395, 719, 750, 758, 775], "z_i": [92, 149, 155, 161, 173, 181, 182, 193, 196, 205, 241, 288], "zero": [24, 35, 55, 69, 73, 115, 269, 282, 288, 335, 372, 395, 552, 575, 587, 588, 615, 641, 664, 676, 701, 715, 802, 814, 837, 869, 870], "zhenyu": 714, "zw": [223, 719, 725, 728, 731, 775], "zwz": 395}, "titles": ["linearmodels.asset_pricing.covariance.HeteroskedasticCovariance", "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.config", "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.cov", "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.inv_jacobian", "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.jacobian", "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.s", "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.square", "linearmodels.asset_pricing.covariance.KernelCovariance", "linearmodels.asset_pricing.covariance.KernelCovariance.bandwidth", "linearmodels.asset_pricing.covariance.KernelCovariance.config", "linearmodels.asset_pricing.covariance.KernelCovariance.cov", "linearmodels.asset_pricing.covariance.KernelCovariance.inv_jacobian", "linearmodels.asset_pricing.covariance.KernelCovariance.jacobian", "linearmodels.asset_pricing.covariance.KernelCovariance.kernel", "linearmodels.asset_pricing.covariance.KernelCovariance.s", "linearmodels.asset_pricing.covariance.KernelCovariance.square", "linearmodels.asset_pricing.model.LinearFactorModel", "linearmodels.asset_pricing.model.LinearFactorModel.fit", "linearmodels.asset_pricing.model.LinearFactorModel.formula", "linearmodels.asset_pricing.model.LinearFactorModel.from_formula", "linearmodels.asset_pricing.model.LinearFactorModelGMM", "linearmodels.asset_pricing.model.LinearFactorModelGMM.fit", "linearmodels.asset_pricing.model.LinearFactorModelGMM.formula", "linearmodels.asset_pricing.model.LinearFactorModelGMM.from_formula", "linearmodels.asset_pricing.model.TradedFactorModel", "linearmodels.asset_pricing.model.TradedFactorModel.fit", "linearmodels.asset_pricing.model.TradedFactorModel.formula", "linearmodels.asset_pricing.model.TradedFactorModel.from_formula", "linearmodels.asset_pricing.results.GMMFactorModelResults", "linearmodels.asset_pricing.results.GMMFactorModelResults.alphas", "linearmodels.asset_pricing.results.GMMFactorModelResults.betas", "linearmodels.asset_pricing.results.GMMFactorModelResults.cov", "linearmodels.asset_pricing.results.GMMFactorModelResults.cov_estimator", "linearmodels.asset_pricing.results.GMMFactorModelResults.full_summary", "linearmodels.asset_pricing.results.GMMFactorModelResults.iterations", "linearmodels.asset_pricing.results.GMMFactorModelResults.j_statistic", "linearmodels.asset_pricing.results.GMMFactorModelResults.name", "linearmodels.asset_pricing.results.GMMFactorModelResults.nobs", "linearmodels.asset_pricing.results.GMMFactorModelResults.params", "linearmodels.asset_pricing.results.GMMFactorModelResults.pvalues", "linearmodels.asset_pricing.results.GMMFactorModelResults.residual_ss", "linearmodels.asset_pricing.results.GMMFactorModelResults.risk_premia", "linearmodels.asset_pricing.results.GMMFactorModelResults.risk_premia_se", "linearmodels.asset_pricing.results.GMMFactorModelResults.risk_premia_tstats", "linearmodels.asset_pricing.results.GMMFactorModelResults.rsquared", "linearmodels.asset_pricing.results.GMMFactorModelResults.std_errors", "linearmodels.asset_pricing.results.GMMFactorModelResults.summary", "linearmodels.asset_pricing.results.GMMFactorModelResults.total_ss", "linearmodels.asset_pricing.results.GMMFactorModelResults.tstats", "linearmodels.asset_pricing.results.LinearFactorModelResults", "linearmodels.asset_pricing.results.LinearFactorModelResults.alphas", "linearmodels.asset_pricing.results.LinearFactorModelResults.betas", "linearmodels.asset_pricing.results.LinearFactorModelResults.cov", "linearmodels.asset_pricing.results.LinearFactorModelResults.cov_estimator", "linearmodels.asset_pricing.results.LinearFactorModelResults.full_summary", "linearmodels.asset_pricing.results.LinearFactorModelResults.j_statistic", "linearmodels.asset_pricing.results.LinearFactorModelResults.name", "linearmodels.asset_pricing.results.LinearFactorModelResults.nobs", "linearmodels.asset_pricing.results.LinearFactorModelResults.params", "linearmodels.asset_pricing.results.LinearFactorModelResults.pvalues", "linearmodels.asset_pricing.results.LinearFactorModelResults.residual_ss", "linearmodels.asset_pricing.results.LinearFactorModelResults.risk_premia", "linearmodels.asset_pricing.results.LinearFactorModelResults.risk_premia_se", "linearmodels.asset_pricing.results.LinearFactorModelResults.risk_premia_tstats", "linearmodels.asset_pricing.results.LinearFactorModelResults.rsquared", "linearmodels.asset_pricing.results.LinearFactorModelResults.std_errors", "linearmodels.asset_pricing.results.LinearFactorModelResults.summary", "linearmodels.asset_pricing.results.LinearFactorModelResults.total_ss", "linearmodels.asset_pricing.results.LinearFactorModelResults.tstats", "Examples", "Using Formulas", "Linear Factor Models for Asset Pricing", "Introduction", "Formulas and Mathematical Detail", "Module Reference", "Change Log", "Version 3.0", "Version 4", "Verison 5.5", "Version 6.0", "Version 7.0", "Compatibility", "linearmodels.compat.statsmodels.Summary", "linearmodels.compat.statsmodels.Summary.add_extra_txt", "linearmodels.compat.statsmodels.Summary.add_table_2cols", "linearmodels.compat.statsmodels.Summary.add_table_params", "linearmodels.compat.statsmodels.Summary.as_csv", "linearmodels.compat.statsmodels.Summary.as_html", "linearmodels.compat.statsmodels.Summary.as_latex", "linearmodels.compat.statsmodels.Summary.as_text", "Contributing", "linearmodels", "linearmodels.iv.absorbing.AbsorbingLS", "linearmodels.iv.absorbing.AbsorbingLS.absorbed_dependent", "linearmodels.iv.absorbing.AbsorbingLS.absorbed_exog", "linearmodels.iv.absorbing.AbsorbingLS.dependent", "linearmodels.iv.absorbing.AbsorbingLS.exog", "linearmodels.iv.absorbing.AbsorbingLS.fit", "linearmodels.iv.absorbing.AbsorbingLS.has_constant", "linearmodels.iv.absorbing.AbsorbingLS.instruments", "linearmodels.iv.absorbing.AbsorbingLS.resids", "linearmodels.iv.absorbing.AbsorbingLS.weights", "linearmodels.iv.absorbing.AbsorbingLS.wresids", "linearmodels.iv.absorbing.AbsorbingLSResults", "linearmodels.iv.absorbing.AbsorbingLSResults.absorbed_effects", "linearmodels.iv.absorbing.AbsorbingLSResults.absorbed_rsquared", "linearmodels.iv.absorbing.AbsorbingLSResults.conf_int", "linearmodels.iv.absorbing.AbsorbingLSResults.cov", "linearmodels.iv.absorbing.AbsorbingLSResults.cov_config", "linearmodels.iv.absorbing.AbsorbingLSResults.cov_estimator", "linearmodels.iv.absorbing.AbsorbingLSResults.cov_type", "linearmodels.iv.absorbing.AbsorbingLSResults.debiased", "linearmodels.iv.absorbing.AbsorbingLSResults.df_absorbed", "linearmodels.iv.absorbing.AbsorbingLSResults.df_model", "linearmodels.iv.absorbing.AbsorbingLSResults.df_resid", "linearmodels.iv.absorbing.AbsorbingLSResults.f_statistic", "linearmodels.iv.absorbing.AbsorbingLSResults.fitted_values", "linearmodels.iv.absorbing.AbsorbingLSResults.has_constant", "linearmodels.iv.absorbing.AbsorbingLSResults.idiosyncratic", "linearmodels.iv.absorbing.AbsorbingLSResults.method", "linearmodels.iv.absorbing.AbsorbingLSResults.model_ss", "linearmodels.iv.absorbing.AbsorbingLSResults.nobs", "linearmodels.iv.absorbing.AbsorbingLSResults.params", "linearmodels.iv.absorbing.AbsorbingLSResults.pvalues", "linearmodels.iv.absorbing.AbsorbingLSResults.resid_ss", "linearmodels.iv.absorbing.AbsorbingLSResults.resids", "linearmodels.iv.absorbing.AbsorbingLSResults.rsquared", "linearmodels.iv.absorbing.AbsorbingLSResults.rsquared_adj", "linearmodels.iv.absorbing.AbsorbingLSResults.s2", "linearmodels.iv.absorbing.AbsorbingLSResults.std_errors", "linearmodels.iv.absorbing.AbsorbingLSResults.summary", "linearmodels.iv.absorbing.AbsorbingLSResults.total_ss", "linearmodels.iv.absorbing.AbsorbingLSResults.tstats", "linearmodels.iv.absorbing.AbsorbingLSResults.wald_test", "linearmodels.iv.absorbing.AbsorbingLSResults.wresids", "linearmodels.iv.absorbing.AbsorbingRegressor", "linearmodels.iv.absorbing.AbsorbingRegressor.approx_rank", "linearmodels.iv.absorbing.AbsorbingRegressor.has_constant", "linearmodels.iv.absorbing.AbsorbingRegressor.hash", "linearmodels.iv.absorbing.AbsorbingRegressor.regressors", "linearmodels.iv.absorbing.Interaction", "linearmodels.iv.absorbing.Interaction.cat", "linearmodels.iv.absorbing.Interaction.cont", "linearmodels.iv.absorbing.Interaction.drop", "linearmodels.iv.absorbing.Interaction.from_frame", "linearmodels.iv.absorbing.Interaction.hash", "linearmodels.iv.absorbing.Interaction.isnull", "linearmodels.iv.absorbing.Interaction.nobs", "linearmodels.iv.absorbing.Interaction.sparse", "Absorbing Regression", "Further Examples", "Basic Examples", "Using formulas to specify models", "Instrumental Variable Estimation", "Introduction", "linearmodels.iv.covariance.ClusteredCovariance", "linearmodels.iv.covariance.ClusteredCovariance.config", "linearmodels.iv.covariance.ClusteredCovariance.cov", "linearmodels.iv.covariance.ClusteredCovariance.debiased", "linearmodels.iv.covariance.ClusteredCovariance.s", "linearmodels.iv.covariance.ClusteredCovariance.s2", "linearmodels.iv.covariance.HeteroskedasticCovariance", "linearmodels.iv.covariance.HeteroskedasticCovariance.config", "linearmodels.iv.covariance.HeteroskedasticCovariance.cov", "linearmodels.iv.covariance.HeteroskedasticCovariance.debiased", "linearmodels.iv.covariance.HeteroskedasticCovariance.s", "linearmodels.iv.covariance.HeteroskedasticCovariance.s2", "linearmodels.iv.covariance.HomoskedasticCovariance", "linearmodels.iv.covariance.HomoskedasticCovariance.config", "linearmodels.iv.covariance.HomoskedasticCovariance.cov", "linearmodels.iv.covariance.HomoskedasticCovariance.debiased", "linearmodels.iv.covariance.HomoskedasticCovariance.s", "linearmodels.iv.covariance.HomoskedasticCovariance.s2", "linearmodels.iv.covariance.KernelCovariance", "linearmodels.iv.covariance.KernelCovariance.config", "linearmodels.iv.covariance.KernelCovariance.cov", "linearmodels.iv.covariance.KernelCovariance.debiased", "linearmodels.iv.covariance.KernelCovariance.s", "linearmodels.iv.covariance.KernelCovariance.s2", "linearmodels.iv.covariance.kernel_optimal_bandwidth", "linearmodels.iv.covariance.kernel_weight_bartlett", "linearmodels.iv.covariance.kernel_weight_parzen", "linearmodels.iv.covariance.kernel_weight_quadratic_spectral", "linearmodels.iv.data.IVData", "linearmodels.iv.data.IVData.cols", "linearmodels.iv.data.IVData.drop", "linearmodels.iv.data.IVData.isnull", "linearmodels.iv.data.IVData.labels", "linearmodels.iv.data.IVData.ndarray", "linearmodels.iv.data.IVData.ndim", "linearmodels.iv.data.IVData.pandas", "linearmodels.iv.data.IVData.rows", "linearmodels.iv.data.IVData.shape", "linearmodels.iv.gmm.HeteroskedasticWeightMatrix", "linearmodels.iv.gmm.HeteroskedasticWeightMatrix.config", "linearmodels.iv.gmm.HeteroskedasticWeightMatrix.weight_matrix", "linearmodels.iv.gmm.HomoskedasticWeightMatrix", "linearmodels.iv.gmm.HomoskedasticWeightMatrix.config", "linearmodels.iv.gmm.HomoskedasticWeightMatrix.weight_matrix", "linearmodels.iv.gmm.IVGMMCovariance", "linearmodels.iv.gmm.IVGMMCovariance.config", "linearmodels.iv.gmm.IVGMMCovariance.cov", "linearmodels.iv.gmm.IVGMMCovariance.debiased", "linearmodels.iv.gmm.IVGMMCovariance.s", "linearmodels.iv.gmm.IVGMMCovariance.s2", "linearmodels.iv.gmm.KernelWeightMatrix", "linearmodels.iv.gmm.KernelWeightMatrix.bandwidth", "linearmodels.iv.gmm.KernelWeightMatrix.config", "linearmodels.iv.gmm.KernelWeightMatrix.weight_matrix", "linearmodels.iv.gmm.OneWayClusteredWeightMatrix", "linearmodels.iv.gmm.OneWayClusteredWeightMatrix.config", "linearmodels.iv.gmm.OneWayClusteredWeightMatrix.weight_matrix", "linearmodels.iv.model.IV2SLS", "linearmodels.iv.model.IV2SLS.estimate_parameters", "linearmodels.iv.model.IV2SLS.fit", "linearmodels.iv.model.IV2SLS.formula", "linearmodels.iv.model.IV2SLS.from_formula", "linearmodels.iv.model.IV2SLS.has_constant", "linearmodels.iv.model.IV2SLS.isnull", "linearmodels.iv.model.IV2SLS.notnull", "linearmodels.iv.model.IV2SLS.predict", "linearmodels.iv.model.IV2SLS.resids", "linearmodels.iv.model.IV2SLS.wresids", "linearmodels.iv.model.IVGMM", "linearmodels.iv.model.IVGMM.estimate_parameters", "linearmodels.iv.model.IVGMM.fit", "linearmodels.iv.model.IVGMM.formula", "linearmodels.iv.model.IVGMM.from_formula", "linearmodels.iv.model.IVGMM.has_constant", "linearmodels.iv.model.IVGMM.isnull", "linearmodels.iv.model.IVGMM.notnull", "linearmodels.iv.model.IVGMM.predict", "linearmodels.iv.model.IVGMM.resids", "linearmodels.iv.model.IVGMM.wresids", "linearmodels.iv.model.IVGMMCUE", "linearmodels.iv.model.IVGMMCUE.estimate_parameters", "linearmodels.iv.model.IVGMMCUE.fit", "linearmodels.iv.model.IVGMMCUE.formula", "linearmodels.iv.model.IVGMMCUE.from_formula", "linearmodels.iv.model.IVGMMCUE.has_constant", "linearmodels.iv.model.IVGMMCUE.isnull", "linearmodels.iv.model.IVGMMCUE.j", "linearmodels.iv.model.IVGMMCUE.notnull", "linearmodels.iv.model.IVGMMCUE.predict", "linearmodels.iv.model.IVGMMCUE.resids", "linearmodels.iv.model.IVGMMCUE.wresids", "linearmodels.iv.model.IVLIML", "linearmodels.iv.model.IVLIML.estimate_parameters", "linearmodels.iv.model.IVLIML.fit", "linearmodels.iv.model.IVLIML.formula", "linearmodels.iv.model.IVLIML.from_formula", "linearmodels.iv.model.IVLIML.has_constant", "linearmodels.iv.model.IVLIML.isnull", "linearmodels.iv.model.IVLIML.notnull", "linearmodels.iv.model.IVLIML.predict", "linearmodels.iv.model.IVLIML.resids", "linearmodels.iv.model.IVLIML.wresids", "linearmodels.iv.model._OLS", "linearmodels.iv.model._OLS.estimate_parameters", "linearmodels.iv.model._OLS.fit", "linearmodels.iv.model._OLS.formula", "linearmodels.iv.model._OLS.from_formula", "linearmodels.iv.model._OLS.has_constant", "linearmodels.iv.model._OLS.isnull", "linearmodels.iv.model._OLS.notnull", "linearmodels.iv.model._OLS.predict", "linearmodels.iv.model._OLS.resids", "linearmodels.iv.model._OLS.wresids", "linearmodels.iv.results.FirstStageResults", "linearmodels.iv.results.FirstStageResults.diagnostics", "linearmodels.iv.results.FirstStageResults.individual", "linearmodels.iv.results.FirstStageResults.summary", "linearmodels.iv.results.IVGMMResults", "linearmodels.iv.results.IVGMMResults.c_stat", "linearmodels.iv.results.IVGMMResults.conf_int", "linearmodels.iv.results.IVGMMResults.cov", "linearmodels.iv.results.IVGMMResults.cov_config", "linearmodels.iv.results.IVGMMResults.cov_estimator", "linearmodels.iv.results.IVGMMResults.cov_type", "linearmodels.iv.results.IVGMMResults.debiased", "linearmodels.iv.results.IVGMMResults.df_model", "linearmodels.iv.results.IVGMMResults.df_resid", "linearmodels.iv.results.IVGMMResults.f_statistic", "linearmodels.iv.results.IVGMMResults.first_stage", "linearmodels.iv.results.IVGMMResults.fitted_values", "linearmodels.iv.results.IVGMMResults.has_constant", "linearmodels.iv.results.IVGMMResults.idiosyncratic", "linearmodels.iv.results.IVGMMResults.iterations", "linearmodels.iv.results.IVGMMResults.j_stat", "linearmodels.iv.results.IVGMMResults.kappa", "linearmodels.iv.results.IVGMMResults.method", "linearmodels.iv.results.IVGMMResults.model_ss", "linearmodels.iv.results.IVGMMResults.nobs", "linearmodels.iv.results.IVGMMResults.params", "linearmodels.iv.results.IVGMMResults.predict", "linearmodels.iv.results.IVGMMResults.pvalues", "linearmodels.iv.results.IVGMMResults.resid_ss", "linearmodels.iv.results.IVGMMResults.resids", "linearmodels.iv.results.IVGMMResults.rsquared", "linearmodels.iv.results.IVGMMResults.rsquared_adj", "linearmodels.iv.results.IVGMMResults.s2", "linearmodels.iv.results.IVGMMResults.std_errors", "linearmodels.iv.results.IVGMMResults.summary", "linearmodels.iv.results.IVGMMResults.total_ss", "linearmodels.iv.results.IVGMMResults.tstats", "linearmodels.iv.results.IVGMMResults.wald_test", "linearmodels.iv.results.IVGMMResults.weight_config", "linearmodels.iv.results.IVGMMResults.weight_matrix", "linearmodels.iv.results.IVGMMResults.weight_type", "linearmodels.iv.results.IVGMMResults.wresids", "linearmodels.iv.results.IVModelComparison", "linearmodels.iv.results.IVModelComparison.cov_estimator", "linearmodels.iv.results.IVModelComparison.estimator_method", "linearmodels.iv.results.IVModelComparison.f_statistic", "linearmodels.iv.results.IVModelComparison.nobs", "linearmodels.iv.results.IVModelComparison.params", "linearmodels.iv.results.IVModelComparison.pvalues", "linearmodels.iv.results.IVModelComparison.rsquared", "linearmodels.iv.results.IVModelComparison.rsquared_adj", "linearmodels.iv.results.IVModelComparison.std_errors", "linearmodels.iv.results.IVModelComparison.summary", "linearmodels.iv.results.IVModelComparison.tstats", "linearmodels.iv.results.IVResults", "linearmodels.iv.results.IVResults.anderson_rubin", "linearmodels.iv.results.IVResults.basmann", "linearmodels.iv.results.IVResults.basmann_f", "linearmodels.iv.results.IVResults.conf_int", "linearmodels.iv.results.IVResults.cov", "linearmodels.iv.results.IVResults.cov_config", "linearmodels.iv.results.IVResults.cov_estimator", "linearmodels.iv.results.IVResults.cov_type", "linearmodels.iv.results.IVResults.debiased", "linearmodels.iv.results.IVResults.df_model", "linearmodels.iv.results.IVResults.df_resid", "linearmodels.iv.results.IVResults.durbin", "linearmodels.iv.results.IVResults.f_statistic", "linearmodels.iv.results.IVResults.first_stage", "linearmodels.iv.results.IVResults.fitted_values", "linearmodels.iv.results.IVResults.has_constant", "linearmodels.iv.results.IVResults.idiosyncratic", "linearmodels.iv.results.IVResults.kappa", "linearmodels.iv.results.IVResults.method", "linearmodels.iv.results.IVResults.model_ss", "linearmodels.iv.results.IVResults.nobs", "linearmodels.iv.results.IVResults.params", "linearmodels.iv.results.IVResults.predict", "linearmodels.iv.results.IVResults.pvalues", "linearmodels.iv.results.IVResults.resid_ss", "linearmodels.iv.results.IVResults.resids", "linearmodels.iv.results.IVResults.rsquared", "linearmodels.iv.results.IVResults.rsquared_adj", "linearmodels.iv.results.IVResults.s2", "linearmodels.iv.results.IVResults.sargan", "linearmodels.iv.results.IVResults.std_errors", "linearmodels.iv.results.IVResults.summary", "linearmodels.iv.results.IVResults.total_ss", "linearmodels.iv.results.IVResults.tstats", "linearmodels.iv.results.IVResults.wald_test", "linearmodels.iv.results.IVResults.wooldridge_overid", "linearmodels.iv.results.IVResults.wooldridge_regression", "linearmodels.iv.results.IVResults.wooldridge_score", "linearmodels.iv.results.IVResults.wresids", "linearmodels.iv.results.IVResults.wu_hausman", "linearmodels.iv.results.OLSResults", "linearmodels.iv.results.OLSResults.conf_int", "linearmodels.iv.results.OLSResults.cov", "linearmodels.iv.results.OLSResults.cov_config", "linearmodels.iv.results.OLSResults.cov_estimator", "linearmodels.iv.results.OLSResults.cov_type", "linearmodels.iv.results.OLSResults.debiased", "linearmodels.iv.results.OLSResults.df_model", "linearmodels.iv.results.OLSResults.df_resid", "linearmodels.iv.results.OLSResults.f_statistic", "linearmodels.iv.results.OLSResults.fitted_values", "linearmodels.iv.results.OLSResults.has_constant", "linearmodels.iv.results.OLSResults.idiosyncratic", "linearmodels.iv.results.OLSResults.kappa", "linearmodels.iv.results.OLSResults.method", "linearmodels.iv.results.OLSResults.model_ss", "linearmodels.iv.results.OLSResults.nobs", "linearmodels.iv.results.OLSResults.params", "linearmodels.iv.results.OLSResults.predict", "linearmodels.iv.results.OLSResults.pvalues", "linearmodels.iv.results.OLSResults.resid_ss", "linearmodels.iv.results.OLSResults.resids", "linearmodels.iv.results.OLSResults.rsquared", "linearmodels.iv.results.OLSResults.rsquared_adj", "linearmodels.iv.results.OLSResults.s2", "linearmodels.iv.results.OLSResults.std_errors", "linearmodels.iv.results.OLSResults.summary", "linearmodels.iv.results.OLSResults.total_ss", "linearmodels.iv.results.OLSResults.tstats", "linearmodels.iv.results.OLSResults.wald_test", "linearmodels.iv.results.OLSResults.wresids", "linearmodels.iv.results.compare", "Formulas and Mathematical Detail", "Module Reference", "Data Formats for Panel Data Analysis", "Examples", "Using formulas to specify models", "Implementation Choices", "Panel Data Model Estimation", "Introduction", "Formulas and Mathematical Detail", "Comparison with pandas PanelOLS and FamaMacBeth", "linearmodels.panel.covariance.ACCovariance", "linearmodels.panel.covariance.ACCovariance.ALLOWED_KWARGS", "linearmodels.panel.covariance.ACCovariance.DEFAULT_KERNEL", "linearmodels.panel.covariance.ACCovariance.cov", "linearmodels.panel.covariance.ACCovariance.deferred_cov", "linearmodels.panel.covariance.ACCovariance.eps", "linearmodels.panel.covariance.ACCovariance.name", "linearmodels.panel.covariance.ACCovariance.s2", "linearmodels.panel.covariance.ClusteredCovariance", "linearmodels.panel.covariance.ClusteredCovariance.ALLOWED_KWARGS", "linearmodels.panel.covariance.ClusteredCovariance.DEFAULT_KERNEL", "linearmodels.panel.covariance.ClusteredCovariance.cov", "linearmodels.panel.covariance.ClusteredCovariance.deferred_cov", "linearmodels.panel.covariance.ClusteredCovariance.eps", "linearmodels.panel.covariance.ClusteredCovariance.name", "linearmodels.panel.covariance.ClusteredCovariance.s2", "linearmodels.panel.covariance.DriscollKraay", "linearmodels.panel.covariance.DriscollKraay.ALLOWED_KWARGS", "linearmodels.panel.covariance.DriscollKraay.DEFAULT_KERNEL", "linearmodels.panel.covariance.DriscollKraay.cov", "linearmodels.panel.covariance.DriscollKraay.deferred_cov", "linearmodels.panel.covariance.DriscollKraay.eps", "linearmodels.panel.covariance.DriscollKraay.name", "linearmodels.panel.covariance.DriscollKraay.s2", "linearmodels.panel.covariance.FamaMacBethCovariance", "linearmodels.panel.covariance.FamaMacBethCovariance.ALLOWED_KWARGS", "linearmodels.panel.covariance.FamaMacBethCovariance.DEFAULT_KERNEL", "linearmodels.panel.covariance.FamaMacBethCovariance.all_params", "linearmodels.panel.covariance.FamaMacBethCovariance.bandwidth", "linearmodels.panel.covariance.FamaMacBethCovariance.cov", "linearmodels.panel.covariance.FamaMacBethCovariance.deferred_cov", "linearmodels.panel.covariance.FamaMacBethCovariance.eps", "linearmodels.panel.covariance.FamaMacBethCovariance.name", "linearmodels.panel.covariance.FamaMacBethCovariance.s2", "linearmodels.panel.covariance.HeteroskedasticCovariance", "linearmodels.panel.covariance.HeteroskedasticCovariance.ALLOWED_KWARGS", "linearmodels.panel.covariance.HeteroskedasticCovariance.DEFAULT_KERNEL", "linearmodels.panel.covariance.HeteroskedasticCovariance.cov", "linearmodels.panel.covariance.HeteroskedasticCovariance.deferred_cov", "linearmodels.panel.covariance.HeteroskedasticCovariance.eps", "linearmodels.panel.covariance.HeteroskedasticCovariance.name", "linearmodels.panel.covariance.HeteroskedasticCovariance.s2", "linearmodels.panel.covariance.HomoskedasticCovariance", "linearmodels.panel.covariance.HomoskedasticCovariance.ALLOWED_KWARGS", "linearmodels.panel.covariance.HomoskedasticCovariance.DEFAULT_KERNEL", "linearmodels.panel.covariance.HomoskedasticCovariance.cov", "linearmodels.panel.covariance.HomoskedasticCovariance.deferred_cov", "linearmodels.panel.covariance.HomoskedasticCovariance.eps", "linearmodels.panel.covariance.HomoskedasticCovariance.name", "linearmodels.panel.covariance.HomoskedasticCovariance.s2", "linearmodels.panel.data.PanelData", "linearmodels.panel.data.PanelData.copy", "linearmodels.panel.data.PanelData.count", "linearmodels.panel.data.PanelData.dataframe", "linearmodels.panel.data.PanelData.demean", "linearmodels.panel.data.PanelData.drop", "linearmodels.panel.data.PanelData.dummies", "linearmodels.panel.data.PanelData.entities", "linearmodels.panel.data.PanelData.entity_ids", "linearmodels.panel.data.PanelData.first_difference", "linearmodels.panel.data.PanelData.general_demean", "linearmodels.panel.data.PanelData.index", "linearmodels.panel.data.PanelData.isnull", "linearmodels.panel.data.PanelData.mean", "linearmodels.panel.data.PanelData.ndim", "linearmodels.panel.data.PanelData.nentity", "linearmodels.panel.data.PanelData.nobs", "linearmodels.panel.data.PanelData.nvar", "linearmodels.panel.data.PanelData.panel", "linearmodels.panel.data.PanelData.shape", "linearmodels.panel.data.PanelData.time", "linearmodels.panel.data.PanelData.time_ids", "linearmodels.panel.data.PanelData.values2d", "linearmodels.panel.data.PanelData.values3d", "linearmodels.panel.data.PanelData.vars", "linearmodels.panel.data._Panel", "linearmodels.panel.data._Panel.from_array", "linearmodels.panel.data._Panel.items", "linearmodels.panel.data._Panel.major_axis", "linearmodels.panel.data._Panel.minor_axis", "linearmodels.panel.data._Panel.shape", "linearmodels.panel.data._Panel.to_frame", "linearmodels.panel.data._Panel.values", "linearmodels.panel.model.BetweenOLS", "linearmodels.panel.model.BetweenOLS.fit", "linearmodels.panel.model.BetweenOLS.formula", "linearmodels.panel.model.BetweenOLS.from_formula", "linearmodels.panel.model.BetweenOLS.has_constant", "linearmodels.panel.model.BetweenOLS.not_null", "linearmodels.panel.model.BetweenOLS.predict", "linearmodels.panel.model.BetweenOLS.reformat_clusters", "linearmodels.panel.model.FamaMacBeth", "linearmodels.panel.model.FamaMacBeth.fit", "linearmodels.panel.model.FamaMacBeth.formula", "linearmodels.panel.model.FamaMacBeth.from_formula", "linearmodels.panel.model.FamaMacBeth.has_constant", "linearmodels.panel.model.FamaMacBeth.not_null", "linearmodels.panel.model.FamaMacBeth.predict", "linearmodels.panel.model.FamaMacBeth.reformat_clusters", "linearmodels.panel.model.FirstDifferenceOLS", "linearmodels.panel.model.FirstDifferenceOLS.fit", "linearmodels.panel.model.FirstDifferenceOLS.formula", "linearmodels.panel.model.FirstDifferenceOLS.from_formula", "linearmodels.panel.model.FirstDifferenceOLS.has_constant", "linearmodels.panel.model.FirstDifferenceOLS.not_null", "linearmodels.panel.model.FirstDifferenceOLS.predict", "linearmodels.panel.model.FirstDifferenceOLS.reformat_clusters", "linearmodels.panel.model.PanelOLS", "linearmodels.panel.model.PanelOLS.entity_effects", "linearmodels.panel.model.PanelOLS.fit", "linearmodels.panel.model.PanelOLS.formula", "linearmodels.panel.model.PanelOLS.from_formula", "linearmodels.panel.model.PanelOLS.has_constant", "linearmodels.panel.model.PanelOLS.not_null", "linearmodels.panel.model.PanelOLS.other_effects", "linearmodels.panel.model.PanelOLS.predict", "linearmodels.panel.model.PanelOLS.reformat_clusters", "linearmodels.panel.model.PanelOLS.time_effects", "linearmodels.panel.model.PooledOLS", "linearmodels.panel.model.PooledOLS.fit", "linearmodels.panel.model.PooledOLS.formula", "linearmodels.panel.model.PooledOLS.from_formula", "linearmodels.panel.model.PooledOLS.has_constant", "linearmodels.panel.model.PooledOLS.not_null", "linearmodels.panel.model.PooledOLS.predict", "linearmodels.panel.model.PooledOLS.reformat_clusters", "linearmodels.panel.model.RandomEffects", "linearmodels.panel.model.RandomEffects.fit", "linearmodels.panel.model.RandomEffects.formula", "linearmodels.panel.model.RandomEffects.from_formula", "linearmodels.panel.model.RandomEffects.has_constant", "linearmodels.panel.model.RandomEffects.not_null", "linearmodels.panel.model.RandomEffects.predict", "linearmodels.panel.model.RandomEffects.reformat_clusters", "linearmodels.panel.results.FamaMacBethResults", "linearmodels.panel.results.FamaMacBethResults.all_params", "linearmodels.panel.results.FamaMacBethResults.avg_adj_rsquared", "linearmodels.panel.results.FamaMacBethResults.avg_rsquared", "linearmodels.panel.results.FamaMacBethResults.conf_int", "linearmodels.panel.results.FamaMacBethResults.corr_squared_between", "linearmodels.panel.results.FamaMacBethResults.corr_squared_overall", "linearmodels.panel.results.FamaMacBethResults.corr_squared_within", "linearmodels.panel.results.FamaMacBethResults.cov", "linearmodels.panel.results.FamaMacBethResults.df_model", "linearmodels.panel.results.FamaMacBethResults.df_resid", "linearmodels.panel.results.FamaMacBethResults.entity_info", "linearmodels.panel.results.FamaMacBethResults.estimated_effects", "linearmodels.panel.results.FamaMacBethResults.f_statistic", "linearmodels.panel.results.FamaMacBethResults.f_statistic_robust", "linearmodels.panel.results.FamaMacBethResults.fitted_values", "linearmodels.panel.results.FamaMacBethResults.idiosyncratic", "linearmodels.panel.results.FamaMacBethResults.loglik", "linearmodels.panel.results.FamaMacBethResults.model_ss", "linearmodels.panel.results.FamaMacBethResults.name", "linearmodels.panel.results.FamaMacBethResults.nobs", "linearmodels.panel.results.FamaMacBethResults.params", "linearmodels.panel.results.FamaMacBethResults.predict", "linearmodels.panel.results.FamaMacBethResults.pvalues", "linearmodels.panel.results.FamaMacBethResults.resid_ss", "linearmodels.panel.results.FamaMacBethResults.resids", "linearmodels.panel.results.FamaMacBethResults.rsquared", "linearmodels.panel.results.FamaMacBethResults.rsquared_between", "linearmodels.panel.results.FamaMacBethResults.rsquared_overall", "linearmodels.panel.results.FamaMacBethResults.rsquared_within", "linearmodels.panel.results.FamaMacBethResults.s2", "linearmodels.panel.results.FamaMacBethResults.std_errors", "linearmodels.panel.results.FamaMacBethResults.summary", "linearmodels.panel.results.FamaMacBethResults.time_info", "linearmodels.panel.results.FamaMacBethResults.total_ss", "linearmodels.panel.results.FamaMacBethResults.tstats", "linearmodels.panel.results.FamaMacBethResults.wald_test", "linearmodels.panel.results.FamaMacBethResults.wresids", "linearmodels.panel.results.PanelEffectsResults", "linearmodels.panel.results.PanelEffectsResults.conf_int", "linearmodels.panel.results.PanelEffectsResults.corr_squared_between", "linearmodels.panel.results.PanelEffectsResults.corr_squared_overall", "linearmodels.panel.results.PanelEffectsResults.corr_squared_within", "linearmodels.panel.results.PanelEffectsResults.cov", "linearmodels.panel.results.PanelEffectsResults.df_model", "linearmodels.panel.results.PanelEffectsResults.df_resid", "linearmodels.panel.results.PanelEffectsResults.entity_info", "linearmodels.panel.results.PanelEffectsResults.estimated_effects", "linearmodels.panel.results.PanelEffectsResults.f_pooled", "linearmodels.panel.results.PanelEffectsResults.f_statistic", "linearmodels.panel.results.PanelEffectsResults.f_statistic_robust", "linearmodels.panel.results.PanelEffectsResults.fitted_values", "linearmodels.panel.results.PanelEffectsResults.idiosyncratic", "linearmodels.panel.results.PanelEffectsResults.included_effects", "linearmodels.panel.results.PanelEffectsResults.loglik", "linearmodels.panel.results.PanelEffectsResults.model_ss", "linearmodels.panel.results.PanelEffectsResults.name", "linearmodels.panel.results.PanelEffectsResults.nobs", "linearmodels.panel.results.PanelEffectsResults.other_info", "linearmodels.panel.results.PanelEffectsResults.params", "linearmodels.panel.results.PanelEffectsResults.predict", "linearmodels.panel.results.PanelEffectsResults.pvalues", "linearmodels.panel.results.PanelEffectsResults.resid_ss", "linearmodels.panel.results.PanelEffectsResults.resids", "linearmodels.panel.results.PanelEffectsResults.rsquared", "linearmodels.panel.results.PanelEffectsResults.rsquared_between", "linearmodels.panel.results.PanelEffectsResults.rsquared_inclusive", "linearmodels.panel.results.PanelEffectsResults.rsquared_overall", "linearmodels.panel.results.PanelEffectsResults.rsquared_within", "linearmodels.panel.results.PanelEffectsResults.s2", "linearmodels.panel.results.PanelEffectsResults.std_errors", "linearmodels.panel.results.PanelEffectsResults.summary", "linearmodels.panel.results.PanelEffectsResults.time_info", "linearmodels.panel.results.PanelEffectsResults.total_ss", "linearmodels.panel.results.PanelEffectsResults.tstats", "linearmodels.panel.results.PanelEffectsResults.variance_decomposition", "linearmodels.panel.results.PanelEffectsResults.wald_test", "linearmodels.panel.results.PanelEffectsResults.wresids", "linearmodels.panel.results.PanelModelComparison", "linearmodels.panel.results.PanelModelComparison.cov_estimator", "linearmodels.panel.results.PanelModelComparison.estimator_method", "linearmodels.panel.results.PanelModelComparison.f_statistic", "linearmodels.panel.results.PanelModelComparison.nobs", "linearmodels.panel.results.PanelModelComparison.params", "linearmodels.panel.results.PanelModelComparison.pvalues", "linearmodels.panel.results.PanelModelComparison.rsquared", "linearmodels.panel.results.PanelModelComparison.rsquared_between", "linearmodels.panel.results.PanelModelComparison.rsquared_overall", "linearmodels.panel.results.PanelModelComparison.rsquared_within", "linearmodels.panel.results.PanelModelComparison.std_errors", "linearmodels.panel.results.PanelModelComparison.summary", "linearmodels.panel.results.PanelModelComparison.tstats", "linearmodels.panel.results.PanelResults", "linearmodels.panel.results.PanelResults.conf_int", "linearmodels.panel.results.PanelResults.corr_squared_between", "linearmodels.panel.results.PanelResults.corr_squared_overall", "linearmodels.panel.results.PanelResults.corr_squared_within", "linearmodels.panel.results.PanelResults.cov", "linearmodels.panel.results.PanelResults.df_model", "linearmodels.panel.results.PanelResults.df_resid", "linearmodels.panel.results.PanelResults.entity_info", "linearmodels.panel.results.PanelResults.estimated_effects", "linearmodels.panel.results.PanelResults.f_statistic", "linearmodels.panel.results.PanelResults.f_statistic_robust", "linearmodels.panel.results.PanelResults.fitted_values", "linearmodels.panel.results.PanelResults.idiosyncratic", "linearmodels.panel.results.PanelResults.loglik", "linearmodels.panel.results.PanelResults.model_ss", "linearmodels.panel.results.PanelResults.name", "linearmodels.panel.results.PanelResults.nobs", "linearmodels.panel.results.PanelResults.params", "linearmodels.panel.results.PanelResults.predict", "linearmodels.panel.results.PanelResults.pvalues", "linearmodels.panel.results.PanelResults.resid_ss", "linearmodels.panel.results.PanelResults.resids", "linearmodels.panel.results.PanelResults.rsquared", "linearmodels.panel.results.PanelResults.rsquared_between", "linearmodels.panel.results.PanelResults.rsquared_overall", "linearmodels.panel.results.PanelResults.rsquared_within", "linearmodels.panel.results.PanelResults.s2", "linearmodels.panel.results.PanelResults.std_errors", "linearmodels.panel.results.PanelResults.summary", "linearmodels.panel.results.PanelResults.time_info", "linearmodels.panel.results.PanelResults.total_ss", "linearmodels.panel.results.PanelResults.tstats", "linearmodels.panel.results.PanelResults.wald_test", "linearmodels.panel.results.PanelResults.wresids", "linearmodels.panel.results.RandomEffectsResults", "linearmodels.panel.results.RandomEffectsResults.conf_int", "linearmodels.panel.results.RandomEffectsResults.corr_squared_between", "linearmodels.panel.results.RandomEffectsResults.corr_squared_overall", "linearmodels.panel.results.RandomEffectsResults.corr_squared_within", "linearmodels.panel.results.RandomEffectsResults.cov", "linearmodels.panel.results.RandomEffectsResults.df_model", "linearmodels.panel.results.RandomEffectsResults.df_resid", "linearmodels.panel.results.RandomEffectsResults.entity_info", "linearmodels.panel.results.RandomEffectsResults.estimated_effects", "linearmodels.panel.results.RandomEffectsResults.f_statistic", "linearmodels.panel.results.RandomEffectsResults.f_statistic_robust", "linearmodels.panel.results.RandomEffectsResults.fitted_values", "linearmodels.panel.results.RandomEffectsResults.idiosyncratic", "linearmodels.panel.results.RandomEffectsResults.loglik", "linearmodels.panel.results.RandomEffectsResults.model_ss", "linearmodels.panel.results.RandomEffectsResults.name", "linearmodels.panel.results.RandomEffectsResults.nobs", "linearmodels.panel.results.RandomEffectsResults.params", "linearmodels.panel.results.RandomEffectsResults.predict", "linearmodels.panel.results.RandomEffectsResults.pvalues", "linearmodels.panel.results.RandomEffectsResults.resid_ss", "linearmodels.panel.results.RandomEffectsResults.resids", "linearmodels.panel.results.RandomEffectsResults.rsquared", "linearmodels.panel.results.RandomEffectsResults.rsquared_between", "linearmodels.panel.results.RandomEffectsResults.rsquared_overall", "linearmodels.panel.results.RandomEffectsResults.rsquared_within", "linearmodels.panel.results.RandomEffectsResults.s2", "linearmodels.panel.results.RandomEffectsResults.std_errors", "linearmodels.panel.results.RandomEffectsResults.summary", "linearmodels.panel.results.RandomEffectsResults.theta", "linearmodels.panel.results.RandomEffectsResults.time_info", "linearmodels.panel.results.RandomEffectsResults.total_ss", "linearmodels.panel.results.RandomEffectsResults.tstats", "linearmodels.panel.results.RandomEffectsResults.variance_decomposition", "linearmodels.panel.results.RandomEffectsResults.wald_test", "linearmodels.panel.results.RandomEffectsResults.wresids", "linearmodels.panel.results.compare", "linearmodels.panel.utility.PanelModelData", "linearmodels.panel.utility.PanelModelData.clusters", "linearmodels.panel.utility.PanelModelData.count", "linearmodels.panel.utility.PanelModelData.data", "linearmodels.panel.utility.PanelModelData.index", "linearmodels.panel.utility.PanelModelData.other_effects", "linearmodels.panel.utility.PanelModelData.weights", "linearmodels.panel.utility.generate_panel_data", "Module Reference", "Module Plans", "References", "Examples", "Using formulas to specify models", "Three-stage Least Squares (3SLS)", "System Regression Models", "Seemingly Unrelated Regression (SUR/SURE)", "Module Reference", "linearmodels.system.covariance.ClusteredCovariance", "linearmodels.system.covariance.ClusteredCovariance.cov", "linearmodels.system.covariance.ClusteredCovariance.cov_config", "linearmodels.system.covariance.ClusteredCovariance.sigma", "linearmodels.system.covariance.GMMHeteroskedasticCovariance", "linearmodels.system.covariance.GMMHeteroskedasticCovariance.cov", "linearmodels.system.covariance.GMMHeteroskedasticCovariance.cov_config", "linearmodels.system.covariance.GMMHomoskedasticCovariance", "linearmodels.system.covariance.GMMHomoskedasticCovariance.cov", "linearmodels.system.covariance.GMMHomoskedasticCovariance.cov_config", "linearmodels.system.covariance.GMMKernelCovariance", "linearmodels.system.covariance.GMMKernelCovariance.bandwidth", "linearmodels.system.covariance.GMMKernelCovariance.cov", "linearmodels.system.covariance.GMMKernelCovariance.cov_config", "linearmodels.system.covariance.GMMKernelCovariance.kernel", "linearmodels.system.covariance.HeteroskedasticCovariance", "linearmodels.system.covariance.HeteroskedasticCovariance.cov", "linearmodels.system.covariance.HeteroskedasticCovariance.cov_config", "linearmodels.system.covariance.HeteroskedasticCovariance.sigma", "linearmodels.system.covariance.HomoskedasticCovariance", "linearmodels.system.covariance.HomoskedasticCovariance.cov", "linearmodels.system.covariance.HomoskedasticCovariance.cov_config", "linearmodels.system.covariance.HomoskedasticCovariance.sigma", "linearmodels.system.covariance.KernelCovariance", "linearmodels.system.covariance.KernelCovariance.bandwidth", "linearmodels.system.covariance.KernelCovariance.cov", "linearmodels.system.covariance.KernelCovariance.cov_config", "linearmodels.system.covariance.KernelCovariance.kernel", "linearmodels.system.covariance.KernelCovariance.sigma", "linearmodels.system.gmm.HeteroskedasticWeightMatrix", "linearmodels.system.gmm.HeteroskedasticWeightMatrix.config", "linearmodels.system.gmm.HeteroskedasticWeightMatrix.sigma", "linearmodels.system.gmm.HeteroskedasticWeightMatrix.weight_matrix", "linearmodels.system.gmm.HomoskedasticWeightMatrix", "linearmodels.system.gmm.HomoskedasticWeightMatrix.config", "linearmodels.system.gmm.HomoskedasticWeightMatrix.sigma", "linearmodels.system.gmm.HomoskedasticWeightMatrix.weight_matrix", "linearmodels.system.gmm.KernelWeightMatrix", "linearmodels.system.gmm.KernelWeightMatrix.bandwidth", "linearmodels.system.gmm.KernelWeightMatrix.config", "linearmodels.system.gmm.KernelWeightMatrix.kernel", "linearmodels.system.gmm.KernelWeightMatrix.sigma", "linearmodels.system.gmm.KernelWeightMatrix.weight_matrix", "linearmodels.system.model.IV3SLS", "linearmodels.system.model.IV3SLS.add_constraints", "linearmodels.system.model.IV3SLS.constraints", "linearmodels.system.model.IV3SLS.fit", "linearmodels.system.model.IV3SLS.formula", "linearmodels.system.model.IV3SLS.from_formula", "linearmodels.system.model.IV3SLS.has_constant", "linearmodels.system.model.IV3SLS.multivariate_iv", "linearmodels.system.model.IV3SLS.param_names", "linearmodels.system.model.IV3SLS.predict", "linearmodels.system.model.IV3SLS.reset_constraints", "linearmodels.system.model.IVSystemGMM", "linearmodels.system.model.IVSystemGMM.add_constraints", "linearmodels.system.model.IVSystemGMM.constraints", "linearmodels.system.model.IVSystemGMM.fit", "linearmodels.system.model.IVSystemGMM.formula", "linearmodels.system.model.IVSystemGMM.from_formula", "linearmodels.system.model.IVSystemGMM.has_constant", "linearmodels.system.model.IVSystemGMM.param_names", "linearmodels.system.model.IVSystemGMM.predict", "linearmodels.system.model.IVSystemGMM.reset_constraints", "linearmodels.system.model.LinearConstraint", "linearmodels.system.model.LinearConstraint.a", "linearmodels.system.model.LinearConstraint.q", "linearmodels.system.model.LinearConstraint.r", "linearmodels.system.model.LinearConstraint.t", "linearmodels.system.model.SUR", "linearmodels.system.model.SUR.add_constraints", "linearmodels.system.model.SUR.constraints", "linearmodels.system.model.SUR.fit", "linearmodels.system.model.SUR.formula", "linearmodels.system.model.SUR.from_formula", "linearmodels.system.model.SUR.has_constant", "linearmodels.system.model.SUR.multivariate_ls", "linearmodels.system.model.SUR.param_names", "linearmodels.system.model.SUR.predict", "linearmodels.system.model.SUR.reset_constraints", "linearmodels.system.results.GMMSystemResults", "linearmodels.system.results.GMMSystemResults.breusch_pagan", "linearmodels.system.results.GMMSystemResults.conf_int", "linearmodels.system.results.GMMSystemResults.cov", "linearmodels.system.results.GMMSystemResults.cov_config", "linearmodels.system.results.GMMSystemResults.cov_estimator", "linearmodels.system.results.GMMSystemResults.debiased", "linearmodels.system.results.GMMSystemResults.df_model", "linearmodels.system.results.GMMSystemResults.df_resid", "linearmodels.system.results.GMMSystemResults.equation_labels", "linearmodels.system.results.GMMSystemResults.equations", "linearmodels.system.results.GMMSystemResults.fitted_values", "linearmodels.system.results.GMMSystemResults.iterations", "linearmodels.system.results.GMMSystemResults.j_stat", "linearmodels.system.results.GMMSystemResults.likelihood_ratio", "linearmodels.system.results.GMMSystemResults.method", "linearmodels.system.results.GMMSystemResults.model", "linearmodels.system.results.GMMSystemResults.model_ss", "linearmodels.system.results.GMMSystemResults.nobs", "linearmodels.system.results.GMMSystemResults.params", "linearmodels.system.results.GMMSystemResults.predict", "linearmodels.system.results.GMMSystemResults.pvalues", "linearmodels.system.results.GMMSystemResults.resid_ss", "linearmodels.system.results.GMMSystemResults.resids", "linearmodels.system.results.GMMSystemResults.rsquared", "linearmodels.system.results.GMMSystemResults.sigma", "linearmodels.system.results.GMMSystemResults.std_errors", "linearmodels.system.results.GMMSystemResults.summary", "linearmodels.system.results.GMMSystemResults.system_rsquared", "linearmodels.system.results.GMMSystemResults.total_ss", "linearmodels.system.results.GMMSystemResults.tstats", "linearmodels.system.results.GMMSystemResults.w", "linearmodels.system.results.GMMSystemResults.weight_config", "linearmodels.system.results.GMMSystemResults.weight_type", "linearmodels.system.results.GMMSystemResults.wresids", "linearmodels.system.results.SystemResults", "linearmodels.system.results.SystemResults.breusch_pagan", "linearmodels.system.results.SystemResults.conf_int", "linearmodels.system.results.SystemResults.cov", "linearmodels.system.results.SystemResults.cov_config", "linearmodels.system.results.SystemResults.cov_estimator", "linearmodels.system.results.SystemResults.debiased", "linearmodels.system.results.SystemResults.df_model", "linearmodels.system.results.SystemResults.df_resid", "linearmodels.system.results.SystemResults.equation_labels", "linearmodels.system.results.SystemResults.equations", "linearmodels.system.results.SystemResults.fitted_values", "linearmodels.system.results.SystemResults.iterations", "linearmodels.system.results.SystemResults.likelihood_ratio", "linearmodels.system.results.SystemResults.method", "linearmodels.system.results.SystemResults.model", "linearmodels.system.results.SystemResults.model_ss", "linearmodels.system.results.SystemResults.nobs", "linearmodels.system.results.SystemResults.params", "linearmodels.system.results.SystemResults.predict", "linearmodels.system.results.SystemResults.pvalues", "linearmodels.system.results.SystemResults.resid_ss", "linearmodels.system.results.SystemResults.resids", "linearmodels.system.results.SystemResults.rsquared", "linearmodels.system.results.SystemResults.sigma", "linearmodels.system.results.SystemResults.std_errors", "linearmodels.system.results.SystemResults.summary", "linearmodels.system.results.SystemResults.system_rsquared", "linearmodels.system.results.SystemResults.total_ss", "linearmodels.system.results.SystemResults.tstats", "linearmodels.system.results.SystemResults.wresids", "Type Aliases", "Utilities", "linearmodels.shared.covariance.cov_cluster", "linearmodels.shared.covariance.cov_kernel", "linearmodels.shared.covariance.group_debias_coefficient", "linearmodels.shared.hypotheses.InvalidTestStatistic", "linearmodels.shared.hypotheses.InvalidTestStatistic.critical_values", "linearmodels.shared.hypotheses.InvalidTestStatistic.null", "linearmodels.shared.hypotheses.InvalidTestStatistic.pval", "linearmodels.shared.hypotheses.InvalidTestStatistic.stat", "linearmodels.shared.hypotheses.WaldTestStatistic", "linearmodels.shared.hypotheses.WaldTestStatistic.critical_values", "linearmodels.shared.hypotheses.WaldTestStatistic.null", "linearmodels.shared.hypotheses.WaldTestStatistic.pval", "linearmodels.shared.hypotheses.WaldTestStatistic.stat", "linearmodels.shared.utility.AttrDict", "linearmodels.shared.utility.AttrDict.clear", "linearmodels.shared.utility.AttrDict.copy", "linearmodels.shared.utility.AttrDict.get", "linearmodels.shared.utility.AttrDict.items", "linearmodels.shared.utility.AttrDict.keys", "linearmodels.shared.utility.AttrDict.pop", "linearmodels.shared.utility.AttrDict.popitem", "linearmodels.shared.utility.AttrDict.setdefault", "linearmodels.shared.utility.AttrDict.update", "linearmodels.shared.utility.AttrDict.values"], "titleterms": {"": [5, 14, 159, 165, 171, 177, 203], "0": [75, 76, 77, 78, 79, 80], "1": [69, 76, 78, 79], "10": 77, "11": 77, "12": 77, "13": 77, "14": 77, "15": 77, "16": 77, "17": 77, "18": 77, "19": 77, "2": [69, 76, 78, 400, 403, 719], "20": 77, "21": 77, "24": 77, "25": 77, "26": 77, "27": 77, "28": 77, "29": 77, "2sl": [150, 154, 395], "3": [76, 78], "30": 77, "31": 77, "3sl": [717, 719, 720], "4": [77, 78], "5": [77, 78], "6": [77, 79], "7": [75, 77, 80], "8": 77, "9": 77, "The": [73, 398], "_ol": [257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "_panel": [480, 481, 482, 483, 484, 485, 486, 487], "absorb": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 396], "absorbed_depend": 93, "absorbed_effect": 104, "absorbed_exog": 94, "absorbed_rsquar": 105, "absorbingl": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "absorbinglsresult": [103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "absorbingregressor": [135, 136, 137, 138, 139], "accovari": [405, 406, 407, 408, 409, 410, 411, 412], "add_constraint": [765, 776, 791], "add_extra_txt": 83, "add_table_2col": 84, "add_table_param": 85, "alias": 867, "all_param": [432, 540], "allowed_kwarg": [406, 414, 422, 430, 440, 448], "alpha": [29, 50], "also": [7, 92, 97, 173, 179, 199, 205, 212, 214, 223, 225, 234, 235, 236, 246, 248, 257, 259, 721, 744, 767, 793, 872, 877], "altern": [150, 715], "analysi": [395, 397], "anderson_rubin": 323, "approx_rank": 136, "argument": 154, "arrai": 397, "as_csv": 86, "as_html": 87, "as_latex": 88, "as_text": 89, "asset": [71, 74, 713], "asset_pr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "attrdict": [882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892], "avail": 70, "avg_adj_rsquar": 541, "avg_rsquar": 542, "bandwidth": [8, 206, 395, 433, 732, 745, 759], "basic": [151, 152, 395, 398, 715, 719], "basmann": 324, "basmann_f": 325, "berndt": 719, "beta": [30, 51], "between": [398, 399, 403], "betweenol": [403, 488, 489, 490, 491, 492, 493, 494, 495], "betweenr": 403, "birth": 151, "brace": 716, "breusch_pagan": [802, 837], "c_stat": 273, "calcul": [403, 719], "cat": 141, "categor": [151, 397], "chang": [75, 150], "choic": 400, "class": 395, "clear": 883, "cluster": [398, 400, 403, 705, 715], "clusteredcovari": [155, 156, 157, 158, 159, 160, 413, 414, 415, 416, 417, 418, 419, 420, 721, 722, 723, 724], "col": 184, "common": 715, "compar": [70, 150, 152, 394, 398, 703], "comparison": 404, "compat": [81, 82, 83, 84, 85, 86, 87, 88, 89], "conf_int": [106, 274, 326, 364, 543, 578, 632, 667, 803, 838], "confid": 395, "config": [1, 9, 156, 162, 168, 174, 194, 197, 200, 207, 210, 751, 755, 760], "constant": [149, 395, 399], "constraint": [715, 766, 777, 792], "cont": 142, "contain": 868, "continu": [69, 150, 395], "contribut": 90, "converg": 69, "convers": 397, "copi": [456, 884], "corr_squared_between": [544, 579, 633, 668], "corr_squared_overal": [545, 580, 634, 669], "corr_squared_within": [546, 581, 635, 670], "correl": [398, 403, 719], "count": [457, 706], "cov": [2, 10, 31, 52, 107, 157, 163, 169, 175, 201, 275, 327, 365, 408, 416, 424, 434, 442, 450, 547, 582, 636, 671, 722, 726, 729, 733, 737, 741, 746, 804, 839], "cov_clust": 869, "cov_config": [108, 276, 328, 366, 723, 727, 730, 734, 738, 742, 747, 805, 840], "cov_estim": [32, 53, 109, 277, 311, 329, 367, 618, 806, 841], "cov_kernel": 870, "cov_typ": [110, 278, 330, 368], "covari": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 74, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 395, 396, 398, 400, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 712, 715, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 868, 869, 870, 871], "critical_valu": [873, 878], "cross": 715, "cue": [154, 395], "curli": 716, "data": [69, 70, 150, 152, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 396, 397, 398, 399, 401, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 707, 712, 713, 715, 717], "dataarrai": 397, "datafram": [397, 458], "debias": [111, 158, 164, 170, 176, 202, 279, 331, 369, 807, 842], "default_kernel": [407, 415, 423, 431, 441, 449], "deferred_cov": [409, 417, 425, 435, 443, 451], "definit": 400, "demean": 459, "depend": 95, "detail": [73, 395, 403], "detect": 395, "df_absorb": 112, "df_model": [113, 280, 332, 370, 548, 583, 637, 672, 808, 843], "df_resid": [114, 281, 333, 371, 549, 584, 638, 673, 809, 844], "dhryme": 719, "diagnost": [150, 151, 269], "diagon": 715, "dictionari": 716, "differ": [398, 399, 403], "direct": 717, "driscol": 403, "driscollkraai": [421, 422, 423, 424, 425, 426, 427, 428], "drop": [143, 185, 460], "dummi": [397, 398, 461], "durbin": 334, "dynam": 713, "educ": 151, "effect": [398, 399, 400, 403], "effici": 719, "endogen": [150, 152], "entiti": [398, 399, 462], "entity_effect": 513, "entity_id": 463, "entity_info": [550, 585, 639, 674], "ep": [410, 418, 426, 436, 444, 452], "equat": [715, 717, 811, 846], "equation_label": [810, 845], "error": 395, "estim": [69, 73, 74, 150, 151, 152, 153, 154, 395, 396, 398, 401, 403, 712, 713, 715, 716, 717, 719, 720, 868], "estimate_paramet": [213, 224, 235, 247, 258], "estimated_effect": [551, 586, 640, 675], "estimator_method": [312, 619], "exampl": [69, 150, 151, 398, 715], "excess": [69, 70], "exclud": 149, "exog": 96, "exogen": 150, "express": 152, "f_pool": 587, "f_statist": [115, 282, 313, 335, 372, 552, 588, 620, 641, 676], "f_statistic_robust": [553, 589, 642, 677], "factor": [70, 71, 73], "famamacbeth": [404, 496, 497, 498, 499, 500, 501, 502, 503], "famamacbethcovari": [429, 430, 431, 432, 433, 434, 435, 436, 437, 438], "famamacbethresult": [539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576], "first": [70, 150, 395, 398, 399, 403], "first_differ": 464, "first_stag": [283, 336], "firstdifferenceol": [403, 504, 505, 506, 507, 508, 509, 510, 511], "firststageresult": [268, 269, 270, 271], "fit": [17, 21, 25, 97, 214, 225, 236, 248, 259, 489, 497, 505, 514, 524, 532, 719, 767, 778, 793], "fitted_valu": [116, 284, 337, 373, 554, 590, 643, 678, 812, 847], "fix": [398, 400, 403], "format": 397, "formula": [18, 22, 26, 70, 73, 151, 152, 215, 226, 237, 249, 260, 395, 399, 403, 490, 498, 506, 515, 525, 533, 716, 717, 768, 779, 794], "from_arrai": 481, "from_formula": [19, 23, 27, 216, 227, 238, 250, 261, 491, 499, 507, 516, 526, 534, 769, 780, 795], "from_fram": 144, "full_summari": [33, 54], "further": 150, "gener": [69, 395, 396, 712, 719, 720], "general_demean": 465, "generate_panel_data": 711, "get": 885, "gl": [73, 715], "gmm": [69, 73, 150, 154, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 395, 396, 717, 719, 720, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763], "gmmfactormodelresult": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "gmmheteroskedasticcovari": [725, 726, 727], "gmmhomoskedasticcovari": [728, 729, 730], "gmmkernelcovari": [731, 732, 733, 734, 735], "gmmsystemresult": [801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835], "group_debias_coeffici": 871, "hac": 715, "handl": 398, "has_const": [98, 117, 137, 217, 228, 239, 251, 262, 285, 338, 374, 492, 500, 508, 517, 527, 535, 770, 781, 796], "hash": [138, 145], "heteroskedast": [398, 403, 715, 719], "heteroskedasticcovari": [0, 1, 2, 3, 4, 5, 6, 161, 162, 163, 164, 165, 166, 439, 440, 441, 442, 443, 444, 445, 446, 736, 737, 738, 739], "heteroskedasticweightmatrix": [193, 194, 195, 750, 751, 752, 753], "homoskedast": 719, "homoskedasticcovari": [167, 168, 169, 170, 171, 172, 447, 448, 449, 450, 451, 452, 453, 454, 740, 741, 742, 743], "homoskedasticweightmatrix": [196, 197, 198, 754, 755, 756, 757], "hypothes": [872, 873, 874, 875, 876, 877, 878, 879, 880, 881], "hypothesi": [395, 868], "identifi": 150, "idiosyncrat": [118, 286, 339, 375, 555, 591, 644, 679], "implement": 400, "import": [69, 70, 150], "improv": 73, "includ": [149, 398], "included_effect": 592, "index": [466, 708], "indic": 91, "individu": 270, "inform": 395, "instrument": [99, 150, 153, 396, 713], "interact": [140, 141, 142, 143, 144, 145, 146, 147, 148], "interfac": 151, "interv": 395, "introduct": [72, 154, 402], "inv_jacobian": [3, 11], "invalidteststatist": [872, 873, 874, 875, 876], "invari": 398, "isnul": [146, 186, 218, 229, 240, 252, 263, 467], "item": [482, 886], "iter": [34, 69, 287, 715, 813, 848], "iv": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396], "iv2sl": [150, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222], "iv3sl": [764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774], "ivdata": [183, 184, 185, 186, 187, 188, 189, 190, 191, 192], "ivgmm": [223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233], "ivgmmcovari": [199, 200, 201, 202, 203, 204], "ivgmmcu": [234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245], "ivgmmresult": [272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309], "ivliml": [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256], "ivmodelcomparison": [310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321], "ivresult": [322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362], "ivsystemgmm": [775, 776, 777, 778, 779, 780, 781, 782, 783, 784], "j": [73, 241], "j_stat": [288, 814], "j_statist": [35, 55], "jacobian": [4, 12], "judg": 719, "just": 150, "k": 395, "kappa": [289, 340, 376], "kei": 887, "kernel": [13, 395, 396, 715, 735, 748, 761], "kernel_optimal_bandwidth": 179, "kernel_weight_bartlett": 180, "kernel_weight_parzen": 181, "kernel_weight_quadratic_spectr": 182, "kernelcovari": [7, 8, 9, 10, 11, 12, 13, 14, 15, 173, 174, 175, 176, 177, 178, 744, 745, 746, 747, 748, 749], "kernelweightmatrix": [205, 206, 207, 208, 758, 759, 760, 761, 762, 763], "kraai": 403, "l": 395, "label": [187, 716], "least": [395, 396, 713, 717, 719], "likelihood": 395, "likelihood_ratio": [815, 849], "limit": 395, "liml": [150, 154, 395], "linear": [71, 73, 74, 150, 395], "linearconstraint": [785, 786, 787, 788, 789], "linearfactormodel": [16, 17, 18, 19], "linearfactormodelgmm": [20, 21, 22, 23], "linearfactormodelresult": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "linearmodel": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892], "load": [398, 399], "log": 75, "loglik": [556, 593, 645, 680], "major_axi": 483, "marri": 151, "mathemat": [73, 152, 395, 403], "matrix": 150, "maximum": 395, "mcelroi": 719, "mean": 468, "measur": 719, "memori": 719, "men": 151, "mep": 152, "method": [119, 290, 341, 377, 395, 403, 719, 720, 816, 850], "minor_axi": 484, "model": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 71, 73, 74, 152, 154, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 398, 399, 401, 403, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 712, 713, 716, 717, 718, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 817, 851], "model_ss": [120, 291, 342, 378, 557, 594, 646, 681, 818, 852], "modul": [74, 396, 712, 713, 720], "moment": [395, 719, 720], "multiindex": 397, "multipl": [150, 152], "multivari": 715, "multivariate_iv": 771, "multivariate_l": 797, "name": [36, 56, 411, 419, 427, 437, 445, 453, 558, 595, 647, 682], "ndarrai": 188, "ndim": [189, 469], "nentiti": 470, "nob": [37, 57, 121, 147, 292, 314, 343, 379, 471, 559, 596, 621, 648, 683, 819, 853], "non": 73, "not_nul": [493, 501, 509, 518, 528, 536], "notat": [395, 719], "note": [79, 91], "notnul": [219, 230, 242, 253, 264], "null": [874, 879], "numpi": 397, "nvar": 472, "ol": [150, 152, 399, 715], "olsresult": [363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393], "onewayclusteredweightmatrix": [209, 210, 211], "onli": 70, "optim": 149, "option": [149, 154, 398, 715, 716], "other": [398, 716, 719], "other_effect": [519, 709], "other_info": 597, "overal": [403, 719], "p": 395, "panda": [190, 404], "panel": [151, 397, 398, 399, 401, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713], "paneldata": [455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479], "paneleffectsresult": [577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616], "panelmodelcomparison": [617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630], "panelmodeldata": [704, 705, 706, 707, 708, 709, 710], "panelol": [399, 403, 404, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "panelresult": [631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665], "param": [38, 58, 122, 293, 315, 344, 380, 560, 598, 622, 649, 684, 820, 854], "param_nam": [772, 782, 798], "paramet": [395, 398, 719], "past": 75, "plan": 713, "pool": [399, 403, 715], "pooledol": [403, 523, 524, 525, 526, 527, 528, 529, 530], "pop": 888, "popitem": 889, "portfolio": [69, 70], "post": [151, 395], "predict": [220, 231, 243, 254, 265, 294, 345, 381, 494, 502, 510, 520, 529, 537, 561, 599, 650, 685, 773, 783, 799, 821, 855], "prepar": 399, "prespecifi": [715, 716], "price": [71, 74, 713], "proxim": 151, "pval": [875, 880], "pvalu": [39, 59, 123, 295, 316, 346, 382, 562, 600, 623, 651, 686, 822, 856], "q": 787, "r": [400, 403, 719, 788], "random": [398, 403], "randomeffect": [403, 531, 532, 533, 534, 535, 536, 537, 538], "randomeffectsresult": [666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702], "refer": [74, 396, 712, 714, 720], "reformat_clust": [495, 503, 511, 521, 530, 538], "regress": [69, 149, 150, 398, 718, 719, 720], "regressor": [139, 715], "releas": 75, "reset_constraint": [774, 784, 800], "resid": [100, 125, 221, 232, 244, 255, 266, 297, 348, 384, 564, 602, 653, 688, 824, 858], "resid_ss": [124, 296, 347, 383, 563, 601, 652, 687, 823, 857], "residu": [715, 716], "residual_ss": [40, 60], "restrict": 715, "result": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 74, 150, 152, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 712, 720, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866], "return": 70, "risk_premia": [41, 61], "risk_premia_s": [42, 62], "risk_premia_tstat": [43, 63], "robust": [398, 403, 715], "roger": 715, "row": 191, "rsquar": [44, 64, 126, 298, 317, 349, 385, 565, 603, 624, 654, 689, 825, 859], "rsquared_adj": [127, 299, 318, 350, 386], "rsquared_between": [566, 604, 625, 655, 690], "rsquared_inclus": 605, "rsquared_overal": [567, 606, 626, 656, 691], "rsquared_within": [568, 607, 627, 657, 692], "s2": [128, 160, 166, 172, 178, 204, 300, 351, 387, 412, 420, 428, 438, 446, 454, 569, 608, 658, 693], "sargan": 352, "second": 70, "see": [7, 92, 97, 173, 179, 199, 205, 212, 214, 223, 225, 234, 235, 236, 246, 248, 257, 259, 721, 744, 767, 793, 872, 877], "seemingli": [69, 719], "select": 395, "setdefault": 890, "setup": 69, "shape": [192, 474, 485], "share": [869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892], "sigma": [724, 739, 743, 749, 752, 756, 762, 826, 860], "simultan": 717, "singl": 150, "smoke": 151, "spars": 148, "specif": [73, 154, 717], "specifi": [152, 399, 716], "squar": [6, 15, 395, 396, 713, 717, 719], "stage": [150, 395, 717, 719], "standard": [152, 395, 403], "stat": [876, 881], "statist": [73, 395, 719], "statsmodel": [82, 83, 84, 85, 86, 87, 88, 89], "std_error": [45, 65, 129, 301, 319, 353, 388, 570, 609, 628, 659, 694, 827, 861], "step": 69, "string": 397, "structur": [150, 396, 712], "summari": [46, 66, 81, 82, 83, 84, 85, 86, 87, 88, 89, 130, 271, 302, 320, 354, 389, 571, 610, 629, 660, 695, 828, 862], "sur": [69, 719, 720, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800], "sure": 719, "syntax": 70, "system": [713, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866], "system_rsquar": [829, 863], "systemresult": [836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866], "t": [395, 789], "test": [70, 150, 395, 712, 719, 868], "theta": 696, "three": [717, 719], "time": [398, 399, 475], "time_effect": 522, "time_id": 476, "time_info": [572, 611, 661, 697], "to_fram": 486, "todo": [179, 212, 223, 246], "total_ss": [47, 67, 131, 303, 355, 390, 573, 612, 662, 698, 830, 864], "trade": 73, "tradedfactormodel": [24, 25, 26, 27], "transform": [69, 70], "tstat": [48, 68, 132, 304, 321, 356, 391, 574, 613, 630, 663, 699, 831, 865], "two": 395, "type": 867, "unadjust": 403, "uncorrel": 398, "univari": 713, "unrel": [69, 719], "until": 69, "updat": [69, 150, 395, 891], "us": [69, 70, 73, 152, 398, 399, 715, 716], "usag": [152, 715], "util": [704, 705, 706, 707, 708, 709, 710, 711, 868, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892], "v": 398, "valu": [395, 487, 892], "values2d": 477, "values3d": 478, "var": 479, "variabl": [150, 151, 152, 153, 396, 398, 713], "variance_decomposit": [614, 700], "verison": 78, "version": [75, 76, 77, 78, 79, 80], "w": 832, "wage": 151, "wald_test": [133, 305, 357, 392, 575, 615, 664, 701], "waldteststatist": [877, 878, 879, 880, 881], "weight": [101, 150, 151, 395, 396, 710, 716, 719, 720], "weight_config": [306, 833], "weight_matrix": [195, 198, 208, 211, 307, 753, 757, 763], "weight_typ": [308, 834], "within": 403, "withinr": 403, "women": 151, "wooldridge_overid": 358, "wooldridge_regress": 359, "wooldridge_scor": 360, "wresid": [102, 134, 222, 233, 245, 256, 267, 309, 361, 393, 576, 616, 665, 702, 835, 866], "wu_hausman": 362, "xarrai": 397}})