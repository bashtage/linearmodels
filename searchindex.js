Search.setIndex({"titles": ["linearmodels.asset_pricing.covariance.HeteroskedasticCovariance", "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.config", "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.cov", "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.inv_jacobian", "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.jacobian", "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.s", "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.square", "linearmodels.asset_pricing.covariance.KernelCovariance", "linearmodels.asset_pricing.covariance.KernelCovariance.bandwidth", "linearmodels.asset_pricing.covariance.KernelCovariance.config", "linearmodels.asset_pricing.covariance.KernelCovariance.cov", "linearmodels.asset_pricing.covariance.KernelCovariance.inv_jacobian", "linearmodels.asset_pricing.covariance.KernelCovariance.jacobian", "linearmodels.asset_pricing.covariance.KernelCovariance.kernel", "linearmodels.asset_pricing.covariance.KernelCovariance.s", "linearmodels.asset_pricing.covariance.KernelCovariance.square", "linearmodels.asset_pricing.model.LinearFactorModel", "linearmodels.asset_pricing.model.LinearFactorModel.fit", "linearmodels.asset_pricing.model.LinearFactorModel.formula", "linearmodels.asset_pricing.model.LinearFactorModel.from_formula", "linearmodels.asset_pricing.model.LinearFactorModelGMM", "linearmodels.asset_pricing.model.LinearFactorModelGMM.fit", "linearmodels.asset_pricing.model.LinearFactorModelGMM.formula", "linearmodels.asset_pricing.model.LinearFactorModelGMM.from_formula", "linearmodels.asset_pricing.model.TradedFactorModel", "linearmodels.asset_pricing.model.TradedFactorModel.fit", "linearmodels.asset_pricing.model.TradedFactorModel.formula", "linearmodels.asset_pricing.model.TradedFactorModel.from_formula", "linearmodels.asset_pricing.results.GMMFactorModelResults", "linearmodels.asset_pricing.results.GMMFactorModelResults.alphas", "linearmodels.asset_pricing.results.GMMFactorModelResults.betas", "linearmodels.asset_pricing.results.GMMFactorModelResults.cov", "linearmodels.asset_pricing.results.GMMFactorModelResults.cov_estimator", "linearmodels.asset_pricing.results.GMMFactorModelResults.full_summary", "linearmodels.asset_pricing.results.GMMFactorModelResults.iterations", "linearmodels.asset_pricing.results.GMMFactorModelResults.j_statistic", "linearmodels.asset_pricing.results.GMMFactorModelResults.name", "linearmodels.asset_pricing.results.GMMFactorModelResults.nobs", "linearmodels.asset_pricing.results.GMMFactorModelResults.params", "linearmodels.asset_pricing.results.GMMFactorModelResults.pvalues", "linearmodels.asset_pricing.results.GMMFactorModelResults.residual_ss", "linearmodels.asset_pricing.results.GMMFactorModelResults.risk_premia", "linearmodels.asset_pricing.results.GMMFactorModelResults.risk_premia_se", "linearmodels.asset_pricing.results.GMMFactorModelResults.risk_premia_tstats", "linearmodels.asset_pricing.results.GMMFactorModelResults.rsquared", "linearmodels.asset_pricing.results.GMMFactorModelResults.std_errors", "linearmodels.asset_pricing.results.GMMFactorModelResults.summary", "linearmodels.asset_pricing.results.GMMFactorModelResults.total_ss", "linearmodels.asset_pricing.results.GMMFactorModelResults.tstats", "linearmodels.asset_pricing.results.LinearFactorModelResults", "linearmodels.asset_pricing.results.LinearFactorModelResults.alphas", "linearmodels.asset_pricing.results.LinearFactorModelResults.betas", "linearmodels.asset_pricing.results.LinearFactorModelResults.cov", "linearmodels.asset_pricing.results.LinearFactorModelResults.cov_estimator", "linearmodels.asset_pricing.results.LinearFactorModelResults.full_summary", "linearmodels.asset_pricing.results.LinearFactorModelResults.j_statistic", "linearmodels.asset_pricing.results.LinearFactorModelResults.name", "linearmodels.asset_pricing.results.LinearFactorModelResults.nobs", "linearmodels.asset_pricing.results.LinearFactorModelResults.params", "linearmodels.asset_pricing.results.LinearFactorModelResults.pvalues", "linearmodels.asset_pricing.results.LinearFactorModelResults.residual_ss", "linearmodels.asset_pricing.results.LinearFactorModelResults.risk_premia", "linearmodels.asset_pricing.results.LinearFactorModelResults.risk_premia_se", "linearmodels.asset_pricing.results.LinearFactorModelResults.risk_premia_tstats", "linearmodels.asset_pricing.results.LinearFactorModelResults.rsquared", "linearmodels.asset_pricing.results.LinearFactorModelResults.std_errors", "linearmodels.asset_pricing.results.LinearFactorModelResults.summary", "linearmodels.asset_pricing.results.LinearFactorModelResults.total_ss", "linearmodels.asset_pricing.results.LinearFactorModelResults.tstats", "Examples", "Using Formulas", "Linear Factor Models for Asset Pricing", "Introduction", "Formulas and Mathematical Detail", "Module Reference", "Change Log", "Version 3.0", "Version 4", "Verison 5.5", "Version 6.0", "Compatibility", "linearmodels.compat.statsmodels.Summary", "linearmodels.compat.statsmodels.Summary.add_extra_txt", "linearmodels.compat.statsmodels.Summary.add_table_2cols", "linearmodels.compat.statsmodels.Summary.add_table_params", "linearmodels.compat.statsmodels.Summary.as_csv", "linearmodels.compat.statsmodels.Summary.as_html", "linearmodels.compat.statsmodels.Summary.as_latex", "linearmodels.compat.statsmodels.Summary.as_text", "Contributing", "linearmodels", "linearmodels.iv.absorbing.AbsorbingLS", "linearmodels.iv.absorbing.AbsorbingLS.absorbed_dependent", "linearmodels.iv.absorbing.AbsorbingLS.absorbed_exog", "linearmodels.iv.absorbing.AbsorbingLS.dependent", "linearmodels.iv.absorbing.AbsorbingLS.exog", "linearmodels.iv.absorbing.AbsorbingLS.fit", "linearmodels.iv.absorbing.AbsorbingLS.has_constant", "linearmodels.iv.absorbing.AbsorbingLS.instruments", "linearmodels.iv.absorbing.AbsorbingLS.resids", "linearmodels.iv.absorbing.AbsorbingLS.weights", "linearmodels.iv.absorbing.AbsorbingLS.wresids", "linearmodels.iv.absorbing.AbsorbingLSResults", "linearmodels.iv.absorbing.AbsorbingLSResults.absorbed_effects", "linearmodels.iv.absorbing.AbsorbingLSResults.absorbed_rsquared", "linearmodels.iv.absorbing.AbsorbingLSResults.conf_int", "linearmodels.iv.absorbing.AbsorbingLSResults.cov", "linearmodels.iv.absorbing.AbsorbingLSResults.cov_config", "linearmodels.iv.absorbing.AbsorbingLSResults.cov_estimator", "linearmodels.iv.absorbing.AbsorbingLSResults.cov_type", "linearmodels.iv.absorbing.AbsorbingLSResults.debiased", "linearmodels.iv.absorbing.AbsorbingLSResults.df_absorbed", "linearmodels.iv.absorbing.AbsorbingLSResults.df_model", "linearmodels.iv.absorbing.AbsorbingLSResults.df_resid", "linearmodels.iv.absorbing.AbsorbingLSResults.f_statistic", "linearmodels.iv.absorbing.AbsorbingLSResults.fitted_values", "linearmodels.iv.absorbing.AbsorbingLSResults.has_constant", "linearmodels.iv.absorbing.AbsorbingLSResults.idiosyncratic", "linearmodels.iv.absorbing.AbsorbingLSResults.method", "linearmodels.iv.absorbing.AbsorbingLSResults.model_ss", "linearmodels.iv.absorbing.AbsorbingLSResults.nobs", "linearmodels.iv.absorbing.AbsorbingLSResults.params", "linearmodels.iv.absorbing.AbsorbingLSResults.pvalues", "linearmodels.iv.absorbing.AbsorbingLSResults.resid_ss", "linearmodels.iv.absorbing.AbsorbingLSResults.resids", "linearmodels.iv.absorbing.AbsorbingLSResults.rsquared", "linearmodels.iv.absorbing.AbsorbingLSResults.rsquared_adj", "linearmodels.iv.absorbing.AbsorbingLSResults.s2", "linearmodels.iv.absorbing.AbsorbingLSResults.std_errors", "linearmodels.iv.absorbing.AbsorbingLSResults.summary", "linearmodels.iv.absorbing.AbsorbingLSResults.total_ss", "linearmodels.iv.absorbing.AbsorbingLSResults.tstats", "linearmodels.iv.absorbing.AbsorbingLSResults.wald_test", "linearmodels.iv.absorbing.AbsorbingLSResults.wresids", "linearmodels.iv.absorbing.AbsorbingRegressor", "linearmodels.iv.absorbing.AbsorbingRegressor.approx_rank", "linearmodels.iv.absorbing.AbsorbingRegressor.has_constant", "linearmodels.iv.absorbing.AbsorbingRegressor.hash", "linearmodels.iv.absorbing.AbsorbingRegressor.regressors", "linearmodels.iv.absorbing.Interaction", "linearmodels.iv.absorbing.Interaction.cat", "linearmodels.iv.absorbing.Interaction.cont", "linearmodels.iv.absorbing.Interaction.drop", "linearmodels.iv.absorbing.Interaction.from_frame", "linearmodels.iv.absorbing.Interaction.hash", "linearmodels.iv.absorbing.Interaction.isnull", "linearmodels.iv.absorbing.Interaction.nobs", "linearmodels.iv.absorbing.Interaction.sparse", "Absorbing Regression", "Further Examples", "Basic Examples", "Using formulas to specify models", "Instrumental Variable Estimation", "Introduction", "linearmodels.iv.covariance.ClusteredCovariance", "linearmodels.iv.covariance.ClusteredCovariance.config", "linearmodels.iv.covariance.ClusteredCovariance.cov", "linearmodels.iv.covariance.ClusteredCovariance.debiased", "linearmodels.iv.covariance.ClusteredCovariance.s", "linearmodels.iv.covariance.ClusteredCovariance.s2", "linearmodels.iv.covariance.HeteroskedasticCovariance", "linearmodels.iv.covariance.HeteroskedasticCovariance.config", "linearmodels.iv.covariance.HeteroskedasticCovariance.cov", "linearmodels.iv.covariance.HeteroskedasticCovariance.debiased", "linearmodels.iv.covariance.HeteroskedasticCovariance.s", "linearmodels.iv.covariance.HeteroskedasticCovariance.s2", "linearmodels.iv.covariance.HomoskedasticCovariance", "linearmodels.iv.covariance.HomoskedasticCovariance.config", "linearmodels.iv.covariance.HomoskedasticCovariance.cov", "linearmodels.iv.covariance.HomoskedasticCovariance.debiased", "linearmodels.iv.covariance.HomoskedasticCovariance.s", "linearmodels.iv.covariance.HomoskedasticCovariance.s2", "linearmodels.iv.covariance.KernelCovariance", "linearmodels.iv.covariance.KernelCovariance.config", "linearmodels.iv.covariance.KernelCovariance.cov", "linearmodels.iv.covariance.KernelCovariance.debiased", "linearmodels.iv.covariance.KernelCovariance.s", "linearmodels.iv.covariance.KernelCovariance.s2", "linearmodels.iv.covariance.kernel_optimal_bandwidth", "linearmodels.iv.covariance.kernel_weight_bartlett", "linearmodels.iv.covariance.kernel_weight_parzen", "linearmodels.iv.covariance.kernel_weight_quadratic_spectral", "linearmodels.iv.data.IVData", "linearmodels.iv.data.IVData.cols", "linearmodels.iv.data.IVData.drop", "linearmodels.iv.data.IVData.isnull", "linearmodels.iv.data.IVData.labels", "linearmodels.iv.data.IVData.ndarray", "linearmodels.iv.data.IVData.ndim", "linearmodels.iv.data.IVData.pandas", "linearmodels.iv.data.IVData.rows", "linearmodels.iv.data.IVData.shape", "linearmodels.iv.gmm.HeteroskedasticWeightMatrix", "linearmodels.iv.gmm.HeteroskedasticWeightMatrix.config", "linearmodels.iv.gmm.HeteroskedasticWeightMatrix.weight_matrix", "linearmodels.iv.gmm.HomoskedasticWeightMatrix", "linearmodels.iv.gmm.HomoskedasticWeightMatrix.config", "linearmodels.iv.gmm.HomoskedasticWeightMatrix.weight_matrix", "linearmodels.iv.gmm.IVGMMCovariance", "linearmodels.iv.gmm.IVGMMCovariance.config", "linearmodels.iv.gmm.IVGMMCovariance.cov", "linearmodels.iv.gmm.IVGMMCovariance.debiased", "linearmodels.iv.gmm.IVGMMCovariance.s", "linearmodels.iv.gmm.IVGMMCovariance.s2", "linearmodels.iv.gmm.KernelWeightMatrix", "linearmodels.iv.gmm.KernelWeightMatrix.bandwidth", "linearmodels.iv.gmm.KernelWeightMatrix.config", "linearmodels.iv.gmm.KernelWeightMatrix.weight_matrix", "linearmodels.iv.gmm.OneWayClusteredWeightMatrix", "linearmodels.iv.gmm.OneWayClusteredWeightMatrix.config", "linearmodels.iv.gmm.OneWayClusteredWeightMatrix.weight_matrix", "linearmodels.iv.model.IV2SLS", "linearmodels.iv.model.IV2SLS.estimate_parameters", "linearmodels.iv.model.IV2SLS.fit", "linearmodels.iv.model.IV2SLS.formula", "linearmodels.iv.model.IV2SLS.from_formula", "linearmodels.iv.model.IV2SLS.has_constant", "linearmodels.iv.model.IV2SLS.isnull", "linearmodels.iv.model.IV2SLS.notnull", "linearmodels.iv.model.IV2SLS.predict", "linearmodels.iv.model.IV2SLS.resids", "linearmodels.iv.model.IV2SLS.wresids", "linearmodels.iv.model.IVGMM", "linearmodels.iv.model.IVGMM.estimate_parameters", "linearmodels.iv.model.IVGMM.fit", "linearmodels.iv.model.IVGMM.formula", "linearmodels.iv.model.IVGMM.from_formula", "linearmodels.iv.model.IVGMM.has_constant", "linearmodels.iv.model.IVGMM.isnull", "linearmodels.iv.model.IVGMM.notnull", "linearmodels.iv.model.IVGMM.predict", "linearmodels.iv.model.IVGMM.resids", "linearmodels.iv.model.IVGMM.wresids", "linearmodels.iv.model.IVGMMCUE", "linearmodels.iv.model.IVGMMCUE.estimate_parameters", "linearmodels.iv.model.IVGMMCUE.fit", "linearmodels.iv.model.IVGMMCUE.formula", "linearmodels.iv.model.IVGMMCUE.from_formula", "linearmodels.iv.model.IVGMMCUE.has_constant", "linearmodels.iv.model.IVGMMCUE.isnull", "linearmodels.iv.model.IVGMMCUE.j", "linearmodels.iv.model.IVGMMCUE.notnull", "linearmodels.iv.model.IVGMMCUE.predict", "linearmodels.iv.model.IVGMMCUE.resids", "linearmodels.iv.model.IVGMMCUE.wresids", "linearmodels.iv.model.IVLIML", "linearmodels.iv.model.IVLIML.estimate_parameters", "linearmodels.iv.model.IVLIML.fit", "linearmodels.iv.model.IVLIML.formula", "linearmodels.iv.model.IVLIML.from_formula", "linearmodels.iv.model.IVLIML.has_constant", "linearmodels.iv.model.IVLIML.isnull", "linearmodels.iv.model.IVLIML.notnull", "linearmodels.iv.model.IVLIML.predict", "linearmodels.iv.model.IVLIML.resids", "linearmodels.iv.model.IVLIML.wresids", "linearmodels.iv.model._OLS", "linearmodels.iv.model._OLS.estimate_parameters", "linearmodels.iv.model._OLS.fit", "linearmodels.iv.model._OLS.formula", "linearmodels.iv.model._OLS.from_formula", "linearmodels.iv.model._OLS.has_constant", "linearmodels.iv.model._OLS.isnull", "linearmodels.iv.model._OLS.notnull", "linearmodels.iv.model._OLS.predict", "linearmodels.iv.model._OLS.resids", "linearmodels.iv.model._OLS.wresids", "linearmodels.iv.results.FirstStageResults", "linearmodels.iv.results.FirstStageResults.diagnostics", "linearmodels.iv.results.FirstStageResults.individual", "linearmodels.iv.results.FirstStageResults.summary", "linearmodels.iv.results.IVGMMResults", "linearmodels.iv.results.IVGMMResults.c_stat", "linearmodels.iv.results.IVGMMResults.conf_int", "linearmodels.iv.results.IVGMMResults.cov", "linearmodels.iv.results.IVGMMResults.cov_config", "linearmodels.iv.results.IVGMMResults.cov_estimator", "linearmodels.iv.results.IVGMMResults.cov_type", "linearmodels.iv.results.IVGMMResults.debiased", "linearmodels.iv.results.IVGMMResults.df_model", "linearmodels.iv.results.IVGMMResults.df_resid", "linearmodels.iv.results.IVGMMResults.f_statistic", "linearmodels.iv.results.IVGMMResults.first_stage", "linearmodels.iv.results.IVGMMResults.fitted_values", "linearmodels.iv.results.IVGMMResults.has_constant", "linearmodels.iv.results.IVGMMResults.idiosyncratic", "linearmodels.iv.results.IVGMMResults.iterations", "linearmodels.iv.results.IVGMMResults.j_stat", "linearmodels.iv.results.IVGMMResults.kappa", "linearmodels.iv.results.IVGMMResults.method", "linearmodels.iv.results.IVGMMResults.model_ss", "linearmodels.iv.results.IVGMMResults.nobs", "linearmodels.iv.results.IVGMMResults.params", "linearmodels.iv.results.IVGMMResults.predict", "linearmodels.iv.results.IVGMMResults.pvalues", "linearmodels.iv.results.IVGMMResults.resid_ss", "linearmodels.iv.results.IVGMMResults.resids", "linearmodels.iv.results.IVGMMResults.rsquared", "linearmodels.iv.results.IVGMMResults.rsquared_adj", "linearmodels.iv.results.IVGMMResults.s2", "linearmodels.iv.results.IVGMMResults.std_errors", "linearmodels.iv.results.IVGMMResults.summary", "linearmodels.iv.results.IVGMMResults.total_ss", "linearmodels.iv.results.IVGMMResults.tstats", "linearmodels.iv.results.IVGMMResults.wald_test", "linearmodels.iv.results.IVGMMResults.weight_config", "linearmodels.iv.results.IVGMMResults.weight_matrix", "linearmodels.iv.results.IVGMMResults.weight_type", "linearmodels.iv.results.IVGMMResults.wresids", "linearmodels.iv.results.IVModelComparison", "linearmodels.iv.results.IVModelComparison.cov_estimator", "linearmodels.iv.results.IVModelComparison.estimator_method", "linearmodels.iv.results.IVModelComparison.f_statistic", "linearmodels.iv.results.IVModelComparison.nobs", "linearmodels.iv.results.IVModelComparison.params", "linearmodels.iv.results.IVModelComparison.pvalues", "linearmodels.iv.results.IVModelComparison.rsquared", "linearmodels.iv.results.IVModelComparison.rsquared_adj", "linearmodels.iv.results.IVModelComparison.std_errors", "linearmodels.iv.results.IVModelComparison.summary", "linearmodels.iv.results.IVModelComparison.tstats", "linearmodels.iv.results.IVResults", "linearmodels.iv.results.IVResults.anderson_rubin", "linearmodels.iv.results.IVResults.basmann", "linearmodels.iv.results.IVResults.basmann_f", "linearmodels.iv.results.IVResults.conf_int", "linearmodels.iv.results.IVResults.cov", "linearmodels.iv.results.IVResults.cov_config", "linearmodels.iv.results.IVResults.cov_estimator", "linearmodels.iv.results.IVResults.cov_type", "linearmodels.iv.results.IVResults.debiased", "linearmodels.iv.results.IVResults.df_model", "linearmodels.iv.results.IVResults.df_resid", "linearmodels.iv.results.IVResults.durbin", "linearmodels.iv.results.IVResults.f_statistic", "linearmodels.iv.results.IVResults.first_stage", "linearmodels.iv.results.IVResults.fitted_values", "linearmodels.iv.results.IVResults.has_constant", "linearmodels.iv.results.IVResults.idiosyncratic", "linearmodels.iv.results.IVResults.kappa", "linearmodels.iv.results.IVResults.method", "linearmodels.iv.results.IVResults.model_ss", "linearmodels.iv.results.IVResults.nobs", "linearmodels.iv.results.IVResults.params", "linearmodels.iv.results.IVResults.predict", "linearmodels.iv.results.IVResults.pvalues", "linearmodels.iv.results.IVResults.resid_ss", "linearmodels.iv.results.IVResults.resids", "linearmodels.iv.results.IVResults.rsquared", "linearmodels.iv.results.IVResults.rsquared_adj", "linearmodels.iv.results.IVResults.s2", "linearmodels.iv.results.IVResults.sargan", "linearmodels.iv.results.IVResults.std_errors", "linearmodels.iv.results.IVResults.summary", "linearmodels.iv.results.IVResults.total_ss", "linearmodels.iv.results.IVResults.tstats", "linearmodels.iv.results.IVResults.wald_test", "linearmodels.iv.results.IVResults.wooldridge_overid", "linearmodels.iv.results.IVResults.wooldridge_regression", "linearmodels.iv.results.IVResults.wooldridge_score", "linearmodels.iv.results.IVResults.wresids", "linearmodels.iv.results.IVResults.wu_hausman", "linearmodels.iv.results.OLSResults", "linearmodels.iv.results.OLSResults.conf_int", "linearmodels.iv.results.OLSResults.cov", "linearmodels.iv.results.OLSResults.cov_config", "linearmodels.iv.results.OLSResults.cov_estimator", "linearmodels.iv.results.OLSResults.cov_type", "linearmodels.iv.results.OLSResults.debiased", "linearmodels.iv.results.OLSResults.df_model", "linearmodels.iv.results.OLSResults.df_resid", "linearmodels.iv.results.OLSResults.f_statistic", "linearmodels.iv.results.OLSResults.fitted_values", "linearmodels.iv.results.OLSResults.has_constant", "linearmodels.iv.results.OLSResults.idiosyncratic", "linearmodels.iv.results.OLSResults.kappa", "linearmodels.iv.results.OLSResults.method", "linearmodels.iv.results.OLSResults.model_ss", "linearmodels.iv.results.OLSResults.nobs", "linearmodels.iv.results.OLSResults.params", "linearmodels.iv.results.OLSResults.predict", "linearmodels.iv.results.OLSResults.pvalues", "linearmodels.iv.results.OLSResults.resid_ss", "linearmodels.iv.results.OLSResults.resids", "linearmodels.iv.results.OLSResults.rsquared", "linearmodels.iv.results.OLSResults.rsquared_adj", "linearmodels.iv.results.OLSResults.s2", "linearmodels.iv.results.OLSResults.std_errors", "linearmodels.iv.results.OLSResults.summary", "linearmodels.iv.results.OLSResults.total_ss", "linearmodels.iv.results.OLSResults.tstats", "linearmodels.iv.results.OLSResults.wald_test", "linearmodels.iv.results.OLSResults.wresids", "linearmodels.iv.results.compare", "Formulas and Mathematical Detail", "Module Reference", "Data Formats for Panel Data Analysis", "Examples", "Using formulas to specify models", "Implementation Choices", "Panel Data Model Estimation", "Introduction", "Formulas and Mathematical Detail", "Comparison with pandas PanelOLS and FamaMacBeth", "linearmodels.panel.covariance.ACCovariance", "linearmodels.panel.covariance.ACCovariance.ALLOWED_KWARGS", "linearmodels.panel.covariance.ACCovariance.DEFAULT_KERNEL", "linearmodels.panel.covariance.ACCovariance.cov", "linearmodels.panel.covariance.ACCovariance.deferred_cov", "linearmodels.panel.covariance.ACCovariance.eps", "linearmodels.panel.covariance.ACCovariance.name", "linearmodels.panel.covariance.ACCovariance.s2", "linearmodels.panel.covariance.ClusteredCovariance", "linearmodels.panel.covariance.ClusteredCovariance.ALLOWED_KWARGS", "linearmodels.panel.covariance.ClusteredCovariance.DEFAULT_KERNEL", "linearmodels.panel.covariance.ClusteredCovariance.cov", "linearmodels.panel.covariance.ClusteredCovariance.deferred_cov", "linearmodels.panel.covariance.ClusteredCovariance.eps", "linearmodels.panel.covariance.ClusteredCovariance.name", "linearmodels.panel.covariance.ClusteredCovariance.s2", "linearmodels.panel.covariance.DriscollKraay", "linearmodels.panel.covariance.DriscollKraay.ALLOWED_KWARGS", "linearmodels.panel.covariance.DriscollKraay.DEFAULT_KERNEL", "linearmodels.panel.covariance.DriscollKraay.cov", "linearmodels.panel.covariance.DriscollKraay.deferred_cov", "linearmodels.panel.covariance.DriscollKraay.eps", "linearmodels.panel.covariance.DriscollKraay.name", "linearmodels.panel.covariance.DriscollKraay.s2", "linearmodels.panel.covariance.FamaMacBethCovariance", "linearmodels.panel.covariance.FamaMacBethCovariance.ALLOWED_KWARGS", "linearmodels.panel.covariance.FamaMacBethCovariance.DEFAULT_KERNEL", "linearmodels.panel.covariance.FamaMacBethCovariance.all_params", "linearmodels.panel.covariance.FamaMacBethCovariance.bandwidth", "linearmodels.panel.covariance.FamaMacBethCovariance.cov", "linearmodels.panel.covariance.FamaMacBethCovariance.deferred_cov", "linearmodels.panel.covariance.FamaMacBethCovariance.eps", "linearmodels.panel.covariance.FamaMacBethCovariance.name", "linearmodels.panel.covariance.FamaMacBethCovariance.s2", "linearmodels.panel.covariance.HeteroskedasticCovariance", "linearmodels.panel.covariance.HeteroskedasticCovariance.ALLOWED_KWARGS", "linearmodels.panel.covariance.HeteroskedasticCovariance.DEFAULT_KERNEL", "linearmodels.panel.covariance.HeteroskedasticCovariance.cov", "linearmodels.panel.covariance.HeteroskedasticCovariance.deferred_cov", "linearmodels.panel.covariance.HeteroskedasticCovariance.eps", "linearmodels.panel.covariance.HeteroskedasticCovariance.name", "linearmodels.panel.covariance.HeteroskedasticCovariance.s2", "linearmodels.panel.covariance.HomoskedasticCovariance", "linearmodels.panel.covariance.HomoskedasticCovariance.ALLOWED_KWARGS", "linearmodels.panel.covariance.HomoskedasticCovariance.DEFAULT_KERNEL", "linearmodels.panel.covariance.HomoskedasticCovariance.cov", "linearmodels.panel.covariance.HomoskedasticCovariance.deferred_cov", "linearmodels.panel.covariance.HomoskedasticCovariance.eps", "linearmodels.panel.covariance.HomoskedasticCovariance.name", "linearmodels.panel.covariance.HomoskedasticCovariance.s2", "linearmodels.panel.data.PanelData", "linearmodels.panel.data.PanelData.copy", "linearmodels.panel.data.PanelData.count", "linearmodels.panel.data.PanelData.dataframe", "linearmodels.panel.data.PanelData.demean", "linearmodels.panel.data.PanelData.drop", "linearmodels.panel.data.PanelData.dummies", "linearmodels.panel.data.PanelData.entities", "linearmodels.panel.data.PanelData.entity_ids", "linearmodels.panel.data.PanelData.first_difference", "linearmodels.panel.data.PanelData.general_demean", "linearmodels.panel.data.PanelData.index", "linearmodels.panel.data.PanelData.isnull", "linearmodels.panel.data.PanelData.mean", "linearmodels.panel.data.PanelData.ndim", "linearmodels.panel.data.PanelData.nentity", "linearmodels.panel.data.PanelData.nobs", "linearmodels.panel.data.PanelData.nvar", "linearmodels.panel.data.PanelData.panel", "linearmodels.panel.data.PanelData.shape", "linearmodels.panel.data.PanelData.time", "linearmodels.panel.data.PanelData.time_ids", "linearmodels.panel.data.PanelData.values2d", "linearmodels.panel.data.PanelData.values3d", "linearmodels.panel.data.PanelData.vars", "linearmodels.panel.data._Panel", "linearmodels.panel.data._Panel.from_array", "linearmodels.panel.data._Panel.items", "linearmodels.panel.data._Panel.major_axis", "linearmodels.panel.data._Panel.minor_axis", "linearmodels.panel.data._Panel.shape", "linearmodels.panel.data._Panel.to_frame", "linearmodels.panel.data._Panel.values", "linearmodels.panel.model.BetweenOLS", "linearmodels.panel.model.BetweenOLS.fit", "linearmodels.panel.model.BetweenOLS.formula", "linearmodels.panel.model.BetweenOLS.from_formula", "linearmodels.panel.model.BetweenOLS.has_constant", "linearmodels.panel.model.BetweenOLS.not_null", "linearmodels.panel.model.BetweenOLS.predict", "linearmodels.panel.model.BetweenOLS.reformat_clusters", "linearmodels.panel.model.FamaMacBeth", "linearmodels.panel.model.FamaMacBeth.fit", "linearmodels.panel.model.FamaMacBeth.formula", "linearmodels.panel.model.FamaMacBeth.from_formula", "linearmodels.panel.model.FamaMacBeth.has_constant", "linearmodels.panel.model.FamaMacBeth.not_null", "linearmodels.panel.model.FamaMacBeth.predict", "linearmodels.panel.model.FamaMacBeth.reformat_clusters", "linearmodels.panel.model.FirstDifferenceOLS", "linearmodels.panel.model.FirstDifferenceOLS.fit", "linearmodels.panel.model.FirstDifferenceOLS.formula", "linearmodels.panel.model.FirstDifferenceOLS.from_formula", "linearmodels.panel.model.FirstDifferenceOLS.has_constant", "linearmodels.panel.model.FirstDifferenceOLS.not_null", "linearmodels.panel.model.FirstDifferenceOLS.predict", "linearmodels.panel.model.FirstDifferenceOLS.reformat_clusters", "linearmodels.panel.model.PanelOLS", "linearmodels.panel.model.PanelOLS.entity_effects", "linearmodels.panel.model.PanelOLS.fit", "linearmodels.panel.model.PanelOLS.formula", "linearmodels.panel.model.PanelOLS.from_formula", "linearmodels.panel.model.PanelOLS.has_constant", "linearmodels.panel.model.PanelOLS.not_null", "linearmodels.panel.model.PanelOLS.other_effects", "linearmodels.panel.model.PanelOLS.predict", "linearmodels.panel.model.PanelOLS.reformat_clusters", "linearmodels.panel.model.PanelOLS.time_effects", "linearmodels.panel.model.PooledOLS", "linearmodels.panel.model.PooledOLS.fit", "linearmodels.panel.model.PooledOLS.formula", "linearmodels.panel.model.PooledOLS.from_formula", "linearmodels.panel.model.PooledOLS.has_constant", "linearmodels.panel.model.PooledOLS.not_null", "linearmodels.panel.model.PooledOLS.predict", "linearmodels.panel.model.PooledOLS.reformat_clusters", "linearmodels.panel.model.RandomEffects", "linearmodels.panel.model.RandomEffects.fit", "linearmodels.panel.model.RandomEffects.formula", "linearmodels.panel.model.RandomEffects.from_formula", "linearmodels.panel.model.RandomEffects.has_constant", "linearmodels.panel.model.RandomEffects.not_null", "linearmodels.panel.model.RandomEffects.predict", "linearmodels.panel.model.RandomEffects.reformat_clusters", "linearmodels.panel.results.FamaMacBethResults", "linearmodels.panel.results.FamaMacBethResults.all_params", "linearmodels.panel.results.FamaMacBethResults.avg_adj_rsquared", "linearmodels.panel.results.FamaMacBethResults.avg_rsquared", "linearmodels.panel.results.FamaMacBethResults.conf_int", "linearmodels.panel.results.FamaMacBethResults.corr_squared_between", "linearmodels.panel.results.FamaMacBethResults.corr_squared_overall", "linearmodels.panel.results.FamaMacBethResults.corr_squared_within", "linearmodels.panel.results.FamaMacBethResults.cov", "linearmodels.panel.results.FamaMacBethResults.df_model", "linearmodels.panel.results.FamaMacBethResults.df_resid", "linearmodels.panel.results.FamaMacBethResults.entity_info", "linearmodels.panel.results.FamaMacBethResults.estimated_effects", "linearmodels.panel.results.FamaMacBethResults.f_statistic", "linearmodels.panel.results.FamaMacBethResults.f_statistic_robust", "linearmodels.panel.results.FamaMacBethResults.fitted_values", "linearmodels.panel.results.FamaMacBethResults.idiosyncratic", "linearmodels.panel.results.FamaMacBethResults.loglik", "linearmodels.panel.results.FamaMacBethResults.model_ss", "linearmodels.panel.results.FamaMacBethResults.name", "linearmodels.panel.results.FamaMacBethResults.nobs", "linearmodels.panel.results.FamaMacBethResults.params", "linearmodels.panel.results.FamaMacBethResults.predict", "linearmodels.panel.results.FamaMacBethResults.pvalues", "linearmodels.panel.results.FamaMacBethResults.resid_ss", "linearmodels.panel.results.FamaMacBethResults.resids", "linearmodels.panel.results.FamaMacBethResults.rsquared", "linearmodels.panel.results.FamaMacBethResults.rsquared_between", "linearmodels.panel.results.FamaMacBethResults.rsquared_overall", "linearmodels.panel.results.FamaMacBethResults.rsquared_within", "linearmodels.panel.results.FamaMacBethResults.s2", "linearmodels.panel.results.FamaMacBethResults.std_errors", "linearmodels.panel.results.FamaMacBethResults.summary", "linearmodels.panel.results.FamaMacBethResults.time_info", "linearmodels.panel.results.FamaMacBethResults.total_ss", "linearmodels.panel.results.FamaMacBethResults.tstats", "linearmodels.panel.results.FamaMacBethResults.wald_test", "linearmodels.panel.results.FamaMacBethResults.wresids", "linearmodels.panel.results.PanelEffectsResults", "linearmodels.panel.results.PanelEffectsResults.conf_int", "linearmodels.panel.results.PanelEffectsResults.corr_squared_between", "linearmodels.panel.results.PanelEffectsResults.corr_squared_overall", "linearmodels.panel.results.PanelEffectsResults.corr_squared_within", "linearmodels.panel.results.PanelEffectsResults.cov", "linearmodels.panel.results.PanelEffectsResults.df_model", "linearmodels.panel.results.PanelEffectsResults.df_resid", "linearmodels.panel.results.PanelEffectsResults.entity_info", "linearmodels.panel.results.PanelEffectsResults.estimated_effects", "linearmodels.panel.results.PanelEffectsResults.f_pooled", "linearmodels.panel.results.PanelEffectsResults.f_statistic", "linearmodels.panel.results.PanelEffectsResults.f_statistic_robust", "linearmodels.panel.results.PanelEffectsResults.fitted_values", "linearmodels.panel.results.PanelEffectsResults.idiosyncratic", "linearmodels.panel.results.PanelEffectsResults.included_effects", "linearmodels.panel.results.PanelEffectsResults.loglik", "linearmodels.panel.results.PanelEffectsResults.model_ss", "linearmodels.panel.results.PanelEffectsResults.name", "linearmodels.panel.results.PanelEffectsResults.nobs", "linearmodels.panel.results.PanelEffectsResults.other_info", "linearmodels.panel.results.PanelEffectsResults.params", "linearmodels.panel.results.PanelEffectsResults.predict", "linearmodels.panel.results.PanelEffectsResults.pvalues", "linearmodels.panel.results.PanelEffectsResults.resid_ss", "linearmodels.panel.results.PanelEffectsResults.resids", "linearmodels.panel.results.PanelEffectsResults.rsquared", "linearmodels.panel.results.PanelEffectsResults.rsquared_between", "linearmodels.panel.results.PanelEffectsResults.rsquared_inclusive", "linearmodels.panel.results.PanelEffectsResults.rsquared_overall", "linearmodels.panel.results.PanelEffectsResults.rsquared_within", "linearmodels.panel.results.PanelEffectsResults.s2", "linearmodels.panel.results.PanelEffectsResults.std_errors", "linearmodels.panel.results.PanelEffectsResults.summary", "linearmodels.panel.results.PanelEffectsResults.time_info", "linearmodels.panel.results.PanelEffectsResults.total_ss", "linearmodels.panel.results.PanelEffectsResults.tstats", "linearmodels.panel.results.PanelEffectsResults.variance_decomposition", "linearmodels.panel.results.PanelEffectsResults.wald_test", "linearmodels.panel.results.PanelEffectsResults.wresids", "linearmodels.panel.results.PanelModelComparison", "linearmodels.panel.results.PanelModelComparison.cov_estimator", "linearmodels.panel.results.PanelModelComparison.estimator_method", "linearmodels.panel.results.PanelModelComparison.f_statistic", "linearmodels.panel.results.PanelModelComparison.nobs", "linearmodels.panel.results.PanelModelComparison.params", "linearmodels.panel.results.PanelModelComparison.pvalues", "linearmodels.panel.results.PanelModelComparison.rsquared", "linearmodels.panel.results.PanelModelComparison.rsquared_between", "linearmodels.panel.results.PanelModelComparison.rsquared_overall", "linearmodels.panel.results.PanelModelComparison.rsquared_within", "linearmodels.panel.results.PanelModelComparison.std_errors", "linearmodels.panel.results.PanelModelComparison.summary", "linearmodels.panel.results.PanelModelComparison.tstats", "linearmodels.panel.results.PanelResults", "linearmodels.panel.results.PanelResults.conf_int", "linearmodels.panel.results.PanelResults.corr_squared_between", "linearmodels.panel.results.PanelResults.corr_squared_overall", "linearmodels.panel.results.PanelResults.corr_squared_within", "linearmodels.panel.results.PanelResults.cov", "linearmodels.panel.results.PanelResults.df_model", "linearmodels.panel.results.PanelResults.df_resid", "linearmodels.panel.results.PanelResults.entity_info", "linearmodels.panel.results.PanelResults.estimated_effects", "linearmodels.panel.results.PanelResults.f_statistic", "linearmodels.panel.results.PanelResults.f_statistic_robust", "linearmodels.panel.results.PanelResults.fitted_values", "linearmodels.panel.results.PanelResults.idiosyncratic", "linearmodels.panel.results.PanelResults.loglik", "linearmodels.panel.results.PanelResults.model_ss", "linearmodels.panel.results.PanelResults.name", "linearmodels.panel.results.PanelResults.nobs", "linearmodels.panel.results.PanelResults.params", "linearmodels.panel.results.PanelResults.predict", "linearmodels.panel.results.PanelResults.pvalues", "linearmodels.panel.results.PanelResults.resid_ss", "linearmodels.panel.results.PanelResults.resids", "linearmodels.panel.results.PanelResults.rsquared", "linearmodels.panel.results.PanelResults.rsquared_between", "linearmodels.panel.results.PanelResults.rsquared_overall", "linearmodels.panel.results.PanelResults.rsquared_within", "linearmodels.panel.results.PanelResults.s2", "linearmodels.panel.results.PanelResults.std_errors", "linearmodels.panel.results.PanelResults.summary", "linearmodels.panel.results.PanelResults.time_info", "linearmodels.panel.results.PanelResults.total_ss", "linearmodels.panel.results.PanelResults.tstats", "linearmodels.panel.results.PanelResults.wald_test", "linearmodels.panel.results.PanelResults.wresids", "linearmodels.panel.results.RandomEffectsResults", "linearmodels.panel.results.RandomEffectsResults.conf_int", "linearmodels.panel.results.RandomEffectsResults.corr_squared_between", "linearmodels.panel.results.RandomEffectsResults.corr_squared_overall", "linearmodels.panel.results.RandomEffectsResults.corr_squared_within", "linearmodels.panel.results.RandomEffectsResults.cov", "linearmodels.panel.results.RandomEffectsResults.df_model", "linearmodels.panel.results.RandomEffectsResults.df_resid", "linearmodels.panel.results.RandomEffectsResults.entity_info", "linearmodels.panel.results.RandomEffectsResults.estimated_effects", "linearmodels.panel.results.RandomEffectsResults.f_statistic", "linearmodels.panel.results.RandomEffectsResults.f_statistic_robust", "linearmodels.panel.results.RandomEffectsResults.fitted_values", "linearmodels.panel.results.RandomEffectsResults.idiosyncratic", "linearmodels.panel.results.RandomEffectsResults.loglik", "linearmodels.panel.results.RandomEffectsResults.model_ss", "linearmodels.panel.results.RandomEffectsResults.name", "linearmodels.panel.results.RandomEffectsResults.nobs", "linearmodels.panel.results.RandomEffectsResults.params", "linearmodels.panel.results.RandomEffectsResults.predict", "linearmodels.panel.results.RandomEffectsResults.pvalues", "linearmodels.panel.results.RandomEffectsResults.resid_ss", "linearmodels.panel.results.RandomEffectsResults.resids", "linearmodels.panel.results.RandomEffectsResults.rsquared", "linearmodels.panel.results.RandomEffectsResults.rsquared_between", "linearmodels.panel.results.RandomEffectsResults.rsquared_overall", "linearmodels.panel.results.RandomEffectsResults.rsquared_within", "linearmodels.panel.results.RandomEffectsResults.s2", "linearmodels.panel.results.RandomEffectsResults.std_errors", "linearmodels.panel.results.RandomEffectsResults.summary", "linearmodels.panel.results.RandomEffectsResults.theta", "linearmodels.panel.results.RandomEffectsResults.time_info", "linearmodels.panel.results.RandomEffectsResults.total_ss", "linearmodels.panel.results.RandomEffectsResults.tstats", "linearmodels.panel.results.RandomEffectsResults.variance_decomposition", "linearmodels.panel.results.RandomEffectsResults.wald_test", "linearmodels.panel.results.RandomEffectsResults.wresids", "linearmodels.panel.results.compare", "linearmodels.panel.utility.PanelModelData", "linearmodels.panel.utility.PanelModelData.clusters", "linearmodels.panel.utility.PanelModelData.count", "linearmodels.panel.utility.PanelModelData.data", "linearmodels.panel.utility.PanelModelData.index", "linearmodels.panel.utility.PanelModelData.other_effects", "linearmodels.panel.utility.PanelModelData.weights", "linearmodels.panel.utility.generate_panel_data", "Module Reference", "Module Plans", "References", "Examples", "Using formulas to specify models", "Three-stage Least Squares (3SLS)", "System Regression Models", "Seemingly Unrelated Regression (SUR/SURE)", "Module Reference", "linearmodels.system.covariance.ClusteredCovariance", "linearmodels.system.covariance.ClusteredCovariance.cov", "linearmodels.system.covariance.ClusteredCovariance.cov_config", "linearmodels.system.covariance.ClusteredCovariance.sigma", "linearmodels.system.covariance.GMMHeteroskedasticCovariance", "linearmodels.system.covariance.GMMHeteroskedasticCovariance.cov", "linearmodels.system.covariance.GMMHeteroskedasticCovariance.cov_config", "linearmodels.system.covariance.GMMHomoskedasticCovariance", "linearmodels.system.covariance.GMMHomoskedasticCovariance.cov", "linearmodels.system.covariance.GMMHomoskedasticCovariance.cov_config", "linearmodels.system.covariance.GMMKernelCovariance", "linearmodels.system.covariance.GMMKernelCovariance.bandwidth", "linearmodels.system.covariance.GMMKernelCovariance.cov", "linearmodels.system.covariance.GMMKernelCovariance.cov_config", "linearmodels.system.covariance.GMMKernelCovariance.kernel", "linearmodels.system.covariance.HeteroskedasticCovariance", "linearmodels.system.covariance.HeteroskedasticCovariance.cov", "linearmodels.system.covariance.HeteroskedasticCovariance.cov_config", "linearmodels.system.covariance.HeteroskedasticCovariance.sigma", "linearmodels.system.covariance.HomoskedasticCovariance", "linearmodels.system.covariance.HomoskedasticCovariance.cov", "linearmodels.system.covariance.HomoskedasticCovariance.cov_config", "linearmodels.system.covariance.HomoskedasticCovariance.sigma", "linearmodels.system.covariance.KernelCovariance", "linearmodels.system.covariance.KernelCovariance.bandwidth", "linearmodels.system.covariance.KernelCovariance.cov", "linearmodels.system.covariance.KernelCovariance.cov_config", "linearmodels.system.covariance.KernelCovariance.kernel", "linearmodels.system.covariance.KernelCovariance.sigma", "linearmodels.system.gmm.HeteroskedasticWeightMatrix", "linearmodels.system.gmm.HeteroskedasticWeightMatrix.config", "linearmodels.system.gmm.HeteroskedasticWeightMatrix.sigma", "linearmodels.system.gmm.HeteroskedasticWeightMatrix.weight_matrix", "linearmodels.system.gmm.HomoskedasticWeightMatrix", "linearmodels.system.gmm.HomoskedasticWeightMatrix.config", "linearmodels.system.gmm.HomoskedasticWeightMatrix.sigma", "linearmodels.system.gmm.HomoskedasticWeightMatrix.weight_matrix", "linearmodels.system.gmm.KernelWeightMatrix", "linearmodels.system.gmm.KernelWeightMatrix.bandwidth", "linearmodels.system.gmm.KernelWeightMatrix.config", "linearmodels.system.gmm.KernelWeightMatrix.kernel", "linearmodels.system.gmm.KernelWeightMatrix.sigma", "linearmodels.system.gmm.KernelWeightMatrix.weight_matrix", "linearmodels.system.model.IV3SLS", "linearmodels.system.model.IV3SLS.add_constraints", "linearmodels.system.model.IV3SLS.constraints", "linearmodels.system.model.IV3SLS.fit", "linearmodels.system.model.IV3SLS.formula", "linearmodels.system.model.IV3SLS.from_formula", "linearmodels.system.model.IV3SLS.has_constant", "linearmodels.system.model.IV3SLS.multivariate_iv", "linearmodels.system.model.IV3SLS.param_names", "linearmodels.system.model.IV3SLS.predict", "linearmodels.system.model.IV3SLS.reset_constraints", "linearmodels.system.model.IVSystemGMM", "linearmodels.system.model.IVSystemGMM.add_constraints", "linearmodels.system.model.IVSystemGMM.constraints", "linearmodels.system.model.IVSystemGMM.fit", "linearmodels.system.model.IVSystemGMM.formula", "linearmodels.system.model.IVSystemGMM.from_formula", "linearmodels.system.model.IVSystemGMM.has_constant", "linearmodels.system.model.IVSystemGMM.param_names", "linearmodels.system.model.IVSystemGMM.predict", "linearmodels.system.model.IVSystemGMM.reset_constraints", "linearmodels.system.model.LinearConstraint", "linearmodels.system.model.LinearConstraint.a", "linearmodels.system.model.LinearConstraint.q", "linearmodels.system.model.LinearConstraint.r", "linearmodels.system.model.LinearConstraint.t", "linearmodels.system.model.SUR", "linearmodels.system.model.SUR.add_constraints", "linearmodels.system.model.SUR.constraints", "linearmodels.system.model.SUR.fit", "linearmodels.system.model.SUR.formula", "linearmodels.system.model.SUR.from_formula", "linearmodels.system.model.SUR.has_constant", "linearmodels.system.model.SUR.multivariate_ls", "linearmodels.system.model.SUR.param_names", "linearmodels.system.model.SUR.predict", "linearmodels.system.model.SUR.reset_constraints", "linearmodels.system.results.GMMSystemResults", "linearmodels.system.results.GMMSystemResults.breusch_pagan", "linearmodels.system.results.GMMSystemResults.conf_int", "linearmodels.system.results.GMMSystemResults.cov", "linearmodels.system.results.GMMSystemResults.cov_config", "linearmodels.system.results.GMMSystemResults.cov_estimator", "linearmodels.system.results.GMMSystemResults.debiased", "linearmodels.system.results.GMMSystemResults.df_model", "linearmodels.system.results.GMMSystemResults.df_resid", "linearmodels.system.results.GMMSystemResults.equation_labels", "linearmodels.system.results.GMMSystemResults.equations", "linearmodels.system.results.GMMSystemResults.fitted_values", "linearmodels.system.results.GMMSystemResults.iterations", "linearmodels.system.results.GMMSystemResults.j_stat", "linearmodels.system.results.GMMSystemResults.likelihood_ratio", "linearmodels.system.results.GMMSystemResults.method", "linearmodels.system.results.GMMSystemResults.model", "linearmodels.system.results.GMMSystemResults.model_ss", "linearmodels.system.results.GMMSystemResults.nobs", "linearmodels.system.results.GMMSystemResults.params", "linearmodels.system.results.GMMSystemResults.predict", "linearmodels.system.results.GMMSystemResults.pvalues", "linearmodels.system.results.GMMSystemResults.resid_ss", "linearmodels.system.results.GMMSystemResults.resids", "linearmodels.system.results.GMMSystemResults.rsquared", "linearmodels.system.results.GMMSystemResults.sigma", "linearmodels.system.results.GMMSystemResults.std_errors", "linearmodels.system.results.GMMSystemResults.summary", "linearmodels.system.results.GMMSystemResults.system_rsquared", "linearmodels.system.results.GMMSystemResults.total_ss", "linearmodels.system.results.GMMSystemResults.tstats", "linearmodels.system.results.GMMSystemResults.w", "linearmodels.system.results.GMMSystemResults.weight_config", "linearmodels.system.results.GMMSystemResults.weight_type", "linearmodels.system.results.GMMSystemResults.wresids", "linearmodels.system.results.SystemResults", "linearmodels.system.results.SystemResults.breusch_pagan", "linearmodels.system.results.SystemResults.conf_int", "linearmodels.system.results.SystemResults.cov", "linearmodels.system.results.SystemResults.cov_config", "linearmodels.system.results.SystemResults.cov_estimator", "linearmodels.system.results.SystemResults.debiased", "linearmodels.system.results.SystemResults.df_model", "linearmodels.system.results.SystemResults.df_resid", "linearmodels.system.results.SystemResults.equation_labels", "linearmodels.system.results.SystemResults.equations", "linearmodels.system.results.SystemResults.fitted_values", "linearmodels.system.results.SystemResults.iterations", "linearmodels.system.results.SystemResults.likelihood_ratio", "linearmodels.system.results.SystemResults.method", "linearmodels.system.results.SystemResults.model", "linearmodels.system.results.SystemResults.model_ss", "linearmodels.system.results.SystemResults.nobs", "linearmodels.system.results.SystemResults.params", "linearmodels.system.results.SystemResults.predict", "linearmodels.system.results.SystemResults.pvalues", "linearmodels.system.results.SystemResults.resid_ss", "linearmodels.system.results.SystemResults.resids", "linearmodels.system.results.SystemResults.rsquared", "linearmodels.system.results.SystemResults.sigma", "linearmodels.system.results.SystemResults.std_errors", "linearmodels.system.results.SystemResults.summary", "linearmodels.system.results.SystemResults.system_rsquared", "linearmodels.system.results.SystemResults.total_ss", "linearmodels.system.results.SystemResults.tstats", "linearmodels.system.results.SystemResults.wresids", "Utilities", "linearmodels.shared.covariance.cov_cluster", "linearmodels.shared.covariance.cov_kernel", "linearmodels.shared.covariance.group_debias_coefficient", "linearmodels.shared.hypotheses.InvalidTestStatistic", "linearmodels.shared.hypotheses.InvalidTestStatistic.critical_values", "linearmodels.shared.hypotheses.InvalidTestStatistic.null", "linearmodels.shared.hypotheses.InvalidTestStatistic.pval", "linearmodels.shared.hypotheses.InvalidTestStatistic.stat", "linearmodels.shared.hypotheses.WaldTestStatistic", "linearmodels.shared.hypotheses.WaldTestStatistic.critical_values", "linearmodels.shared.hypotheses.WaldTestStatistic.null", "linearmodels.shared.hypotheses.WaldTestStatistic.pval", "linearmodels.shared.hypotheses.WaldTestStatistic.stat", "linearmodels.shared.utility.AttrDict", "linearmodels.shared.utility.AttrDict.clear", "linearmodels.shared.utility.AttrDict.copy", "linearmodels.shared.utility.AttrDict.get", "linearmodels.shared.utility.AttrDict.items", "linearmodels.shared.utility.AttrDict.keys", "linearmodels.shared.utility.AttrDict.pop", "linearmodels.shared.utility.AttrDict.popitem", "linearmodels.shared.utility.AttrDict.setdefault", "linearmodels.shared.utility.AttrDict.update", "linearmodels.shared.utility.AttrDict.values"], "terms": {"class": [0, 7, 16, 17, 20, 21, 24, 25, 28, 49, 76, 77, 81, 89, 91, 102, 134, 139, 149, 152, 153, 154, 160, 166, 172, 182, 192, 195, 198, 204, 208, 211, 212, 222, 233, 245, 246, 249, 256, 257, 260, 267, 271, 288, 309, 321, 339, 362, 375, 400, 404, 412, 420, 428, 438, 446, 454, 479, 487, 495, 503, 511, 522, 530, 538, 576, 616, 630, 665, 703, 710, 712, 717, 720, 724, 727, 730, 735, 739, 743, 749, 753, 757, 763, 774, 784, 789, 800, 835, 870, 875, 880], "xe": [0, 7], "ndarrai": [0, 2, 3, 4, 5, 7, 10, 11, 12, 14, 16, 19, 20, 21, 24, 91, 96, 99, 101, 132, 134, 139, 142, 154, 156, 158, 159, 160, 162, 164, 165, 166, 168, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 184, 193, 194, 196, 197, 198, 199, 200, 202, 203, 206, 207, 208, 209, 210, 211, 212, 215, 217, 218, 220, 221, 222, 223, 226, 228, 229, 231, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 244, 245, 246, 249, 251, 252, 253, 254, 255, 256, 257, 260, 262, 263, 264, 265, 266, 293, 304, 306, 344, 356, 380, 391, 404, 407, 408, 409, 412, 415, 416, 417, 420, 423, 424, 425, 428, 433, 434, 435, 438, 441, 442, 443, 446, 449, 450, 451, 454, 458, 459, 462, 464, 475, 476, 477, 480, 486, 487, 488, 490, 492, 493, 494, 495, 498, 500, 501, 502, 503, 504, 506, 508, 509, 510, 511, 513, 515, 517, 519, 520, 522, 523, 525, 527, 528, 529, 530, 531, 533, 535, 536, 537, 560, 574, 598, 614, 649, 663, 684, 700, 720, 721, 723, 724, 725, 727, 728, 730, 732, 735, 736, 738, 739, 740, 742, 743, 745, 748, 751, 752, 755, 756, 761, 762, 763, 768, 770, 772, 774, 777, 779, 784, 785, 786, 788, 789, 794, 796, 820, 831, 854, 867, 868, 869], "jacobian": [0, 3, 6, 7, 11, 15, 73], "none": [0, 7, 16, 18, 19, 21, 22, 23, 26, 27, 83, 84, 91, 96, 132, 134, 139, 142, 149, 150, 151, 153, 154, 172, 182, 184, 193, 196, 199, 204, 205, 206, 209, 211, 215, 219, 222, 224, 226, 230, 233, 234, 235, 237, 242, 245, 249, 253, 256, 260, 264, 272, 293, 304, 333, 344, 356, 361, 380, 391, 404, 412, 420, 428, 446, 458, 459, 461, 464, 467, 474, 478, 480, 487, 489, 490, 493, 495, 496, 497, 498, 501, 503, 505, 506, 509, 511, 513, 514, 515, 519, 522, 524, 525, 528, 530, 532, 533, 536, 560, 574, 596, 598, 614, 649, 663, 684, 700, 710, 714, 715, 716, 717, 720, 724, 727, 730, 735, 739, 743, 752, 756, 757, 762, 763, 764, 765, 766, 767, 768, 770, 772, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 789, 790, 791, 792, 793, 794, 798, 799, 820, 854, 870, 871, 875, 876, 881, 883, 886, 889], "inv_jacobian": [0, 7], "center": [0, 7, 21, 192, 195, 204, 208, 233, 394, 399, 716, 718, 749, 753, 757], "bool": [0, 6, 7, 15, 16, 17, 19, 20, 21, 23, 25, 91, 96, 97, 110, 116, 136, 154, 157, 160, 163, 166, 169, 172, 175, 182, 192, 193, 195, 196, 198, 199, 201, 204, 206, 208, 209, 213, 216, 224, 227, 234, 235, 238, 247, 250, 258, 261, 278, 284, 293, 309, 330, 337, 344, 368, 373, 380, 393, 404, 412, 420, 428, 438, 446, 454, 458, 460, 487, 488, 490, 491, 495, 496, 498, 499, 503, 504, 506, 507, 511, 512, 513, 515, 516, 518, 521, 522, 523, 525, 526, 530, 531, 533, 534, 560, 598, 616, 649, 684, 702, 710, 720, 724, 727, 730, 735, 739, 743, 749, 753, 757, 766, 774, 777, 779, 784, 792, 804, 806, 820, 839, 841, 854], "true": [0, 7, 17, 21, 25, 39, 59, 69, 70, 72, 77, 84, 96, 105, 114, 122, 148, 149, 154, 160, 166, 172, 182, 233, 272, 273, 281, 293, 294, 325, 334, 344, 345, 363, 371, 380, 381, 394, 396, 397, 401, 403, 404, 412, 420, 438, 446, 454, 458, 487, 488, 490, 495, 496, 498, 503, 504, 506, 511, 513, 515, 522, 523, 525, 530, 531, 533, 542, 552, 560, 561, 574, 577, 588, 598, 599, 614, 631, 641, 649, 650, 663, 666, 676, 684, 685, 700, 710, 714, 715, 716, 766, 784, 792, 802, 820, 821, 837, 854, 855], "debias": [0, 7, 17, 21, 25, 39, 59, 96, 105, 114, 122, 149, 150, 151, 153, 154, 159, 160, 165, 166, 171, 172, 177, 192, 195, 198, 203, 204, 208, 213, 224, 235, 247, 258, 273, 281, 294, 325, 334, 345, 363, 371, 381, 394, 402, 403, 404, 412, 420, 428, 438, 446, 488, 496, 504, 513, 523, 531, 542, 552, 561, 577, 588, 599, 631, 641, 650, 666, 676, 685, 714, 715, 716, 718, 720, 724, 727, 730, 735, 739, 743, 749, 753, 757, 766, 777, 792, 802, 821, 837, 855, 869], "fals": [0, 7, 16, 19, 20, 21, 23, 77, 84, 91, 96, 148, 149, 150, 151, 153, 154, 160, 166, 172, 192, 195, 198, 204, 208, 213, 224, 234, 235, 247, 258, 293, 309, 344, 380, 393, 397, 399, 404, 412, 420, 428, 438, 446, 458, 460, 488, 511, 513, 515, 531, 560, 598, 616, 649, 684, 702, 710, 714, 715, 716, 720, 724, 727, 730, 735, 739, 743, 749, 753, 757, 766, 792, 820, 854], "df": [0, 7, 73, 404, 420, 438, 446, 479, 552, 588, 641, 676, 716, 875], "int": [0, 7, 17, 21, 34, 37, 57, 111, 112, 113, 120, 135, 139, 146, 154, 160, 166, 172, 178, 179, 180, 181, 182, 186, 188, 191, 193, 196, 199, 204, 205, 206, 209, 212, 219, 224, 230, 234, 242, 245, 246, 249, 253, 257, 260, 264, 279, 280, 286, 291, 331, 332, 342, 369, 370, 378, 404, 412, 420, 438, 446, 468, 469, 470, 471, 473, 484, 493, 501, 509, 519, 528, 536, 547, 548, 558, 582, 583, 595, 636, 637, 647, 671, 672, 682, 710, 766, 772, 777, 782, 784, 792, 798, 807, 808, 812, 818, 842, 843, 847, 852, 875], "0": [0, 7, 21, 69, 70, 72, 73, 84, 105, 132, 139, 143, 148, 149, 150, 151, 153, 172, 180, 182, 224, 245, 249, 256, 260, 273, 304, 325, 356, 358, 363, 391, 394, 396, 397, 398, 400, 401, 402, 403, 404, 412, 420, 428, 438, 446, 454, 490, 498, 506, 515, 525, 533, 542, 574, 577, 614, 631, 663, 666, 700, 706, 707, 710, 714, 715, 716, 717, 718, 763, 764, 774, 775, 789, 790, 801, 802, 814, 836, 837, 848], "sourc": [0, 7, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 49, 73, 81, 82, 83, 84, 85, 86, 87, 88, 91, 96, 99, 101, 102, 134, 139, 142, 143, 149, 154, 160, 166, 172, 178, 179, 180, 181, 182, 184, 192, 194, 195, 197, 198, 204, 207, 208, 210, 211, 215, 222, 223, 224, 226, 233, 234, 235, 237, 240, 245, 249, 256, 267, 271, 272, 309, 321, 333, 361, 362, 380, 393, 394, 402, 404, 412, 420, 428, 438, 446, 450, 454, 455, 456, 458, 459, 460, 463, 464, 467, 479, 480, 485, 487, 488, 490, 495, 496, 498, 503, 504, 506, 511, 513, 515, 522, 523, 525, 528, 530, 531, 533, 538, 576, 616, 630, 631, 649, 663, 665, 702, 703, 710, 718, 720, 724, 727, 730, 735, 739, 743, 749, 752, 753, 755, 756, 757, 762, 763, 768, 770, 774, 777, 779, 784, 789, 794, 796, 800, 835, 836, 848, 854, 867, 868, 869, 870, 875, 880, 881, 882, 884, 885, 886, 889, 890], "heteroskedast": [0, 7, 25, 69, 71, 72, 73, 77, 96, 149, 150, 151, 153, 160, 164, 192, 198, 204, 213, 222, 224, 233, 247, 258, 394, 420, 488, 496, 504, 513, 523, 531, 715, 716, 720, 735, 749, 757, 766, 777, 779, 792], "robust": [0, 7, 17, 21, 25, 69, 70, 71, 72, 73, 77, 96, 114, 148, 149, 150, 151, 153, 164, 192, 198, 204, 213, 222, 224, 226, 233, 235, 237, 247, 258, 281, 334, 371, 394, 396, 398, 401, 403, 404, 420, 428, 488, 496, 504, 513, 523, 531, 552, 588, 641, 676, 713, 715, 716, 718, 749, 757, 766, 774, 777, 779, 792], "estim": [0, 7, 8, 13, 16, 17, 19, 20, 21, 23, 24, 25, 29, 30, 31, 32, 34, 35, 38, 41, 42, 45, 46, 49, 50, 51, 52, 53, 55, 58, 61, 62, 65, 66, 70, 71, 72, 76, 77, 84, 90, 91, 96, 102, 106, 107, 108, 109, 114, 117, 118, 121, 124, 127, 128, 129, 133, 148, 154, 156, 158, 159, 160, 162, 164, 165, 166, 168, 170, 171, 172, 174, 176, 177, 192, 193, 195, 196, 198, 200, 202, 203, 204, 205, 206, 208, 209, 211, 212, 213, 215, 218, 219, 222, 223, 224, 226, 229, 230, 233, 234, 235, 237, 240, 241, 242, 245, 246, 247, 249, 252, 253, 256, 257, 258, 260, 263, 264, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 281, 285, 286, 287, 288, 289, 292, 293, 296, 299, 300, 301, 305, 306, 307, 308, 309, 310, 311, 319, 321, 322, 324, 326, 327, 328, 329, 334, 338, 339, 340, 343, 344, 347, 350, 351, 352, 353, 358, 360, 362, 364, 365, 366, 367, 371, 374, 375, 376, 379, 380, 383, 386, 387, 388, 392, 393, 396, 398, 399, 401, 403, 404, 407, 410, 412, 415, 418, 420, 423, 426, 428, 431, 432, 433, 436, 438, 441, 444, 446, 449, 452, 458, 487, 488, 490, 494, 495, 496, 498, 502, 503, 504, 506, 510, 511, 513, 515, 520, 522, 523, 525, 529, 530, 531, 533, 537, 539, 546, 550, 552, 554, 558, 559, 560, 563, 565, 566, 567, 568, 569, 570, 581, 585, 588, 590, 595, 597, 598, 601, 603, 605, 606, 607, 608, 609, 616, 617, 618, 628, 635, 639, 641, 643, 647, 648, 649, 652, 654, 655, 656, 657, 658, 659, 670, 674, 676, 678, 682, 683, 684, 687, 689, 690, 691, 692, 693, 694, 702, 710, 713, 717, 720, 724, 727, 730, 731, 734, 735, 739, 743, 744, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 766, 768, 772, 774, 777, 779, 782, 784, 785, 789, 792, 794, 796, 798, 800, 801, 803, 804, 805, 813, 814, 815, 816, 819, 820, 823, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 838, 839, 840, 848, 849, 850, 853, 854, 857, 859, 860, 861, 862, 865, 867, 868], "paramet": [0, 2, 7, 10, 16, 17, 19, 20, 21, 23, 24, 25, 27, 31, 35, 38, 39, 45, 48, 49, 52, 55, 58, 59, 65, 68, 69, 70, 71, 72, 73, 77, 82, 83, 84, 91, 96, 99, 101, 102, 105, 106, 107, 114, 117, 118, 121, 122, 128, 131, 132, 134, 139, 143, 148, 149, 150, 151, 152, 153, 154, 156, 160, 162, 166, 168, 172, 174, 178, 179, 180, 181, 182, 192, 194, 195, 197, 198, 200, 204, 207, 208, 210, 211, 212, 213, 215, 219, 220, 221, 222, 223, 224, 226, 230, 231, 232, 233, 234, 235, 237, 240, 242, 243, 244, 245, 246, 247, 249, 253, 254, 255, 256, 257, 258, 260, 264, 265, 266, 271, 272, 273, 274, 275, 281, 285, 289, 292, 293, 294, 300, 303, 304, 309, 313, 314, 315, 318, 320, 321, 325, 326, 327, 333, 334, 338, 340, 343, 344, 345, 352, 355, 356, 361, 362, 363, 364, 365, 371, 374, 376, 379, 380, 381, 387, 390, 391, 393, 396, 398, 399, 400, 401, 402, 403, 404, 412, 420, 428, 431, 438, 446, 454, 456, 458, 459, 460, 464, 467, 479, 487, 488, 490, 493, 494, 495, 496, 498, 501, 502, 503, 504, 506, 509, 510, 511, 513, 515, 519, 520, 522, 523, 525, 528, 529, 530, 531, 533, 536, 537, 539, 542, 546, 552, 554, 559, 560, 561, 569, 573, 574, 577, 581, 588, 590, 597, 598, 599, 608, 612, 614, 616, 620, 621, 622, 627, 629, 631, 635, 641, 643, 648, 649, 650, 658, 662, 663, 666, 670, 676, 678, 683, 684, 685, 693, 698, 700, 702, 703, 710, 714, 715, 716, 717, 720, 721, 724, 725, 727, 728, 730, 732, 735, 736, 739, 740, 743, 745, 749, 751, 752, 753, 755, 756, 757, 761, 762, 763, 764, 766, 768, 770, 771, 772, 774, 775, 777, 779, 781, 782, 784, 785, 789, 790, 792, 794, 796, 797, 798, 800, 802, 803, 819, 820, 821, 826, 830, 835, 837, 838, 853, 854, 855, 860, 864, 867, 868, 869, 870, 875], "score": [0, 5, 7, 14, 73, 149, 150, 153, 158, 164, 170, 176, 202, 357, 359, 394, 412, 718, 720, 735, 743, 749, 757], "moment": [0, 5, 7, 14, 20, 21, 69, 73, 90, 149, 153, 192, 194, 195, 197, 198, 204, 207, 208, 210, 222, 224, 226, 233, 237, 240, 272, 287, 712, 713, 716, 717, 724, 727, 730, 749, 752, 753, 756, 757, 758, 762, 774, 779, 813], "condit": [0, 5, 7, 14, 21, 69, 73, 77, 148, 149, 153, 192, 194, 195, 197, 198, 204, 207, 208, 210, 222, 224, 226, 233, 237, 240, 272, 287, 394, 402, 716, 718, 724, 730, 749, 752, 753, 756, 757, 758, 762, 763, 774, 779, 789, 813], "One": [0, 7, 73, 96, 153, 213, 247, 258, 412, 488, 504, 511, 513, 523, 530, 531, 714, 869], "onli": [0, 7, 16, 19, 23, 27, 69, 73, 77, 90, 103, 117, 149, 150, 151, 245, 285, 333, 338, 361, 374, 394, 396, 397, 402, 403, 454, 458, 464, 479, 513, 540, 541, 551, 554, 560, 586, 587, 590, 598, 640, 643, 649, 675, 678, 684, 714, 716, 718, 766, 774, 792, 824, 828, 858, 862], "one": [0, 7, 17, 19, 21, 23, 25, 27, 69, 77, 83, 88, 132, 148, 149, 150, 153, 198, 208, 222, 224, 233, 272, 304, 322, 324, 356, 391, 394, 396, 397, 402, 403, 404, 412, 420, 428, 454, 495, 551, 574, 587, 614, 640, 663, 675, 700, 710, 714, 715, 716, 718, 763, 768, 770, 772, 779, 782, 794, 798, 820, 824, 854, 858], "must": [0, 7, 19, 21, 23, 24, 69, 71, 79, 83, 91, 149, 151, 182, 215, 219, 226, 230, 237, 242, 249, 253, 260, 264, 293, 344, 380, 397, 398, 403, 488, 493, 501, 504, 509, 519, 528, 536, 560, 598, 649, 684, 710, 714, 715, 720, 763, 768, 770, 772, 774, 779, 782, 784, 789, 794, 798, 820, 854], "provid": [0, 7, 16, 19, 21, 23, 27, 96, 151, 152, 153, 154, 182, 198, 213, 224, 235, 245, 247, 249, 258, 260, 396, 398, 400, 403, 404, 412, 420, 428, 458, 488, 504, 513, 523, 531, 552, 588, 641, 676, 710, 714, 718, 730, 743, 757, 763, 768, 770, 774, 789, 794, 875, 884, 885, 890], "invers": [0, 3, 7, 11, 487, 490, 495, 498, 503, 506, 511, 515, 522, 525, 530, 533, 715], "default": [0, 7, 69, 72, 75, 77, 78, 83, 84, 96, 114, 149, 150, 153, 213, 224, 235, 245, 247, 249, 258, 260, 281, 309, 334, 371, 393, 397, 398, 403, 496, 504, 513, 523, 531, 616, 702, 714, 716, 766, 792, 883, 886], "i": [0, 6, 7, 15, 16, 20, 24, 39, 59, 69, 70, 71, 72, 73, 75, 77, 78, 79, 83, 84, 87, 90, 91, 96, 105, 114, 117, 122, 132, 139, 143, 147, 148, 149, 150, 151, 153, 154, 157, 160, 163, 166, 169, 172, 175, 178, 179, 180, 181, 182, 192, 195, 198, 201, 204, 211, 213, 215, 219, 222, 224, 226, 230, 233, 235, 237, 240, 242, 245, 247, 249, 253, 258, 260, 264, 268, 272, 273, 281, 285, 287, 293, 294, 304, 309, 322, 323, 324, 325, 333, 334, 338, 344, 345, 351, 356, 357, 358, 359, 361, 363, 371, 374, 380, 381, 391, 393, 394, 396, 397, 398, 399, 401, 402, 403, 404, 412, 420, 428, 438, 446, 454, 458, 479, 487, 488, 490, 493, 494, 495, 496, 498, 501, 502, 503, 504, 506, 509, 510, 511, 513, 515, 519, 520, 522, 523, 525, 528, 529, 530, 531, 533, 536, 537, 540, 541, 542, 543, 544, 545, 551, 552, 554, 561, 563, 574, 577, 578, 579, 580, 586, 587, 588, 590, 599, 601, 614, 616, 631, 632, 633, 634, 640, 641, 643, 650, 652, 663, 666, 667, 668, 669, 675, 676, 678, 685, 687, 700, 702, 707, 710, 712, 714, 715, 716, 717, 718, 720, 724, 727, 730, 735, 739, 743, 749, 753, 757, 763, 768, 772, 774, 779, 782, 785, 789, 794, 798, 801, 802, 813, 814, 820, 821, 824, 828, 836, 837, 848, 854, 855, 858, 862, 869, 870, 886, 887, 889], "flag": [0, 6, 7, 15, 16, 17, 19, 20, 21, 23, 25, 69, 91, 96, 110, 116, 136, 154, 157, 160, 163, 166, 169, 172, 175, 182, 192, 195, 198, 201, 204, 208, 213, 216, 224, 227, 234, 235, 238, 247, 250, 258, 261, 278, 284, 293, 330, 337, 344, 368, 373, 380, 394, 404, 412, 420, 428, 438, 446, 454, 458, 460, 488, 490, 491, 496, 498, 499, 504, 506, 507, 511, 512, 513, 515, 516, 518, 521, 522, 523, 525, 526, 531, 533, 534, 560, 598, 649, 684, 710, 718, 720, 735, 739, 743, 749, 753, 757, 766, 784, 792, 806, 820, 841, 854], "indic": [0, 6, 7, 15, 16, 17, 19, 20, 21, 23, 25, 69, 77, 84, 91, 96, 110, 116, 136, 149, 150, 151, 153, 154, 157, 160, 163, 166, 169, 172, 175, 182, 192, 195, 198, 201, 204, 208, 213, 215, 216, 224, 226, 227, 234, 235, 237, 238, 247, 249, 250, 258, 260, 261, 272, 278, 284, 287, 293, 322, 324, 330, 337, 344, 368, 373, 380, 394, 401, 402, 404, 412, 420, 428, 438, 446, 454, 458, 459, 460, 488, 490, 491, 496, 498, 499, 504, 506, 507, 511, 512, 513, 515, 516, 518, 521, 522, 523, 525, 526, 531, 533, 534, 560, 598, 649, 684, 710, 720, 735, 739, 743, 749, 753, 757, 763, 766, 769, 780, 784, 792, 795, 806, 813, 820, 841, 854], "when": [0, 7, 21, 69, 70, 71, 72, 73, 75, 77, 78, 91, 96, 132, 144, 148, 149, 150, 151, 153, 178, 182, 198, 204, 219, 230, 235, 242, 245, 253, 256, 264, 268, 293, 304, 344, 356, 359, 380, 391, 394, 396, 397, 398, 399, 400, 401, 402, 403, 454, 458, 488, 493, 496, 501, 504, 509, 513, 519, 523, 528, 531, 536, 550, 560, 574, 585, 598, 614, 639, 649, 663, 674, 684, 700, 714, 715, 716, 717, 718, 720, 735, 739, 743, 757, 763, 766, 768, 772, 777, 779, 782, 789, 792, 794, 798, 801, 814, 820, 836, 848, 854], "comput": [0, 2, 7, 10, 21, 32, 53, 73, 99, 101, 108, 114, 139, 178, 181, 192, 195, 198, 204, 208, 219, 220, 221, 230, 231, 232, 235, 240, 242, 243, 244, 245, 249, 253, 254, 255, 256, 260, 264, 265, 266, 272, 276, 281, 293, 322, 324, 328, 334, 344, 357, 366, 371, 380, 394, 397, 402, 412, 463, 467, 493, 495, 496, 501, 504, 509, 513, 519, 523, 528, 531, 536, 714, 718, 720, 735, 739, 743, 749, 753, 757, 772, 782, 798, 804, 805, 820, 839, 840, 854, 869], "us": [0, 7, 8, 13, 16, 17, 19, 20, 21, 23, 24, 25, 27, 32, 35, 39, 46, 53, 55, 59, 66, 71, 72, 75, 76, 77, 78, 79, 83, 87, 91, 92, 93, 96, 101, 102, 105, 108, 109, 110, 114, 118, 122, 129, 132, 143, 144, 148, 149, 150, 152, 153, 154, 160, 166, 172, 178, 179, 180, 181, 182, 192, 195, 198, 204, 205, 208, 211, 213, 214, 215, 219, 221, 222, 224, 225, 226, 230, 232, 233, 235, 236, 237, 242, 244, 245, 247, 248, 249, 253, 255, 256, 258, 259, 260, 264, 266, 268, 270, 271, 272, 273, 276, 277, 278, 281, 286, 289, 293, 294, 301, 304, 305, 306, 307, 309, 319, 321, 325, 328, 329, 330, 334, 340, 344, 345, 353, 356, 358, 359, 362, 363, 366, 367, 368, 371, 376, 380, 381, 388, 391, 393, 394, 396, 399, 400, 401, 402, 403, 404, 412, 420, 428, 438, 454, 458, 464, 467, 479, 487, 488, 489, 490, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 509, 510, 511, 513, 514, 515, 519, 520, 522, 523, 524, 525, 528, 529, 530, 531, 532, 533, 536, 537, 542, 543, 544, 545, 552, 558, 560, 561, 565, 566, 567, 570, 574, 577, 578, 579, 580, 588, 595, 598, 599, 603, 605, 606, 609, 614, 616, 628, 631, 632, 633, 634, 641, 647, 649, 650, 654, 655, 656, 659, 663, 666, 667, 668, 669, 676, 682, 684, 685, 689, 690, 691, 694, 695, 700, 702, 710, 713, 716, 717, 718, 720, 722, 724, 726, 727, 729, 730, 731, 733, 734, 735, 737, 739, 741, 743, 744, 746, 747, 749, 753, 757, 758, 760, 763, 764, 766, 767, 768, 770, 772, 774, 775, 777, 778, 779, 782, 784, 785, 789, 790, 792, 793, 794, 796, 798, 801, 802, 804, 805, 806, 814, 816, 820, 821, 824, 827, 831, 832, 833, 836, 837, 839, 840, 841, 848, 850, 854, 855, 858, 861, 875], "degre": [0, 7, 17, 21, 25, 73, 96, 112, 113, 213, 224, 235, 247, 258, 279, 280, 287, 323, 331, 332, 351, 369, 370, 394, 397, 399, 402, 403, 404, 412, 420, 438, 446, 488, 496, 504, 513, 523, 531, 547, 548, 551, 552, 582, 583, 586, 587, 588, 636, 637, 640, 641, 671, 672, 675, 676, 807, 808, 813, 842, 843, 875], "freedom": [0, 7, 17, 21, 25, 73, 96, 112, 113, 213, 224, 235, 247, 258, 279, 280, 287, 323, 331, 332, 351, 369, 370, 394, 397, 399, 402, 403, 404, 412, 420, 438, 446, 488, 496, 504, 513, 523, 531, 547, 548, 551, 552, 582, 583, 586, 587, 588, 636, 637, 640, 641, 671, 672, 675, 676, 807, 808, 813, 842, 843, 875], "valu": [0, 7, 16, 20, 21, 24, 69, 70, 71, 72, 73, 77, 83, 84, 96, 103, 107, 114, 115, 132, 148, 149, 150, 151, 153, 154, 160, 166, 172, 212, 217, 219, 224, 228, 230, 233, 234, 235, 239, 242, 245, 246, 249, 251, 253, 257, 260, 262, 264, 268, 272, 275, 281, 283, 288, 293, 304, 309, 312, 322, 323, 324, 327, 333, 334, 336, 339, 344, 351, 356, 357, 358, 359, 361, 365, 371, 372, 375, 380, 391, 393, 396, 397, 398, 399, 401, 402, 403, 404, 420, 428, 458, 463, 480, 488, 493, 494, 501, 502, 504, 509, 510, 513, 519, 520, 523, 528, 529, 531, 536, 537, 540, 541, 551, 552, 553, 560, 574, 586, 587, 588, 589, 598, 614, 616, 619, 640, 641, 642, 649, 663, 675, 676, 677, 684, 695, 700, 702, 705, 707, 710, 714, 715, 716, 717, 718, 720, 763, 764, 768, 772, 774, 775, 779, 782, 784, 786, 789, 790, 794, 798, 811, 820, 846, 854, 876, 878, 886, 887], "ot": [0, 7, 454], "method": [0, 7, 16, 20, 24, 28, 46, 49, 66, 69, 70, 77, 81, 90, 91, 96, 102, 129, 134, 139, 148, 149, 151, 152, 153, 154, 160, 166, 172, 182, 192, 195, 198, 204, 208, 211, 212, 222, 223, 233, 245, 246, 256, 257, 267, 270, 271, 301, 307, 309, 311, 319, 321, 353, 362, 388, 396, 397, 400, 403, 404, 412, 420, 428, 438, 446, 454, 479, 487, 495, 503, 511, 522, 530, 538, 570, 576, 609, 616, 618, 628, 630, 659, 665, 694, 703, 712, 713, 714, 715, 716, 717, 720, 724, 727, 730, 735, 739, 743, 749, 753, 757, 763, 766, 774, 784, 789, 792, 800, 827, 835, 861, 870, 875, 880, 889], "properti": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 22, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 75, 77, 78, 91, 92, 93, 94, 95, 97, 98, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 211, 214, 216, 217, 218, 222, 225, 227, 228, 229, 233, 236, 238, 239, 241, 245, 248, 250, 251, 252, 256, 259, 261, 262, 263, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 401, 403, 404, 407, 409, 410, 411, 412, 415, 417, 418, 419, 420, 423, 425, 426, 427, 428, 431, 432, 433, 435, 436, 437, 438, 441, 443, 444, 445, 446, 449, 451, 452, 453, 454, 457, 461, 462, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 486, 487, 489, 491, 492, 495, 497, 499, 500, 503, 505, 507, 508, 511, 512, 514, 516, 517, 518, 521, 522, 524, 526, 527, 530, 532, 534, 535, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 701, 703, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 753, 754, 757, 758, 759, 760, 763, 764, 765, 767, 769, 771, 774, 775, 776, 778, 780, 781, 784, 785, 786, 787, 788, 789, 790, 791, 793, 795, 797, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879], "dict": [1, 9, 21, 25, 96, 102, 107, 132, 155, 161, 167, 173, 186, 193, 196, 199, 206, 209, 234, 235, 267, 269, 271, 275, 304, 305, 309, 321, 327, 356, 362, 365, 391, 393, 397, 616, 702, 716, 717, 767, 768, 778, 779, 793, 794, 804, 820, 832, 839, 854, 876], "str": [1, 7, 9, 13, 17, 18, 19, 21, 22, 23, 25, 26, 27, 32, 36, 53, 56, 85, 86, 87, 88, 96, 102, 107, 108, 109, 118, 132, 137, 144, 150, 155, 161, 167, 172, 173, 178, 182, 193, 196, 198, 199, 204, 206, 209, 213, 214, 215, 222, 224, 225, 226, 233, 234, 235, 236, 237, 247, 248, 249, 258, 259, 260, 267, 269, 271, 272, 275, 276, 277, 289, 304, 305, 307, 309, 321, 327, 328, 329, 333, 340, 356, 361, 362, 365, 366, 367, 376, 391, 393, 396, 404, 405, 410, 413, 418, 420, 421, 426, 428, 429, 436, 439, 444, 447, 452, 454, 456, 460, 467, 488, 489, 490, 493, 496, 497, 498, 501, 504, 505, 506, 509, 513, 514, 515, 519, 523, 524, 525, 528, 531, 532, 533, 536, 557, 574, 591, 594, 614, 616, 646, 663, 681, 700, 702, 716, 730, 734, 743, 747, 757, 760, 763, 766, 767, 768, 771, 772, 774, 777, 778, 779, 781, 782, 789, 792, 793, 794, 797, 798, 804, 805, 809, 815, 820, 832, 833, 839, 840, 844, 849, 854, 870, 872, 875, 876, 877], "float": [1, 7, 8, 9, 25, 40, 44, 47, 60, 64, 67, 96, 104, 105, 119, 123, 125, 126, 127, 130, 132, 154, 160, 166, 172, 179, 180, 181, 212, 224, 240, 245, 246, 249, 257, 260, 273, 288, 290, 295, 297, 298, 299, 302, 304, 325, 339, 341, 346, 348, 349, 350, 354, 356, 363, 375, 377, 382, 384, 385, 386, 389, 391, 404, 411, 419, 420, 427, 428, 432, 437, 445, 453, 479, 488, 496, 504, 513, 523, 531, 540, 541, 542, 543, 544, 545, 555, 556, 562, 564, 565, 566, 567, 568, 572, 577, 578, 579, 580, 592, 593, 600, 602, 603, 604, 605, 606, 607, 611, 631, 632, 633, 634, 644, 645, 651, 653, 654, 655, 656, 657, 661, 666, 667, 668, 669, 679, 680, 686, 688, 689, 690, 691, 692, 697, 710, 730, 731, 743, 744, 757, 758, 766, 774, 777, 779, 792, 802, 817, 822, 824, 829, 837, 851, 856, 858, 863, 869, 873, 874, 875, 876, 878, 879], "return": [2, 5, 10, 14, 16, 17, 19, 20, 21, 23, 24, 25, 27, 35, 46, 55, 66, 69, 71, 72, 73, 77, 84, 85, 86, 87, 88, 92, 93, 96, 99, 101, 105, 114, 129, 132, 143, 147, 150, 152, 178, 179, 180, 181, 193, 194, 196, 197, 206, 207, 209, 210, 212, 213, 215, 219, 220, 221, 223, 224, 226, 230, 231, 232, 234, 235, 237, 240, 242, 243, 244, 245, 246, 247, 249, 253, 254, 255, 257, 258, 260, 264, 265, 266, 268, 269, 270, 272, 273, 281, 282, 287, 293, 301, 304, 319, 322, 323, 324, 325, 333, 334, 335, 344, 351, 353, 356, 357, 358, 359, 361, 363, 371, 380, 388, 391, 393, 394, 397, 399, 400, 431, 455, 456, 458, 460, 462, 463, 464, 465, 467, 475, 488, 490, 493, 494, 496, 498, 501, 502, 504, 506, 509, 510, 513, 515, 519, 520, 523, 525, 528, 529, 531, 533, 536, 537, 539, 542, 543, 544, 545, 551, 552, 560, 565, 566, 567, 570, 574, 577, 578, 579, 580, 586, 587, 588, 598, 603, 605, 606, 609, 614, 628, 631, 632, 633, 634, 640, 641, 649, 654, 655, 656, 659, 663, 666, 667, 668, 669, 675, 676, 684, 689, 690, 691, 694, 700, 702, 705, 707, 710, 714, 750, 751, 752, 754, 755, 756, 759, 761, 762, 765, 766, 768, 770, 771, 772, 776, 777, 779, 781, 782, 785, 788, 791, 792, 794, 796, 797, 798, 801, 802, 813, 814, 820, 824, 827, 828, 836, 837, 848, 854, 858, 861, 862, 867, 868, 869, 870, 871, 873, 884, 885, 886, 887, 890], "type": [2, 5, 10, 14, 17, 19, 21, 23, 25, 27, 32, 35, 36, 46, 53, 55, 56, 66, 69, 77, 84, 85, 86, 87, 88, 89, 91, 92, 93, 96, 99, 101, 105, 108, 114, 129, 132, 143, 147, 148, 149, 150, 153, 178, 179, 180, 181, 182, 193, 194, 196, 197, 206, 207, 209, 210, 212, 213, 215, 219, 220, 221, 223, 224, 226, 230, 231, 232, 234, 235, 237, 240, 242, 243, 244, 246, 247, 249, 253, 254, 255, 257, 258, 260, 264, 265, 266, 268, 269, 270, 272, 273, 276, 281, 282, 287, 293, 301, 304, 319, 322, 323, 324, 325, 328, 333, 334, 335, 344, 351, 353, 356, 357, 358, 359, 361, 363, 366, 371, 380, 388, 391, 393, 394, 396, 397, 431, 454, 456, 458, 460, 462, 463, 464, 467, 475, 488, 490, 493, 494, 496, 498, 501, 502, 504, 506, 509, 510, 513, 515, 519, 520, 523, 525, 528, 529, 531, 533, 536, 537, 539, 542, 543, 544, 545, 551, 552, 560, 565, 566, 567, 570, 574, 577, 578, 579, 580, 586, 587, 588, 598, 603, 605, 606, 609, 614, 628, 631, 632, 633, 634, 640, 641, 649, 654, 655, 656, 659, 663, 666, 667, 668, 669, 675, 676, 684, 689, 690, 691, 694, 700, 702, 703, 710, 750, 751, 752, 754, 755, 756, 759, 761, 762, 765, 766, 768, 770, 771, 772, 776, 777, 779, 781, 782, 785, 788, 791, 792, 794, 796, 797, 798, 801, 802, 805, 813, 814, 820, 824, 827, 828, 833, 836, 837, 840, 848, 854, 858, 861, 862, 867, 868, 869, 875], "numpi": [2, 5, 10, 14, 75, 77, 78, 79, 91, 99, 101, 132, 139, 143, 148, 150, 151, 153, 179, 180, 181, 182, 194, 197, 207, 210, 212, 215, 220, 221, 223, 226, 231, 232, 234, 237, 243, 244, 246, 249, 254, 255, 257, 260, 265, 266, 304, 356, 391, 403, 454, 458, 462, 475, 476, 477, 574, 614, 663, 700, 710, 714, 715, 716, 751, 752, 755, 756, 761, 762, 768, 779, 785, 788, 794, 867, 868], "The": [4, 7, 12, 16, 17, 19, 20, 21, 23, 24, 25, 27, 69, 70, 71, 72, 77, 79, 91, 96, 102, 117, 132, 147, 148, 149, 150, 151, 153, 192, 195, 204, 211, 213, 215, 219, 222, 226, 230, 237, 240, 242, 245, 247, 249, 253, 258, 260, 264, 268, 271, 272, 285, 287, 304, 321, 322, 323, 324, 333, 338, 351, 356, 357, 358, 359, 361, 362, 374, 391, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 412, 420, 431, 438, 446, 454, 487, 495, 496, 503, 511, 513, 522, 530, 539, 540, 541, 543, 544, 545, 551, 552, 554, 565, 566, 567, 574, 578, 579, 580, 586, 587, 588, 590, 603, 605, 606, 614, 632, 633, 634, 640, 641, 643, 654, 655, 656, 663, 667, 668, 669, 675, 676, 678, 689, 690, 691, 700, 702, 710, 712, 713, 714, 715, 716, 717, 718, 724, 727, 730, 749, 751, 753, 755, 757, 761, 763, 764, 766, 768, 774, 775, 779, 785, 789, 790, 792, 794, 801, 813, 814, 824, 828, 836, 848, 858, 862, 869, 875], "kernel": [7, 17, 21, 25, 69, 70, 71, 72, 73, 77, 96, 149, 153, 172, 178, 179, 180, 181, 198, 204, 213, 222, 224, 233, 247, 258, 402, 404, 405, 420, 421, 428, 495, 496, 504, 513, 523, 531, 730, 743, 757, 766, 792, 868], "bandwidth": [7, 17, 21, 25, 69, 70, 72, 73, 77, 153, 172, 178, 181, 198, 204, 404, 405, 420, 421, 428, 496, 504, 513, 523, 531, 714, 730, 743, 757], "autocorrel": [7, 25, 69, 96, 149, 153, 198, 204, 213, 222, 224, 233, 247, 258, 394, 404, 420, 428, 757, 766, 792], "hac": [7, 25, 69, 71, 72, 73, 77, 172, 176, 402, 428, 496, 504, 513, 523, 531, 743], "name": [7, 17, 21, 25, 69, 77, 83, 84, 96, 114, 149, 150, 172, 178, 182, 198, 204, 213, 222, 224, 226, 233, 235, 237, 247, 258, 269, 281, 309, 334, 371, 393, 396, 397, 404, 420, 428, 454, 461, 474, 478, 488, 496, 504, 513, 515, 523, 531, 616, 702, 710, 714, 715, 730, 743, 757, 766, 768, 771, 774, 777, 779, 781, 792, 794, 797, 870, 875], "note": [7, 16, 17, 19, 20, 21, 23, 24, 25, 27, 35, 46, 55, 66, 69, 73, 87, 91, 96, 101, 105, 114, 117, 129, 132, 139, 147, 149, 150, 153, 154, 160, 166, 172, 178, 179, 180, 181, 192, 195, 198, 204, 211, 212, 213, 215, 219, 221, 222, 223, 226, 230, 232, 233, 234, 235, 237, 240, 242, 244, 245, 246, 247, 249, 253, 255, 256, 257, 258, 260, 264, 266, 270, 272, 273, 281, 285, 287, 293, 301, 304, 319, 322, 323, 324, 325, 333, 334, 338, 344, 351, 353, 356, 357, 358, 359, 361, 363, 371, 374, 380, 388, 391, 394, 397, 399, 401, 402, 403, 404, 412, 420, 428, 438, 446, 454, 458, 464, 479, 487, 488, 490, 493, 494, 495, 496, 498, 501, 502, 503, 504, 506, 509, 510, 511, 513, 519, 520, 522, 523, 525, 528, 529, 530, 531, 533, 536, 537, 542, 543, 544, 545, 547, 548, 550, 551, 552, 554, 560, 563, 565, 566, 567, 570, 574, 577, 578, 579, 580, 582, 583, 585, 586, 587, 588, 590, 598, 601, 603, 605, 606, 609, 614, 628, 631, 632, 633, 634, 636, 637, 639, 640, 641, 643, 649, 652, 654, 655, 656, 659, 663, 666, 667, 668, 669, 671, 672, 674, 675, 676, 678, 684, 687, 689, 690, 691, 694, 700, 714, 720, 724, 727, 730, 735, 739, 743, 749, 753, 757, 763, 764, 768, 770, 772, 774, 775, 779, 782, 784, 785, 788, 789, 790, 794, 796, 798, 801, 802, 813, 814, 820, 824, 827, 828, 836, 837, 848, 854, 858, 861, 862, 869], "avail": [7, 69, 72, 77, 96, 149, 152, 153, 181, 198, 213, 222, 224, 233, 235, 247, 258, 394, 397, 400, 403, 412, 495, 560, 598, 649, 684, 712, 714, 715, 718], "bartlett": [7, 17, 21, 25, 69, 71, 72, 153, 172, 178, 179, 181, 204, 394, 402, 404, 420, 504, 513, 523, 531, 714, 730, 743, 757], "non": [7, 16, 20, 69, 70, 72, 90, 91, 149, 153, 172, 394, 404, 420, 428, 492, 500, 508, 517, 527, 535, 551, 552, 587, 588, 640, 641, 675, 676, 710, 714], "neg": [7, 21, 149, 150, 172, 404, 420, 428, 710, 718], "integ": [7, 17, 21, 25, 397, 404, 420, 428, 488, 504, 513, 523, 531, 720], "If": [7, 16, 19, 20, 21, 23, 73, 83, 92, 93, 96, 114, 148, 149, 153, 154, 160, 166, 172, 182, 198, 204, 219, 224, 230, 235, 242, 245, 249, 253, 260, 264, 272, 281, 293, 309, 333, 334, 344, 361, 371, 380, 393, 394, 396, 402, 403, 404, 420, 428, 454, 458, 488, 493, 496, 501, 504, 509, 511, 513, 519, 523, 528, 531, 536, 552, 588, 616, 641, 676, 702, 710, 714, 718, 720, 730, 735, 739, 743, 752, 756, 757, 762, 763, 764, 768, 772, 774, 775, 777, 779, 782, 789, 790, 794, 798, 820, 854, 875, 886, 889], "optim": [7, 20, 21, 69, 77, 149, 153, 178, 204, 224, 234, 235, 240, 394, 730, 743, 757], "iv": [7, 76, 77, 90, 148, 149, 151, 152, 153, 394, 712, 716, 717, 718, 724, 727, 730, 743, 763, 770, 774], "kernel_weight_bartlett": [7, 172, 178, 204, 743], "kernel_weight_parzen": [7, 172, 178, 204, 743], "kernel_weight_quadratic_spectr": [7, 172, 178, 204, 743], "portfolio": [16, 19, 20, 23, 24, 27, 35, 55, 71, 72, 73, 796], "ivdata": [16, 20, 24, 94, 95, 98, 100, 211, 215, 222, 226, 233, 237, 242, 245, 249, 253, 256, 260, 264, 267], "dataarrai": [16, 19, 20, 21, 24, 91, 96, 139, 182, 184, 211, 215, 222, 226, 233, 237, 242, 245, 249, 253, 256, 260, 264, 293, 344, 380, 412, 454, 464, 487, 490, 493, 494, 495, 498, 501, 502, 503, 506, 509, 510, 511, 515, 519, 520, 522, 525, 528, 529, 530, 533, 536, 537, 560, 598, 649, 684, 763, 768, 770, 772, 774, 779, 789, 794, 796, 820, 854], "datafram": [16, 19, 20, 21, 23, 24, 27, 30, 31, 38, 39, 45, 48, 51, 52, 58, 59, 65, 68, 70, 77, 91, 92, 93, 96, 103, 105, 106, 132, 134, 139, 140, 141, 143, 148, 150, 151, 182, 184, 189, 211, 215, 219, 222, 226, 230, 233, 237, 242, 245, 249, 253, 256, 260, 264, 268, 273, 274, 293, 304, 312, 314, 315, 318, 320, 325, 326, 344, 356, 363, 364, 380, 391, 397, 398, 403, 412, 428, 431, 454, 456, 459, 460, 462, 464, 465, 467, 475, 476, 479, 485, 487, 488, 490, 493, 494, 495, 498, 501, 502, 503, 504, 506, 509, 510, 511, 513, 515, 519, 520, 522, 523, 525, 528, 529, 530, 531, 533, 536, 537, 539, 542, 546, 560, 574, 577, 581, 596, 598, 614, 619, 621, 622, 627, 629, 631, 635, 649, 663, 666, 670, 684, 695, 700, 703, 704, 706, 708, 709, 710, 714, 715, 716, 763, 764, 768, 770, 772, 774, 775, 779, 782, 784, 787, 789, 790, 794, 796, 798, 802, 803, 811, 820, 823, 825, 834, 837, 838, 846, 854, 857, 859, 865], "seri": [16, 19, 20, 21, 24, 29, 41, 42, 43, 50, 61, 62, 63, 73, 76, 91, 96, 115, 117, 121, 122, 124, 128, 131, 132, 133, 139, 143, 145, 154, 160, 166, 172, 182, 184, 185, 198, 211, 215, 222, 226, 233, 235, 237, 242, 245, 249, 253, 256, 260, 264, 283, 285, 292, 293, 294, 296, 300, 303, 304, 308, 310, 311, 313, 316, 317, 336, 338, 343, 344, 345, 347, 352, 355, 356, 360, 372, 374, 379, 380, 381, 383, 387, 390, 391, 392, 396, 412, 454, 459, 464, 466, 487, 490, 493, 494, 495, 498, 501, 502, 503, 506, 509, 510, 511, 515, 519, 520, 522, 525, 528, 529, 530, 533, 536, 537, 549, 550, 553, 554, 559, 560, 561, 563, 569, 571, 573, 574, 575, 584, 585, 589, 590, 597, 598, 599, 601, 608, 610, 612, 613, 614, 615, 617, 618, 620, 623, 624, 625, 626, 638, 639, 642, 643, 648, 649, 650, 652, 658, 660, 662, 663, 664, 673, 674, 677, 678, 683, 684, 685, 687, 693, 696, 698, 699, 700, 701, 714, 718, 763, 764, 768, 769, 770, 772, 774, 775, 779, 780, 784, 786, 789, 790, 794, 795, 796, 801, 814, 819, 820, 821, 826, 828, 830, 836, 848, 853, 854, 855, 860, 862, 864], "factor": [16, 19, 20, 23, 24, 27, 30, 33, 41, 42, 49, 51, 54, 61, 62, 69, 72, 76, 77, 90, 91, 134, 150, 396, 712, 713, 714, 796], "risk_fre": [16, 19, 20, 23, 69, 70], "sigma": [16, 19, 71, 73, 150, 394, 402, 404, 412, 420, 438, 446, 552, 588, 641, 676, 714, 715, 718, 720, 724, 727, 730, 735, 739, 743, 752, 753, 756, 762, 763, 768, 774, 789, 794, 814, 828, 848, 862], "linear": [16, 20, 24, 49, 69, 72, 76, 77, 89, 90, 91, 132, 153, 304, 356, 391, 397, 574, 614, 663, 700, 712, 713, 714, 774, 784], "test": [16, 17, 19, 20, 21, 23, 24, 25, 27, 35, 55, 69, 71, 72, 73, 77, 90, 114, 132, 150, 152, 268, 272, 281, 287, 304, 322, 323, 324, 333, 334, 351, 356, 357, 358, 359, 361, 371, 391, 396, 397, 398, 400, 401, 403, 494, 502, 510, 520, 529, 537, 551, 552, 574, 586, 587, 588, 614, 640, 641, 663, 675, 676, 700, 710, 713, 714, 717, 784, 801, 813, 814, 836, 848, 870, 874, 875, 876, 878, 879], "nob": [16, 20, 24, 77, 91, 139, 148, 150, 154, 160, 166, 172, 178, 182, 194, 197, 198, 204, 207, 210, 211, 212, 219, 222, 223, 230, 233, 234, 240, 242, 245, 246, 253, 256, 257, 264, 293, 344, 380, 412, 428, 431, 454, 493, 501, 509, 519, 528, 536, 539, 540, 541, 548, 560, 583, 598, 637, 649, 672, 684, 714, 720, 724, 727, 730, 735, 739, 743, 752, 756, 757, 762, 770, 796], "nportfolio": [16, 19, 20, 24], "price": [16, 20, 24, 35, 55, 69, 70, 72, 73, 76, 77, 90, 150, 713], "nfactor": [16, 20, 24], "whether": [16, 17, 19, 20, 21, 23, 25, 69, 71, 77, 84, 91, 96, 110, 132, 136, 149, 150, 153, 154, 160, 166, 172, 182, 192, 195, 198, 204, 208, 213, 224, 234, 235, 247, 258, 278, 287, 293, 304, 322, 324, 330, 344, 356, 357, 358, 359, 368, 380, 391, 394, 398, 402, 404, 412, 420, 428, 438, 446, 454, 458, 488, 490, 496, 498, 504, 506, 511, 512, 513, 515, 518, 521, 522, 523, 525, 531, 533, 560, 574, 598, 614, 649, 663, 684, 700, 718, 720, 749, 753, 757, 766, 784, 792, 806, 813, 820, 841, 854], "risk": [16, 19, 20, 23, 24, 41, 42, 43, 61, 62, 63, 69, 70, 71, 72, 73], "free": [16, 19, 20, 23, 69, 70, 71, 73], "rate": [16, 19, 20, 23, 69, 70, 71, 73, 150, 397, 714], "should": [16, 19, 20, 23, 72, 91, 96, 149, 150, 151, 182, 233, 245, 256, 394, 396, 397, 398, 454, 460, 487, 488, 490, 495, 498, 503, 504, 506, 511, 513, 515, 522, 523, 525, 530, 531, 533, 710, 712, 718, 801, 814, 836, 848], "from": [16, 19, 20, 23, 27, 49, 69, 70, 72, 73, 77, 83, 84, 90, 91, 96, 102, 103, 107, 117, 132, 134, 139, 143, 147, 148, 149, 150, 151, 152, 153, 179, 180, 181, 215, 219, 226, 230, 237, 242, 249, 253, 260, 264, 268, 269, 271, 275, 285, 293, 304, 321, 327, 333, 338, 344, 351, 356, 358, 359, 361, 362, 365, 374, 380, 391, 394, 396, 397, 398, 399, 400, 401, 402, 403, 412, 459, 488, 490, 493, 496, 498, 501, 504, 506, 509, 513, 515, 519, 523, 525, 528, 531, 533, 536, 551, 552, 554, 563, 574, 586, 587, 588, 590, 601, 614, 640, 641, 643, 652, 663, 675, 676, 678, 687, 700, 714, 715, 716, 717, 718, 751, 752, 755, 756, 761, 762, 768, 770, 772, 779, 782, 794, 796, 798, 800, 820, 824, 828, 835, 854, 858, 862, 881, 889], "along": [16, 19, 20, 23, 69, 272, 714, 716], "other": [16, 19, 20, 23, 69, 70, 89, 91, 139, 143, 148, 149, 150, 151, 152, 212, 223, 234, 246, 257, 268, 394, 398, 399, 400, 401, 402, 403, 488, 504, 511, 513, 518, 523, 531, 596, 710, 714, 716, 766, 792], "premia": [16, 19, 20, 23, 24, 41, 42, 43, 61, 62, 63, 69, 70, 71, 72, 73], "ar": [16, 19, 20, 21, 23, 24, 25, 35, 55, 69, 70, 71, 72, 73, 77, 79, 82, 83, 84, 89, 90, 91, 96, 101, 114, 132, 139, 143, 148, 149, 150, 151, 152, 153, 172, 181, 198, 213, 215, 219, 221, 222, 224, 226, 230, 232, 233, 235, 237, 242, 244, 247, 249, 253, 255, 258, 260, 264, 266, 268, 269, 272, 281, 287, 293, 304, 333, 334, 344, 351, 356, 358, 359, 361, 371, 380, 391, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 412, 420, 438, 446, 454, 458, 479, 488, 493, 495, 496, 501, 504, 509, 511, 512, 513, 515, 518, 519, 521, 523, 528, 531, 536, 560, 563, 574, 586, 598, 601, 614, 649, 652, 663, 684, 687, 700, 710, 714, 715, 716, 717, 718, 757, 763, 764, 766, 772, 774, 775, 777, 779, 782, 788, 789, 790, 792, 798, 801, 813, 814, 820, 828, 836, 848, 854, 862], "assum": [16, 19, 20, 23, 69, 73, 149, 150, 153, 198, 222, 224, 233, 235, 272, 394, 454, 487, 488, 490, 495, 498, 503, 504, 506, 511, 513, 515, 522, 523, 525, 530, 531, 533, 714, 715, 716, 718, 720, 735, 739, 743, 779], "excess": [16, 19, 20, 23, 24, 72, 73], "correct": [16, 19, 20, 23, 73, 77, 150, 153, 394, 513, 531, 551, 586, 587, 640, 675, 714, 784], "posit": [16, 17, 19, 21, 25, 73, 179, 180, 181, 222, 272, 394, 774], "definit": [16, 19, 222, 394, 403, 565, 566, 567, 603, 605, 606, 654, 655, 656, 689, 690, 691, 774], "residu": [16, 19, 40, 60, 73, 99, 101, 113, 119, 123, 124, 127, 133, 148, 149, 150, 159, 165, 171, 177, 203, 220, 221, 231, 232, 243, 244, 254, 255, 265, 266, 280, 287, 290, 295, 296, 299, 308, 332, 333, 341, 346, 347, 350, 351, 357, 358, 359, 360, 361, 370, 377, 382, 383, 386, 392, 394, 397, 402, 409, 417, 425, 435, 443, 451, 487, 488, 490, 495, 498, 503, 504, 506, 511, 513, 515, 522, 523, 525, 530, 531, 533, 548, 551, 552, 556, 562, 563, 568, 575, 583, 586, 587, 588, 593, 600, 601, 607, 613, 615, 637, 640, 641, 645, 651, 652, 657, 664, 672, 675, 676, 680, 686, 687, 692, 699, 701, 716, 718, 720, 724, 727, 730, 735, 739, 743, 751, 753, 755, 761, 763, 768, 774, 789, 794, 801, 808, 814, 817, 822, 823, 824, 825, 828, 834, 836, 843, 848, 851, 856, 857, 858, 859, 862, 865], "covari": [16, 17, 19, 21, 25, 31, 32, 35, 52, 53, 55, 69, 70, 71, 72, 73, 77, 96, 106, 107, 108, 109, 110, 114, 150, 151, 152, 194, 197, 198, 200, 201, 202, 204, 207, 210, 213, 224, 235, 247, 258, 268, 274, 275, 276, 277, 278, 281, 310, 326, 327, 328, 329, 330, 334, 358, 364, 365, 366, 367, 368, 371, 400, 401, 403, 488, 495, 496, 504, 513, 523, 531, 546, 552, 581, 588, 617, 635, 641, 670, 676, 710, 713, 716, 717, 751, 752, 753, 755, 756, 758, 761, 762, 763, 766, 768, 774, 777, 789, 792, 794, 803, 804, 805, 806, 814, 825, 828, 838, 839, 840, 841, 848, 859, 862], "suitabl": [16, 20], "trade": [16, 20, 24, 69, 71, 72, 76, 90, 712], "implement": [16, 20, 24, 35, 55, 69, 71, 72, 73, 114, 150, 272, 281, 334, 358, 359, 371, 394, 397, 398, 400, 401, 403, 412, 458, 467, 495, 552, 588, 641, 676, 712, 714, 718, 763, 768, 774, 789, 794], "2": [16, 21, 44, 64, 70, 71, 72, 73, 77, 79, 83, 90, 91, 104, 125, 126, 132, 139, 143, 148, 149, 150, 151, 153, 154, 160, 166, 180, 181, 195, 198, 204, 215, 224, 226, 237, 249, 260, 297, 298, 304, 309, 316, 317, 348, 349, 351, 356, 357, 359, 384, 385, 391, 393, 394, 396, 397, 398, 401, 403, 412, 438, 446, 454, 458, 479, 488, 504, 511, 513, 523, 531, 574, 614, 616, 623, 624, 625, 626, 663, 700, 702, 708, 710, 712, 713, 714, 715, 716, 717, 720, 735, 743, 757, 766, 777, 792, 801, 814, 824, 828, 836, 848, 858, 862, 887], "step": [16, 21, 34, 71, 72, 73, 76, 90, 149, 150, 153, 224, 306, 712, 714, 715, 716, 718, 777], "load": [16, 19, 20, 23, 24, 27, 30, 33, 51, 54, 69, 70, 71, 72, 73, 132, 149, 150, 151, 153, 215, 226, 237, 249, 260, 304, 356, 391, 396, 401, 574, 614, 663, 700, 714, 715, 716, 717, 784, 787, 796], "first": [16, 19, 23, 27, 69, 71, 72, 73, 76, 77, 90, 150, 151, 153, 182, 224, 267, 268, 269, 272, 282, 335, 357, 396, 401, 403, 454, 460, 463, 503, 504, 707, 712, 714, 716, 718, 768, 777, 779, 785, 794], "stage": [16, 69, 73, 77, 90, 150, 151, 153, 211, 267, 268, 269, 282, 335, 357, 712, 714, 717, 763], "r_": [16, 20, 24, 71, 73, 394, 402, 718], "c_i": [16, 147], "f_t": [16, 20, 24], "beta_i": [16, 24, 71, 358, 714, 763, 774, 789], "epsilon_": [16, 20, 24, 73, 394, 397, 401, 402, 404, 495, 503, 511, 522, 530, 718, 749, 757, 763, 774, 789], "where": [16, 20, 24, 69, 71, 72, 73, 77, 91, 132, 147, 148, 149, 150, 151, 153, 154, 160, 166, 172, 181, 192, 195, 204, 222, 224, 233, 240, 245, 268, 272, 287, 304, 309, 322, 323, 324, 333, 351, 356, 357, 358, 359, 361, 391, 393, 394, 396, 397, 398, 401, 402, 404, 412, 420, 438, 446, 479, 487, 490, 494, 498, 502, 506, 510, 511, 515, 520, 525, 529, 530, 533, 537, 551, 552, 574, 586, 587, 588, 614, 616, 640, 641, 663, 675, 676, 700, 702, 714, 715, 716, 717, 718, 720, 724, 727, 730, 735, 739, 743, 749, 753, 757, 763, 768, 772, 774, 779, 782, 789, 794, 798, 801, 813, 814, 820, 824, 828, 836, 848, 854, 858, 862, 869], "requir": [16, 69, 71, 72, 77, 83, 84, 89, 149, 153, 215, 226, 237, 249, 256, 260, 272, 323, 351, 394, 396, 397, 398, 401, 490, 498, 504, 506, 511, 513, 515, 522, 525, 533, 714, 716, 718, 772, 782, 798, 814, 820, 848, 854], "allow": [16, 69, 70, 71, 77, 96, 149, 150, 151, 153, 198, 222, 224, 233, 397, 398, 399, 402, 714, 716, 717, 718, 749, 757, 766, 779, 792], "econom": [16, 71, 150, 713, 714], "interest": [16, 70, 91, 148, 150, 394, 401, 714], "These": [16, 69, 77, 89, 117, 149, 150, 153, 285, 338, 374, 394, 396, 397, 403, 511, 554, 563, 590, 601, 643, 652, 678, 687, 714, 715, 716, 718, 772, 782, 798, 820, 824, 854, 858], "report": [16, 73, 77, 149, 150, 151, 394, 397, 399, 403, 495, 714, 718], "second": [16, 19, 23, 27, 69, 71, 72, 73, 148, 149, 150, 272, 394, 402, 714, 768, 779, 794], "bar": [16, 73, 195, 233, 240, 287, 394, 402, 487, 543, 545, 578, 580, 632, 634, 667, 669, 718, 813], "r": [16, 44, 64, 69, 70, 72, 73, 77, 104, 125, 126, 139, 143, 148, 149, 150, 151, 153, 268, 297, 298, 316, 317, 348, 349, 357, 359, 384, 385, 394, 396, 397, 398, 400, 401, 403, 623, 624, 625, 626, 713, 714, 715, 716, 717, 764, 775, 784, 790, 828, 862], "_i": [16, 24, 35, 55, 154, 160, 166, 172, 204, 240, 287, 357, 358, 404, 438, 543, 545, 578, 580, 632, 634, 667, 669, 757, 814, 848], "lambda_0": [16, 71], "hat": [16, 24, 35, 55, 71, 73, 154, 160, 166, 172, 211, 222, 233, 240, 245, 287, 322, 324, 333, 351, 357, 358, 359, 361, 394, 402, 404, 412, 420, 438, 446, 495, 543, 544, 545, 552, 578, 579, 580, 588, 632, 633, 634, 641, 667, 668, 669, 676, 714, 718, 720, 735, 743, 757, 763, 774, 789, 801, 814, 824, 828, 836, 848, 858, 862], "beta": [16, 20, 69, 73, 91, 148, 211, 222, 233, 240, 245, 394, 397, 401, 402, 487, 495, 503, 511, 522, 530, 543, 544, 545, 552, 578, 579, 580, 588, 632, 633, 634, 641, 667, 668, 669, 676, 714, 718, 763, 764, 774, 775, 784, 785, 789, 790], "prime": [16, 71, 73, 154, 160, 172, 351, 394, 402, 487, 495, 503, 511, 522, 530, 714, 718, 757, 785, 828, 862], "lambda": [16, 20, 41, 61, 71, 73], "eta_i": [16, 359], "averag": [16, 24, 71, 73, 77, 148, 150, 153, 224, 240, 394, 397, 401, 402, 458, 467, 487, 540, 541, 543, 565, 578, 603, 632, 654, 667, 689, 714, 718, 777, 813, 828, 862], "includ": [16, 33, 54, 69, 70, 73, 79, 116, 134, 149, 150, 151, 154, 160, 166, 172, 178, 215, 216, 218, 226, 227, 229, 237, 238, 241, 249, 250, 252, 260, 261, 263, 268, 284, 287, 293, 309, 337, 344, 373, 380, 393, 394, 396, 398, 399, 401, 402, 403, 490, 495, 498, 506, 511, 512, 518, 521, 525, 533, 540, 541, 544, 547, 548, 550, 551, 552, 560, 566, 576, 579, 582, 583, 585, 586, 587, 588, 591, 598, 604, 605, 616, 630, 633, 636, 637, 639, 640, 641, 649, 655, 668, 671, 672, 674, 675, 676, 684, 690, 702, 710, 714, 718, 730, 743, 757, 763, 768, 779, 794, 820, 824, 854, 858], "gl": [16, 77, 150, 256, 397, 712, 715, 716, 717, 718, 720, 735, 739, 743, 763, 766, 768, 774, 777, 789, 792, 794, 801, 812, 814, 836, 847, 848], "alpha": [16, 24, 35, 55, 69, 71, 73, 84, 153, 245, 249, 260, 394, 402, 796], "eta": [16, 73, 394, 718, 824, 828, 858, 862], "cov_typ": [17, 21, 25, 69, 70, 71, 72, 96, 149, 150, 151, 153, 198, 213, 224, 235, 247, 258, 267, 397, 401, 488, 495, 496, 504, 513, 515, 523, 531, 714, 715, 716, 717, 766, 777, 792], "cov_config": [17, 21, 25, 96, 198, 213, 224, 235, 247, 258, 267, 488, 504, 513, 523, 531, 766, 777, 792], "linearfactormodelresult": [17, 25], "debia": [17, 21, 25, 198, 402, 404, 412, 420, 428, 438, 446, 714, 720, 869], "adjust": [17, 21, 25, 77, 96, 110, 126, 154, 159, 160, 165, 166, 171, 172, 177, 192, 195, 203, 204, 208, 213, 224, 235, 245, 247, 258, 278, 293, 298, 317, 330, 344, 349, 368, 380, 385, 394, 397, 399, 402, 404, 412, 420, 438, 446, 488, 496, 504, 513, 523, 531, 540, 541, 560, 598, 649, 684, 714, 718, 720, 735, 739, 743, 749, 753, 757, 766, 777, 792, 806, 820, 841, 854], "addit": [17, 21, 25, 76, 77, 82, 96, 149, 150, 153, 213, 219, 222, 224, 226, 230, 233, 234, 235, 237, 242, 247, 253, 258, 264, 397, 398, 404, 412, 420, 438, 446, 488, 493, 501, 504, 509, 513, 519, 523, 528, 531, 536, 714, 717, 766, 772, 774, 777, 779, 782, 792, 798], "specif": [17, 21, 25, 69, 71, 96, 114, 150, 151, 152, 181, 198, 213, 219, 224, 230, 235, 242, 247, 253, 258, 264, 281, 293, 334, 344, 371, 380, 397, 400, 401, 402, 488, 490, 493, 498, 501, 504, 506, 509, 511, 513, 515, 519, 522, 523, 525, 528, 531, 533, 536, 714, 715, 718, 770, 772, 782, 796, 798, 820, 854], "option": [17, 21, 25, 69, 70, 72, 73, 77, 83, 84, 96, 149, 198, 213, 224, 233, 235, 247, 258, 394, 398, 399, 402, 403, 488, 496, 504, 513, 523, 531, 716, 720, 722, 726, 729, 733, 737, 741, 746, 763, 766, 774, 777, 779, 789, 792, 832], "see": [17, 21, 25, 69, 70, 72, 77, 148, 149, 151, 153, 402, 488, 496, 504, 513, 515, 523, 531, 565, 566, 567, 603, 605, 606, 654, 655, 656, 689, 690, 691, 714, 768, 779, 794, 801, 814, 836, 848], "result": [17, 21, 25, 69, 72, 77, 83, 84, 96, 102, 129, 150, 152, 213, 224, 235, 245, 247, 258, 396, 397, 399, 400, 401, 402, 488, 490, 496, 498, 504, 506, 511, 513, 515, 522, 523, 525, 531, 533, 714, 715, 717, 766, 777, 792], "statist": [17, 20, 21, 25, 35, 43, 48, 55, 63, 68, 69, 70, 71, 72, 77, 114, 131, 132, 148, 149, 150, 151, 153, 240, 268, 272, 281, 287, 303, 304, 312, 322, 323, 324, 333, 334, 351, 355, 356, 357, 358, 359, 361, 371, 390, 391, 396, 397, 398, 401, 402, 403, 549, 551, 552, 571, 573, 574, 584, 586, 587, 588, 596, 610, 612, 614, 619, 638, 640, 641, 660, 662, 663, 673, 675, 676, 696, 698, 700, 713, 714, 716, 801, 813, 814, 830, 836, 848, 864, 874, 875, 878, 879], "take": [17, 21, 25, 151, 394, 397, 401, 714], "argument": [17, 21, 25, 69, 70, 77, 91, 198, 222, 226, 233, 234, 237, 397, 402, 714, 715, 766, 774, 779, 792], "parzen": [17, 21, 25, 70, 71, 72, 77, 153, 172, 178, 180, 181, 204, 394, 402, 404, 420, 496, 504, 513, 523, 531, 714, 730, 743, 757], "q": [17, 21, 25, 71, 132, 153, 172, 178, 181, 204, 272, 287, 304, 322, 324, 333, 356, 357, 361, 391, 394, 404, 420, 504, 513, 523, 531, 574, 614, 663, 700, 714, 730, 743, 757, 764, 775, 784, 790, 813], "quadrat": [17, 21, 25, 71, 72, 77, 114, 153, 172, 178, 181, 204, 281, 334, 371, 394, 402, 404, 420, 714, 730, 743, 757], "spectral": [17, 21, 25, 71, 72, 77, 153, 172, 178, 181, 204, 394, 402, 404, 420, 714, 730, 743, 757], "classmethod": [19, 23, 27, 480, 490, 498, 506, 515, 525, 533, 768, 770, 779, 794, 796], "formula": [19, 23, 27, 71, 75, 77, 78, 79, 132, 152, 215, 219, 226, 230, 237, 242, 249, 253, 260, 264, 293, 304, 344, 356, 380, 391, 400, 401, 403, 490, 493, 498, 501, 506, 509, 515, 519, 525, 528, 533, 536, 560, 574, 598, 614, 649, 663, 684, 700, 717, 718, 768, 772, 779, 782, 794, 798, 820, 854], "data": [19, 23, 27, 72, 77, 90, 101, 117, 132, 148, 150, 153, 154, 160, 166, 178, 212, 215, 219, 221, 223, 226, 230, 232, 234, 237, 242, 244, 246, 249, 253, 255, 257, 260, 264, 266, 285, 293, 304, 338, 344, 356, 374, 380, 391, 394, 399, 401, 402, 403, 487, 488, 490, 493, 494, 495, 498, 501, 502, 503, 506, 509, 510, 511, 515, 519, 520, 522, 525, 528, 529, 530, 533, 536, 537, 538, 554, 560, 563, 574, 576, 590, 598, 601, 614, 630, 643, 649, 652, 663, 665, 678, 684, 687, 700, 703, 710, 713, 715, 717, 718, 724, 727, 730, 768, 772, 779, 782, 794, 796, 798, 820, 854, 867, 868], "modifi": [19, 23, 27, 70, 77, 215, 226, 237, 245, 249, 260, 394, 715, 717], "syntax": [19, 23, 27, 91, 151, 215, 226, 237, 249, 260, 398, 490, 498, 506, 525, 533, 714, 715, 716, 717, 768, 779, 794], "describ": [19, 23, 27, 73, 139, 149, 150, 153, 215, 226, 237, 249, 260, 397, 400, 401, 511], "contain": [19, 23, 27, 70, 71, 77, 91, 96, 132, 139, 143, 150, 151, 152, 153, 154, 186, 191, 192, 193, 195, 196, 198, 204, 206, 209, 213, 215, 222, 224, 226, 234, 235, 237, 245, 247, 249, 258, 260, 268, 269, 272, 282, 293, 304, 322, 323, 324, 333, 335, 344, 351, 356, 357, 358, 359, 361, 380, 391, 394, 396, 398, 400, 401, 402, 462, 464, 475, 479, 488, 490, 498, 504, 506, 513, 515, 523, 525, 531, 533, 538, 540, 541, 560, 574, 576, 598, 614, 630, 649, 663, 665, 684, 700, 703, 710, 714, 716, 717, 718, 724, 727, 730, 750, 753, 754, 756, 759, 763, 768, 769, 772, 774, 777, 779, 780, 782, 789, 794, 795, 798, 820, 854, 869], "variabl": [19, 23, 27, 70, 75, 76, 77, 78, 83, 84, 90, 91, 92, 93, 96, 104, 111, 134, 139, 140, 141, 143, 147, 148, 153, 154, 160, 166, 172, 182, 211, 215, 222, 224, 226, 233, 237, 245, 249, 256, 260, 268, 269, 272, 287, 323, 333, 351, 357, 358, 359, 361, 394, 396, 398, 401, 402, 403, 404, 412, 420, 428, 438, 446, 454, 458, 460, 463, 471, 478, 487, 488, 490, 494, 495, 498, 502, 503, 504, 506, 510, 511, 513, 515, 520, 522, 523, 525, 529, 530, 531, 533, 537, 540, 543, 544, 545, 551, 560, 565, 566, 578, 579, 580, 587, 598, 603, 605, 632, 633, 634, 640, 649, 654, 655, 667, 668, 669, 675, 684, 689, 690, 710, 713, 714, 715, 716, 717, 718, 720, 735, 739, 743, 763, 768, 770, 772, 774, 777, 779, 782, 785, 789, 794, 796, 798, 820, 828, 854, 862], "instanc": [19, 23, 27, 83, 84, 143, 182, 215, 226, 237, 249, 260, 710, 768, 770, 779, 794, 796], "can": [19, 21, 23, 27, 69, 70, 71, 72, 73, 77, 79, 89, 91, 96, 148, 149, 150, 151, 153, 219, 224, 230, 235, 242, 245, 253, 264, 293, 344, 359, 380, 394, 396, 397, 398, 399, 400, 401, 402, 403, 454, 458, 490, 493, 498, 501, 506, 509, 511, 515, 519, 522, 525, 528, 533, 536, 560, 598, 649, 684, 714, 715, 716, 718, 763, 764, 768, 772, 774, 775, 779, 782, 789, 790, 794, 796, 798, 820, 854], "two": [19, 23, 27, 69, 70, 71, 72, 73, 76, 77, 90, 149, 150, 153, 211, 224, 272, 396, 397, 401, 402, 412, 488, 496, 511, 513, 515, 523, 531, 714, 715, 716, 718, 766, 768, 779, 785, 792, 794, 824, 858], "wai": [19, 23, 27, 69, 70, 76, 77, 96, 149, 153, 198, 208, 213, 222, 224, 233, 247, 258, 394, 402, 412, 464, 488, 511, 513, 523, 530, 531, 714, 766, 768, 779, 792, 794], "specifi": [19, 23, 27, 70, 77, 91, 139, 149, 150, 152, 153, 224, 397, 400, 401, 402, 403, 490, 498, 506, 511, 515, 525, 533, 560, 598, 649, 684, 714, 716, 717, 718, 768, 777, 779, 794, 886], "separ": [19, 23, 27, 70, 91, 132, 304, 356, 391, 394, 574, 614, 663, 700, 715, 716, 718, 763, 789], "exampl": [19, 23, 27, 70, 71, 72, 77, 89, 91, 132, 139, 143, 151, 152, 215, 226, 237, 249, 260, 304, 356, 391, 396, 400, 401, 402, 488, 490, 496, 498, 504, 506, 513, 515, 523, 525, 531, 533, 574, 614, 663, 700, 715, 716, 717, 718, 768, 779, 794, 796], "dataset": [19, 23, 27, 69, 70, 72, 77, 132, 149, 150, 151, 153, 215, 226, 237, 249, 260, 304, 356, 391, 396, 397, 398, 401, 403, 574, 614, 663, 700, 710, 712, 714, 715, 716, 717, 796], "import": [19, 23, 27, 72, 75, 77, 78, 89, 91, 132, 139, 143, 148, 150, 151, 153, 215, 226, 237, 249, 260, 304, 356, 391, 396, 397, 398, 400, 401, 402, 403, 488, 490, 496, 498, 504, 506, 513, 515, 523, 525, 531, 533, 574, 614, 663, 700, 714, 715, 716, 717, 768, 779, 794, 796], "french": [19, 23, 27, 69, 70, 71, 72, 714, 796], "s1m1": [19, 23, 27, 69, 70], "s1m5": [19, 23, 27, 69, 70], "s3m3": [19, 23, 27, 69, 70], "s5m1": [19, 23, 27, 69, 70], "s5m5": [19, 23, 27, 69, 70], "mktrf": [19, 23, 27, 69, 70, 72, 714, 796], "smb": [19, 23, 27, 69, 70, 72], "hml": [19, 23, 27, 69, 70, 72], "mod": [19, 23, 27, 69, 70, 72, 91, 148, 150, 151, 153, 215, 226, 237, 249, 260, 396, 397, 398, 401, 488, 490, 496, 498, 504, 506, 513, 515, 523, 525, 531, 533, 574, 614, 663, 700, 714, 715, 716, 717, 768, 779, 794, 796], "s3m1": [19, 23, 27, 69, 70], "s3m5": [19, 23, 27, 69, 70], "gmm": [20, 21, 34, 71, 72, 76, 77, 90, 152, 222, 223, 224, 226, 233, 235, 237, 240, 271, 272, 286, 306, 712, 713, 717, 774, 779, 800, 831, 832, 833], "left": [20, 70, 73, 83, 272, 394, 402, 487, 495, 503, 511, 522, 530, 714, 716, 718, 763, 774, 789, 814, 848], "begin": [20, 73, 394, 402, 716, 718, 763, 774, 789], "arrai": [20, 70, 72, 73, 77, 132, 149, 153, 178, 179, 180, 181, 182, 198, 208, 219, 230, 242, 253, 264, 293, 304, 344, 356, 380, 391, 397, 404, 412, 420, 428, 438, 446, 454, 459, 462, 464, 475, 493, 501, 509, 513, 519, 528, 536, 560, 574, 598, 614, 649, 663, 684, 700, 714, 718, 720, 724, 727, 730, 739, 763, 770, 772, 774, 782, 789, 796, 798, 820, 854, 867, 868, 869], "c": [20, 73, 132, 272, 304, 356, 391, 394, 402, 574, 614, 663, 700, 718], "t": [20, 39, 43, 48, 59, 63, 68, 69, 70, 72, 73, 77, 84, 105, 122, 131, 148, 149, 150, 151, 153, 273, 294, 303, 320, 325, 345, 355, 363, 381, 390, 396, 397, 398, 401, 402, 403, 404, 420, 495, 496, 542, 561, 573, 577, 599, 612, 629, 631, 650, 662, 666, 685, 698, 714, 715, 716, 717, 718, 785, 802, 821, 830, 837, 855, 864], "otim": [20, 73, 714, 718, 727, 753, 763, 789], "f_": [20, 73, 324, 361, 394, 551, 552, 586, 587, 588, 640, 641, 675, 676], "mu": [20, 73, 718], "end": [20, 73, 82, 394, 397, 402, 403, 716, 718, 763, 774, 789], "right": [20, 70, 73, 83, 394, 402, 487, 495, 503, 511, 522, 530, 714, 716, 718, 763, 774, 789, 814, 848], "1_": [20, 73, 394], "n": [20, 73, 139, 143, 150, 154, 160, 166, 172, 181, 192, 195, 204, 233, 245, 287, 322, 323, 324, 333, 351, 357, 359, 361, 394, 396, 397, 401, 402, 403, 404, 412, 420, 438, 446, 714, 718, 749, 757, 801, 813, 814, 836, 848, 867, 868, 869], "object": [20, 21, 69, 149, 153, 235, 240, 272, 282, 322, 323, 324, 333, 335, 351, 357, 358, 359, 361, 393, 396, 458, 479, 702, 714, 765, 768, 776, 779, 791, 794, 880, 884, 885, 890], "function": [20, 21, 69, 73, 77, 143, 149, 150, 151, 204, 222, 224, 226, 233, 235, 237, 240, 394, 401, 402, 403, 404, 420, 770, 774, 779, 796], "usual": [20, 70, 73, 148, 149, 150, 153, 394, 396, 397, 401, 403, 714, 716], "j": [20, 35, 55, 69, 70, 71, 72, 149, 150, 172, 204, 272, 287, 359, 394, 404, 420, 713, 714, 718, 749, 757, 774, 801, 813, 836], "use_cu": [21, 69, 72], "disp": [21, 69], "10": [21, 69, 148, 149, 150, 309, 393, 396, 397, 398, 616, 702, 713, 714, 716], "max_it": 21, "1000": [21, 91, 150], "start": [21, 148, 153, 233, 234, 235, 333, 361, 707], "opt_opt": [21, 234, 235], "ani": [21, 79, 96, 102, 107, 117, 134, 144, 150, 151, 155, 161, 167, 173, 183, 186, 190, 213, 222, 224, 226, 233, 234, 235, 237, 247, 258, 267, 271, 275, 285, 305, 321, 327, 338, 362, 365, 374, 394, 397, 493, 501, 509, 511, 515, 519, 528, 536, 544, 547, 548, 552, 554, 566, 579, 582, 583, 588, 590, 605, 633, 636, 637, 641, 643, 655, 668, 671, 672, 676, 678, 690, 714, 720, 724, 727, 730, 735, 739, 832, 880, 884, 885, 886, 889, 890], "gmmfactormodelresult": 21, "befor": [21, 77, 92, 93, 149, 192, 195, 204, 208, 293, 344, 380, 396, 397, 560, 598, 649, 684, 714, 749, 753, 757, 820, 854], "weight": [21, 69, 71, 73, 75, 77, 78, 91, 96, 101, 132, 133, 134, 152, 153, 172, 179, 180, 181, 192, 193, 195, 196, 198, 204, 205, 206, 208, 209, 211, 215, 221, 222, 223, 224, 226, 232, 233, 237, 240, 244, 245, 249, 255, 256, 260, 266, 267, 272, 304, 305, 306, 307, 308, 356, 360, 391, 392, 396, 397, 399, 402, 404, 420, 458, 464, 467, 487, 488, 490, 495, 498, 503, 506, 511, 515, 522, 525, 530, 533, 543, 544, 545, 565, 566, 567, 574, 575, 578, 579, 580, 603, 605, 606, 614, 615, 632, 633, 634, 654, 655, 656, 663, 664, 667, 668, 669, 689, 690, 691, 700, 701, 703, 710, 714, 716, 720, 724, 727, 730, 735, 743, 749, 750, 752, 753, 754, 756, 757, 759, 762, 763, 768, 774, 777, 779, 789, 794, 824, 828, 831, 832, 833, 834, 858, 862, 865], "matrix": [21, 69, 70, 77, 132, 134, 139, 147, 148, 150, 153, 154, 160, 166, 172, 192, 195, 198, 204, 205, 208, 212, 219, 222, 223, 224, 230, 233, 234, 240, 242, 246, 253, 257, 264, 272, 304, 305, 306, 307, 333, 351, 356, 361, 391, 394, 490, 498, 506, 511, 515, 522, 525, 533, 574, 614, 663, 700, 713, 714, 718, 720, 724, 727, 730, 735, 739, 743, 749, 751, 752, 753, 755, 756, 757, 761, 762, 763, 764, 774, 775, 777, 784, 787, 788, 789, 790, 814, 831, 848], "continu": [21, 72, 76, 77, 90, 91, 96, 134, 139, 141, 143, 147, 153, 233, 714], "updat": [21, 72, 76, 77, 90, 153, 233], "number": [21, 34, 37, 57, 69, 70, 71, 75, 77, 78, 83, 87, 91, 111, 114, 120, 132, 147, 149, 150, 154, 181, 182, 188, 219, 224, 230, 242, 253, 264, 272, 281, 291, 304, 323, 333, 334, 342, 351, 356, 361, 371, 378, 391, 394, 397, 398, 401, 402, 403, 404, 412, 420, 438, 446, 454, 456, 468, 469, 470, 471, 540, 547, 548, 551, 552, 558, 574, 582, 583, 587, 588, 595, 614, 636, 637, 640, 641, 647, 663, 671, 672, 675, 676, 682, 700, 704, 705, 706, 708, 709, 710, 714, 716, 718, 720, 727, 766, 768, 777, 779, 784, 792, 794, 812, 818, 847, 852, 869], "correspond": [21, 73, 132, 153, 219, 230, 242, 253, 264, 272, 293, 304, 309, 344, 356, 380, 391, 393, 394, 460, 462, 475, 493, 501, 509, 519, 528, 536, 574, 614, 616, 663, 700, 702, 718, 724, 727, 730, 772, 782, 798, 820, 854, 886], "standard": [21, 42, 45, 62, 65, 69, 70, 72, 77, 128, 149, 182, 215, 226, 237, 249, 260, 268, 300, 318, 352, 387, 397, 398, 399, 401, 490, 495, 496, 498, 506, 513, 525, 533, 569, 608, 627, 658, 693, 714, 715, 768, 779, 794, 826, 860], "effici": [21, 69, 71, 72, 73, 149, 150, 224, 272, 394, 397, 401, 402, 714, 716, 717, 801, 814, 836, 848], "higher": 21, "iter": [21, 91, 148, 149, 153, 224, 234, 464, 716, 766, 777, 792, 889], "until": [21, 149, 224, 400, 408, 416, 424, 434, 442, 450, 464, 715, 716, 766, 792], "converg": [21, 149, 153, 224, 464, 716, 766, 777, 792], "up": [21, 77, 96, 397, 412], "given": [21, 148, 402, 487, 495, 503, 522, 530, 774, 886], "between": [21, 69, 70, 76, 77, 89, 90, 91, 149, 150, 224, 268, 272, 323, 333, 351, 357, 358, 359, 361, 394, 396, 400, 401, 403, 487, 543, 544, 545, 565, 566, 578, 579, 580, 603, 605, 632, 633, 634, 654, 655, 667, 668, 669, 689, 690, 710, 712, 714, 718, 749, 757, 801, 836], "print": [21, 69, 70, 72, 148, 149, 150, 151, 153, 396, 397, 398, 714, 715, 716], "suppress": [21, 69], "output": [21, 69, 77, 82, 149, 153, 234, 235, 293, 309, 344, 380, 393, 403, 560, 598, 616, 649, 684, 702, 820, 854], "maximum": [21, 149, 153, 179, 180, 181, 224, 766, 777, 792], "minim": [21, 69, 234, 235, 394, 479, 718], "2sl": [21, 76, 90, 150, 151, 211, 235, 712, 716, 718], "pass": [21, 70, 77, 96, 143, 149, 150, 153, 213, 222, 224, 226, 233, 234, 235, 237, 247, 258, 397, 714, 715, 763, 766, 774, 777, 779, 792], "scipi": [21, 69, 75, 77, 78, 79, 91, 96, 147, 148, 149, 234, 235], "defer": [21, 77, 235, 408, 416, 424, 434, 442, 450], "choos": [21, 235, 496], "an": [21, 69, 70, 72, 73, 77, 91, 114, 148, 149, 150, 151, 153, 182, 235, 245, 281, 334, 358, 371, 394, 396, 397, 398, 401, 402, 403, 454, 488, 504, 511, 513, 515, 540, 541, 551, 552, 586, 587, 588, 640, 641, 675, 676, 714, 715, 716, 717, 718, 724, 727, 730, 763, 768, 772, 774, 779, 782, 789, 794, 798, 801, 814, 820, 824, 828, 836, 848, 854, 858, 862, 875, 884, 885, 890], "appropri": [21, 72, 73, 235, 394, 397, 402], "all": [21, 35, 55, 69, 70, 71, 72, 73, 77, 101, 114, 139, 143, 148, 149, 150, 153, 181, 221, 232, 235, 244, 255, 266, 268, 272, 281, 293, 313, 314, 315, 318, 320, 333, 334, 344, 361, 371, 380, 394, 396, 397, 398, 399, 401, 402, 403, 428, 454, 488, 495, 504, 530, 551, 560, 586, 587, 598, 620, 621, 622, 627, 629, 640, 649, 675, 684, 714, 716, 718, 749, 757, 763, 766, 770, 773, 774, 777, 783, 792, 796, 799, 801, 814, 828, 836, 848, 862, 881], "input": [21, 70, 72, 77, 144, 149, 151, 153, 182, 235, 293, 344, 380, 396, 397, 401, 454, 488, 504, 513, 523, 531, 560, 598, 649, 684, 714, 820, 854], "except": [21, 69, 73, 235, 394, 397, 454, 714, 716], "fun": [21, 69, 149, 235], "x0": [21, 69, 149, 235], "arg": [21, 69, 149, 179, 180, 235, 880, 889], "overridden": [21, 235, 399, 714], "linearfactormodel": [23, 69, 70, 71, 72, 90, 712], "applic": [24, 76, 96, 150, 394, 401, 713, 716], "both": [24, 69, 70, 71, 72, 77, 91, 132, 151, 153, 192, 195, 204, 215, 222, 226, 237, 245, 249, 260, 268, 272, 287, 304, 356, 391, 394, 397, 398, 458, 511, 513, 560, 574, 598, 614, 649, 663, 684, 700, 714, 715, 718, 753, 820, 854], "time": [24, 69, 70, 72, 73, 75, 76, 77, 78, 139, 143, 147, 148, 149, 150, 151, 153, 357, 359, 394, 396, 401, 402, 403, 404, 412, 420, 428, 431, 438, 446, 454, 456, 458, 460, 467, 470, 475, 487, 490, 495, 498, 503, 506, 511, 513, 515, 521, 522, 523, 525, 530, 531, 533, 539, 543, 565, 571, 578, 603, 610, 632, 654, 660, 667, 689, 696, 703, 710, 714, 715, 716, 717, 718], "zero": [24, 35, 55, 69, 73, 114, 268, 281, 287, 334, 371, 394, 551, 574, 586, 587, 614, 640, 663, 675, 700, 714, 801, 813, 836, 867, 868], "e": [24, 69, 71, 73, 77, 132, 148, 150, 212, 223, 234, 246, 257, 304, 356, 358, 391, 394, 401, 402, 403, 404, 412, 420, 438, 446, 574, 614, 663, 700, 713, 714, 715, 716, 718, 768, 779, 794, 889], "alpha_i": [24, 397, 401, 511], "directli": [24, 83, 84, 87, 114, 149, 150, 153, 281, 334, 371, 394, 397, 716, 718], "lambda_i": 24, "sampl": [24, 77, 110, 126, 148, 149, 150, 153, 154, 159, 160, 165, 166, 171, 172, 177, 181, 192, 195, 203, 204, 208, 212, 223, 234, 246, 257, 278, 293, 298, 317, 323, 330, 344, 349, 368, 380, 385, 394, 402, 412, 531, 540, 560, 598, 649, 684, 714, 716, 718, 720, 735, 739, 743, 749, 753, 757, 766, 777, 792, 801, 806, 814, 820, 836, 841, 848, 854, 869], "which": [24, 69, 71, 72, 73, 77, 91, 148, 149, 150, 151, 153, 215, 219, 224, 226, 230, 237, 242, 245, 249, 253, 260, 264, 268, 293, 344, 380, 394, 396, 397, 398, 399, 401, 402, 403, 493, 501, 504, 509, 511, 513, 515, 519, 523, 528, 531, 536, 563, 601, 652, 687, 714, 715, 716, 717, 718, 757, 763, 766, 769, 770, 772, 777, 780, 782, 789, 792, 795, 796, 798, 820, 854], "support": [25, 46, 66, 71, 77, 96, 129, 150, 172, 178, 204, 213, 224, 235, 247, 256, 258, 270, 301, 319, 353, 388, 396, 402, 404, 420, 428, 454, 488, 496, 504, 511, 513, 523, 531, 570, 609, 628, 659, 694, 712, 714, 715, 716, 718, 730, 743, 757, 766, 777, 792, 827, 861], "consist": [25, 69, 73, 79, 91, 149, 150, 272, 287, 394, 397, 398, 401, 402, 403, 714, 715, 718, 763, 789, 813], "attrdict": [28, 49, 538, 576, 630, 665, 722, 726, 729, 733, 737, 741, 746, 750, 754, 759, 800, 810, 835, 845], "mispric": [29, 33, 50, 54], "summari": [33, 54, 69, 70, 72, 77, 148, 149, 150, 151, 153, 396, 397, 398, 401, 403, 714, 715, 716, 717], "complet": [33, 54, 69, 70, 72, 96, 152, 213, 247, 258, 398, 400, 717, 718, 766, 792], "measur": [33, 54, 69, 77, 150, 151, 153, 224, 268, 399, 402, 403, 543, 544, 545, 565, 566, 567, 578, 579, 580, 603, 605, 606, 632, 633, 634, 654, 655, 656, 667, 668, 669, 689, 690, 691, 714, 717, 828, 862], "waldteststatist": [35, 55, 114, 132, 149, 150, 272, 281, 287, 304, 322, 323, 324, 333, 334, 351, 356, 357, 358, 359, 361, 371, 391, 551, 552, 574, 586, 587, 588, 614, 640, 641, 663, 675, 676, 700, 801, 813, 814, 836, 848, 870], "model": [35, 36, 46, 49, 55, 56, 66, 69, 70, 72, 75, 76, 77, 78, 83, 89, 90, 91, 96, 99, 101, 102, 112, 114, 116, 117, 118, 129, 132, 148, 149, 150, 152, 154, 160, 166, 172, 182, 194, 197, 198, 207, 210, 268, 269, 270, 271, 272, 279, 281, 284, 285, 287, 289, 293, 301, 304, 309, 313, 314, 315, 318, 319, 320, 321, 322, 324, 331, 333, 334, 337, 338, 340, 344, 353, 356, 357, 359, 361, 362, 369, 371, 373, 374, 376, 380, 388, 391, 393, 394, 396, 399, 401, 403, 404, 409, 412, 417, 420, 425, 428, 435, 438, 443, 446, 451, 538, 547, 550, 551, 552, 554, 555, 557, 558, 560, 563, 564, 565, 566, 567, 570, 575, 576, 582, 585, 586, 587, 588, 590, 591, 592, 594, 595, 598, 601, 602, 603, 604, 605, 606, 609, 615, 616, 620, 621, 622, 627, 628, 629, 630, 636, 639, 640, 641, 643, 644, 646, 647, 649, 652, 653, 654, 655, 656, 659, 664, 665, 671, 674, 675, 676, 678, 679, 681, 682, 684, 687, 688, 689, 690, 691, 694, 701, 702, 703, 710, 713, 714, 718, 720, 724, 727, 730, 735, 739, 743, 752, 753, 756, 762, 800, 801, 807, 813, 814, 820, 827, 835, 836, 842, 848, 854, 861, 870], "null": [35, 55, 77, 114, 132, 149, 272, 281, 304, 322, 323, 324, 333, 334, 351, 356, 357, 358, 359, 361, 371, 391, 394, 574, 614, 663, 700, 718, 801, 814, 836, 848, 875], "share": [35, 55, 73, 89, 114, 132, 272, 281, 287, 304, 322, 323, 324, 333, 334, 351, 356, 357, 358, 359, 361, 371, 391, 551, 552, 574, 586, 587, 588, 614, 640, 641, 663, 675, 676, 700, 720, 722, 726, 729, 733, 737, 741, 746, 750, 754, 759, 801, 813, 814, 836, 848], "hypothes": [35, 55, 114, 132, 272, 281, 287, 304, 322, 323, 324, 333, 334, 351, 356, 357, 358, 359, 361, 371, 391, 551, 552, 574, 586, 587, 588, 614, 640, 641, 663, 675, 676, 700, 801, 813, 814, 836, 848], "joint": [35, 55, 551, 552, 586, 587, 588, 640, 641, 675, 676, 714, 717, 718], "wald": [35, 55, 132, 149, 268, 304, 356, 358, 391, 394, 552, 574, 588, 614, 641, 663, 676, 700, 875], "observ": [37, 57, 69, 70, 72, 73, 77, 91, 120, 148, 149, 150, 151, 153, 182, 211, 215, 217, 218, 222, 226, 228, 229, 233, 237, 239, 241, 245, 249, 251, 252, 256, 260, 262, 263, 291, 293, 342, 344, 378, 380, 394, 396, 397, 398, 401, 402, 403, 412, 456, 459, 466, 470, 488, 492, 494, 495, 500, 502, 508, 510, 511, 515, 517, 520, 527, 529, 535, 537, 549, 558, 560, 571, 584, 595, 596, 598, 610, 638, 647, 649, 660, 673, 682, 684, 696, 714, 715, 716, 717, 718, 749, 757, 763, 768, 774, 779, 789, 794, 818, 820, 852, 854], "p": [39, 59, 69, 70, 71, 72, 73, 84, 114, 122, 148, 149, 150, 151, 153, 268, 272, 281, 294, 309, 312, 315, 322, 323, 324, 333, 334, 345, 351, 357, 358, 359, 361, 371, 381, 393, 396, 397, 398, 401, 403, 551, 552, 561, 586, 587, 588, 599, 616, 619, 622, 640, 641, 650, 675, 676, 685, 702, 714, 715, 716, 717, 718, 821, 855, 878], "val": [39, 59, 122, 294, 315, 345, 381, 561, 599, 622, 650, 685, 821, 855], "df_resid": [39, 59, 105, 122, 273, 294, 325, 345, 363, 381, 542, 561, 577, 599, 631, 650, 666, 685, 802, 821, 837, 855], "els": [39, 59, 105, 122, 273, 294, 325, 345, 363, 381, 542, 561, 577, 599, 631, 650, 666, 685, 802, 821, 837, 855, 883], "normal": [39, 59, 84, 105, 122, 153, 224, 273, 294, 325, 345, 363, 381, 394, 494, 502, 510, 520, 529, 537, 542, 561, 577, 599, 631, 650, 666, 685, 771, 781, 797, 802, 821, 837, 855], "sum": [40, 47, 60, 67, 119, 123, 130, 148, 287, 290, 295, 302, 333, 341, 346, 354, 361, 377, 382, 389, 394, 402, 403, 412, 551, 556, 562, 572, 586, 587, 593, 600, 611, 640, 645, 651, 661, 675, 680, 686, 697, 714, 718, 817, 822, 829, 851, 856, 863], "squar": [40, 47, 60, 67, 69, 70, 72, 77, 90, 119, 123, 130, 148, 149, 150, 151, 153, 211, 268, 290, 295, 302, 333, 341, 346, 354, 361, 377, 382, 389, 396, 397, 398, 401, 402, 403, 458, 513, 543, 544, 545, 551, 556, 562, 572, 578, 579, 580, 586, 587, 593, 600, 611, 632, 633, 634, 640, 645, 651, 661, 667, 668, 669, 675, 680, 686, 697, 714, 715, 717, 763, 817, 822, 829, 851, 856, 863], "error": [42, 45, 62, 65, 69, 73, 77, 117, 128, 149, 153, 194, 197, 207, 210, 212, 223, 234, 246, 257, 285, 300, 318, 338, 352, 359, 374, 387, 397, 399, 401, 411, 419, 427, 437, 445, 453, 513, 554, 560, 569, 590, 598, 608, 627, 643, 649, 658, 678, 684, 693, 714, 723, 738, 742, 748, 749, 752, 756, 757, 762, 766, 792, 826, 860], "coeffici": [44, 64, 73, 104, 114, 125, 126, 148, 149, 150, 268, 281, 297, 298, 309, 316, 317, 334, 348, 349, 371, 384, 385, 393, 397, 402, 403, 495, 522, 540, 541, 543, 544, 545, 551, 564, 565, 566, 567, 574, 578, 579, 580, 587, 602, 603, 604, 605, 606, 614, 616, 623, 624, 625, 626, 632, 633, 634, 640, 653, 654, 655, 656, 663, 667, 668, 669, 675, 688, 689, 690, 691, 700, 702, 714, 718, 763, 774, 789, 824, 858, 869], "determin": [44, 64, 104, 125, 126, 297, 298, 316, 317, 348, 349, 384, 385, 397, 398, 402, 540, 541, 543, 544, 545, 564, 565, 566, 567, 578, 579, 580, 602, 603, 604, 605, 606, 623, 624, 625, 626, 632, 633, 634, 653, 654, 655, 656, 667, 668, 669, 688, 689, 690, 691, 715, 718, 764, 775, 790, 824, 858], "tabl": [46, 66, 83, 84, 85, 86, 87, 88, 129, 270, 301, 319, 353, 388, 401, 570, 609, 628, 659, 694, 714, 827, 861], "compat": [46, 66, 75, 77, 78, 79, 90, 129, 148, 270, 301, 319, 353, 388, 394, 570, 609, 628, 659, 694, 827, 861], "statsmodel": [46, 66, 75, 78, 79, 90, 129, 149, 150, 151, 153, 256, 270, 301, 319, 353, 388, 397, 398, 401, 403, 570, 574, 609, 614, 628, 659, 663, 694, 700, 712, 714, 717, 827, 861], "export": [46, 66, 129, 270, 301, 319, 353, 388, 570, 609, 628, 659, 694, 827, 861], "csv": [46, 66, 85, 129, 270, 301, 319, 353, 388, 570, 609, 628, 659, 694, 827, 861], "html": [46, 66, 69, 70, 86, 129, 270, 301, 319, 353, 388, 570, 609, 628, 659, 694, 827, 861], "latex": [46, 66, 87, 129, 270, 301, 319, 353, 388, 570, 609, 628, 659, 694, 827, 861], "as_csv": [46, 66, 129, 270, 301, 319, 353, 388, 570, 609, 628, 659, 694, 827, 861], "as_html": [46, 66, 129, 270, 301, 319, 353, 388, 570, 609, 628, 659, 694, 827, 861], "as_latex": [46, 66, 129, 270, 301, 319, 353, 388, 570, 609, 628, 659, 694, 827, 861], "total": [47, 67, 130, 149, 150, 151, 153, 302, 354, 389, 394, 572, 611, 613, 661, 697, 699, 714, 828, 829, 862, 863], "A": [49, 71, 72, 102, 132, 148, 150, 151, 215, 226, 237, 249, 260, 271, 304, 321, 356, 362, 391, 394, 397, 574, 614, 663, 700, 710, 713, 714, 715, 716, 718, 751, 755, 761, 796, 875], "dictionari": [49, 77, 96, 102, 132, 148, 149, 186, 193, 196, 206, 209, 234, 269, 271, 304, 321, 356, 362, 391, 397, 574, 614, 663, 700, 714, 716, 750, 754, 759, 763, 768, 770, 772, 774, 779, 782, 789, 794, 796, 798, 800, 820, 835, 854, 880, 889], "common": [69, 90, 150, 153, 272, 397, 404, 420, 511, 530, 718, 770, 796, 801, 814, 836, 848, 876], "asset": [69, 70, 72, 76, 77, 90, 713], "market": [69, 70, 71, 72, 150, 397, 398], "size": [69, 70, 71, 72, 91, 126, 139, 143, 148, 149, 151, 293, 298, 317, 344, 349, 380, 385, 396, 464, 540, 560, 598, 649, 684, 714, 715, 801, 814, 820, 836, 848, 854, 869, 876], "macroeconom": [69, 71], "shock": [69, 71, 72, 77, 117, 285, 293, 338, 344, 374, 380, 397, 402, 530, 554, 560, 590, 598, 643, 649, 678, 684, 801, 814, 820, 836, 848, 854], "uncertainti": 69, "set": [69, 70, 71, 73, 77, 91, 96, 148, 150, 153, 178, 224, 256, 309, 333, 351, 361, 393, 394, 396, 397, 398, 399, 403, 404, 412, 420, 428, 431, 438, 446, 495, 539, 616, 702, 714, 716, 718, 763, 764, 767, 768, 775, 777, 778, 779, 789, 790, 793, 794, 888], "often": [69, 401], "although": [69, 71, 91, 149, 150, 151, 396, 397, 401, 488, 504, 513, 523, 531, 714, 718, 763], "thei": [69, 149, 150, 151, 153, 394, 397, 398, 402, 403, 458, 563, 601, 652, 687, 714, 715], "do": [69, 89, 397, 401, 402, 513, 550, 585, 630, 639, 674, 714, 716, 824, 858], "need": [69, 70, 77, 132, 150, 151, 304, 356, 391, 479, 494, 502, 510, 520, 529, 537, 714, 718], "come": [69, 70, 149, 394], "ken": [69, 70, 72], "": [69, 70, 71, 72, 73, 77, 149, 150, 152, 153, 154, 160, 166, 172, 178, 195, 204, 245, 249, 260, 268, 272, 323, 324, 333, 357, 358, 359, 394, 396, 397, 400, 402, 404, 412, 420, 438, 446, 488, 504, 513, 523, 531, 703, 714, 715, 716, 718, 720, 730, 735, 743, 757, 824, 828, 858, 862, 875, 884, 885, 890], "websit": [69, 70], "4": [69, 70, 72, 79, 96, 139, 143, 148, 149, 150, 151, 153, 219, 230, 242, 253, 264, 396, 397, 398, 401, 403, 710, 713, 714, 715, 716, 717, 763, 794], "momentum": [69, 70], "12": [69, 70, 73, 75, 78, 148, 149, 150, 396, 397, 398, 403, 714, 716, 717, 718], "industri": [69, 70, 150, 402, 714], "subset": [69, 70], "sort": [69, 70, 77], "linearmodel": [69, 70, 72, 75, 77, 78, 79, 148, 149, 150, 151, 153, 396, 397, 398, 401, 403, 712, 714, 715, 716, 717], "descr": [69, 70, 149, 150, 151, 397, 714], "39": [69, 70, 72, 149, 150, 714, 715, 716], "librari": [69, 70, 72, 714], "http": [69, 70, 713], "mba": [69, 70], "tuck": [69, 70], "dartmouth": [69, 70], "edu": [69, 70], "page": [69, 70], "faculti": [69, 70], "data_librari": [69, 70], "date": [69, 70, 72, 148, 149, 150, 151, 153, 396, 397, 398, 401, 403, 714, 715, 716, 717], "year": [69, 70, 149, 150, 151, 396, 397, 398, 401, 403, 574, 614, 663, 700, 714], "month": [69, 70], "mom": [69, 70, 150], "rf": [69, 70, 72], "nodur": [69, 70], "durabl": [69, 70], "durbl": [69, 70], "manuf": [69, 70], "manufactur": [69, 70], "enrgi": [69, 70], "energi": [69, 70], "chem": [69, 70], "chemic": [69, 70], "buseq": [69, 70], "busi": [69, 70, 713], "equip": [69, 70], "telcm": [69, 70], "telecom": [69, 70], "util": [69, 70, 90, 151, 153, 398, 714, 722, 726, 729, 733, 737, 741, 746, 750, 754, 759, 766, 770, 792, 796], "shop": [69, 70], "retail": [69, 70], "hlth": [69, 70], "health": [69, 70, 149, 151], "care": [69, 70], "monei": [69, 70], "financ": [69, 70, 713], "s1v1": [69, 70, 72, 714, 796], "small": [69, 70, 72, 77, 110, 148, 150, 154, 159, 160, 165, 166, 171, 172, 177, 192, 195, 203, 204, 208, 278, 323, 330, 368, 394, 398, 401, 402, 412, 531, 714, 718, 720, 735, 739, 743, 749, 753, 757, 766, 777, 792, 806, 841], "firm": [69, 70, 72, 148, 149, 150, 151, 396, 398, 401, 402, 403], "low": [69, 70, 72, 77, 149, 151, 402, 458, 513], "s1v3": [69, 70, 72, 714], "medium": [69, 70], "s1v5": [69, 70, 72, 714, 796], "high": [69, 70, 72, 77, 90, 91, 148, 395, 718], "s3v1": [69, 70], "3": [69, 70, 71, 72, 73, 77, 79, 139, 148, 149, 150, 151, 153, 180, 181, 309, 393, 394, 396, 397, 398, 401, 402, 403, 454, 479, 574, 614, 616, 663, 700, 702, 704, 714, 715, 716, 717], "s3v3": [69, 70], "s3v5": [69, 70], "5": [69, 70, 139, 143, 148, 149, 150, 151, 153, 180, 181, 309, 393, 394, 396, 397, 398, 401, 403, 616, 702, 710, 713, 714, 715, 716], "s5v1": [69, 70, 72, 714, 796], "larg": [69, 70, 72, 77, 96, 148, 150, 397, 401, 402, 403, 712, 714], "s5v3": [69, 70, 72, 714], "s5v5": [69, 70, 72, 714, 796], "loser": [69, 70], "s1m3": [69, 70], "neutral": [69, 70], "winner": [69, 70], "s5m3": [69, 70], "subtract": [69, 192, 195, 204, 208, 394, 397, 412, 749, 753, 757], "sinc": [69, 70, 71, 73, 96, 117, 148, 149, 150, 153, 195, 245, 285, 338, 374, 396, 397, 398, 403, 513, 554, 590, 643, 678, 712, 714, 715, 717, 718, 753, 824, 858], "invest": [69, 73, 398, 403], "iloc": [69, 70, 396, 714, 716], "6": [69, 70, 72, 75, 78, 139, 143, 148, 149, 150, 151, 181, 359, 394, 396, 397, 398, 714, 715, 716, 717], "themselv": 69, "so": [69, 70, 71, 72, 73, 77, 114, 149, 150, 151, 153, 181, 219, 230, 240, 242, 245, 253, 264, 272, 281, 334, 359, 371, 394, 396, 397, 398, 399, 401, 402, 403, 454, 458, 552, 588, 641, 676, 714, 715, 718, 801, 814, 824, 836, 848, 858], "expect": [69, 71, 73, 149, 394, 403], "thi": [69, 70, 71, 72, 73, 77, 79, 87, 91, 96, 114, 117, 148, 149, 150, 151, 153, 195, 219, 230, 242, 253, 264, 272, 281, 285, 334, 338, 357, 371, 374, 394, 396, 397, 398, 399, 400, 401, 402, 403, 479, 490, 494, 498, 502, 504, 506, 510, 511, 513, 515, 520, 522, 525, 529, 533, 537, 540, 541, 543, 544, 545, 554, 565, 566, 567, 578, 579, 580, 590, 603, 605, 606, 632, 633, 634, 643, 654, 655, 656, 667, 668, 669, 678, 689, 690, 691, 712, 714, 715, 716, 717, 718, 749, 753, 757, 814, 848, 889], "also": [69, 70, 89, 149, 150, 153, 240, 394, 396, 397, 402, 403, 454, 511, 552, 588, 641, 676, 710, 716, 717, 718, 768, 779, 785, 794, 888], "each": [69, 73, 77, 91, 105, 132, 139, 147, 149, 150, 153, 268, 273, 304, 325, 333, 356, 361, 363, 391, 394, 397, 401, 402, 431, 495, 511, 513, 515, 539, 542, 574, 577, 614, 631, 663, 666, 700, 714, 715, 716, 717, 718, 724, 727, 730, 751, 755, 756, 761, 763, 768, 772, 774, 779, 782, 789, 794, 798, 802, 820, 828, 837, 854, 862], "constant": [69, 73, 96, 114, 116, 136, 149, 151, 215, 216, 226, 227, 237, 238, 249, 250, 260, 261, 281, 284, 334, 337, 371, 373, 397, 402, 490, 491, 498, 499, 506, 507, 516, 525, 526, 533, 534, 551, 552, 587, 588, 640, 641, 675, 676, 710, 714, 718, 769, 780, 795, 824, 828, 858, 862], "essenti": 69, "cap": [69, 71, 402, 796], "m": [69, 70, 71, 150, 179, 180, 181, 272, 394, 397, 713, 714, 718, 727, 796, 868], "unsurprisingli": [69, 714], "unabl": 69, "asset_pr": [69, 70, 72, 712], "tradedfactormodel": [69, 70, 71, 72, 90, 712], "re": [69, 70, 72, 83, 84, 91, 96, 132, 148, 149, 150, 153, 304, 351, 356, 391, 396, 397, 399, 401, 402, 488, 490, 496, 498, 506, 513, 515, 523, 525, 531, 533, 538, 576, 630, 665, 714, 716], "fit": [69, 70, 72, 77, 91, 92, 93, 103, 115, 132, 144, 148, 149, 150, 151, 153, 219, 230, 242, 253, 264, 268, 283, 293, 304, 336, 344, 356, 357, 358, 359, 372, 380, 391, 394, 396, 397, 398, 399, 401, 402, 403, 490, 493, 498, 501, 506, 509, 515, 519, 525, 528, 533, 536, 543, 544, 545, 553, 560, 565, 566, 567, 574, 578, 579, 580, 589, 598, 603, 604, 605, 606, 614, 632, 633, 634, 642, 649, 654, 655, 656, 663, 667, 668, 669, 677, 684, 689, 690, 691, 700, 714, 715, 716, 717, 772, 782, 798, 811, 820, 828, 846, 854, 862], "No": [69, 70, 72, 148, 149, 150, 151, 153, 396, 397, 398, 401, 403, 714, 715, 716, 717], "9": [69, 70, 75, 78, 79, 148, 149, 150, 151, 153, 396, 397, 398, 401, 403, 714, 715, 716], "6910": 69, "70": [69, 150, 403], "034": [69, 714], "819": [69, 70, 72, 714], "0000": [69, 70, 72, 148, 149, 150, 151, 153, 396, 397, 398, 401, 403, 714, 715, 716, 717], "tue": [69, 70, 148, 149, 150, 151, 396, 397, 398, 714, 715, 716], "apr": [69, 70, 148, 149, 150, 151, 396, 397, 398, 401, 403, 714, 715, 716], "16": [69, 70, 148, 149, 150, 151, 396, 397, 398, 403, 714, 715, 716], "2024": [69, 70, 148, 149, 150, 151, 396, 397, 398, 714, 715, 716], "distribut": [69, 70, 71, 72, 73, 84, 114, 132, 148, 149, 150, 151, 153, 268, 272, 281, 304, 322, 323, 324, 333, 334, 351, 356, 357, 358, 359, 361, 371, 391, 394, 396, 397, 398, 401, 403, 551, 552, 574, 586, 587, 588, 614, 640, 641, 663, 675, 676, 700, 714, 716, 718, 801, 814, 836, 848, 875], "chi2": [69, 70, 72, 114, 148, 149, 150, 151, 153, 268, 281, 334, 371, 714, 716], "17": [69, 70, 96, 148, 149, 150, 151, 396, 397, 398, 401, 403, 714, 715, 716, 717], "35": [69, 150, 714], "50": [69, 148, 149, 150, 401, 403], "cov": [69, 70, 72, 148, 149, 150, 151, 153, 396, 397, 398, 401, 403, 714, 715, 716, 717], "std": [69, 70, 72, 148, 149, 150, 151, 153, 396, 397, 398, 401, 403, 714, 715, 716, 717], "err": [69, 70, 72, 148, 149, 150, 151, 153, 396, 397, 398, 401, 403, 714, 715, 716, 717], "stat": [69, 70, 72, 77, 148, 149, 150, 151, 153, 268, 320, 394, 396, 397, 398, 400, 401, 403, 551, 587, 629, 640, 675, 714, 715, 716, 717, 875], "lower": [69, 70, 72, 105, 148, 149, 150, 151, 153, 273, 325, 363, 394, 396, 397, 398, 401, 403, 542, 577, 631, 666, 714, 715, 716, 717, 802, 837], "ci": [69, 70, 72, 89, 148, 149, 150, 151, 153, 396, 397, 398, 401, 403, 714, 715, 716, 717], "upper": [69, 70, 72, 105, 148, 149, 150, 151, 153, 272, 273, 325, 363, 396, 397, 398, 401, 403, 542, 577, 631, 666, 714, 715, 716, 717, 802, 837], "0065": [69, 398], "0015": [69, 150, 714], "3553": 69, "0035": [69, 149, 151, 714], "0094": [69, 149, 151, 714], "heteroskedasticcovari": [69, 70, 96, 153, 198, 213, 247, 258, 766, 792], "full_summari": [69, 70, 72], "expand": [69, 77, 89, 149, 150, 394], "while": [69, 150, 153, 398, 399, 401, 402, 495, 513, 718], "extra": [69, 87, 88], "increas": [69, 75, 78, 79, 149, 150], "still": [69, 714], "easili": [69, 150], "reject": [69, 718, 801, 814, 836, 848], "8971": 69, "53": 69, "271": 69, "0016": [69, 70, 72, 150, 714, 715], "0010": [69, 70, 148, 150, 398, 714, 716], "6021": 69, "1091": 69, "0004": [69, 150, 397, 714, 715, 716], "0009": [69, 148, 150, 397, 714, 715, 716], "6993": 69, "0002": [69, 70, 72, 149, 150, 396, 401, 714], "0053": [69, 70, 716], "chang": [69, 77, 79, 89, 90, 151, 153, 224, 397, 399, 402, 714, 716], "doe": [69, 71, 73, 148, 150, 357, 397, 401, 402, 403, 454, 495, 513, 543, 544, 545, 552, 578, 579, 580, 588, 632, 633, 634, 641, 667, 668, 669, 676, 712, 714, 716, 718, 889], "indu": 69, "7118": 69, "61": [69, 397, 398, 716], "617": 69, "displai": [69, 149, 153, 234, 235, 714], "There": [69, 70, 72, 73, 89, 148, 150, 153, 394, 396, 402, 714, 717], "reason": [69, 150, 401, 717, 870], "dispers": 69, "possibli": [69, 149, 714], "close": [69, 148, 149, 150, 287, 322, 324, 394, 813], "uniti": [69, 101, 221, 232, 244, 255, 266, 394, 768, 779, 794], "803334": 69, "029383": 69, "080556": 69, "176659": 69, "104124": 69, "466510": 69, "129601": 69, "094600": 69, "197135": 69, "913425": 69, "234012": 69, "264609": 69, "970844": 69, "179466": 69, "092021": 69, "152119": 69, "182299": 69, "543462": 69, "782811": 69, "158395": 69, "044042": 69, "605203": 69, "175549": 69, "260051": 69, "942997": 69, "135802": 69, "010064": 69, "864135": 69, "213336": 69, "315180": 69, "112368": 69, "053364": 69, "378365": 69, "109851": 69, "304442": 69, "237830": 69, "7": [69, 148, 149, 150, 151, 396, 397, 398, 403, 710, 713, 714, 715, 716], "seaborn": [69, 714], "sn": [69, 714], "matplotlib": [69, 714], "inlin": [69, 77, 714], "heatmap": [69, 714], "lt": [69, 150, 396], "ax": [69, 148, 396], "gt": [69, 150, 396], "similarli": [69, 394, 398, 402, 403, 714, 716, 718, 763], "monthli": [69, 150], "scale": [69, 154, 160, 166, 172, 458, 718, 869], "show": [69, 70, 148, 150, 151, 152, 400, 714], "annual": [69, 150, 397, 714], "healthcar": 69, "ha": [69, 71, 73, 75, 77, 78, 92, 93, 117, 132, 139, 148, 149, 150, 153, 195, 240, 285, 304, 323, 333, 338, 356, 361, 374, 391, 394, 396, 397, 398, 401, 402, 454, 488, 540, 541, 551, 554, 563, 574, 586, 587, 590, 601, 614, 640, 643, 652, 663, 675, 678, 687, 700, 714, 716, 753, 785, 801, 814, 836, 848, 889], "largest": 69, "8": [69, 79, 148, 149, 150, 396, 397, 398, 401, 403, 714, 715, 716, 717, 768, 779], "023360": 69, "030919": 69, "010643": 69, "012009": 69, "002783": 69, "024215": 69, "009726": 69, "017078": 69, "009952": 69, "050760": 69, "015197": 69, "033345": 69, "dtype": [69, 396, 397, 714], "float64": [69, 396, 397, 714], "more": [69, 71, 77, 89, 149, 150, 152, 272, 323, 351, 394, 397, 401, 513, 714, 715, 716, 717, 718, 772, 782, 798, 820, 824, 854, 858], "necessari": [69, 151, 397, 399, 490, 498, 506, 525, 533], "procedur": [69, 71, 153], "In": [69, 77, 79, 149, 150, 151, 153, 233, 293, 344, 380, 394, 396, 397, 398, 401, 402, 490, 498, 504, 506, 515, 525, 533, 560, 598, 649, 684, 714, 716, 717, 718, 814, 820, 848, 854, 889], "here": [69, 149, 150, 151, 396, 397, 398, 403, 714, 715, 716], "four": [69, 153, 394, 523, 531], "attempt": [69, 71, 399], "9051": 69, "36": [69, 70, 148, 149, 150, 151, 396, 397, 398, 403, 714, 715, 716], "929": 69, "52": [69, 153, 396, 398, 714], "0070": [69, 150], "5385": 69, "0040": [69, 70, 397, 714], "0100": [69, 397], "0005": [69, 150, 714, 715, 716], "0014": [69, 70, 148, 397, 714, 715, 716, 717], "3381": 69, "7353": 69, "0023": [69, 72, 150, 396, 397, 714], "0033": [69, 397, 401, 714], "0084": [69, 150, 714], "0025": [69, 150, 714, 715, 717], "3085": 69, "0034": [69, 397, 714, 717], "0133": [69, 149], "8072": 69, "0056": [69, 70], "0112": [69, 397], "092658": 69, "224223": 69, "244844": 69, "691191": 69, "874285": 69, "881880": 69, "459326": 69, "082546": 69, "047256": 69, "147949": 69, "239957": 69, "297941": 69, "156849": 69, "623684": 69, "059730": 69, "760059": 69, "948556": 69, "467783": 69, "333619": 69, "135465": 69, "128861": 69, "713403": 69, "051098": 69, "413705": 69, "138597": 69, "112936": 69, "062397": 69, "755032": 69, "946214": 69, "200052": 69, "095270": 69, "100067": 69, "078098": 69, "046531": 69, "069780": 69, "467172": 69, "identif": [69, 77, 151], "have": [69, 70, 77, 79, 91, 92, 93, 136, 148, 149, 151, 268, 293, 344, 380, 394, 396, 397, 402, 454, 560, 563, 574, 598, 601, 614, 649, 652, 663, 684, 687, 700, 710, 714, 716, 718, 720, 766, 768, 779, 792, 794, 820, 854], "uniqu": [69, 139, 150, 714, 715, 771, 781, 797], "variat": [69, 150, 402], "some": [69, 71, 72, 76, 77, 83, 84, 89, 90, 148, 149, 150, 151, 240, 396, 397, 399, 400, 712, 714, 715, 717, 718, 887], "cross": [69, 71, 77, 397, 404, 540, 541, 713, 717, 718, 749, 801, 814, 836, 848], "section": [69, 71, 73, 77, 215, 226, 237, 249, 260, 397, 404, 540, 541, 713, 714, 718, 749], "differ": [69, 71, 73, 76, 77, 87, 89, 90, 96, 117, 149, 150, 213, 247, 258, 272, 285, 323, 333, 338, 351, 361, 374, 394, 396, 399, 400, 401, 403, 454, 463, 503, 504, 554, 563, 590, 601, 643, 652, 678, 687, 712, 714, 715, 718, 824, 858], "exposur": [69, 71], "correl": [69, 77, 149, 150, 153, 268, 357, 358, 359, 394, 399, 404, 543, 544, 545, 578, 579, 580, 632, 633, 634, 667, 668, 669, 714, 717, 766, 792, 801, 814, 836, 848], "rel": [69, 72, 149, 150, 272, 396, 397, 402], "might": [69, 70, 73, 149, 150, 397, 402, 714], "make": [69, 72, 89, 150, 153, 219, 230, 242, 253, 264, 397, 402, 403, 493, 501, 509, 519, 528, 536, 716, 772, 782, 798], "infer": [69, 72, 73, 77, 90, 96, 153, 213, 247, 258, 495, 552, 588, 641, 676, 713, 714, 717, 718], "unreli": [69, 77], "11": [69, 148, 149, 150, 397, 398, 403, 574, 614, 663, 700, 714, 716, 718], "corr": [69, 149, 402, 543, 544, 545, 578, 579, 580, 632, 633, 634, 667, 668, 669, 714], "000000": [69, 149, 150, 396], "001914": 69, "733916": 69, "253675": 69, "638056": 69, "015628": 69, "002744": 69, "wa": [69, 77, 149, 150, 151, 293, 344, 380, 394, 397, 400, 551, 560, 587, 598, 640, 649, 675, 684, 714, 720, 735, 739, 743, 820, 854], "insignific": [69, 714], "drop": [69, 75, 77, 78, 91, 148, 150, 151, 182, 293, 344, 380, 394, 396, 397, 402, 403, 454, 460, 494, 502, 510, 511, 515, 520, 529, 537, 560, 598, 649, 684, 714, 716, 820, 854], "much": [69, 150, 397], "effect": [69, 71, 73, 75, 76, 77, 78, 90, 91, 92, 93, 117, 148, 149, 150, 151, 195, 285, 338, 374, 394, 395, 396, 401, 403, 404, 412, 420, 438, 446, 454, 488, 495, 511, 512, 513, 515, 518, 521, 530, 531, 544, 545, 547, 548, 550, 554, 560, 566, 567, 576, 579, 580, 582, 583, 585, 586, 590, 591, 596, 598, 604, 605, 606, 613, 630, 633, 634, 636, 637, 639, 643, 649, 655, 656, 665, 668, 669, 671, 672, 674, 678, 684, 690, 691, 699, 703, 710, 712, 714, 753], "7915": 69, "406": 69, "0073": [69, 149, 151, 153, 714], "0017": [69, 150, 714], "3856": 69, "0105": [69, 149, 151, 714], "0091": 69, "0027": [69, 714, 716], "4361": 69, "0006": [69, 396, 397, 714, 715, 716], "0039": [69, 397, 714, 717], "0143": [69, 714], "7507": 69, "0055": [69, 70, 397, 398, 714], "0113": [69, 397, 398, 403], "case": [69, 72, 149, 150, 151, 153, 211, 215, 226, 237, 249, 260, 394, 398, 399, 402, 454, 490, 498, 506, 515, 525, 533, 712, 714, 715, 717, 718, 789, 814, 848, 889], "construct": [69, 77, 91, 105, 134, 144, 147, 150, 215, 219, 226, 230, 237, 242, 249, 253, 260, 264, 273, 293, 325, 344, 363, 380, 394, 396, 397, 458, 489, 493, 497, 501, 505, 509, 513, 514, 519, 524, 528, 532, 536, 542, 560, 577, 598, 631, 649, 666, 684, 714, 718, 752, 756, 762, 767, 770, 772, 778, 782, 788, 793, 796, 798, 802, 820, 837, 854], "misspecifi": 69, "littl": [69, 149], "impact": 69, "13": [69, 79, 148, 149, 150, 153, 396, 397, 403, 713, 714, 716], "006": [69, 714], "0045": [69, 72, 149, 150, 151, 715], "0079": 69, "5607": 69, "5750": 69, "0200": 69, "0111": 69, "0076": [69, 150], "4636": 69, "1433": [69, 715], "0038": [69, 70, 397, 715], "0259": 69, "0110": 69, "0946": 69, "0362": [69, 397], "0007": [69, 70, 397, 714, 716], "0214": [69, 714], "0086": [69, 149, 714], "9315": [69, 150], "0058": [69, 396], "0114": [69, 714], "base": [69, 72, 73, 77, 84, 96, 114, 149, 150, 224, 281, 309, 334, 371, 393, 397, 399, 402, 495, 543, 544, 545, 578, 579, 580, 616, 632, 633, 634, 667, 668, 669, 702, 713, 720, 735, 743, 763, 766, 768, 774, 789, 792, 794], "g": [69, 73, 77, 132, 154, 192, 204, 212, 223, 233, 234, 240, 246, 257, 287, 304, 356, 391, 394, 401, 402, 403, 404, 412, 420, 438, 446, 574, 614, 663, 700, 714, 715, 718, 720, 749, 757, 768, 779, 794, 813, 869], "newei": [69, 71, 72, 153, 172, 178, 204, 404, 406, 414, 420, 422, 428, 430, 440, 448, 504, 513, 523, 531, 713, 714, 730, 743, 757], "west": [69, 71, 72, 153, 172, 178, 204, 404, 406, 414, 420, 422, 428, 430, 440, 448, 504, 513, 523, 531, 713, 714, 730, 743, 757], "reduc": [69, 77, 256, 397, 490, 498, 506, 511, 515, 522, 525, 533, 716], "serial": 69, "firmli": 69, "14": [69, 70, 149, 150, 153, 397, 403, 714, 717], "25": [69, 149, 150, 151, 396, 397, 398, 403, 714], "841": 69, "3094": 69, "0106": [69, 714], "0031": [69, 149, 714], "9499": 69, "0032": [69, 714], "0152": 69, "8371": 69, "kernelcovari": [69, 70, 72, 96, 153, 198, 213, 247, 258, 766, 792], "final": [69, 73, 149, 272, 306, 400, 402, 714], "similar": [69, 71, 149, 151, 153, 394, 396, 397, 398, 399, 401, 403, 504, 513, 523, 531, 716, 824, 858], "singl": [69, 77, 90, 132, 150, 151, 304, 356, 391, 396, 398, 454, 495, 574, 614, 663, 700, 715, 716, 768, 779, 794], "practic": [69, 148, 394, 402, 714, 718, 768, 779, 794], "least": [69, 77, 90, 148, 149, 150, 153, 211, 402, 513, 717, 763, 770], "twice": [69, 150], "onc": [69, 92, 93, 96, 149, 394, 397], "get": [69, 139, 462, 475, 767, 778, 793, 888], "form": [69, 71, 73, 91, 105, 114, 132, 148, 149, 150, 215, 226, 237, 249, 260, 273, 281, 304, 325, 334, 356, 363, 371, 391, 394, 402, 403, 412, 454, 511, 542, 574, 577, 614, 631, 663, 666, 700, 714, 716, 718, 749, 757, 763, 764, 774, 775, 789, 790, 802, 820, 837, 854], "progress": 69, "everi": 69, "15": [69, 149, 150, 396, 397, 398, 403, 714, 716], "linearfactormodelgmm": [69, 71, 72, 90, 712], "47": [69, 149, 150, 151, 396, 398], "75791582822636": 69, "28": [69, 149, 150, 396, 398, 714], "102588325431977": 69, "20": [69, 70, 149, 150, 153, 396, 397, 398, 400, 403, 713, 714, 716], "26": [69, 149, 150, 151, 397, 398, 403, 714, 716], "361386794235514": 69, "30": [69, 150, 153, 396, 403, 714, 716], "01966832549377": 69, "40": [69, 150, 396, 398, 713], "22": [69, 75, 78, 79, 149, 150, 397, 714, 716, 718], "325343252983664": 69, "opt": [69, 149], "hostedtoolcach": [69, 149], "python": [69, 75, 77, 78, 79, 89, 149], "x64": [69, 149], "lib": [69, 149, 150], "python3": [69, 149], "site": [69, 149], "packag": [69, 77, 79, 89, 149, 153, 396, 399, 400, 403, 713], "_minim": [69, 149], "py": [69, 149, 396], "708": [69, 149], "optimizewarn": [69, 149], "desir": [69, 149, 396, 398, 403], "necessarili": [69, 71, 149], "achiev": [69, 149, 397], "due": [69, 77, 149, 397, 402, 714, 716], "precis": [69, 149, 309, 393, 396, 454, 616, 702, 714, 718], "loss": [69, 73, 149], "_minimize_bfg": [69, 149], "jac": [69, 149], "callback": [69, 149], "current": [69, 87, 149, 150, 714], "325343": 69, "41": [69, 403], "evalu": [69, 149, 151, 219, 230, 242, 253, 264, 493, 501, 509, 519, 528, 536, 772, 782, 798], "2494": [69, 150, 714], "gradient": [69, 149], "73": [69, 150, 716], "51935033606205": 69, "30373018675765": 69, "22642631959085": 69, "193081486135732": 69, "termin": 69, "successfulli": 69, "066871": 69, "1904": 69, "56": [69, 72, 149, 150, 714], "7904": [69, 72], "067": [69, 397], "0012": [69, 70, 72, 397, 714], "54": [69, 150, 397, 398, 716], "0067": [69, 150, 397], "4335": 69, "0037": [69, 149, 150, 397, 401, 714], "0097": [69, 150, 714], "0135": 69, "8706": [69, 397], "0090": [69, 150, 714, 716], "0180": [69, 150], "5139": 69, "0066": [69, 397, 714], "0123": [69, 70, 401], "well": [69, 70, 71, 72, 77, 150, 152, 333, 361, 394, 397, 400, 712, 714], "impli": 69, "abl": 69, "7901": 69, "833": [69, 149], "0316": [69, 717], "57": [69, 150, 396, 714, 716], "0074": 69, "1450": 69, "0046": [69, 397], "0102": [69, 149, 151, 396, 403], "0137": [69, 149, 151, 397], "0030": [69, 149, 150, 151, 714], "5918": 69, "0078": [69, 398], "0195": 69, "0013": [69, 714, 716], "0849": [69, 714], "0103": [69, 70], "approach": [69, 71, 73, 149, 713], "sub": 69, "repeat": [69, 77, 151, 715], "fix": [69, 75, 76, 77, 78, 90, 91, 148, 401, 403, 404, 412, 420, 438, 446, 511, 513, 710, 712, 752, 756, 762], "keyword": [69, 70, 77, 149, 198, 222, 226, 233, 234, 237, 397, 714, 715, 774, 779], "280321962967175": 69, "222217050936667": 69, "094157057995357": 69, "091266588590887": 69, "089908": 69, "37": [69, 149, 150, 151, 714], "2766": 69, "81": [69, 403, 714], "08879829245536": 69, "088771427576667": 69, "088753": 69, "3072": 69, "90": [69, 396, 714, 716], "08862240228191": 69, "088622": 69, "1506": [69, 714], "44": [69, 149, 151, 403], "08862232554808": 69, "1474": 69, "43": [69, 149], "089": 69, "03": [69, 148, 403], "4231": 69, "0096": 69, "8726": 69, "5017": 69, "cue": [69, 90, 149, 233, 712], "jointli": [69, 272, 333, 361, 586, 716, 717, 718], "rather": [69, 149, 402, 716], "than": [69, 73, 77, 91, 149, 150, 153, 323, 351, 401, 402, 513, 540, 715, 716], "same": [69, 71, 72, 73, 114, 117, 132, 144, 149, 150, 153, 219, 230, 242, 245, 253, 264, 272, 281, 285, 293, 304, 323, 334, 338, 344, 356, 371, 374, 380, 391, 394, 396, 397, 402, 464, 513, 554, 560, 563, 574, 590, 598, 601, 614, 643, 649, 652, 663, 678, 684, 687, 700, 714, 715, 716, 718, 768, 770, 779, 794, 796, 820, 854], "18": [69, 70, 72, 149, 150, 397, 398, 403, 714, 716, 717], "524478075316782": 69, "386055494358775": 69, "339805868990595": 69, "308313678040196": 69, "077574": 69, "38": [69, 150, 398, 714], "2630": 69, "77": [69, 150, 397, 398, 716], "7903": 69, "719": 69, "4157": 69, "0136": [69, 70, 714], "8881": 69, "0181": [69, 150], "4984": 69, "multipl": [70, 150, 153, 309, 393, 396, 401, 616, 702, 714, 715, 717, 718], "depend": [70, 75, 77, 78, 91, 92, 96, 117, 148, 149, 150, 153, 172, 198, 211, 213, 215, 222, 224, 226, 233, 235, 237, 240, 245, 247, 249, 256, 258, 260, 285, 338, 374, 394, 396, 397, 398, 401, 402, 404, 412, 420, 428, 438, 446, 487, 495, 503, 511, 522, 530, 540, 543, 544, 545, 554, 560, 565, 566, 567, 578, 579, 580, 590, 598, 603, 605, 606, 632, 633, 634, 643, 649, 654, 655, 656, 667, 668, 669, 678, 684, 689, 690, 691, 714, 715, 716, 717, 718, 749, 757, 763, 770, 774, 785, 789, 796, 828, 862], "independ": [70, 401, 530], "exist": [70, 714], "mani": [70, 77, 89, 149, 150, 398, 401, 511, 710, 718], "express": [70, 153, 215, 226, 237, 249, 260, 359, 394, 396, 402, 714, 715, 718, 763, 774, 789], "port1": 70, "port2": 70, "port3": 70, "port4": 70, "portn": 70, "factor1": 70, "factork": 70, "hand": [70, 394, 396, 402, 487, 495, 503, 511, 522, 530, 714], "side": [70, 394, 487, 495, 503, 511, 522, 530, 714], "from_formula": [70, 77, 132, 150, 151, 304, 356, 391, 398, 401, 715, 716], "1": [70, 73, 77, 79, 90, 91, 99, 101, 132, 139, 143, 147, 148, 149, 150, 151, 153, 154, 160, 166, 172, 178, 179, 180, 181, 192, 194, 195, 197, 198, 204, 207, 210, 211, 212, 215, 219, 220, 221, 222, 223, 226, 230, 231, 232, 233, 234, 237, 240, 242, 243, 244, 245, 246, 249, 253, 254, 255, 256, 257, 260, 264, 265, 266, 287, 304, 309, 351, 356, 357, 359, 391, 393, 394, 396, 397, 398, 401, 402, 403, 404, 412, 420, 428, 438, 446, 454, 488, 490, 493, 495, 498, 501, 504, 506, 509, 513, 515, 519, 523, 525, 528, 531, 533, 536, 552, 574, 588, 614, 616, 641, 663, 676, 700, 702, 709, 713, 714, 715, 716, 718, 720, 724, 727, 730, 735, 739, 743, 749, 752, 757, 763, 766, 768, 772, 774, 779, 782, 789, 792, 794, 796, 798, 801, 813, 814, 824, 828, 836, 848, 858, 862, 867, 868, 869], "combin": [70, 91, 397], "adequ": 70, "7229": 70, "9450": 70, "0190": [70, 716], "4051": 70, "0024": [70, 150, 396, 397], "0088": [70, 716], "0044": [70, 150], "6929": 70, "0071": [70, 149, 396], "0075": 70, "0081": [70, 149, 151, 714], "0021": [70, 72, 714, 716], "7457": 70, "omit": [70, 150, 151, 402, 763, 772, 782, 798, 820, 854], "simplifi": [70, 77, 89, 91, 139, 143, 149, 397, 402, 718, 770, 796], "experi": [70, 89, 132, 150, 304, 356, 391, 397, 401, 714], "altern": [70, 77, 96, 151, 213, 247, 258, 268, 394, 397, 400, 403, 454, 716, 718, 763, 828, 862], "appear": [70, 149, 268, 714, 715, 716], "inadequ": 70, "even": [70, 91, 148, 397, 403, 714], "port": 70, "v": [70, 132, 149, 150, 151, 154, 160, 166, 172, 304, 323, 351, 356, 359, 361, 391, 394, 574, 614, 663, 700, 715, 887, 889], "format": [70, 82, 85, 86, 132, 139, 143, 304, 356, 391, 397, 400, 403, 454, 574, 614, 663, 700, 714, 768, 779, 794], "7723": 70, "86": 70, "435": 70, "5940": 70, "5525": 70, "0050": [70, 715], "1337": 70, "2569": 70, "0036": [70, 150], "0042": [70, 150, 397, 714], "0918": [70, 397, 714], "0022": [70, 72, 150, 397, 716], "0063": [70, 714, 715, 716], "7058": 70, "0109": [70, 714], "To": 70, "verifi": [70, 77, 714], "interfac": [70, 77, 132, 151, 304, 356, 391, 398, 560, 598, 649, 684, 714, 716, 768, 770, 779, 794, 796], "ident": [70, 73, 96, 101, 148, 149, 150, 221, 232, 244, 255, 266, 358, 394, 397, 398, 401, 402, 488, 504, 714, 715, 716, 718, 766, 792], "commonli": [71, 400], "fama": [71, 76, 77, 90, 428, 495, 538, 712], "explain": [71, 150, 153, 178, 358, 359, 397], "hypothesi": [71, 132, 152, 304, 356, 391, 400, 574, 614, 663, 700, 718, 801, 814, 836, 848, 872, 875, 877], "associ": [71, 714], "simpl": [71, 73, 132, 149, 151, 304, 356, 391, 397, 403, 574, 614, 663, 700, 714, 715, 716, 796], "seemingli": [71, 73, 77, 90, 712, 714, 717, 763, 789, 835], "unrel": [71, 73, 77, 90, 712, 714, 717, 763, 789, 835], "regress": [71, 72, 73, 77, 90, 91, 150, 151, 152, 256, 268, 269, 282, 333, 335, 351, 357, 358, 359, 361, 394, 398, 401, 402, 403, 495, 540, 541, 586, 712, 714, 720, 735, 739, 743, 763, 784, 789, 796, 824, 828, 835, 858, 862], "sur": [71, 72, 73, 77, 90, 712, 714, 715, 716, 717], "possibl": [71, 132, 149, 150, 151, 153, 304, 356, 391, 394, 396, 398, 574, 614, 663, 700, 714, 715, 716, 768, 779, 794], "equal": [71, 73, 132, 149, 304, 356, 391, 394, 574, 614, 663, 700], "premium": [71, 73], "_": [71, 73, 139, 172, 211, 222, 233, 245, 357, 358, 359, 394, 402, 404, 412, 420, 438, 446, 487, 552, 588, 641, 676, 714, 718, 720, 763, 774, 789, 801, 824, 828, 836, 858, 862], "sim": [71, 73, 272, 287, 322, 323, 324, 333, 351, 357, 359, 394, 718, 813], "chi": [71, 132, 149, 150, 272, 287, 304, 322, 323, 333, 356, 357, 359, 391, 552, 574, 588, 614, 641, 663, 676, 700, 801, 813, 814, 836, 848], "2_p": 71, "demean": [71, 73, 394, 397, 403, 464, 467, 545, 580, 634, 669, 695, 718, 785, 824, 858], "regressor": [71, 73, 75, 77, 78, 91, 96, 136, 144, 148, 149, 150, 151, 153, 154, 160, 166, 172, 192, 194, 195, 197, 198, 204, 207, 210, 211, 212, 219, 222, 223, 230, 233, 234, 240, 242, 245, 246, 253, 256, 257, 264, 268, 269, 323, 351, 358, 394, 397, 398, 401, 402, 412, 493, 501, 509, 513, 519, 528, 536, 540, 551, 552, 587, 588, 640, 641, 675, 676, 715, 716, 718, 720, 724, 727, 730, 735, 739, 743, 751, 752, 753, 755, 756, 761, 762, 763, 766, 770, 772, 782, 788, 789, 792, 796, 798, 801, 814, 820, 836, 848, 854], "2_": [71, 272, 322, 323, 333, 357, 359, 552, 588, 641, 676, 801, 814, 836, 848], "k": [71, 72, 73, 76, 149, 150, 153, 154, 160, 166, 172, 204, 211, 212, 245, 246, 249, 257, 260, 288, 339, 375, 402, 404, 420, 438, 446, 551, 552, 586, 587, 588, 640, 641, 675, 676, 712, 713, 714, 718, 763, 774, 789, 801, 814, 836, 848, 867, 868, 883, 887, 888, 889], "over": [71, 77, 150, 394, 401, 718], "identifi": [71, 150, 394, 397, 398, 401, 464, 490, 498, 506, 511, 515, 522, 525, 533, 714, 718], "either": [71, 73, 96, 148, 149, 154, 219, 230, 242, 253, 264, 293, 344, 380, 394, 454, 456, 458, 467, 493, 495, 501, 509, 519, 528, 536, 714, 717, 718, 763, 768, 772, 774, 779, 782, 789, 794, 798, 820, 854, 889], "three": [71, 72, 73, 77, 90, 148, 149, 394, 396, 402, 454, 488, 504, 513, 712, 714, 717, 763], "gener": [71, 72, 73, 90, 149, 150, 153, 215, 222, 226, 237, 249, 260, 396, 398, 401, 402, 403, 460, 518, 560, 598, 649, 684, 695, 710, 712, 713, 716, 717, 774], "triangular": [71, 153, 172], "mathemat": [71, 148, 152, 178, 400, 401, 565, 566, 567, 603, 605, 606, 654, 655, 656, 689, 690, 691], "detail": [71, 148, 150, 152, 198, 224, 235, 400, 801, 814, 836, 848], "concis": [71, 152, 400], "explan": [71, 152, 400, 870], "introduct": [71, 150, 152, 397, 400], "modul": [71, 90, 152, 400, 402, 714, 717], "refer": [71, 90, 152, 178, 394, 400, 459, 565, 566, 567, 603, 605, 606, 654, 655, 656, 689, 690, 691, 717, 801, 814, 836, 848], "purpos": [72, 712], "strategi": [72, 397], "version": [72, 96, 101, 114, 149, 150, 221, 232, 244, 255, 256, 266, 281, 323, 334, 371, 394, 403, 714], "prefer": [72, 77, 149, 717], "eight": 72, "basic": [72, 152, 400], "usag": [72, 152, 400], "si": 72, "s1": 72, "s5": 72, "v1": 72, "v5": 72, "transform": [72, 394, 402, 403, 479, 490, 498, 506, 515, 525, 533, 563, 601, 652, 687, 714, 785, 788], "prior": [72, 402], "copi": [72, 77, 454, 796], "loc": [72, 142, 150, 184, 459, 714], "8879": 72, "109": [72, 714, 716], "sun": 72, "mai": [72, 77, 91, 148, 149, 394, 402, 490, 498, 506, 511, 515, 522, 525, 533, 718, 763, 774], "21": [72, 73, 149, 150, 397, 398, 403, 714, 717, 718], "2017": [72, 153, 401, 403, 717], "0060": [72, 150, 714], "7381": 72, "0029": [72, 150, 714, 715, 716], "0092": 72, "0001": [72, 149, 150, 151, 224, 397, 403, 714, 715, 716], "0011": [72, 397, 714, 715, 716], "1281": 72, "8980": 72, "0068": [72, 397, 714], "For": [73, 89, 139, 394, 396, 397, 402, 718], "alpha_": [73, 397, 402], "beta_": [73, 394, 714, 718], "sandwich": 73, "sg": 73, "defin": [73, 211, 222, 240, 245, 287, 333, 357, 361, 394, 402, 403, 547, 548, 551, 582, 583, 586, 587, 636, 637, 640, 671, 672, 675, 718, 801, 813, 814, 824, 828, 836, 848, 858, 862, 869], "i_": [73, 714, 718], "sigma_": [73, 402, 714], "sum_": [73, 154, 160, 166, 172, 192, 195, 204, 233, 394, 402, 404, 420, 438, 495, 718, 749, 757, 801, 814, 836, 848], "stack": [73, 404, 412, 420, 428, 438, 446, 714, 718, 763, 774, 789], "vector": [73, 153, 240, 394, 714, 718, 749, 757, 769, 780, 785, 795], "g_": [73, 204, 394, 402, 718], "epsilon": [73, 154, 160, 166, 172, 195, 240, 287, 333, 351, 357, 359, 361, 394, 402, 438, 446, 487, 714, 716, 718, 763, 774, 789, 824, 828, 858, 862], "align": [73, 77, 219, 230, 242, 253, 264, 394, 402, 716, 718], "gamma": [73, 91, 148, 153, 154, 160, 172, 358, 394, 402, 757], "bw": [73, 172, 179, 180, 181, 394, 402, 404, 420], "frac": [73, 361, 394, 402, 551, 586, 587, 640, 675, 716, 718, 824, 828, 858, 862, 869], "just": [73, 150, 151, 397, 402, 716], "after": [73, 92, 93, 152, 394, 398, 399, 400, 403], "chi_": [73, 351, 394, 718], "row": [73, 132, 148, 150, 186, 268, 272, 304, 356, 391, 394, 396, 574, 614, 663, 700, 716], "column": [73, 77, 83, 87, 139, 143, 147, 148, 149, 150, 183, 186, 268, 272, 293, 344, 380, 394, 396, 397, 404, 412, 420, 438, 446, 454, 460, 479, 560, 598, 649, 684, 710, 714, 715, 716, 718, 724, 727, 730, 768, 772, 779, 782, 794, 798, 820, 854], "ldot": [73, 357, 359, 394, 714, 718, 749, 757, 763, 774, 789], "cannot": [73, 150, 358, 359, 397, 398, 401, 718], "its": [73, 150, 397, 718], "solut": [73, 77, 148, 397, 718], "multi": [73, 464, 465, 490, 498, 506, 515, 525, 533], "throw": 73, "awai": 73, "remov": [73, 75, 77, 78, 396, 397, 403, 479, 773, 783, 799, 881, 886, 887], "virtual": [73, 397, 714, 715], "longer": [73, 397, 714], "c_": 73, "eta_": [73, 394], "compens": 73, "conduct": [73, 152, 400], "treat": [73, 91, 139, 150, 219, 230, 242, 253, 264, 293, 333, 344, 359, 361, 380, 394, 396, 454, 488, 493, 501, 504, 509, 511, 513, 515, 519, 523, 528, 531, 536, 772, 782, 798, 820, 854], "problem": [73, 149, 394, 716, 718], "were": [73, 77, 272, 396, 397, 718], "third": [73, 714], "foc": 73, "ccc": 73, "block": [73, 150, 151, 215, 226, 237, 249, 260, 272, 394, 714, 718, 720, 735, 739, 743, 753, 763, 774, 789], "0_": 73, "times1": 73, "u": [73, 150, 394, 403], "term": [73, 103, 114, 281, 334, 371, 394, 397, 402, 718, 824, 858], "becom": 73, "previou": [73, 150, 394, 397, 401, 714], "tild": [73, 357, 394, 402, 718, 720, 735, 743, 785], "lambda_": 73, "piec": 73, "structur": [73, 77, 153, 215, 219, 224, 226, 230, 235, 237, 242, 249, 253, 260, 264, 396, 397, 402, 479, 490, 498, 506, 515, 525, 533, 714, 716, 717, 763, 772, 774, 782, 789, 798, 820, 854], "element": [73, 83, 132, 153, 154, 304, 356, 391, 574, 614, 663, 700, 710, 714, 718, 720, 735, 743], "occur": [73, 397, 718], "bottom": 73, "solv": [73, 394, 718], "sometim": 73, "doubt": 73, "about": [73, 150, 714, 716], "vdot": [73, 718, 763, 774, 789], "write": [73, 77, 394, 718], "code": [73, 77, 89, 150, 394, 396, 397, 511, 515, 718], "bryzgalova": [73, 713], "cochran": [73, 713], "jagannathanet": [73, 713], "full": [75, 78, 490, 498, 506, 511, 515, 522, 525, 533, 540, 541, 714, 718, 785], "futur": [75, 77, 78, 396], "panda": [75, 77, 78, 79, 91, 92, 93, 105, 139, 143, 148, 149, 150, 153, 182, 215, 219, 226, 230, 242, 253, 264, 268, 273, 293, 325, 344, 363, 380, 396, 397, 398, 400, 431, 454, 456, 457, 460, 467, 472, 479, 493, 501, 509, 519, 528, 536, 539, 542, 560, 574, 577, 598, 614, 631, 649, 663, 666, 684, 700, 714, 715, 716, 768, 772, 779, 780, 782, 784, 794, 795, 798, 802, 828, 837, 862], "recent": [75, 78, 90, 714], "bump": [75, 78], "minimum": [75, 78, 79, 394], "wheel": [75, 77, 78, 79], "bug": [75, 77, 78], "affect": [75, 77, 78, 153, 357, 397], "absorb": [75, 77, 78, 90, 152, 511, 515], "gh546": [75, 78], "improv": [75, 77, 78, 79, 89, 151, 712, 714, 718, 763, 789], "licens": [75, 77, 78], "inform": [75, 77, 78, 83, 84, 90, 149, 150, 153, 193, 196, 206, 209, 245, 396, 462, 475, 714, 722, 726, 729, 733, 737, 741, 746, 750, 754, 759, 766, 792], "gh545": [75, 78], "gh548": [75, 78], "count": [75, 78, 139, 149, 150, 397, 402], "entiti": [75, 77, 78, 396, 399, 401, 402, 403, 404, 412, 420, 428, 438, 446, 454, 456, 458, 460, 462, 467, 469, 487, 488, 490, 495, 498, 503, 504, 506, 511, 512, 513, 515, 522, 523, 525, 530, 531, 533, 543, 545, 549, 567, 578, 580, 584, 606, 632, 634, 638, 656, 667, 669, 673, 691, 703, 710], "period": [75, 77, 78, 396, 397, 398, 401, 402, 403, 431, 454, 460, 495, 539, 710, 714, 718], "panel": [75, 76, 77, 78, 90, 149, 151, 399, 401, 402, 403, 713], "gh534": [75, 78], "19": [75, 78, 149, 150, 359, 396, 401, 714, 716], "switch": [75, 77, 78], "order": [75, 77, 78, 79, 149, 150, 179, 180, 181, 357, 394, 397, 560, 598, 649, 684, 714, 715, 717, 764, 768, 775, 779, 790, 794, 880, 884, 885, 890], "__future__": [75, 77, 78], "op": [75, 78], "cach": [75, 77, 78, 96], "favor": [75, 78], "functool": [75, 78], "cached_properti": [75, 78], "ad": [76, 77, 82, 149, 397, 402, 714, 881, 882, 884, 885, 889, 890], "macbeth": [76, 77, 90, 428, 495, 538, 712], "ol": [76, 77, 90, 150, 153, 256, 333, 358, 359, 361, 362, 394, 395, 397, 401, 712, 715, 716, 718, 720, 735, 739, 743, 766, 789, 792], "random": [76, 90, 91, 139, 143, 148, 530, 531, 665, 712, 714, 715, 716, 768, 779, 794], "pool": [76, 90, 397, 495, 522, 586, 712], "cluster": [76, 77, 96, 149, 153, 154, 158, 198, 208, 213, 222, 224, 233, 247, 258, 394, 412, 413, 488, 494, 502, 504, 510, 513, 515, 520, 523, 529, 531, 537, 703, 710, 713, 718, 720, 766, 792, 867, 869], "liml": [76, 77, 90, 245, 249, 260, 322, 324, 712], "instrument": [76, 90, 150, 151, 153, 154, 160, 166, 172, 192, 194, 195, 197, 198, 204, 207, 210, 211, 212, 215, 222, 223, 224, 226, 233, 234, 237, 240, 245, 246, 249, 256, 257, 260, 268, 282, 287, 323, 333, 335, 351, 357, 358, 359, 361, 394, 713, 716, 717, 718, 724, 727, 730, 749, 752, 753, 756, 757, 762, 763, 770, 774, 777, 789], "you": [77, 396], "enabl": 77, "behavior": [77, 150], "now": [77, 148, 151, 400], "kei": [77, 79, 132, 149, 153, 186, 269, 304, 309, 356, 391, 393, 396, 397, 454, 574, 614, 616, 663, 700, 702, 712, 714, 715, 716, 717, 763, 768, 772, 774, 779, 782, 789, 794, 798, 820, 854, 880, 886, 887, 889], "old": 77, "new": [77, 89, 396], "would": [77, 149, 150, 151, 272, 394, 397, 398, 718, 763, 789], "reorder": 77, "y": [77, 83, 84, 91, 148, 151, 154, 160, 166, 172, 198, 211, 212, 222, 223, 234, 240, 245, 246, 257, 394, 397, 398, 402, 403, 404, 412, 420, 428, 438, 446, 487, 488, 490, 496, 498, 504, 506, 513, 515, 523, 525, 531, 533, 543, 545, 578, 580, 632, 634, 667, 669, 710, 714, 718, 763, 774, 785, 789], "x": [77, 91, 148, 150, 151, 154, 160, 166, 172, 178, 182, 194, 197, 198, 207, 210, 211, 212, 222, 223, 234, 240, 245, 246, 257, 394, 396, 397, 398, 402, 404, 412, 420, 428, 438, 446, 454, 487, 488, 496, 504, 513, 523, 531, 543, 545, 578, 580, 632, 634, 667, 669, 710, 714, 716, 718, 720, 724, 727, 730, 735, 739, 743, 751, 752, 755, 756, 761, 762, 763, 774, 785, 788, 789], "z": [77, 91, 151, 154, 160, 166, 172, 180, 194, 197, 198, 207, 210, 211, 212, 222, 223, 234, 240, 245, 246, 257, 333, 351, 357, 361, 394, 487, 718, 724, 727, 730, 752, 753, 756, 762, 763, 774, 867, 868], "w": [77, 192, 195, 198, 204, 222, 223, 233, 240, 287, 333, 361, 394, 402, 552, 588, 641, 676, 718, 724, 727, 730, 749, 757, 774, 813, 868], "unreleas": 77, "famamacbethresult": [77, 496], "avg_rsquar": 77, "avg_adj_rsquar": 77, "initi": [77, 151, 224, 396, 397, 710, 714, 715, 718, 777], "featur": [77, 79, 89, 151, 714], "few": [77, 403], "issu": [77, 114, 281, 282, 334, 335, 371, 397], "relat": [77, 149, 150, 153, 394, 402, 479], "patsi": 77, "constraint": [77, 132, 304, 356, 391, 398, 574, 614, 663, 700, 715, 716, 717, 720, 724, 727, 730, 735, 739, 743, 764, 773, 775, 783, 784, 785, 787, 788, 790, 799], "translat": [77, 785], "string": [77, 82, 85, 86, 87, 88, 132, 153, 182, 304, 356, 391, 401, 454, 574, 614, 663, 700, 714, 715, 763, 768, 774, 779, 789, 794], "list": [77, 96, 132, 134, 144, 149, 150, 151, 183, 190, 213, 215, 226, 237, 247, 249, 258, 260, 272, 304, 333, 356, 361, 391, 397, 461, 474, 478, 574, 591, 614, 616, 663, 700, 702, 710, 720, 724, 727, 730, 735, 739, 743, 751, 755, 756, 761, 771, 781, 797, 809, 844, 884, 885, 890], "gh439": 77, "gh440": 77, "escap": 77, "gh435": 77, "creat": [77, 83, 84, 96, 149, 214, 225, 236, 248, 259, 397, 490, 498, 506, 515, 525, 533, 560, 598, 649, 684, 882], "miss": [77, 90, 150, 217, 228, 239, 251, 262, 293, 344, 380, 396, 466, 492, 494, 500, 502, 508, 510, 517, 520, 527, 529, 535, 537, 560, 598, 649, 684, 710, 712, 716, 820, 854], "gh438": 77, "document": [77, 89, 90, 96, 151, 213, 247, 258, 397, 565, 566, 567, 603, 605, 606, 654, 655, 656, 689, 690, 691], "gh434": 77, "iv2sl": [77, 90, 91, 132, 150, 151, 153, 222, 233, 245, 256, 304, 356, 391, 712, 716], "predict": [77, 150, 543, 544, 545, 578, 579, 580, 632, 633, 634, 667, 668, 669, 716], "produc": [77, 91, 144, 149, 150, 151, 182, 224, 245, 249, 260, 359, 396, 397, 402, 504, 513, 523, 531, 714, 715, 716, 718], "nan": [77, 396, 550, 585, 639, 674, 873], "exog": [77, 91, 148, 149, 150, 151, 153, 194, 197, 207, 210, 211, 215, 219, 222, 226, 230, 233, 237, 242, 245, 249, 253, 256, 260, 264, 267, 272, 293, 323, 344, 351, 361, 380, 396, 397, 401, 487, 493, 495, 501, 503, 509, 511, 519, 522, 528, 530, 536, 551, 560, 574, 587, 598, 614, 640, 649, 663, 675, 684, 700, 714, 715, 716, 717, 752, 762, 763, 770, 772, 774, 782, 789, 796, 798, 820, 854], "endog": [77, 150, 151, 153, 194, 197, 207, 210, 211, 215, 219, 222, 226, 230, 233, 237, 242, 245, 249, 253, 256, 260, 264, 267, 287, 293, 322, 323, 324, 344, 357, 361, 380, 716, 752, 762, 763, 770, 772, 774, 782, 798, 813, 820, 854], "had": 77, "indexwarn": 77, "shown": [77, 714], "stacklevel": 77, "warn": [77, 716], "accuraci": [77, 718, 763, 789], "locat": [77, 90, 149, 151, 217, 218, 228, 229, 239, 241, 251, 252, 262, 263, 394, 466, 492, 500, 508, 517, 527, 535, 714], "clarifi": 77, "f": [77, 114, 148, 149, 150, 151, 153, 268, 281, 312, 324, 334, 371, 394, 396, 397, 398, 401, 403, 551, 586, 587, 619, 640, 675, 713, 714, 715, 716, 718, 875, 889], "messag": 77, "parser": 77, "accovari": 77, "incorrectli": 77, "overwritten": 77, "panelresult": [77, 488, 496, 504, 523, 616, 702], "corr_squared_between": 77, "corr_squared_overal": 77, "corr_squared_within": 77, "breusch_pagan": 77, "likelihood_ratio": 77, "diagon": [77, 718, 720, 735, 739, 743, 753, 763, 774, 789, 814, 848], "rank_check": 77, "rank": [77, 394, 490, 498, 506, 511, 515, 522, 525, 533, 540, 541], "check": [77, 149, 182, 212, 223, 234, 246, 257, 490, 498, 506, 511, 515, 522, 525, 533, 766, 777, 792], "skip": [77, 490, 498, 506, 511, 515, 522, 525, 533], "defici": 77, "caution": [77, 150, 714, 718], "linalg": [77, 91, 96, 148], "lstsq": 77, "better": [77, 149, 150], "svd": 77, "matrix_rank": 77, "lapack_driv": 77, "qr": 77, "calcul": [77, 408, 416, 424, 434, 442, 450, 717], "minor": 77, "releas": [77, 78, 79, 89, 90, 400], "build": [77, 149], "perform": [77, 153, 212, 223, 234, 246, 257, 394, 401, 490, 495, 498, 506, 511, 515, 522, 525, 533, 712], "oper": 77, "pyhdf": [77, 96], "absorbingl": [77, 90, 102, 148], "categor": [77, 91, 134, 139, 140, 143, 148, 182, 397, 398, 454, 488, 504, 511, 513, 523, 531, 574, 614, 663, 700], "unweight": [77, 148], "gh157": 77, "system": [77, 90, 713, 714, 715], "clusteredcovari": [77, 96, 153, 198, 213, 247, 258, 766, 792], "gh241": 77, "kernel_optimal_bandwidth": 77, "incorrect": 77, "tune": 77, "gh242": 77, "variou": [77, 151, 397], "gh239": 77, "gh240": 77, "mypi": 77, "gh232": 77, "gh234": 77, "gh235": 77, "gh238": 77, "public": [77, 256], "face": [77, 150], "gh228": 77, "gh229": 77, "all_param": [77, 428], "nparam": [77, 431, 539], "gh230": 77, "blacken": 77, "mcelroi": [77, 714, 715, 716, 828, 862], "berndt": [77, 714, 715, 716, 828, 862], "gh215": 77, "nep": 77, "gh222": 77, "instal": [77, 96], "gh217": 77, "inherit": [77, 149, 394, 552, 588, 641, 676], "gh211": 77, "handl": [77, 402, 454, 513], "veri": [77, 149, 150, 403], "dimension": [77, 90, 91, 148, 395, 454, 718, 869], "dummi": [77, 91, 139, 147, 148, 150, 182, 394, 401, 402, 403, 454, 458, 513], "been": [77, 79, 92, 93, 149, 268, 333, 361, 396, 401, 766, 792], "000": [77, 396, 398, 403, 714], "categori": [77, 139, 147, 150, 182, 394, 396, 454, 511, 515, 710, 763], "per": [77, 150, 397, 549, 571, 584, 596, 610, 638, 660, 673, 696], "id": [77, 149, 150, 397, 403, 404, 412, 420, 438, 446, 462, 475, 488, 504, 703, 714, 717, 720], "drop_absorb": [77, 91, 511, 515], "panelol": [77, 90, 396, 397, 399, 400, 401, 574, 614, 663, 700, 712], "automat": [77, 150, 151, 172, 399, 496, 513, 713, 714], "gh206": 77, "cython": 77, "node": 77, "select": [77, 153, 172, 293, 344, 380, 560, 598, 649, 684, 713, 716, 757, 766, 792, 820, 854], "singleton": [77, 511, 515], "precondit": 77, "use_lsmr": [77, 513], "run": [77, 79, 149, 150, 240, 397], "singelton": 77, "never": [77, 394, 398], "core": [77, 397, 867, 868], "graph": 77, "slope": [77, 91], "exclud": [77, 114, 281, 334, 371, 394, 397, 551, 552, 587, 588, 640, 641, 675, 676, 703, 714, 718], "gh191": 77, "lsmr": [77, 91, 96, 148], "through": [77, 117, 149, 151, 152, 233, 285, 338, 374, 402, 554, 590, 643, 678, 714], "spars": [77, 91, 96, 134, 139, 143, 148, 513], "extend": [77, 150, 394, 718], "exogen": [77, 83, 84, 91, 93, 150, 151, 153, 154, 160, 166, 172, 192, 195, 204, 211, 219, 222, 224, 230, 233, 242, 245, 253, 256, 264, 268, 272, 287, 293, 323, 333, 344, 357, 358, 359, 361, 380, 394, 396, 404, 412, 420, 428, 438, 446, 487, 490, 493, 495, 498, 501, 503, 506, 509, 511, 515, 519, 522, 525, 528, 530, 533, 536, 545, 560, 567, 580, 598, 606, 634, 649, 656, 669, 684, 691, 714, 716, 717, 718, 720, 735, 739, 743, 753, 763, 770, 772, 774, 777, 782, 789, 796, 798, 820, 854], "being": [77, 150, 272, 394, 454], "correctli": [77, 149, 394], "label": [77, 183, 190, 714, 716, 763, 768, 772, 774, 779, 782, 789, 794, 798, 809, 820, 844, 854], "gh185": 77, "wald_test": 77, "renam": 77, "test_linear_constraint": 77, "memori": [77, 458, 513, 717], "avoid": [77, 91, 233, 458, 716, 718], "entity_effect": [77, 396, 397, 401, 403, 511, 513, 574, 614, 663, 700], "time_effect": [77, 397, 511], "By": [77, 149, 153, 397, 398, 714, 763, 774, 789], "algorithm": [77, 513], "whenev": [77, 245, 563, 601, 652, 687], "gib": [77, 513], "gh182": 77, "comparison": [77, 149, 150, 151, 309, 393, 397, 400, 616, 702, 714], "compar": [77, 150, 309, 616, 714, 716], "pvalu": 77, "instead": [77, 101, 150, 153, 221, 232, 244, 255, 266, 397, 717], "gh178": 77, "did": 77, "famamacbeth": [77, 90, 400, 712], "gh176": 77, "fail": 77, "gh173": 77, "extern": 77, "manag": 77, "custom": [77, 153], "less": [77, 149, 153, 397], "gh172": 77, "gallant": [77, 172, 178, 204, 404, 420, 714, 730, 743, 757], "gh170": 77, "wooldridg": [77, 149, 150, 152, 357, 358, 359, 394, 397, 400, 713, 714, 715, 716], "invalid": [77, 870], "invalidteststatist": [77, 287, 322, 323, 324, 351, 357, 801, 814, 836, 848, 875], "add": [77, 82, 83, 84, 91, 150, 309, 393, 397, 616, 702, 712, 764, 775, 790], "ivgmmcu": [77, 90, 149, 153, 211, 222, 245, 712], "intern": [77, 256, 479, 714], "retain": 77, "index": [77, 90, 150, 190, 396, 397, 398, 401, 402, 454, 461, 474, 481, 482, 483, 490, 498, 506, 515, 525, 533, 714, 718, 763, 774, 789], "origin": [77, 149, 150, 219, 230, 242, 253, 264, 272, 293, 344, 380, 399, 493, 494, 501, 502, 509, 510, 519, 520, 528, 529, 536, 537, 560, 563, 598, 601, 649, 652, 684, 687, 772, 782, 798, 820, 854], "conceiv": 77, "spell": 77, "docstr": [77, 89, 96, 213, 247, 258], "prevent": 77, "charact": 77, "kappa": [77, 149, 153, 154, 160, 166, 172, 211, 212, 245, 246, 249, 256, 257, 260, 322, 324, 394], "clean": 77, "across": [77, 153, 224, 396, 397, 540, 541, 714, 717, 718, 749, 757], "out": [77, 149, 293, 344, 380, 560, 598, 649, 684, 716, 820, 854], "retriev": [77, 96], "previous": [77, 714], "ignor": [77, 104, 153, 397, 399, 401, 544, 566, 579, 605, 633, 655, 668, 690], "3sl": [77, 90, 712, 717, 763, 768, 779, 789], "built": 79, "0rc1": 79, "later": [79, 150], "fuur": 79, "environ": 79, "against": [79, 114, 149, 281, 334, 371, 394, 397], "etext": 82, "text": [82, 87, 88, 152, 400], "line": [82, 714], "titl": 83, "gleft": 83, "gright": 83, "yname": [83, 84], "xname": [83, 84], "doubl": [83, 150, 454], "merg": [83, 87], "horizont": 83, "taken": [83, 84, 394, 513], "tupl": [83, 137, 144, 191, 234, 405, 413, 421, 429, 439, 447, 473, 484, 714, 763, 774, 789, 820, 854, 880, 887, 889], "pair": [83, 715, 887], "endogen": [83, 84, 91, 150, 153, 154, 160, 166, 172, 198, 211, 215, 219, 222, 226, 230, 233, 237, 242, 245, 249, 253, 256, 260, 264, 268, 269, 272, 293, 323, 333, 344, 351, 357, 358, 359, 361, 380, 394, 714, 715, 716, 717, 718, 763, 770, 772, 774, 782, 789, 798, 820, 854], "var_xx": [83, 84], "match": [83, 149, 399, 402, 403, 494, 502, 510, 520, 529, 537, 560, 598, 649, 684, 714, 772, 782, 798, 820, 854], "05": [84, 148, 150, 716], "use_t": 84, "signific": [84, 150, 397, 551, 552, 587, 588, 640, 641, 675, 676], "level": [84, 105, 273, 325, 363, 396, 454, 479, 490, 498, 506, 515, 525, 533, 542, 577, 631, 666, 714, 802, 837], "confid": [84, 105, 273, 325, 363, 542, 577, 631, 666, 802, 837], "interv": [84, 105, 273, 325, 363, 542, 571, 577, 610, 631, 660, 666, 696, 802, 837], "student": [84, 394], "attach": 84, "concaten": [85, 86], "comma": [85, 132, 304, 356, 391, 574, 614, 663, 700], "delimit": 85, "It": [87, 117, 132, 149, 150, 285, 304, 338, 356, 374, 391, 394, 396, 397, 398, 401, 402, 403, 554, 565, 566, 567, 574, 590, 603, 605, 606, 614, 643, 654, 655, 656, 663, 678, 689, 690, 691, 700, 714, 715, 716, 718, 768, 779, 794, 801, 814, 824, 836, 848, 858], "recommend": [87, 714, 715], "as_latex_tabular": 87, "individu": [87, 149, 150, 401, 402, 540, 541, 714, 809, 810, 844, 845], "txt": 88, "welcom": 89, "area": [89, 149, 151], "extens": [89, 397, 398, 716, 718], "program": 89, "typo": [89, 714], "experienc": 89, "programm": 89, "clear": 89, "opportun": [89, 153], "refactor": 89, "simplif": 89, "task": 89, "Of": 89, "cours": 89, "entir": [89, 763, 774, 789], "cover": [89, 397], "alwai": [89, 114, 150, 187, 195, 281, 334, 371, 394, 396, 399, 404, 412, 420, 438, 446, 718, 753, 871, 873], "github": 89, "fork": 89, "repo": 89, "branch": 89, "your": 89, "submit": 89, "pull": 89, "request": [89, 870], "stabl": 90, "latest": 90, "doc": 90, "develop": [90, 401], "devel": 90, "randomeffect": [90, 397, 398, 399, 401, 712], "firstdifferenceol": [90, 397, 398, 399, 401, 712], "betweenol": [90, 397, 398, 399, 401, 712], "pooledol": [90, 397, 398, 401, 511, 712], "equat": [90, 513, 713, 715, 717, 718, 724, 727, 730, 749, 751, 755, 756, 757, 761, 763, 768, 769, 770, 772, 774, 779, 780, 782, 789, 794, 795, 796, 798, 809, 820, 824, 828, 844, 854, 858, 862], "limit": [90, 149, 153, 245, 712, 766, 792], "ml": [90, 245], "ivliml": [90, 91, 149, 153, 211, 222, 233, 256, 260, 712], "ivgmm": [90, 149, 153, 211, 233, 235, 245, 712], "iv3sl": [90, 712, 716, 717, 816, 850], "ivsystemgmm": [90, 712, 716], "plan": 90, "contribut": 90, "log": [90, 132, 149, 150, 151, 153, 215, 226, 237, 249, 260, 304, 356, 391, 396, 397, 398, 401, 403, 555, 592, 644, 679, 714, 718, 814, 848], "interact": [91, 96, 134], "nexog": [91, 211, 219, 222, 230, 233, 242, 245, 253, 256, 264, 293, 344, 380, 560, 598, 649, 684, 710, 770], "cat": [91, 134, 139, 143, 148], "cont": [91, 134, 139, 143], "cartesian": [91, 139, 147], "product": [91, 139, 143, 147, 153, 224, 777], "capabl": 91, "million": 91, "y_i": [91, 148, 153, 233, 240, 358, 714, 715], "x_i": [91, 148, 233, 240, 438, 714], "z_i": [91, 148, 154, 160, 172, 180, 181, 192, 195, 204, 240, 287], "epsilon_i": [91, 148, 153, 192, 195, 204, 233, 358, 420, 714], "fewer": 91, "known": [91, 150, 240, 718], "invert": 91, "inner": [91, 151, 396, 716], "frish": 91, "waugh": 91, "lovel": 91, "orthogon": [91, 148, 268, 357, 394, 402], "perfectli": [91, 397], "linearli": 91, "particular": [91, 150, 153, 198, 397, 401, 716, 772, 782, 798, 820, 854], "restrict": [91, 132, 287, 304, 322, 323, 324, 351, 356, 391, 394, 402, 403, 551, 552, 574, 587, 588, 614, 640, 641, 663, 675, 676, 700, 717, 718, 784, 785, 813], "captur": 91, "redund": 91, "compon": [91, 134, 152, 357, 358, 359, 394, 397, 401, 402, 716, 718], "np": [91, 132, 139, 143, 148, 150, 151, 153, 215, 226, 237, 249, 260, 304, 356, 391, 396, 403, 574, 614, 663, 700, 714, 715, 716, 768, 779, 784, 786, 794, 873], "pd": [91, 139, 143, 148, 149, 150, 153, 396, 397, 574, 614, 663, 700, 714, 715, 716, 768, 779, 784, 786, 787, 794], "dep": [91, 148, 149, 150, 151, 153, 267, 396, 397, 398, 401, 403, 714, 715, 716], "standard_norm": [91, 139, 143, 148, 716], "20000": 91, "randint": [91, 139, 143, 148, 714], "rang": [91, 139, 143, 150, 714], "concat": [91, 139, 143, 149, 150, 714], "axi": [91, 139, 143, 149, 150, 186, 494, 502, 510, 520, 529, 537, 714], "iaction": 91, "encod": 91, "rais": [92, 93, 96, 153, 397, 454, 707, 886, 887], "runtimeerror": [92, 93, 96], "call": [92, 93, 149, 397, 403, 714], "auto": [96, 766, 792], "absorb_opt": [96, 148], "use_cach": [96, 148], "lsmr_option": 96, "absorbinglsresult": 96, "unadjust": [96, 149, 150, 153, 195, 198, 213, 222, 224, 233, 247, 258, 268, 394, 396, 397, 398, 401, 403, 488, 496, 504, 513, 523, 531, 714, 715, 716, 717, 753, 766, 774, 777, 779, 792], "homoskedast": [96, 149, 150, 153, 166, 195, 198, 213, 222, 224, 233, 247, 258, 394, 397, 446, 487, 488, 490, 495, 496, 498, 503, 504, 506, 511, 513, 515, 522, 523, 525, 530, 531, 533, 551, 586, 587, 640, 675, 714, 715, 716, 724, 727, 730, 739, 753, 766, 777, 779, 792, 814, 848], "classic": [96, 149, 150, 213, 247, 258, 397, 401, 551, 587, 640, 675, 766, 777, 792], "hdfe": [96, 148], "fallback": 96, "forc": [96, 150, 153, 397, 714, 766, 792], "binari": [96, 139], "purg": [96, 545, 567, 580, 606, 634, 656, 669, 691], "store": [96, 716, 717], "dramat": 96, "speed": 96, "ass": 96, "deprec": [96, 400, 403], "accord": [96, 213, 247, 258, 456, 458, 464, 467], "command": [96, 149, 213, 247, 258, 396, 398], "configur": [96, 153, 193, 196, 206, 209, 213, 224, 235, 247, 258, 305, 488, 496, 504, 513, 523, 531, 722, 726, 729, 733, 737, 741, 746, 750, 754, 759, 804, 832, 839], "hash": 96, "content": 96, "64": [96, 149, 397, 716], "bit": 96, "xxhash": 96, "256": 96, "reus": 96, "held": 96, "homoskedasticcovari": [96, 153, 198, 213, 247, 258, 766, 792], "param": [99, 101, 149, 154, 160, 166, 172, 198, 219, 220, 221, 230, 231, 232, 240, 242, 243, 244, 253, 254, 255, 264, 265, 266, 401, 404, 412, 420, 428, 438, 446, 493, 501, 509, 519, 528, 536, 714, 716, 772, 782, 798], "nvar": [99, 101, 132, 154, 160, 166, 172, 194, 197, 198, 207, 210, 212, 219, 220, 221, 223, 230, 231, 232, 234, 240, 242, 243, 244, 246, 253, 254, 255, 257, 264, 265, 266, 304, 356, 391, 454, 493, 501, 509, 519, 528, 536, 547, 548, 574, 582, 583, 614, 636, 637, 663, 671, 672, 700, 752, 772, 782, 796, 798], "raw": [101, 221, 232, 244, 255, 266], "resid": [101, 117, 149, 150, 221, 232, 244, 255, 266, 285, 338, 374, 403, 554, 590, 643, 678], "95": [105, 273, 325, 363, 542, 577, 631, 666, 714, 716, 802, 837], "despit": [114, 150, 281, 334, 371], "divid": [114, 149, 281, 334, 371, 552, 588, 641, 676], "equival": [116, 136, 216, 227, 238, 250, 261, 284, 337, 373, 394, 397, 398, 401, 718], "dimens": [117, 188, 285, 338, 374, 396, 397, 454, 468, 554, 590, 643, 678], "shape": [117, 139, 143, 150, 182, 285, 338, 374, 396, 554, 563, 590, 601, 643, 652, 678, 687, 714, 720], "natur": [117, 149, 150, 285, 338, 374, 554, 590, 643, 678, 716], "inclus": [117, 285, 338, 374, 397, 554, 590, 643, 678], "varianc": [127, 150, 159, 165, 171, 177, 203, 240, 287, 299, 350, 351, 386, 394, 397, 402, 411, 419, 427, 437, 445, 453, 487, 490, 494, 495, 498, 502, 503, 506, 510, 511, 515, 520, 522, 525, 529, 530, 531, 533, 537, 568, 607, 613, 657, 692, 699, 710, 714, 715, 813, 814, 828, 848, 862], "appli": [132, 149, 150, 151, 245, 304, 356, 391, 397, 402, 412, 531, 574, 614, 663, 700, 714, 718, 720, 735, 739, 743], "simplest": [132, 153, 304, 356, 391, 394, 574, 614, 663, 700, 768, 779, 794], "x1": [132, 151, 304, 356, 391, 490, 498, 506, 515, 525, 533, 574, 614, 663, 700, 716], "x2": [132, 151, 304, 356, 391, 574, 614, 663, 700, 716], "x3": [132, 151, 304, 356, 391, 574, 614, 663, 700], "without": [132, 212, 246, 257, 304, 356, 391, 403, 574, 614, 663, 700, 716], "valid": [132, 150, 151, 153, 198, 215, 226, 237, 249, 260, 304, 356, 391, 394, 490, 498, 506, 511, 515, 522, 525, 533, 574, 614, 663, 700, 716, 766, 777, 779, 792, 870], "examin": [132, 149, 150, 304, 322, 324, 356, 357, 358, 359, 391, 394, 574, 614, 663, 700, 718], "h_0": [132, 304, 356, 391, 574, 614, 663, 700], "theta": [132, 304, 356, 391, 397, 402, 574, 614, 663, 700], "2_q": [132, 287, 304, 356, 391, 574, 614, 663, 700, 813], "wage": [132, 153, 215, 226, 237, 249, 260, 304, 356, 391, 397, 401, 714, 715, 716], "exper": [132, 150, 153, 215, 226, 237, 249, 260, 304, 356, 391, 397, 714, 715, 716, 717], "brthord": [132, 150, 215, 226, 237, 249, 260, 304, 356, 391], "educ": [132, 149, 151, 153, 215, 226, 237, 249, 260, 304, 356, 391, 397, 713, 714, 715, 716, 801, 814, 836, 848], "sib": [132, 150, 153, 215, 226, 237, 249, 260, 304, 356, 391], "wald_r": [132, 304, 356, 391, 574, 614, 663, 700], "csc_matrix": [138, 147], "best": [139, 396, 768, 779, 794], "convert": [139, 182, 396, 454, 479], "ncat": [139, 147, 710], "ncont": [139, 143, 147], "randomst": [139, 143, 148, 710, 714], "100000": [139, 143, 403], "cats_df": 139, "top": 139, "freq": 139, "20251": 139, "20195": 139, "20331": 139, "20158": 139, "cart": [139, 143], "1875": 139, "static": [143, 212, 215, 223, 226, 237, 246, 249, 257, 260], "frame": [143, 768, 779, 794], "conveni": 143, "720": 143, "invari": 144, "permut": 144, "dummy_interact": 147, "prod_": 147, "distinct": [147, 412, 714, 768, 779, 794], "grow": 148, "notebook": [148, 150], "how": [148, 149, 150, 394, 397, 400, 714, 716, 718], "simul": [148, 703, 710, 716], "mirror": 148, "state": [148, 150, 714], "worker": [148, 714], "1_000_000": 148, "state_id": 148, "state_effect": 148, "max": [148, 149, 150, 396, 397, 398, 401, 402, 403], "firm_id": 148, "firm_effect": 148, "ep": [148, 194, 197, 207, 210, 720, 724, 727, 730, 735, 739, 743, 751, 752, 755, 756, 761, 762], "column_stack": [148, 716], "ones": [148, 150, 714, 718], "intercept": [148, 150, 151, 398, 399, 402, 403, 714], "trick": 148, "meaning": [148, 403, 714], "done": [148, 715], "l": [148, 149, 150, 713], "8377": 148, "adj": [148, 149, 150, 151, 153, 403, 714, 716], "7975": 148, "1000000": 148, "962e": 148, "06": [148, 150, 396, 766, 777, 792], "00": [148, 397, 401, 716], "6664": 148, "987e": 148, "9477": 148, "1057": [148, 397], "9460": 148, "9495": 148, "9994": [148, 714], "990": 148, "89": [148, 150, 396, 716], "9974": [148, 714], "0008": [148, 150, 397, 714, 715], "989": [148, 714], "09": [148, 716], "9989": 148, "0028": [148, 150, 397, 715, 716], "span": [148, 396, 718], "satisfi": [148, 219, 230, 242, 253, 264, 394, 763, 789], "datetim": 148, "dt": 148, "total_second": 148, "418199": 148, "697512": 148, "toler": [148, 766, 777, 792], "b": [148, 394, 402, 713, 714], "198676": 148, "damp": 148, "00000000000000e": 148, "atol": 148, "00e": 148, "08": [148, 398, 403, 716], "conlim": 148, "btol": 148, "maxit": 148, "itn": 148, "norm": 148, "cond": [148, 149, 151], "00000e": 148, "417e": 148, "126e": 148, "0e": 148, "6e": 148, "04": [148, 396, 715, 716], "83446e": 148, "02": [148, 150, 716], "677e": 148, "377e": 148, "9e": [148, 396], "01": 148, "1e": [148, 766, 777, 792], "2e": 148, "09819e": 148, "563e": 148, "668e": 148, "5e": [148, 396], "7e": [148, 396], "17247e": 148, "553e": 148, "446e": 148, "4e": 148, "3e": [148, 396], "30067e": 148, "551e": 148, "539e": 148, "30071e": 148, "662e": 148, "29984e": 148, "542e": 148, "999e": 148, "07": [148, 150, 396, 403], "29985e": 148, "882e": 148, "29990e": 148, "8e": [148, 396], "86056e": 148, "003e": 148, "finish": 148, "good": [148, 149, 151, 394, 718], "enough": 148, "istop": 148, "normr": 148, "norma": 148, "normar": 148, "conda": 148, "normx": 148, "001e": 148, "470e": 148, "08847e": 148, "953e": 148, "167e": 148, "15243e": 148, "484e": 148, "41447e": 148, "412e": 148, "88004e": 148, "266e": 148, "87319e": 148, "921e": 148, "87000e": 148, "868e": 148, "87108e": 148, "866e": 148, "87255e": 148, "62098e": 148, "857e": 148, "04265e": 148, "789e": 148, "99381e": 148, "309e": 148, "000e": 148, "472e": 148, "29233e": 148, "946e": 148, "623e": 148, "45416e": 148, "328e": 148, "34706e": 148, "107e": 148, "41880e": 148, "140e": 148, "42126e": 148, "176e": 148, "41939e": 148, "077e": 148, "41643e": 148, "40968e": 148, "02689e": 148, "060e": 148, "66462e": 148, "851e": 148, "22889e": 148, "454e": 148, "follow": [149, 152, 714, 889], "those": [149, 151, 153, 398, 714, 715], "chapter": [149, 150, 397, 714], "microeconometr": [149, 713], "stata": [149, 152, 394, 399, 402, 713, 718], "cameron": [149, 152, 713], "trivedi": [149, 152, 713], "main": [149, 399, 412, 714, 716, 717], "likelihood": [149, 153, 396, 397, 398, 401, 403, 555, 592, 644, 679, 718, 814, 848], "medic": [149, 151], "expenditur": [149, 151], "survei": [149, 151], "mep": 149, "pocket": 149, "drug": [149, 151], "characterist": [149, 151, 397], "insur": [149, 151, 714], "employ": [149, 150, 714], "union": [149, 150, 151, 396, 397, 401, 403, 574, 614, 663, 700, 714, 715], "like": [149, 151, 394, 397, 400, 401, 479, 710, 714, 715, 718, 763, 768, 772, 774, 779, 782, 789, 794, 798, 820, 854, 880, 884, 885, 890], "candid": 149, "percentag": [149, 710], "incom": [149, 150, 151], "social": [149, 151], "secur": [149, 151], "dropna": [149, 150, 151, 716], "ag": [149, 150, 151, 714, 716], "age2": [149, 151], "black": [149, 150, 151, 397], "blhisp": [149, 151], "hispan": [149, 151, 397], "drugexp": [149, 151], "presc": [149, 151], "expens": [149, 151], "educyr": [149, 151], "fair": [149, 151], "femal": [149, 151], "firmsz": [149, 151], "fph": [149, 151], "poor": [149, 151], "hi_empunion": [149, 151], "thro": [149, 151], "emp": [149, 151, 714], "hisp": [149, 151, 397], "hiapan": [149, 151], "ldrugexp": [149, 151], "linc": [149, 151], "lowincom": [149, 151], "marri": [149, 151, 397, 401, 574, 614, 663, 700, 714, 715], "midincom": [149, 151], "middl": [149, 151], "msa": [149, 151], "metropolitan": [149, 151], "multlc": [149, 151], "poverti": [149, 151], "priolist": [149, 151], "prioriti": [149, 151], "privat": [149, 151, 256], "ssiratio": [149, 151], "ssi": [149, 151], "ratio": [149, 151, 351, 394, 718, 814, 828, 848, 862], "totchr": [149, 151], "chronic": [149, 151], "vegood": [149, 151], "vgh": [149, 151], "vg": [149, 151], "next": [149, 150, 397, 714], "control": [149, 150, 153, 397, 488, 504, 513, 523, 531], "summar": 149, "group": [149, 150, 154, 394, 397, 402, 412, 456, 458, 460, 462, 464, 467, 596, 714, 720, 869], "percentil": 149, "10089": [149, 151], "mean": [149, 150, 151, 192, 195, 204, 208, 394, 398, 402, 513, 714, 718, 749, 753, 757, 867, 868], "481361": 149, "382198": 149, "860938": 149, "577064": 149, "75": [149, 150, 403], "051740": 149, "362052": 149, "485949": 149, "292858": 149, "494050": 149, "682109": 149, "min": [149, 150, 394, 396, 397, 398, 401, 403], "65": [149, 398], "678342": 149, "74": [149, 403, 716], "180172": 149, "91": [149, 396], "743275": 149, "163544": 149, "913143": 149, "369880": 149, "907755": 149, "743160": 149, "744476": 149, "worth": [149, 150, 399, 714], "536544": 149, "187432": 149, "062048": 149, "140529": 149, "367818": 149, "390277": 149, "241254": 149, "170389": 149, "504522": 149, "250620": 149, "And": 149, "relev": [149, 282, 335, 396, 458, 716], "especi": 149, "lead": [149, 151, 511, 718, 763, 789], "weak": [149, 150], "exclus": 149, "212431": 149, "116419": 149, "119849": 149, "037352": 149, "253946": 149, "190433": 149, "044578": 149, "062465": 149, "008232": 149, "187275": 149, "add_const": [149, 150, 153, 397, 401, 574, 614, 663, 700, 714, 717], "process": [149, 219, 230, 242, 253, 264, 293, 344, 380, 493, 501, 509, 519, 528, 536, 772, 782, 798, 820, 854], "api": [149, 150, 153, 256, 397, 401, 574, 614, 663, 700, 714, 717], "const": [149, 150, 153, 397, 401, 710, 714, 717], "nest": [149, 153], "ivolsmod": 149, "res_ol": [149, 150, 714], "1770": [149, 150, 151], "1765": [149, 151, 714], "2262": [149, 151], "0739": [149, 151], "0260": [149, 150, 151, 714], "8441": [149, 151], "0230": [149, 151, 716], "1248": [149, 151], "8611": [149, 151], "1570": [149, 150, 151], "320": [149, 151], "5533": [149, 151], "1689": [149, 151], "4404": [149, 151], "049": [149, 151], "4220": [149, 151], "4587": [149, 151], "0578": [149, 151], "0254": [149, 151], "2797": [149, 151], "0226": [149, 150, 151, 714], "1075": [149, 151], "0019": [149, 151, 714], "8228": [149, 151], "0683": [149, 151], "0003": [149, 150, 151, 398, 714, 715, 716], "7646": [149, 151], "4445": [149, 151], "0164": [149, 151], "0373": [149, 151], "1513": [149, 151], "0341": [149, 151, 153, 714], "4353": [149, 150, 151], "2182": [149, 151], "0844": [149, 151], "strong": [149, 150], "ivmod": 149, "res_2sl": [149, 150], "0640": [149, 151], "0634": [149, 151, 714], "2000": [149, 151], "7872": [149, 151, 714], "2688": [149, 151], "246": [149, 151], "2602": [149, 151], "3141": [149, 151], "4503": [149, 151], "157": [149, 150, 151, 396, 716], "4303": [149, 151], "4703": [149, 151, 714], "0204": [149, 151], "0326": [149, 151], "6257": [149, 151], "5315": [149, 151], "0843": [149, 151], "0435": [149, 150, 151], "0132": [149, 150, 151, 714], "4092": [149, 151], "0191": [149, 151], "0870": [149, 151], "8436": [149, 151], "0426": [149, 151, 397], "1314": [149, 151, 397], "2174": [149, 151, 714], "0395": [149, 151], "5052": [149, 151], "2948": [149, 151], "1400": [149, 151], "8976": [149, 151, 714], "2211": [149, 151], "0592": [149, 150, 151], "3310": [149, 151], "4642": [149, 151, 714], "res_2sls_robust": 149, "account": [149, 397, 412, 488, 513, 543, 544, 545, 565, 566, 567, 578, 579, 580, 603, 605, 606, 632, 633, 634, 654, 655, 656, 667, 668, 669, 689, 690, 691, 714], "res_2sls_std": 149, "iter_limit": [149, 153, 224, 716, 766, 777, 792], "res_gmm": 149, "alter": [149, 153], "weight_typ": [149, 153, 222, 226, 233, 237, 716, 774, 779], "res_gmm_clust": 149, "simultan": [149, 240, 245, 511, 713, 714, 715, 717], "sens": [149, 153, 394, 403, 714, 763, 789], "fragil": 149, "res_gmm_cu": 149, "045365": 149, "460": 149, "ordereddict": [149, 397, 714, 715, 717], "hold": [149, 150, 397, 703], "advantag": [149, 714], "preserv": [149, 396, 714, 715, 717], "present": [149, 152, 400, 403, 707, 714, 824, 858, 889], "With": [149, 454], "fairli": [149, 397, 714], "vari": [149, 397, 714], "slightli": [149, 150], "conclus": [149, 150], "reach": [149, 150], "sensit": [149, 150], "choic": [149, 153, 198, 394, 400, 403, 513, 552, 588, 641, 676, 716, 718], "parenthes": [149, 150, 151, 397], "collect": [149, 397, 714, 715, 717], "homo": 149, "hetero": 149, "est": [149, 150, 151, 397], "0414": 149, "0406": 149, "0292": [149, 397], "0388": 149, "0409": [149, 150], "0400": 149, "0286": 149, "0382": [149, 715], "1882": [149, 714], "1955": 149, "1952": 149, "1700": [149, 398], "1949": 149, "9899": 149, "9933": 149, "0359": [149, 714], "1501": 149, "8386": 149, "8530": 149, "8810": 149, "8752": 149, "8778": 149, "7277": 149, "8847": 149, "030": 149, "660": 149, "658": 149, "299": [149, 716], "657": 149, "4512": 149, "4510": 149, "4482": 149, "42": [149, 403], "942": 149, "769": 149, "738": 149, "33": [149, 150, 398, 714, 716], "701": 149, "0278": [149, 150, 397], "0282": 149, "0245": [149, 150], "0288": [149, 150, 396, 714], "8933": 149, "8653": 149, "8398": [149, 715, 716], "8928": 149, "0141": [149, 714], "0142": [149, 150], "0119": [149, 397], "0834": 149, "8753": 149, "8773": 149, "8969": 149, "0943": 149, "0945": 149, "0957": 149, "0950": 149, "4400": 149, "3079": 149, "3142": 149, "4934": 149, "3333": 149, "2237": [149, 150], "2231": 149, "2091": 149, "2236": 149, "7805": 149, "6514": 149, "6344": [149, 714], "1662": 149, "6421": 149, "durbin": [149, 394], "exploit": [149, 402], "fact": 149, "h0": [149, 150], "2819": 149, "0x7fc7c4f6bdf0": 149, "wu": [149, 361, 394], "hausman": [149, 361, 394], "variant": 149, "wu_hausman": 149, "3253": [149, 150], "10081": 149, "0x7fc7c4c8e3e0": 149, "replic": [149, 712], "step1": 149, "step2": 149, "tstat": [149, 309, 393, 401, 616, 702], "34541049972333": 149, "wooldridge_regress": [149, 150], "4542": [149, 714], "0x7fc7c47abb50": 149, "power": [149, 394], "lm": [149, 801, 836], "wooldridge_scor": 149, "24": [149, 150, 397, 714, 716], "9350": 149, "0x7fc7c47aa830": 149, "overidentifi": [149, 150, 287, 322, 323, 324, 351, 394, 813], "word": 149, "actual": [149, 150, 205, 272, 397, 399, 402], "evid": 149, "j_stat": 149, "0475": [149, 714], "3061": 149, "0x7fc7c4c8dc90": 149, "stori": 149, "res_gmm_al": 149, "5903": 149, "0089": 149, "0x7fc7c49dc130": 149, "probabl": [149, 397], "od": 149, "col": [149, 714, 768, 779], "1768": 149, "0644": 149, "9053": 149, "1763": [149, 397], "0651": [149, 150], "9064": 149, "2250": 149, "1734": 149, "950": 149, "8201": 149, "2145": 149, "7267": 149, "267": [149, 150, 714], "326": 149, "4196": 149, "4399": 149, "4548": 149, "4710": 149, "834": 149, "193": 149, "23": [149, 150, 153, 713, 714, 717], "163": [149, 397], "0613": 149, "0565": 149, "1842": 149, "6066": 149, "2596": [149, 403], "5312": 149, "0177": 149, "0335": [149, 150, 715], "7521": 149, "7086": 149, "3433": 149, "1223": [149, 150], "2473": [149, 714], "2280": 149, "2965": 149, "1876": 149, "1484": 149, "2479": 149, "3559": [149, 150], "5639": 149, "0727": 149, "2425": [149, 150], "1170": 149, "3459": 149, "9323": 149, "3254": [149, 714], "1760": [149, 150, 714], "0908": [149, 397], "assess": 149, "credibl": 149, "partial": [149, 150, 268, 394, 397], "first_stag": [149, 150], "0761": 149, "0179": [149, 397], "shea": [149, 150, 268, 394], "806": 149, "441e": 149, "distn": [149, 150], "0290": [149, 153], "705": 149, "0128": [149, 714], "4896": 149, "0734": 149, "6226": 149, "184": 149, "0484": 149, "3266": 149, "0627": 149, "1084": 149, "1916": 149, "1121": 149, "break": 149, "rule": [149, 150, 151, 404, 420, 428, 490, 498, 506, 515, 525, 533], "thumb": [149, 150, 404, 420, 428], "res_2sls_al": 149, "0821": 149, "0243": [149, 397, 403], "179": [149, 150], "959": [149, 397], "6494": 149, "0724": [149, 714], "5497": [149, 714], "0080": [149, 150, 397, 714], "206": 149, "0410": [149, 150], "3552": 149, "0676": [149, 150], "5369": 149, "1690": 149, "3289": 149, "0637": 149, "1947": 149, "1151": 149, "4799": 149, "9286": 149, "finit": [149, 153], "strongli": [149, 714], "exact": [149, 718], "res_liml": 149, "0394": [149, 150], "8807": 149, "577": 149, "4513": 149, "730": [149, 714], "0283": [149, 717], "8776": [149, 714], "8781": 149, "0947": 149, "3114": 149, "2241": 149, "6531": 149, "9957": 149, "8361": 149, "0001153166806434": 149, "As": [149, 714], "27": [149, 150, 397, 714], "res_ivol": 149, "sm_ol": 149, "sm": [149, 153, 397, 401, 574, 614, 663, 700, 714, 717], "073879": 149, "861131": 149, "440381": 149, "057806": 149, "003529": 149, "010482": 149, "151307": 149, "econometr": [150, 397, 713, 714, 801, 814, 836, 848], "jeffrei": [150, 397, 713], "demonstr": [150, 714, 716], "primarili": [150, 397], "signal": 150, "beyond": [150, 397, 404, 412, 420, 438, 446], "direct": [150, 151], "among": 150, "attribut": [150, 714, 880], "mroz": [150, 716], "has_const": 150, "1987": [150, 396, 397, 715], "34": [150, 397, 403, 714], "empir": 150, "hour": [150, 397, 714, 716], "work": [150, 396, 397, 401, 713, 714, 716], "assumpt": [150, 272, 401, 402, 551, 586, 587, 640, 675, 714, 716, 718], "econometrica": 150, "55": [150, 398, 714], "765": [150, 396], "799": 150, "nlf": 150, "labor": [150, 397], "1975": 150, "kidslt6": [150, 716], "kid": 150, "kidsge6": 150, "woman": 150, "yr": [150, 714], "school": [150, 397, 714], "earn": [150, 714, 715, 717], "repwag": 150, "interview": 150, "1976": 150, "hushr": 150, "husband": 150, "husag": 150, "huseduc": 150, "huswag": 150, "hourli": [150, 714, 715], "faminc": 150, "famili": 150, "mtr": 150, "fed": 150, "margin": [150, 714], "tax": 150, "motheduc": 150, "mother": 150, "fatheduc": 150, "father": 150, "unem": 150, "counti": 150, "citi": 150, "live": [150, 714], "smsa": 150, "mkt": 150, "nwifeinc": [150, 716], "lwage": [150, 397, 401, 574, 614, 663, 700, 716], "expersq": [150, 397, 401, 574, 614, 663, 700, 714, 715, 716], "special": [150, 211, 398, 401, 402, 515, 712, 714, 717, 789], "1179": [150, 397], "1158": [150, 397], "428": [150, 716], "196": [150, 716], "32": 150, "1852": 150, "1848": 150, "3163": 150, "5474": [150, 715], "1086": 150, "0144": [150, 397], "5628": 150, "0805": [150, 714], "1368": 150, "subject": [150, 151], "save": 150, "relationship": 150, "res_first": 150, "educ_hat": 150, "1726": 150, "1706": [150, 714], "258": [150, 714], "237": 150, "2753": [150, 398, 715], "186": [150, 714], "6975": 150, "777": 150, "2694": 150, "0285": 150, "4476": 150, "2135": 150, "res_second": 150, "0934": [150, 396], "0913": [150, 397], "8487": 150, "0914": [150, 714], "4411": 150, "4451": 150, "9911": 150, "3216": 150, "4312": 150, "3134": 150, "0351": 150, "6878": 150, "0095": [150, 714], "1279": [150, 397, 714], "res_direct": 150, "5982": 150, "941e": 150, "1070": 150, "9465": 150, "6119": 150, "sibl": 150, "blackburn": 150, "d": [150, 394, 397, 454, 458, 479, 713, 883, 887, 888], "neumark": 150, "1992": 150, "unobserv": 150, "abil": [150, 714], "interindustri": 150, "differenti": 150, "quarterli": 150, "journal": [150, 397, 713], "107": [150, 714], "1421": 150, "1436": 150, "weekli": 150, "iq": [150, 153], "kww": 150, "knowledg": 150, "world": 150, "tenur": [150, 714, 717], "south": [150, 713, 714, 715], "urban": 150, "meduc": 150, "feduc": 150, "0973": [150, 714], "0964": 150, "934": [150, 153, 397, 714], "100": [150, 396, 398, 710, 716, 766, 792], "71": [150, 403], "9733": 150, "0814": 150, "419": 150, "8139": [150, 397], "1328": 150, "0598": 150, "035": [150, 714], "0481": 150, "0715": 150, "0576": 150, "0566": 150, "143": 150, "1131": [150, 714], "125": 150, "921": 150, "365": 150, "2287": [150, 714], "0303": [150, 714], "5569": 150, "2880": 150, "1694": 150, "0101": [150, 714], "715": 150, "1310": 150, "3539": 150, "497": 150, "4373": 150, "8248": 150, "1224": [150, 715], "0263": [150, 714], "6599": 150, "0709": [150, 397], "1738": [150, 397], "concept": [150, 151], "wl": [150, 395, 398, 458, 488, 712], "2_i": [150, 172, 828, 862], "w_i": [150, 179, 180, 181, 715, 716, 757, 828, 862], "feasibl": [150, 403, 718], "could": [150, 398, 714], "res2": 150, "fgls_mod": 150, "fgls_re": 150, "sigma2_hat": 150, "exp": 150, "9903": [150, 716], "1360": [150, 714], "2224": 150, "3675": [150, 714], "4956": 150, "9452": 150, "0518": 150, "1307": [150, 714], "0158": 150, "5311": 150, "5953": 150, "particularli": 150, "don": 150, "res_gl": 150, "520": 150, "2031": 150, "3231": 150, "105": 150, "5699": 150, "8363": 150, "1166": 150, "0241": [150, 397], "8497": 150, "0695": 150, "1638": 150, "babi": 150, "birthweight": 150, "mullahi": 150, "1997": 150, "cigarett": 150, "review": [150, 713, 714], "79": 150, "596": 150, "593": 150, "1988": [150, 396], "cigtax": 150, "cig": 150, "home": [150, 396], "cigpric": 150, "bwght": 150, "ounc": 150, "pariti": 150, "child": 150, "male": [150, 714, 715], "white": [150, 397, 438, 488, 504, 513, 523, 531, 714], "smked": 150, "dai": [150, 714], "preg": 150, "lbwght": 150, "bwghtlb": 150, "pound": 150, "pack": 150, "_weak": 150, "1388": 150, "0731": 150, "1499": [150, 714], "9746": 150, "2361": [150, 714], "9192": 150, "3580": 150, "3172": [150, 396], "3681": 150, "0356": 150, "0247": [150, 397, 715], "4398": 150, "0129": [150, 398, 714], "0840": 150, "substanti": [150, 397, 714], "warrant": 150, "interpret": [150, 397, 718], "150": 150, "5224": 150, "5242": 150, "1356": 150, "2866": 150, "7203": 150, "0381": [150, 397], "123": [150, 396, 714], "80": [150, 396], "6456": 150, "7951": 150, "0238": 150, "0223": 150, "0656": 150, "0199": 150, "0675": 150, "colleg": [150, 713], "card": 150, "1995": 150, "geograph": 150, "aspect": 150, "labour": 150, "essai": 150, "honour": 150, "john": [150, 713], "vanderkamp": 150, "ed": 150, "christophid": 150, "grant": [150, 396], "swidinski": 150, "201": [150, 714], "222": 150, "toronto": 150, "univers": [150, 713], "press": [150, 713], "person": [150, 397], "nearc2": 150, "1966": [150, 398], "nearc4": 150, "nl": 150, "momdad14": 150, "dad": 150, "sinmom14": 150, "step14": 150, "parent": 150, "reg661": 150, "region": [150, 714], "reg662": 150, "reg663": 150, "reg664": 150, "reg665": 150, "reg666": 150, "reg667": 150, "reg668": 150, "reg669": 150, "south66": 150, "smsa66": 150, "cent": 150, "enrol": 150, "libcrd14": 150, "xpersq": 150, "instr": [150, 245, 267, 272, 287, 322, 323, 324, 351, 357, 394, 813], "4771": 150, "4745": 150, "3010": 150, "3693": 150, "3199": 150, "0848": 150, "7702": 150, "1536": 150, "4862": 150, "638": [150, 397], "2148": 150, "456": 150, "217": [150, 398], "059": 150, "4125": 150, "0320": [150, 397], "896": 150, "4752": 150, "3498": [150, 403], "5100": 150, "6100": 150, "9355": 150, "0923": 150, "138": 150, "1164": 150, "7547": 150, "4022": 150, "1109": 150, "6255": 150, "6196": 150, "0516": 150, "1416": [150, 397], "3645": 150, "7155": 150, "3291": 150, "2259": 150, "0255": 150, "1103": 150, "2309": [150, 403], "8174": 150, "1908": 150, "2417": 150, "0786": 150, "1854": 150, "4242": 150, "6714": 150, "4420": [150, 714], "2847": [150, 715], "0279": [150, 714, 715], "1789": 150, "1562": [150, 714], "8759": 150, "3785": 150, "3226": 150, "1172": 150, "2070": 150, "5660": 150, "5714": 150, "2886": 150, "5230": 150, "2726": [150, 714], "2186": 150, "2230": 150, "7111": 150, "1659": 150, "3028": 150, "2826": 150, "1996": 150, "7656": 150, "1599": 150, "2168": [150, 151], "2389": 150, "9077": 150, "3640": 150, "6850": 150, "2513": [150, 714], "5239": 150, "2562": 150, "0449": [150, 398, 717], "0218": 150, "2103": 150, "0575": 150, "2903": 150, "1794": 150, "6000": 150, "2998": 150, "2963": 150, "1377": 150, "6208": 150, "0740": 150, "62": 150, "417": 150, "4757": 150, "7659": [150, 715], "592": [150, 716], "0716": [150, 397], "0980": 150, "1798": [150, 398], "1990": [150, 398], "985": [150, 714], "2345": 150, "1635": 150, "1364": 150, "0192": 150, "1159": 150, "0988": [150, 714], "1739": 150, "1480": 150, "0280": 150, "2917": 150, "2028": 150, "0932": [150, 714], "0262": 150, "0185": 150, "4153": 150, "0626": [150, 715, 716], "0350": [150, 715], "7531": 150, "0059": [150, 714, 715], "1650": 150, "1445": [150, 714], "0337": 150, "2850": 150, "0784": 150, "2107": [150, 714], "0551": 150, "0411": 150, "3402": 150, "1802": 150, "1280": 150, "0428": [150, 397], "9912": [150, 403], "0441": 150, "2119": 150, "1405": [150, 153], "0450": 150, "0018": [150, 714], "0523": 150, "1180": 150, "0455": 150, "5934": [150, 715], "2071": 150, "0564": 150, "0505": 150, "1183": 150, "2634": [150, 714], "1553": 150, "0425": 150, "1186": 150, "0387": 150, "0658": [150, 714], "1944": 150, "0747": 150, "540": 150, "0818": 150, "nearli": [150, 398], "howev": [150, 401], "concern": 150, "strength": 150, "2382": 150, "2343": 150, "840": 150, "83": [150, 397], "6662": 150, "9085": 150, "0352": [150, 714], "8855": 150, "4468": 150, "1083": [150, 397], "0233": 150, "6376": 150, "0625": 150, "1540": 150, "7128": 150, "1468": 150, "0524": [150, 714, 716], "8031": 150, "0051": [150, 397, 714], "1118": 150, "0311": [150, 715], "5995": 150, "0509": [150, 397], "1727": 150, "1447": 150, "0291": 150, "9775": 150, "2016": [150, 713], "0877": 150, "0205": [150, 714], "9035": 150, "3663": 150, "0217": [150, 397], "0587": 150, "1008": 150, "0365": [150, 397], "7644": 150, "0057": [150, 714, 715], "0293": [150, 714], "1722": 150, "1483": 150, "0355": 150, "0787": 150, "2178": 150, "0499": 150, "1471": 150, "2514": 150, "0354": [150, 714], "1352": 150, "1463": 150, "0491": 150, "9794": 150, "0500": 150, "1629": 150, "0617": [150, 715], "2641": 150, "1346": [150, 398], "0504": 150, "6689": 150, "0357": [150, 714, 715], "2334": [150, 397], "0831": [150, 397, 714], "0571": 150, "4552": 150, "1456": 150, "1950": 150, "1078": 150, "6317": 150, "0085": 150, "0275": 150, "1881": 150, "1315": 150, "0540": 150, "0149": [150, 714], "0257": 150, "2373": 150, "smaller": [150, 714], "naiv": [150, 504, 513, 523, 531, 718], "technic": [150, 714], "214": [150, 403, 714], "simpler": [150, 394, 716], "discuss": [150, 152], "anoth": 150, "languag": 150, "augment": 150, "parameter": 150, "differenc": [150, 397, 398, 399, 402, 403, 463], "res_formula": 150, "rsquar": [150, 268, 399, 540, 541, 543, 544, 545, 565, 566, 567, 578, 579, 580, 603, 605, 606, 632, 633, 634, 654, 655, 656, 667, 668, 669, 689, 690, 691, 714], "reg": 150, "661": 150, "reg66": 150, "astyp": [150, 396, 403], "res_cat": 150, "662": [150, 714], "663": 150, "664": 150, "665": [150, 714], "666": 150, "667": [150, 396], "668": 150, "669": 150, "lnwage": 150, "1357": 150, "1296": 150, "653": [150, 713, 716], "3985": 150, "1207": 150, "9039": 150, "7329": 150, "8291": 150, "0442": 150, "0134": [150, 397, 714], "3038": 150, "0704": 150, "2485": 150, "0614": [150, 397], "0313": [150, 714], "9622": 150, "0497": 150, "043e": 150, "1227": 150, "IF": 150, "8256": 150, "0928": [150, 714], "0x7f6c3748c190": 150, "accid": 150, "1624": 150, "1544": 150, "82": [150, 403], "954": 150, "0582": 150, "0346": [150, 715], "6810": 150, "1260": 150, "3923": 150, "1226": 150, "9024": 150, "7207": 150, "8169": 150, "0184": 150, "0700": [150, 403, 714], "2840": [150, 714], "0224": 150, "0308": 150, "9932": 150, "0462": [150, 715], "1218": 150, "overidentif": [150, 357, 394], "uncorrel": [150, 394, 401, 402, 718], "wooldridge_overid": 150, "4435": 150, "5055": 150, "0x7f6c3748d480": 150, "formal": [150, 565, 566, 567, 603, 605, 606, 654, 655, 656, 689, 690, 691], "2_1": 150, "29": [150, 398, 403, 713, 714], "3719811106150277": 150, "31": [150, 716], "0421": [150, 397], "5939": 150, "0x7f6c396165f0": 150, "1126588681969989": 150, "elimin": [150, 401, 513], "jobtrain": [150, 396], "head": [150, 396, 397, 398], "isin": 150, "sort_valu": 150, "fcode": [150, 396], "set_index": [150, 396, 397, 398, 401, 403, 574, 614, 663, 700], "hrsemp": [150, 396], "scrap": [150, 396], "lscrap": [150, 396], "h": [150, 394, 713, 801, 814, 836, 848], "holzer": 150, "cheatham": 150, "knott": 150, "1993": [150, 714, 715], "train": [150, 396], "subsidi": 150, "michigan": 150, "46": [150, 396], "625": 150, "636": 150, "1989": [150, 396], "emploi": [150, 396, 766, 777, 792], "employe": [150, 714], "plant": [150, 398], "sale": [150, 396], "avgsal": [150, 396], "salari": 150, "item": [150, 396, 479, 480, 881], "rework": [150, 396], "tothr": [150, 396], "receiv": 150, "d89": [150, 396], "d88": [150, 396], "totrain": 150, "lemploi": 150, "lsale": 150, "lrework": 150, "lhrsemp": 150, "lscrap_1": 150, "lag": [150, 179, 180, 181, 204, 713], "grant_1": [150, 396], "clscrap": [150, 396], "cgrant": [150, 396], "clemploi": [150, 396], "clsale": [150, 396], "lavgsal": [150, 396], "clavgsal": [150, 396], "cgrant_1": [150, 396], "chrsemp": [150, 396], "314": [150, 714], "290": [150, 714], "450000e": 150, "500000": 150, "415708": 150, "885350": 150, "903448": 150, "679815e": 150, "18326": 150, "284644": 150, "500798": 150, "4025": 150, "063452": 150, "843101": 150, "977975e": 150, "6507": 150, "584305": 150, "410032": [150, 396], "100000e": 150, "4237": [150, 151, 714], "410604": 150, "527000e": 150, "13664": 150, "418084": 150, "900000e": 150, "17160": 150, "419309": 150, "000000e": 150, "22000": 150, "419486": [150, 396], "500": [150, 398, 768, 779, 794], "700000e": 150, "40563": 150, "108": [150, 714], "276": 150, "199722": 150, "883537": 150, "648551": 150, "197452": 150, "114650": 150, "188094": 150, "145294": 150, "45": [150, 397, 403], "694834": 150, "398712": 150, "319107": 150, "010000": 150, "767500": 150, "332500": 150, "555000": 150, "267500": 150, "250000": 150, "144": [150, 403], "119": [150, 714], "168993": 150, "096876": 150, "128995": 150, "754753": 150, "589774": 150, "251180": 150, "489422": 150, "353818": 150, "502170": 150, "411099": 150, "982874": 150, "351611": 150, "350983": 150, "031946": 150, "023286": 150, "522509": 150, "115118": 150, "064538": 150, "116219": 150, "750337": 150, "092537": 150, "182321": 150, "215391": 150, "998797": 150, "397895": 150, "673976": 150, "896701": 150, "610610": 150, "clhrsemp": [150, 396], "131": [150, 396, 714], "058601": 150, "423050": 150, "642580": 150, "074255": 150, "301290": 150, "235229": 150, "080411": 150, "753490": 150, "338574": 150, "020135": 150, "057159": 150, "272727": 150, "039375": 150, "086255": 150, "063067": 150, "568912": 150, "027800": 150, "394449": 150, "delta": [150, 153, 333, 361, 394, 402, 503, 718], "812321": 150, "377778": 150, "817556": 150, "185697": 150, "523825": 150, "490310": 150, "496392": 150, "626858": 150, "850180": 150, "502169": 150, "355820": 150, "846154": 150, "110000": 150, "167054": 150, "333330": 150, "090000": 150, "054067": 150, "3408": 150, "3255": 150, "266": 150, "5806": 150, "1139": 150, "5076": 150, "6117": 150, "5225": 150, "6837": 150, "437": 150, "0662": 150, "8235": 150, "507": 150, "367": 150, "cleaner": 150, "res_iv": 150, "0159": [150, 714, 716], "3464": 150, "0674": [150, 401], "0327": [150, 397], "1241": 150, "2632": [150, 715], "7924": 150, "2759": 150, "2106": 150, "0077": 150, "8293": 150, "0619": 150, "0401": [150, 397], "9707": 150, "1035": 150, "0208": [150, 397], "7236": 150, "pred_exog": 150, "410523": 150, "016018": 150, "410563": 150, "032668": 150, "410565": 150, "410566": 150, "037845": 150, "410567": 150, "410577": 150, "040453": 150, "410593": 150, "410596": 150, "060975": 150, "410606": 150, "010335": 150, "410626": 150, "011102": 150, "418011": 150, "154386": 150, "418021": 150, "119765": 150, "418035": 150, "293087": 150, "418045": 150, "089281": 150, "418054": 150, "058797": 150, "418065": 150, "202584": 150, "418076": 150, "227847": 150, "418091": 150, "193340": 150, "418097": 150, "067874": 150, "418107": 150, "065849": 150, "418118": 150, "342269": 150, "418125": 150, "339713": 150, "418140": 150, "164922": 150, "418163": 150, "598795": 150, "418168": 150, "418177": 150, "400651": 150, "418237": 150, "117587": 150, "419198": 150, "998414": 150, "419201": 150, "152554": 150, "419242": 150, "469395": 150, "419268": 150, "419272": 150, "084601": 150, "419289": 150, "419297": 150, "248274": 150, "419307": 150, "036528": 150, "419339": 150, "419343": 150, "042576": 150, "419357": 150, "386498": 150, "419378": 150, "434747": 150, "419381": 150, "027988": 150, "419388": 150, "049180": 150, "419409": 150, "249684": 150, "419459": 150, "033183": 150, "419482": [150, 396], "419483": [150, 396], "enhanc": [151, 713], "basi": [151, 398, 716], "context": [151, 396, 493, 501, 509, 519, 528, 536], "mark": [151, 713], "surround": [151, 715, 768, 779, 794], "manner": 151, "join": [151, 714], "x4": 151, "x5": 151, "z1": [151, 768, 779], "z2": [151, 768, 779], "z3": 151, "submodel": 151, "asid": [151, 716], "quickstart": 151, "what": [151, 397], "unlik": [151, 181, 240, 394, 397, 490, 498, 506, 525, 533, 718], "iv_r": 151, "readili": 151, "iv_res2": 151, "ols_r": [151, 153], "0659": 151, "0654": 151, "2004": 151, "7709": 151, "353": 151, "4498": 151, "453": [151, 397], "0873": [151, 716], "8348": 151, "5252": 151, "8892": 151, "1653": 151, "brief": [152, 400], "overview": [152, 400], "introductori": [152, 713], "book": [152, 400], "advanc": 152, "further": 152, "x_": [153, 233, 358, 394, 397, 401, 402, 404, 420, 495, 503, 511, 522, 530, 544, 545, 579, 580, 633, 634, 668, 669, 718, 763, 774, 789], "1i": [153, 358, 394, 718, 749, 757], "beta_1": [153, 716], "2i": [153, 358, 394, 718, 749, 757], "beta_2": [153, 358, 716], "z_": [153, 233, 394, 718, 749, 757, 774], "nu_i": 153, "k_1": 153, "k_2": 153, "neq": [153, 724, 727, 730], "p_2": 153, "project": [153, 268, 333, 351, 361, 394], "p_1": 153, "accept": [153, 397, 454, 768, 779, 794], "0459": 153, "0438": 153, "872": 153, "mon": [153, 403], "mar": 153, "4912": 153, "4692": 153, "5719": 153, "5716": 153, "4108": 153, "6649": 153, "0198": [153, 401], "0485": [153, 397], "8434": 153, "0837": [153, 714], "1974": 153, "fuller": [153, 245, 249, 260], "user": [153, 714, 718], "matric": [153, 394, 751, 755, 761], "homoskedasticweightmatrix": 153, "heteroskedasticweightmatrix": 153, "kernelweightmatrix": 153, "within": [153, 396, 397, 398, 399, 401, 403, 488, 504, 545, 567, 580, 606, 634, 656, 669, 691], "onewayclusteredweightmatrix": 153, "studi": [153, 713], "andrew": [153, 172, 178, 204, 404, 420, 714, 730, 743, 757], "membership": [153, 208, 462, 475, 869], "iq_band": 153, "ineffici": [153, 394, 401], "abov": [153, 716, 718], "tol": [153, 224, 766, 777, 792], "success": 153, "stop": [153, 707], "outer": [153, 224, 396, 777], "initial_weight": [153, 224, 777], "place": [153, 394, 397, 763, 774, 789], "dure": [153, 397], "ninstr": [154, 160, 166, 172, 194, 197, 198, 207, 210, 211, 212, 222, 223, 233, 234, 240, 245, 246, 257, 752, 770], "assign": 154, "ncluster": [154, 720], "xi_": [154, 402, 404, 420], "mathcal": [154, 394, 402, 412, 720], "_g": 154, "_0": [172, 420, 757], "_j": [172, 420, 757], "larger": [178, 224, 513, 540], "involv": 178, "maxlag": [179, 180, 181], "6z_i": 180, "leq": 180, "truncat": 181, "pi": [181, 394], "w_0": 181, "sin": [181, 394], "co": [181, 394, 397, 714], "geq": [181, 394], "var_nam": [182, 454], "convert_dummi": [182, 454], "drop_first": [182, 454, 460], "abstract": [182, 454], "univari": 182, "wrap": 182, "xarrai": [182, 454], "array_lik": 182, "flat": [182, 454], "view": [187, 189, 457, 459, 462, 465, 468, 472, 473, 475, 476, 477, 714, 884, 885, 890], "2d": [187, 396, 462, 475], "g_i": [192, 204, 749, 757], "_ig_i": [192, 749], "optimal_bw": [204, 757], "gamma_0": [204, 716], "gamma_j": 204, "nendog": [211, 219, 222, 230, 233, 242, 245, 253, 264, 293, 344, 380, 770], "vcv": [211, 222, 245], "bootstrap": [211, 212, 222, 223, 234, 245, 246, 257], "regressand": [212, 223, 234, 240, 246, 257], "expos": [212, 223, 234, 246, 257, 402, 494, 502, 510, 520, 529, 537, 880], "facilit": [212, 223, 234, 246, 257, 397, 714], "olsresult": [213, 224, 235, 247, 258, 269, 309, 393], "ivresult": [213, 247, 258, 309, 393], "explicitli": [215, 226, 237, 249, 260, 398, 403, 490, 495, 498, 506, 525, 533], "arraylik": [219, 230, 782, 798], "ivdatalik": [219, 230], "eval_env": [219, 230, 242, 253, 264, 493, 501, 509, 519, 528, 536, 772, 782, 798], "depth": [219, 230, 242, 253, 264, 493, 501, 509, 519, 528, 536, 772, 782, 798], "suppli": [219, 230, 242, 253, 264, 493, 501, 509, 519, 528, 536, 772, 782, 798], "weight_config": [222, 226, 233, 237, 774, 779], "zw": [222, 718, 724, 727, 730, 774], "float64arrai": [224, 720, 724, 727, 730, 735, 739, 743], "ivgmmresult": [224, 235, 309, 393], "criteria": 224, "ivgmmcovari": [224, 235], "most": [233, 394, 396, 397, 401, 402, 490, 498, 504, 506, 511, 515, 525, 533, 714, 718], "circumst": [233, 397, 717], "min_": [233, 394, 718], "y_": [233, 394, 397, 401, 402, 495, 503, 511, 522, 530, 544, 545, 579, 580, 633, 634, 668, 669, 718, 763, 774, 789, 824, 858], "target": [240, 785, 786], "long": [240, 402, 714, 718, 801, 814, 836, 848], "tradit": 240, "explicit": [240, 394], "unmodifi": [245, 249, 260], "m_": [245, 351, 394], "p_": [245, 333, 361, 394, 718], "part": [245, 398], "n_": [245, 272, 287, 322, 323, 324, 351, 357, 361, 394, 402, 813], "neeed": 256, "linear_model": [256, 712], "diagnost": [267, 718], "post": 268, "otherwis": [268, 715, 886], "pval": 268, "dist": 268, "respect": [268, 309, 393, 402, 515, 616, 702, 828, 862], "_ivgmmbas": 271, "quantiti": [272, 397, 401], "j_e": 272, "w_e": 272, "wlog": 272, "denot": [272, 495, 718, 763, 774, 789], "j_c": 272, "whose": [272, 397], "firststageresult": [282, 335], "diagnos": [282, 335], "suffici": [287, 322, 324, 813], "sqrt": [287, 394, 402, 714, 718, 813], "idiosyncrat": [293, 344, 380, 397, 401, 402, 560, 598, 649, 684, 820, 854], "filter": [293, 344, 380, 560, 598, 649, 684, 820, 854], "sequenc": [309, 393, 480, 751, 752, 755, 756, 761, 762, 763, 774, 789, 880], "star": [309, 393, 616, 702], "descript": [310, 617, 768, 779, 794], "_ivlsmodelbas": 321, "anderson": [322, 394], "rubin": [322, 394], "ln": [322, 394, 714, 716, 718], "sargan": [323, 394], "basmann": [324, 394], "onto": [333, 361], "_e": [333, 361], "_c": [333, 361], "var": [333, 361, 456, 467, 714, 718], "leav": [333, 361, 394, 714], "annihil": [351, 394], "gamma_1": [357, 359, 716], "gamma_q": 357, "_1": 359, "gamma_p": 359, "x_j": 359, "2002": [359, 713, 714, 715, 716], "eq": [359, 714], "_ivmodelbas": 362, "ivmodelcomparison": 393, "recov": 394, "scalar": 394, "k_": 394, "written": 394, "underset": 394, "textrm": [394, 402], "underbrac": 394, "gamma_": [394, 402], "u_": 394, "compactli": [394, 763, 774, 789], "implicit": [394, 491, 499, 507, 516, 526, 534], "partit": 394, "mathrm": [394, 718], "eig": 394, "eigenvalu": 394, "zwz": 394, "let": 394, "rss": 394, "mss": 394, "tss": 394, "unless": 394, "dot": [394, 718, 763, 774, 789], "asymptot": [394, 401, 718, 801, 814, 836, 848, 867, 868], "xi": [394, 404, 420, 718], "member": [394, 401, 714], "rescal": 394, "e_": 394, "h_": 394, "pr": 394, "phi": 394, "2t_": 394, "t_": [394, 402], "cdot": 394, "cdf": 394, "ci_": 394, "pm": 394, "q_": 394, "quantil": 394, "critic": [394, 876], "wsw": 394, "collaps": 394, "replac": [394, 402, 404, 420, 438, 446, 718], "notabl": [394, 403], "overlin": 394, "nu": 394, "minu": [394, 548, 583, 637, 672], "magnitud": 394, "Then": [394, 402], "nr": [394, 397, 401, 574, 614, 663, 700], "andersen": 394, "basman": 394, "haussman": 394, "wh": 394, "k1": 394, "k2": [394, 718], "j_": 394, "ensur": [394, 490, 498, 506, 511, 515, 522, 525, 533, 714, 715, 717], "r2": [394, 714, 824, 828, 858, 862], "under": [394, 401, 551, 586, 587, 640, 675], "unexplain": 394, "On": [394, 402], "wors": 394, "w_": [394, 402], "6z_": 394, "leq0": 394, "5m": 394, "geq1": 394, "todo": [394, 714], "execut": [394, 408, 416, 424, 434, 442, 450, 812, 847], "reparameter": 394, "somewhat": [394, 401], "obviou": 394, "driven": 394, "baltagi": [394, 402, 713], "baumet": [394, 713], "camet": [394, 713], "camtri05": [394, 713], "camtri09": [394, 713], "green": [394, 713, 714, 718, 801, 814, 836, 848], "newwes94": [394, 713], "wool10": [394, 713], "wool12": [394, 713], "primari": 396, "3d": 396, "job": 396, "47000000": 396, "35000": 396, "43000000": 396, "37000": 396, "49000000": 396, "39000": 396, "410440": 396, "1560000": 396, "10500": 396, "1970000": 396, "11000": 396, "463100": 396, "270027": 396, "088949": 396, "518670": 396, "063013": 396, "130621": 396, "571320": 396, "259130": 396, "080043": 396, "233347": 396, "305651": 396, "055570": 396, "946565": 396, "165385": 396, "052644": 396, "198597": 396, "047832": 396, "046520": 396, "mi_data": 396, "referenc": 396, "represent": [396, 401, 458], "0528": [396, 714], "0379": 396, "140": [396, 714], "overal": [396, 397, 398, 401, 403, 544, 566, 579, 605, 633, 655, 668, 690, 714, 715, 716, 717, 824, 828, 858, 862], "459": [396, 397], "0751": 396, "48": [396, 401, 403, 714, 716], "0267": [396, 403], "avg": [396, 397, 398, 401, 403], "ob": [396, 397, 398, 401, 402, 403], "9167": 396, "0054": [396, 403, 714], "2528": 396, "poolabl": [396, 397, 398, 401, 403], "094": 396, "runner": 396, "1219": 396, "missingvaluewarn": 396, "super": 396, "__init__": 396, "check_rank": [396, 487, 490, 495, 498, 503, 506, 511, 515, 522, 525, 530, 533], "np_data": 396, "asarrai": 396, "np_lscrap": 396, "get_loc": 396, "np_hrsemp": 396, "nentiti": [396, 454, 710], "ntime": [396, 710], "reshap": 396, "entrant": 396, "schedul": 396, "remain": [396, 402], "viabl": 396, "notat": [396, 398, 714], "principl": 396, "da": 396, "to_xarrai": 396, "keysview": [396, 885], "107kb": 396, "coordin": 396, "int64": [396, 397, 403], "1kb": 396, "410495": 396, "24b": 396, "4kb": 396, "08895": 396, "1306": 396, "1942": [396, 397], "1525": 396, "68": [396, 397], "741": [396, 716], "798": 396, "05557": 396, "05264": 396, "06063": 396, "05716": 396, "947": 396, "1986": [396, 397], "165": [396, 403], "04783": 396, "611": 396, "manual": [396, 713, 714], "year_str": 396, "reset_index": [396, 403], "year_cat": 396, "053435": 396, "252033": 396, "1985": [396, 397], "1240": 396, "78": [396, 403, 714], "3496": 396, "1591": 396, "1146": 396, "3888": 396, "1684": 396, "3868": 396, "0685": [396, 714], "4620": [396, 397], "1176": [396, 714], "9297": 396, "6957": 396, "2284": 396, "649": 396, "vella": [397, 714, 715], "verbeek": 397, "1998": 397, "dynam": 397, "young": 397, "men": [397, 401], "183": [397, 716], "1980": 397, "multiindex": [397, 398, 403, 454, 465, 479], "understood": 397, "wage_panel": [397, 401, 574, 614, 663, 700], "occup": 397, "2672": 397, "197540": 397, "1981": 397, "2320": 397, "853060": 397, "1982": 397, "2940": [397, 716], "344462": 397, "1983": 397, "2960": 397, "433213": 397, "1984": 397, "3071": 397, "568125": 397, "plain": 397, "understand": 397, "exog_var": [397, 574, 614, 663, 700], "pooled_r": [397, 714], "1893": 397, "2066": 397, "4360": [397, 401], "1692": 397, "2982": 397, "72": [397, 398, 403, 714], "545": [397, 401], "4345": 397, "0921": 397, "0783": 397, "1761": 397, "2396": 397, "2455": 397, "1392": 397, "0236": 397, "9049": 397, "1855": [397, 715], "0930": 397, "0160": [397, 714, 715], "7703": 397, "4412": 397, "0248": [397, 714], "0568": 397, "0672": 397, "9095": 397, "0404": 397, "0941": 397, "9413": [397, 714], "0157": 397, "8997": 397, "0775": [397, 714], "1390": 397, "0052": [397, 714], "442": 397, "0811": [397, 714], "1016": 397, "1825": [397, 398], "0172": [397, 714], "635": 397, "1488": 397, "2161": 397, "0583": 397, "0304": 397, "9214": 397, "0548": [397, 714], "1178": [397, 714], "0628": 397, "0332": [397, 715], "8900": 397, "0588": 397, "0620": 397, "0367": 397, "6915": 397, "0099": [397, 714], "1339": 397, "0905": 397, "2566": 397, "1691": 397, "1092": 397, "0434": 397, "5200": 397, "0118": 397, "1420": 397, "0464": 397, "0580": 397, "2330": 397, "0494": [397, 714], "5165": 397, "0769": 397, "2707": 397, "consid": [397, 716, 717, 718], "quasi": [397, 401, 402], "re_r": 397, "1806": 397, "1853": 397, "1799": 397, "1828": 397, "1622": 397, "409": 397, "0234": 397, "1514": 397, "1546": 397, "8771": 397, "2735": 397, "3203": 397, "1394": 397, "0480": 397, "9054": [397, 403], "0453": [397, 714], "5078": 397, "6116": 397, "0622": 397, "1058": 397, "0154": 397, "0756": 397, "1361": 397, "0047": 397, "8623": [397, 716], "0061": 397, "0638": 397, "0168": 397, "8035": 397, "0309": [397, 714], "0967": [397, 716], "0919": [397, 714], "0107": 397, "5744": 397, "1129": 397, "1059": 397, "9289": 397, "1409": [397, 714], "6362": 397, "1019": 397, "0889": 397, "0324": 397, "9519": 397, "3412": 397, "0944": 397, "0202": 397, "0417": 397, "4840": 397, "6284": 397, "0616": 397, "1020": [397, 714], "0430": 397, "0515": 397, "8350": 397, "4037": 397, "1440": 397, "0577": [397, 714], "0615": 397, "9383": 397, "3482": 397, "0629": 397, "1782": 397, "2834": 397, "1994": [397, 402, 713], "2321": [397, 714], "1348": 397, "0817": 397, "6504": 397, "0989": 397, "0253": 397, "2950": [397, 714], "trend": 397, "matter": 397, "access": [397, 714], "variance_decomposit": 397, "106946": 397, "123324": 397, "percent": 397, "464438": 397, "decomposit": [397, 613, 699], "theta_i": 397, "unbalanc": [397, 402, 488], "balanc": [397, 488], "645059": 397, "110": 397, "broadli": 397, "be_r": 397, "2155": [397, 715], "1141": 397, "1686": 397, "194": 397, "633": 397, "538": 397, "2836": 397, "1784": 397, "5897": 397, "1125": 397, "0668": 397, "6340": 397, "1414": 397, "0489": 397, "8915": 397, "2375": 397, "2355": 397, "0737": 397, "0938": 397, "4538": 397, "0501": 397, "0412": 397, "4346": 397, "0606": [397, 714], "2226": 397, "5159": 397, "0702": 397, "1123": 397, "2587": 397, "0460": 397, "6214": 397, "1683": 397, "3491": 397, "reweight": [397, 402, 488], "BE": 397, "consider": 397, "slower": 397, "wise": [397, 402, 543, 545, 578, 580, 632, 634, 667, 669], "incorpor": 397, "fe_r": [397, 574, 614, 663, 700], "0807": 397, "1324": [397, 398, 403], "851": 397, "3805": 397, "4260": 397, "0183": 397, "748": 397, "3901": 397, "3612": 397, "0800": 397, "0193": 397, "1430": [397, 401, 716], "0467": 397, "5494": 397, "0108": [397, 714], "0826": 397, "1512": 397, "0219": [397, 398], "8883": 397, "1082": [397, 714], "2530": 397, "0244": 397, "360": 397, "2051": 397, "3008": 397, "3544": 397, "121": 397, "2971": 397, "4118": 397, "4901": 397, "529": [397, 716], "4191": 397, "5611": 397, "6175": 397, "0452": [397, 714], "648": 397, "5288": 397, "7062": 397, "7655": 397, "0561": 397, "6555": 397, "8755": 397, "9250": 397, "0688": 397, "450": 397, "7902": 397, "0599": 397, "1568": 397, "544": [397, 401], "wherea": 397, "fe_te_r": 397, "0216": [397, 715], "4809": 397, "2253": 397, "0378": 397, "49": [397, 398, 403], "430": 397, "7964": 397, "9448": 397, "551": 397, "use_lsdv": [397, 513], "auto_df": [397, 399, 513], "instruct": 397, "treatment": [397, 513], "lost": 397, "count_effect": [397, 399, 513], "other_effect": [397, 511, 515, 703, 710], "engog": 397, "below": [397, 402, 714], "we": 397, "reproduc": 397, "paneldata": [397, 487, 488, 490, 493, 494, 495, 498, 501, 502, 503, 504, 506, 509, 510, 511, 513, 515, 519, 520, 522, 523, 525, 528, 529, 530, 531, 533, 536, 537], "time_id": [397, 404, 412, 420, 438, 446], "fe_oe_r": 397, "addition": [397, 511], "look": [397, 714], "soak": 397, "challeng": 397, "fd_re": 397, "0268": 397, "5491": 397, "3815": 397, "5328": 397, "2305": 397, "208": 397, "3811": 397, "0196": 397, "9096": 397, "0773": 397, "1542": 397, "8005": 397, "0197": 397, "1767": 397, "0296": 397, "0813": 397, "0229": 397, "6633": 397, "0963": [397, 714], "certain": [397, 763, 789], "cluster_ent": [397, 504, 513, 515, 523, 531], "cluster_tim": [397, 513, 523, 531], "clust_ent": 397, "clust_entity_tim": 397, "board": 397, "suggest": [397, 718], "decreas": 397, "address": [397, 401], "1866": 397, "1679": 397, "2027": 397, "142": 397, "0347": 397, "5360": 397, "2892": 397, "3145": 397, "1438": 397, "9045": 397, "8727": 397, "7952": 397, "4008": 397, "4428": 397, "0892": 397, "7881": 397, "1728": 397, "3223": 397, "1934": 397, "2747": 397, "1571": 397, "1077": [397, 714], "0525": [397, 714], "8989": 397, "0994": 397, "626": 397, "802": 397, "296": 397, "1801": 397, "087": 397, "5343": [397, 714], "6732": 397, "reliabl": 397, "theori": [397, 401], "value_count": 397, "881": [397, 398], "509": [397, 398], "486": 397, "401": 397, "399": [397, 716], "233": [397, 714], "2989": 397, "4352": 397, "116": 397, "58": [397, 401, 714], "1479": 397, "2346": 397, "8145": 397, "3247": 397, "2553": 397, "0297": [397, 398], "8469": [397, 714], "2020": 397, "0857": [397, 714], "0266": [397, 714, 716], "5892": 397, "5557": 397, "0679": [397, 714], "6513": 397, "1155": 397, "2442": 397, "0139": [397, 714], "7322": 397, "0804": [397, 714], "1350": 397, "8846": 397, "1213": 397, "6323": 397, "1174": 397, "2428": 397, "caveat": 398, "grunfeld": [398, 403], "corpor": 398, "illustr": [398, 714], "stock": 398, "capit": [398, 403, 714], "load_panda": [398, 403], "motor": [398, 403], "1935": 398, "317": 398, "3078": 398, "1936": [398, 715], "391": 398, "4661": [398, 714], "1937": 398, "410": 398, "5387": [398, 714], "156": 398, "1938": 398, "257": 398, "2792": 398, "209": 398, "1939": 398, "330": [398, 714], "4313": 398, "203": 398, "entityeffect": [398, 401, 515], "impos": [398, 402, 714, 717, 784], "grand": [398, 402], "7667": [398, 403], "8223": [398, 403, 714], "220": [398, 403, 717], "8132": [398, 403], "1167": [398, 403], "340": [398, 403, 714], "207": [398, 403], "1101": [398, 403, 714], "7461": [398, 403], "0879": [398, 403], "3100": [398, 403], "0165": [398, 403], "744": [398, 403], "2774": [398, 403], "3426": [398, 403], "8193": 398, "8071": 398, "272": 398, "891": 398, "0750": [398, 715], "76": 398, "743": 398, "800": 398, "timeeffect": [398, 515], "7253": 398, "7944": 398, "7566": 398, "7856": 398, "1153": 398, "248": 398, "188": 398, "394": 398, "732": [398, 716], "6861": 398, "97": [398, 403], "278": 398, "0912": 398, "1422": 398, "3514": 398, "0210": [398, 715], "696": 398, "3099": 398, "3930": 398, "476": 398, "straight": 398, "forward": 398, "8644": 398, "4195": 398, "7616": 398, "997": [398, 714, 716], "3825": 398, "444": 398, "8597": 398, "85": [398, 716], "0269": 398, "0726": 398, "1746": [398, 714], "8692": 398, "3730": 398, "4323": 398, "4287": 398, "8643": 398, "7539": [398, 716], "8461": 398, "1071": 398, "679": 398, "0891": 398, "348": [398, 714], "0736": 398, "1045": 398, "2786": 398, "1900": 398, "3673": 398, "8179": 398, "8426": 398, "7357": 398, "1301": 398, "487": 398, "4134": [398, 714], "5654": 398, "992": 398, "828": 398, "1145": 398, "753": 398, "1037": 398, "1254": [398, 717], "2275": 398, "0242": 398, "3904": [398, 715], "detect": 399, "design": [399, 401, 402], "affin": 399, "aggreg": [399, 714], "plm": [400, 403], "analysi": [400, 403, 713, 714, 801, 814, 836, 848], "countri": [401, 715], "diverg": 401, "setup": 401, "techniqu": 401, "presenc": 401, "man": 401, "1365": 401, "wed": 401, "0270": 401, "1439": 401, "200": [401, 714], "87": 401, "3812": 401, "3953": 401, "113": 401, "3712": 401, "4194": 401, "560": 401, "0041": 401, "1073": 401, "0182": 401, "8992": 401, "0717": [401, 714], "0828": 401, "1864": 401, "0440": 401, "1215": 401, "3360": 401, "nt": 402, "want": 402, "lsdv": [402, 403, 513], "d_": 402, "multipli": 402, "theta_": 402, "approx1": 402, "approx0": 402, "rss_": [402, 586], "propto": 402, "imbalanc": 402, "root": [402, 458], "xx": [402, 404, 412, 420, 438, 446], "ti": 402, "ii": [402, 718, 828, 862], "belong": 402, "agre": 402, "prefix": 402, "texttt": 402, "_squar": 402, "iw": 402, "ddot": [402, 718, 763, 774, 789], "reflect": 402, "rho_": 402, "deviat": 402, "o": 402, "liner": 403, "quickli": 403, "slow": 403, "moder": 403, "nor": 403, "them": [403, 714], "rsquared_inclus": 403, "inconsist": 403, "canon": 403, "etdata": 403, "838": 403, "paneleffectsresult": [403, 513, 616, 702], "0x2aeec70b7f0": 403, "tedata": 403, "quit": 403, "fe_b": 403, "atlant": 403, "refin": 403, "chrysler": 403, "diamond": 403, "electr": 403, "goodyear": 403, "ibm": 403, "steel": 403, "oil": 403, "westinghous": 403, "9461": 403, "9429": 403, "rmse": 403, "2995": 403, "302": 403, "6388": 403, "coef": 403, "0880": 403, "1323": 403, "2776": [403, 714, 716], "3425": 403, "94": 403, "1637": 403, "127": 403, "6652": 403, "60": [403, 716], "3834": 403, "3382": 403, "6771": 403, "2138": 403, "7520": 403, "9436": 403, "88": [403, 716], "3806": 403, "2393": 403, "4613": 403, "264": [403, 714], "8953": 403, "0871": [403, 716], "7209": 403, "2801": 403, "3043": 403, "9080": 403, "66": [403, 716], "6363": [403, 714], "3788": 403, "98": 403, "7389": 403, "5338": 403, "5820": 403, "3792": 403, "8749": 403, "6852": 403, "5212": 403, "122": [403, 716], "4829": 403, "9595": 403, "6023": 403, "173": [403, 714], "3636": 403, "9660": 403, "3575": 403, "9683": 403, "3092": 403, "0339": 403, "8942": 403, "0424": 403, "5782": 403, "2978": 403, "7219": 403, "5655": [403, 714], "entity_id": [404, 412, 420, 438, 446], "extra_df": [404, 412, 420, 438, 446], "consum": [404, 412, 420, 438, 446], "irrespect": [404, 412, 420, 438, 446], "xi_t": [404, 420], "s_i": 404, "ij": [404, 714, 718, 774, 801, 824, 836, 858], "i0": 404, "group_debia": [412, 413, 720], "roger": [412, 766, 792], "intersect": 412, "driscol": [420, 504, 513, 523, 531], "kraai": [420, 504, 513, 523, 531], "n_t": 420, "_t": [420, 495], "disabl": 428, "cast": 454, "typeerror": 454, "valueerror": [454, 707], "wrong": 454, "deep": 455, "return_panel": 458, "low_memori": [458, 513], "boolean": [459, 504, 513, 523, 531], "hashabl": [461, 474, 478, 480, 886], "groupbi": [464, 714], "_panel": 472, "mi": [479, 714], "legaci": 479, "shim": 479, "logic": 479, "major_axi": 480, "minor_axi": 480, "proport": [487, 490, 495, 498, 503, 506, 511, 515, 522, 525, 530, 533, 714, 715], "coerc": [488, 490, 498, 504, 506, 513, 515, 523, 525, 531, 533], "conform": [490, 498, 506, 515, 525, 533], "numer": [490, 498, 506, 511, 515, 522, 525, 533, 875], "unstabl": [490, 498, 506, 511, 515, 522, 525, 533], "generate_panel_data": [490, 498, 506, 515, 525, 533], "panel_data": [490, 498, 506, 515, 525, 533], "map": [493, 501, 509, 519, 528, 536, 714, 763, 768, 772, 774, 782, 789, 794, 798, 880], "reformat": [494, 502, 510, 520, 529, 537], "made": [495, 552, 588, 641, 676, 716], "scenario": 504, "gamma_t": 511, "gamma_i": 511, "arbitrari": [511, 714, 718, 749], "u_i": 530, "small_sampl": 531, "randomeffectsresult": [531, 616, 702], "plu": [547, 582, 636, 671], "fill": [550, 585, 639, 674], "rss_r": [551, 587, 640, 675], "rss_u": [551, 587, 640, 675], "df_u": [551, 587, 640, 675], "unrestrict": [551, 587, 640, 675, 718], "df_": 586, "panelmodelcomparison": 702, "namedtupl": [703, 710], "alia": [704, 706, 708, 709], "field": [704, 706, 708, 709], "occurr": 705, "9223372036854775807": 707, "971": 710, "rng": 710, "panelmodeldata": 710, "explanatori": 710, "seed": 710, "deriv": 710, "intention": 712, "intent": 712, "multivari": [712, 770, 796], "badi": 713, "wilei": 713, "son": 713, "2008": 713, "svetlana": 713, "spuriou": 713, "paper": 713, "baum": 713, "christoph": 713, "schaffer": 713, "steven": 713, "stillman": 713, "routin": 713, "2007": 713, "465": 713, "506": 713, "colin": 713, "jonah": 713, "gelbach": 713, "dougla": 713, "miller": 713, "multiwai": 713, "2011": 713, "238": 713, "249": 713, "pravin": 713, "cambridg": 713, "2005": 713, "adrian": 713, "vol": 713, "station": 713, "tx": [713, 714], "2009": 713, "revis": 713, "edit": [713, 714], "princeton": 713, "william": [713, 801, 814, 836, 848], "pearson": [713, 801, 814, 836, 848], "2003": [713, 801, 814, 836, 848], "henningsen": [713, 718], "hamann": 713, "systemfit": 713, "softwar": 713, "doi": 713, "dx": 713, "org": 713, "18637": 713, "jss": 713, "v023": 713, "i04": 713, "jagannathan": 713, "ravi": 713, "georgio": 713, "skoulaki": 713, "zhenyu": 713, "wang": 713, "470": 713, "481": 713, "whitnei": 713, "kenneth": 713, "631": 713, "statacorp": 713, "2013": 713, "mit": 713, "2010": [713, 714], "modern": 713, "western": 713, "pub": 713, "2012": 713, "compris": 714, "omega": [714, 718, 720, 724, 727, 730, 735, 739, 743, 763, 789, 828, 862], "epsilon_j": 714, "benefici": 714, "munnel": 714, "gdp": [714, 715], "unemploy": 714, "gf": 714, "al": 714, "fl": 714, "la": 714, "mw": 714, "il": 714, "IN": 714, "ky": 714, "mn": 714, "oh": 714, "wi": 714, "ma": 714, "de": 714, "md": 714, "nj": 714, "ny": 714, "pa": 714, "va": 714, "mt": 714, "nd": 714, "sd": 714, "wy": 714, "ne": 714, "ct": 714, "me": 714, "nh": 714, "ri": 714, "vt": 714, "ga": 714, "nc": 714, "sc": 714, "tn": 714, "wv": 714, "sw": 714, "az": 714, "nv": 714, "nm": 714, "ut": 714, "cn": 714, "ak": 714, "ia": 714, "mo": 714, "ok": 714, "wc": 714, "ca": 714, "OR": 714, "def": 714, "map_region": 714, "st_abb": 714, "total_emp": 714, "emp_shar": 714, "weighed_unemp": 714, "unemp": 714, "agg_data": 714, "gsp": 714, "pc": 714, "hwy": 714, "water": 714, "complex": 714, "ordereddictionari": 714, "mod_data": 714, "region_data": 714, "lngsp": 714, "lnpc": 714, "lnhwy": 714, "lnwater": 714, "lnutil": 714, "lnemp": 714, "gain": [714, 717, 718, 801, 814, 836, 848], "inspect": 714, "diag": 714, "pyplot": 714, "plt": 714, "vmax": 714, "style": 714, "3f": 714, "nbsp": 714, "447": 714, "547": 714, "525": 714, "425": 714, "763": 714, "167": 714, "325": 714, "697": 714, "489": 714, "132": 714, "565": 714, "537": 714, "343": 714, "130": 714, "505": 714, "574": 714, "037": 714, "241": 714, "322": 714, "351": 714, "058": 714, "091": 714, "259": 714, "783": 714, "269": 714, "388": 714, "713": 714, "366": 714, "350": 714, "298": 714, "seen": 714, "ipython": 714, "imag": 714, "display_png": 714, "system_correct": 714, "png": 714, "as_text": 714, "split": 714, "9937": 714, "9988": 714, "judg": [714, 715, 716, 824, 828, 858, 862], "dhryme": [714, 715, 716, 828, 862], "num": [714, 715, 716, 717], "310": 714, "4680": 714, "723": 714, "1424": 714, "4117": 714, "1580": 714, "4800": 714, "0780": 714, "8856": 714, "5169": 714, "6480": 714, "8987": 714, "8725": 714, "1785": [714, 715], "0607": 714, "9399": 714, "0595": [714, 716], "2975": 714, "1898": 714, "3744": 714, "1774": 714, "4559": 714, "9237": 714, "9533": 714, "0847": 714, "252": 714, "1193": [714, 716], "5007": 714, "1334": 714, "0072": 714, "9979": 714, "1273": 714, "0389": 714, "0766": 714, "0858": 714, "8929": 714, "3719": 714, "0916": 714, "2449": 714, "1312": 714, "0258": 714, "3050": 714, "3819": 714, "1195": 714, "0611": [714, 716], "2240": 714, "0261": 714, "2558": 714, "0161": 714, "5216": 714, "1107": 714, "7102": 714, "3045": 714, "7386": 714, "3439": 714, "3723": 714, "7051": 714, "0156": 714, "equation_label": [714, 715], "coast": 714, "9900": 714, "2862": 714, "9602": 714, "5675": 714, "5704": 714, "8100": 714, "7303": 714, "1699": 714, "8500": 714, "0643": 714, "3500": 714, "1317": 714, "1138": 714, "1569": 714, "3547": [714, 715], "3470": 714, "1733": 714, "0020": [714, 716], "6867": [714, 715], "0895": 714, "1928": 714, "8471": 714, "8204": 714, "0696": 714, "1708": 714, "7349": 714, "4043": 714, "4180": 714, "append": 714, "886": 714, "178": 714, "190": 714, "953": 714, "003": 714, "083": 714, "077": 714, "136": [714, 716], "522": 714, "539": 714, "016": 714, "960": 714, "170": [714, 716], "347": 714, "090": 714, "070": 714, "463": 714, "115": 714, "180": 714, "262": 714, "079": 714, "001": 714, "294": 714, "118": [714, 716], "557": 714, "494": 714, "020": 714, "616": [714, 715, 716, 717], "311": 714, "060": 714, "659": 714, "018": 714, "162": 714, "063": 714, "641": 714, "081": 714, "281": 714, "620": 714, "008": 714, "096": 714, "612": 714, "694": 714, "062": 714, "031": 714, "405": 714, "295": 714, "321": 714, "029": 714, "stronger": 714, "violat": 714, "seem": 714, "567": 714, "002": 714, "101": 714, "358": 714, "805": 714, "007": 714, "028": 714, "164": 714, "075": 714, "169": [714, 716], "637": 714, "362": 714, "017": 714, "998": 714, "590": 714, "174": 714, "226": 714, "917": 714, "994": 714, "378": 714, "153": 714, "306": 714, "533": 714, "344": 714, "005": 714, "999": 714, "969": [714, 716], "380": 714, "855": 714, "778": 714, "673": 714, "026": 714, "986": 714, "927": 714, "043": 714, "773": 714, "111": [714, 716], "604": 714, "717": 714, "356": 714, "621": 714, "386": 714, "546": 714, "475": 714, "995": 714, "std_error": 714, "se": 714, "002124": 714, "301235": 714, "200966": 714, "142355": 714, "163546": 714, "165995": 714, "076637": 714, "085831": 714, "294855": 714, "205417": 714, "169950": 714, "091865": 714, "152601": 714, "084031": 714, "114834": 714, "048489": 714, "020407": 714, "285621": 714, "118316": 714, "131329": 714, "377570": 714, "167307": 714, "310861": 714, "080893": 714, "042818": 714, "279472": 714, "063212": 714, "104344": 714, "233403": 714, "206248": 714, "095886": 714, "101564": 714, "385885": 714, "211083": 714, "294570": 714, "090104": 714, "fring": [714, 715, 717], "benefit": [714, 715, 717], "censor": [714, 715], "fdata": 714, "441": 714, "457": 714, "annearn": 714, "hrearn": [714, 715, 717], "nrtheast": [714, 715], "northeast": 714, "nrthcen": [714, 715], "north": 714, "central": 714, "offic": 714, "annhr": 714, "ind1": 714, "ind2": 714, "ind3": 714, "ind4": 714, "ind5": 714, "ind6": 714, "ind7": 714, "ind8": 714, "ind9": 714, "vacdai": 714, "vac": 714, "sicklv": 714, "sick": 714, "pension": 714, "annben": 714, "hrben": [714, 715, 717], "annhrssq": 714, "beratio": 714, "lannhr": 714, "tenuresq": 714, "lannearn": 714, "peratio": 714, "vserat": 714, "bring": 714, "fmod_data": 714, "fmod": 714, "2087": 714, "2926": 714, "4822": 714, "6321": 714, "2153": 714, "1658": 714, "2502": 714, "4588": 714, "0684": 714, "7085": 714, "3248": 714, "5929": 714, "0758": 714, "0567": 714, "3367": 714, "1813": 714, "1870": 714, "4274": 714, "0829": 714, "3276": 714, "1843": 714, "5640": 714, "8080": 714, "4035": 714, "0026": 714, "5988": 714, "4566": 714, "5459": 714, "8365": 714, "4029": 714, "5265": 714, "6132": 714, "1508": 714, "5993": 714, "9201": 714, "0239": 714, "5501": 714, "1565": 714, "2475": [714, 716], "7145": 714, "6424": 714, "5540": 714, "1202": [714, 716], "1678": 714, "4526": 714, "6054": 714, "8844": 714, "0458": 714, "3275": 714, "7847": 714, "3938": 714, "5322": 714, "5565": 714, "8897": 714, "1453": 714, "1225": 714, "6049": 714, "0768": 714, "0082": 714, "3896": 714, "0608": 714, "3259": 714, "0093": [714, 716], "3965": 714, "0536": 714, "4011": 714, "0730": 714, "3659": 714, "0482": 714, "5839": 714, "2713": 714, "4605": [714, 715], "0227": 714, "0653": 714, "3476": 714, "7282": 714, "1052": 714, "7918": 714, "4285": 714, "1972": 714, "0380": 714, "5776": 714, "5635": 714, "1669": 714, "0909": 714, "0579": 714, "2418": 714, "0390": 714, "1547": 714, "0902": 714, "2453": 714, "2130": 714, "0517": 714, "2683": 714, "0471": 714, "6985": 714, "3606": 714, "though": 714, "typic": 714, "exog_earn": 714, "exog_ben": 714, "1685": 714, "2762": 714, "4504": 714, "5240": 714, "3246": 714, "0201": 714, "6520": 714, "3959": 714, "5000": 714, "2987": 714, "3657": 714, "6342": 714, "0212": 714, "0522": 714, "4058": 714, "6849": 714, "1234": 714, "1043": 714, "3928": 714, "8116": 714, "0049": 714, "3345": 714, "8741": 714, "4305": 714, "2411": 714, "2146": 714, "3780": 714, "3095": [714, 716], "1320": 714, "5845": 714, "9368": 714, "8231": 714, "0535": 714, "5927": 714, "0791": 714, "8927": 714, "0948": 714, "9114": 714, "0130": 714, "2409": 714, "6275": 714, "3766": 714, "9259": 714, "2835": 714, "4698": 714, "2141": 714, "0433": [714, 715], "1292": 714, "2990": 714, "via": 714, "fmod_r": 714, "2749": 714, "4532": 714, "5147": 714, "3161": 714, "0206": 714, "6428": 714, "3867": 714, "5001": 714, "3004": 714, "3658": 714, "0211": 714, "4044": 714, "6859": 714, "1233": 714, "8760": 714, "8115": 714, "5314": 714, "2342": 714, "2171": 714, "3752": 714, "3124": 714, "1191": 714, "9145": 714, "0556": 714, "2648": 714, "9947": 714, "0527": 714, "5919": 714, "0792": 714, "9004": 714, "0635": 714, "9213": 714, "8528": 714, "0492": [714, 715], "2189": 714, "0307": 714, "0677": 714, "6025": 714, "3771": 714, "9364": 714, "8627": 714, "1258": 714, "2956": 714, "fres_het": 714, "8703": 714, "9002": 714, "2297": 714, "8183": 714, "0809": 714, "3413": 714, "6586": 714, "2270": 714, "9257": 714, "5507": 714, "5819": 714, "0083": 714, "0148": 714, "2857": 714, "8647": 714, "5443": 714, "6644": 714, "5273": 714, "3110": 714, "5678": 714, "4992": 714, "4921": 714, "3002": 714, "1674": 714, "0966": 714, "6087": 714, "6111": 714, "7768": 714, "0632": 714, "0949": 714, "0376": 714, "4121": 714, "0514": 714, "3342": 714, "2760": 714, "4773": 714, "0397": [714, 716], "3975": 714, "1363": [714, 716], "2918": 714, "hac_r": 714, "0048": [714, 715], "5120": 714, "0120": [714, 716], "4933": 714, "5547": 714, "1391": 714, "3093": 714, "6907": 714, "0925": 714, "9263": 714, "4694": 714, "4270": 714, "5486": 714, "5833": 714, "2637": 714, "5875": 714, "6211": 714, "2657": 714, "4750": 714, "4065": 714, "4813": 714, "3520": 714, "0187": 714, "1887": 714, "0753": 714, "1344": 714, "1228": 714, "0866": [714, 716], "5596": 714, "0976": 714, "0064": [714, 715], "0386": 714, "9026": 714, "5160": 714, "0318": 714, "0669": 714, "9161": 714, "0705": 714, "3407": [714, 717], "2384": 714, "5148": 714, "7117": 714, "1010": 714, "3271": 714, "enter": 714, "983476381": 714, "28390328": 714, "23829810": 714, "random_clust": 714, "51": [714, 716], "clustered_r": 714, "8501": 714, "9692": 714, "1901": 714, "8579": 714, "3424": 714, "6576": 714, "2285": 714, "0926": 714, "9262": 714, "4690": 714, "4267": 714, "5479": 714, "5837": 714, "2696": 714, "5759": 714, "6327": 714, "5181": 714, "0312": 714, "3024": 714, "4812": 714, "4701": 714, "4083": 714, "0533": 714, "6435": 714, "0342": 714, "6121": 714, "8547": 714, "4288": 714, "0145": 714, "0375": 714, "6793": 714, "7036": 714, "2777": 714, "1717": 714, "2737": 714, "4795": 714, "0317": 714, "7496": 714, "1519": 714, "equicorrel": 714, "avg_corr": 714, "ey": 714, "rho": [714, 718, 801, 836], "sigma_pr": 714, "mod_pre_sigma": 714, "res_pr": 714, "9966": 714, "9945": 714, "549": 714, "9753": 714, "8200": 714, "7883": 714, "739": 714, "1011": 714, "2727": 714, "3708": 714, "7185": 714, "5065": 714, "7087": 714, "9882": 714, "9582": 714, "3098": 714, "1134": 714, "6971": 714, "5016": 714, "1736": [714, 716], "3318": 714, "7720": 714, "6685": 714, "5190": 714, "2040": 714, "8494": 714, "1426": 714, "9557": [714, 716], "5316": 714, "1671": 714, "6466": 714, "full_cov": [714, 766, 792], "param_nam": [714, 764, 775, 790], "underscor": 714, "gf_intercept": 714, "gf_lnpc": 714, "gf_lnhwy": 714, "gf_lnwater": 714, "gf_lnutil": 714, "gf_lnemp": 714, "gf_unemp": 714, "sw_intercept": 714, "sw_lnpc": 714, "sw_lnhwy": 714, "sw_lnwater": 714, "sw_lnutil": 714, "sw_lnemp": 714, "sw_unemp": 714, "enforc": [714, 718], "rest": 714, "wc_unemp": 714, "mt_unemp": 714, "ne_unemp": 714, "ma_unemp": 714, "so_unemp": 714, "rest0": 714, "rest1": 714, "rest2": 714, "rest3": 714, "rest4": 714, "rest5": 714, "rest6": 714, "rest7": 714, "mw_unemp": 714, "cn_unemp": 714, "add_constraint": 714, "constrained_r": 714, "005801": 714, "complic": [714, 715], "idea": 714, "singular": [714, 718], "reset_constraint": 714, "9777": 714, "9891": 714, "2732": 714, "2159": 714, "2656": 714, "2057": 714, "6963": 714, "3639": 714, "3238": 714, "4041": 714, "3103": 714, "141": 714, "2557": 714, "3649": 714, "3615": 714, "0591": 714, "0166": 714, "466": 714, "1408": 714, "6142": 714, "752": 714, "6628": 714, "939": 714, "0117": 714, "2869": 714, "2201": [714, 715], "3034": 714, "1924": 714, "7183": 714, "capm": 714, "mv": 714, "mv_ol": 714, "multivariate_l": 714, "mv_ols_r": 714, "6564": 714, "9773": 714, "1608": 714, "2457": 714, "3736": 714, "0403": 714, "2947": 714, "0711": 714, "0276": 714, "879": 714, "0171": 714, "1251": 714, "5142": 714, "0538": 714, "019": 714, "9965": 714, "1111": [714, 715], "8787": 714, "9861": 714, "0126": 714, "376": 714, "9615": 714, "4953": 714, "8472": 714, "0162": [714, 716], "204": [714, 716], "8154": 714, "8790": 714, "5167": 714, "9851": 714, "515": 714, "9337": 714, "0366": 714, "mostli": 715, "6951": 715, "2197": 715, "1873": 715, "3775": 715, "6950": 715, "8605": 715, "0445": 715, "5974": 715, "0228": 715, "0473": [715, 716], "4326": 715, "3682": 715, "0474": 715, "4612": 715, "1775": 715, "0586": 715, "0289": 715, "2923": 715, "0714": 715, "7132": 715, "0867": 715, "2624": 715, "0176": 715, "0621": [715, 716], "3074": 715, "2650": 715, "2518": 715, "0490": 715, "1435": 715, "1559": 715, "3478": 715, "9280": 715, "4247": 715, "5260": 715, "1270": 715, "1714": 715, "0213": 715, "4600": 715, "7127": 715, "4473": 715, "5894": 715, "1640": 715, "4472": 715, "3920": 715, "1410": 715, "2539": 715, "3210": 715, "8899": 715, "8408": 715, "1247": 715, "6551": 715, "braces_formula": 715, "braces_mod": 715, "braces_r": 715, "meaningless": 715, "labeled_formula": 715, "labels_mod": 715, "labeled_r": 715, "unlabel": 715, "foral": 715, "random_weight": 715, "chisquar": 715, "weighted_mod": 715, "7383": 715, "2348": 715, "0294": 715, "0469": 715, "0237": 715, "3243": 715, "3438": 715, "0493": [715, 716], "9710": 715, "2471": 715, "4405": 715, "0529": 715, "9743": 715, "3669": 715, "1595": 715, "0648": 715, "9863": 715, "3207": 715, "0665": 715, "1670": 715, "0560": 715, "9830": 715, "2768": 715, "0573": 715, "2773": 715, "1867": 715, "3679": 715, "3964": 715, "1029": 715, "8534": 715, "1948": 715, "5980": 715, "1204": 715, "5470": 715, "5844": 715, "5519": 715, "3111": 715, "4010": [715, 716], "1555": 715, "5255": 715, "1255": 715, "6760": 715, "3618": 715, "8683": 715, "3852": 715, "7458": 715, "3647": 715, "7876": 715, "eqnarrai": 716, "beta_0": 716, "beta_3": 716, "beta_4": 716, "beta_5": 716, "h_i": 716, "gamma_2": 716, "gamma_3": 716, "gamma_4": 716, "morz": 716, "hours_mod": 716, "hours_r": 716, "1903": 716, "1807": 716, "99": 716, "0427": 716, "195": 716, "2666": 716, "429": 716, "2770": 716, "0952": 716, "1261": 716, "96": 716, "2806": 716, "7790": 716, "412": 716, "308": 716, "445": 716, "6787": 716, "7137": 716, "535": 716, "6449": 716, "1626": 716, "472": 716, "4442": 716, "700": 716, "2551": 716, "lwage_mod": 716, "lwage_r": 716, "7582": 716, "7559": 716, "1362": 716, "0875": 716, "3892": 716, "0557": 716, "0299": 716, "7501": 716, "0801": 716, "1110": 716, "4898": 716, "8666": 716, "3862": 716, "system_2sl": 716, "system_2sls_r": 716, "1276": 716, "0961": 716, "7279": 716, "system_3sl": 716, "system_3sls_r": 716, "7778": 716, "052": 716, "2870": 716, "0222": 716, "716": 716, "651": 716, "5456": 716, "4617": 716, "0138": 716, "7822": 716, "521": 716, "1563": 716, "2476": 716, "4136": 716, "4646": 716, "2405": 716, "124": 716, "2969": 716, "1872": 716, "461": 716, "968": 716, "0859": 716, "3864": 716, "0546": 716, "1171": 716, "0550": 716, "0295": [716, 717], "8622": 716, "1128": 716, "0794": 716, "programmat": 716, "weaker": 716, "condition": [716, 718], "system_gmm": 716, "system_gmm_r": 716, "0121": 716, "7776": 716, "7268": 716, "038": 716, "2876": 716, "5440": 716, "4626": 716, "7868": 716, "519": 716, "1564": 716, "4149": 716, "4631": 716, "1742": 716, "2403": 716, "2925": 716, "3866": 716, "7540": 716, "meaningfulli": 716, "0345": 716, "2256": 716, "0361": 716, "508": 716, "0572": 716, "231": 716, "5947": 716, "027": 716, "5086": 716, "2864": 716, "768": 716, "227": 716, "216": 716, "197": 716, "2578": 716, "3146": 716, "5538": 716, "674": 716, "1587": 716, "1933": 716, "2618": 716, "771": 716, "69": 716, "0999": 716, "1338": 716, "0720": 716, "0363": 716, "9840": 716, "8475": 716, "0647": 716, "133e": 716, "2298": 716, "2188": 716, "y_1": [716, 763, 774, 789], "y_2": [716, 763, 774, 789], "x_1": [716, 763, 774, 789], "epsilon_1": 716, "x_2": [716, 763, 774, 789], "substitut": 716, "epsilon_2": 716, "default_rng": 716, "20220224": 716, "50000": 716, "y2": [716, 768, 779, 794], "y1": [716, 768, 779, 794], "in_sampl": 716, "10000": 716, "oo": 716, "9992": 716, "9868": 716, "0116": 716, "9877": 716, "9970": 716, "158": 716, "9847": 716, "9809": 716, "59": 716, "9982": 716, "9637": 716, "40000": 716, "125377": 716, "024812": 716, "40001": 716, "489893": 716, "707565": 716, "40002": 716, "189191": 716, "727702": 716, "40003": 716, "081779": 716, "756181": 716, "40004": 716, "628805": 716, "227368": 716, "49995": 716, "293820": 716, "140007": 716, "49996": 716, "462017": 716, "848988": 716, "49997": 716, "698136": 716, "510755": 716, "49998": 716, "862183": 716, "732983": 716, "49999": 716, "118024": 716, "147715": 716, "y1_pred": 716, "y1_x1": 716, "y1_y2": 716, "y2_pred": 716, "y2_x2": 716, "y2_y1": 716, "pred_df": 716, "own": 717, "entri": [717, 768, 779, 794], "0757": 717, "sat": 717, "jun": 717, "2839": 717, "573": 717, "6161": 717, "9517": 717, "1163": 717, "0186": 717, "2478": 717, "0798": 717, "1528": 717, "9598": 717, "3372": 717, "0862": 717, "6390": 717, "5509": 717, "7270": 717, "5617": 717, "5743": 717, "0062": 717, "0240": 717, "0393": 717, "systemresult": [717, 766, 792], "0x282ca8f7b70": 717, "sure": [717, 789], "cccc": [718, 763, 774, 789], "fgl": [718, 763, 768, 774, 789, 794], "nk": 718, "odot": 718, "iota_": 718, "psi_": 718, "1k": 718, "2k": 718, "kk": 718, "needless": 718, "found": [718, 886], "ki": [718, 749, 757], "ji": [718, 749, 757], "widehat": 718, "immedi": 718, "breusch": [718, 801, 836], "pagan": [718, 801, 836], "ssr_": [718, 828, 862], "tss_": [718, 828, 862], "uncent": 718, "1977": 718, "iota": 718, "formul": 718, "tr": [718, 828, 862], "psi": 718, "full_sigma": [720, 735, 739, 743], "linearconstraint": [720, 724, 727, 730, 735, 739, 743, 765, 776, 791], "intarrai": 720, "ndepend": [720, 735, 739, 743], "cov_clust": 720, "group_debias_coeffici": 720, "i_n": [727, 753, 763, 789], "neqn": 756, "_ig_": 757, "w_j": 757, "nequat": 762, "empti": [763, 774, 887], "prespecifi": [763, 768, 774, 789, 794], "vertic": [763, 774, 789], "y_k": [763, 774, 789], "x_k": [763, 774, 789], "nconstraint": [764, 775, 790], "nparamet": [764, 775, 790], "con": [765, 776, 791], "repres": [768, 779, 794], "curli": [768, 779, 794], "brace": [768, 779, 794], "encapsul": [768, 779, 794], "x1_1": [768, 779, 794], "x1_2": [768, 779], "x2_1": [768, 779, 794], "x2_2": [768, 779], "randn": [768, 779, 794], "eq1": [768, 779, 794], "eq2": [768, 779, 794], "ndep": [770, 796], "At": 770, "fir": [772, 782, 798], "assembl": [772, 782, 798, 820, 854], "eqn": [772, 782, 798, 820, 854], "beta_j": 774, "gmmsystemresult": 777, "num_param": 784, "require_panda": 784, "back": 785, "beta_c": 785, "constrain": [786, 788], "lr": [814, 848], "sum_i": [824, 828, 858, 862], "sum_j": [824, 828, 858, 862], "denomin": [824, 858], "_ij": [828, 862], "sum__i": [828, 862], "why": 870, "df_denom": 875, "holder": 875, "statement": 875, "kwarg": [880, 889], "shallow": 882, "itemsview": 884, "keyerror": [886, 887], "supportskeysandgetitem": 889, "lack": 889, "valuesview": 890}, "objects": {"linearmodels.asset_pricing": [[74, 0, 0, 1, "covariance", ""], [74, 0, 0, 1, "model", ""], [74, 0, 0, 1, "results", ""]], "linearmodels.asset_pricing.covariance": [[0, 1, 1, 0, "HeteroskedasticCovariance", "Heteroskedasticity robust covariance estimator"], [7, 1, 1, 0, "KernelCovariance", "Heteroskedasticity-autocorrelation (HAC) robust covariance estimator"]], "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.__init__": [[0, 2, 2, 0, "center", "Flag indicating to center the scores when computing the covariance. Default is true."], [0, 2, 2, 0, "debiased", "Flag indicating to use a debiased estimator. Default is False."], [0, 2, 2, 0, "df", "Degree of freedom value ot use if debiasing. Default is 0."], [0, 2, 2, 0, "inv_jacobian", "Inverse jacobian.  One and only one of jacobian and inv_jacobian must be provided. Default is None."], [0, 2, 2, 0, "jacobian", "Jacobian.  One and only one of jacobian and inv_jacobian must be provided"], [0, 2, 2, 0, "xe", "Scores/moment conditions"]], "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance": [[1, 3, 1, 0, "config", ""], [2, 3, 1, 0, "cov", "Compute parameter covariance"], [3, 3, 1, 0, "inv_jacobian", "Inverse Jacobian"], [4, 3, 1, 0, "jacobian", "The Jacobian"], [5, 3, 1, 0, "s", "Score/moment condition covariance"], [6, 3, 1, 0, "square", "Flag indicating if jacobian is square"]], "linearmodels.asset_pricing.covariance.KernelCovariance.__init__": [[7, 2, 2, 0, "bandwidth", "Non-negative integer bandwidth. If None, the optimal bandwidth is estimated."], [7, 2, 2, 0, "center", "Flag indicating to center the scores when computing the covariance."], [7, 2, 2, 0, "debiased", "Flag indicating to use a debiased estimator."], [7, 2, 2, 0, "df", "Degree of freedom value ot use if debiasing."], [7, 2, 2, 0, "inv_jacobian", "Inverse jacobian.  One and only one of jacobian and inv_jacobian must be provided."], [7, 2, 2, 0, "jacobian", "Jacobian.  One and only one of jacobian and inv_jacobian must be provided."], [7, 2, 2, 0, "kernel", "Kernel name. See notes for available kernels. The default is \"bartlett\"."], [7, 2, 2, 0, "xe", "The scores (moment) conditions."]], "linearmodels.asset_pricing.covariance.KernelCovariance": [[8, 3, 1, 0, "bandwidth", "Bandwidth used in estimation"], [9, 3, 1, 0, "config", ""], [10, 3, 1, 0, "cov", "Compute parameter covariance"], [11, 3, 1, 0, "inv_jacobian", "Inverse Jacobian"], [12, 3, 1, 0, "jacobian", "The Jacobian"], [13, 3, 1, 0, "kernel", "Kernel used in estimation"], [14, 3, 1, 0, "s", "Score/moment condition covariance"], [15, 3, 1, 0, "square", "Flag indicating if jacobian is square"]], "linearmodels.asset_pricing.model": [[16, 1, 1, 0, "LinearFactorModel", "Linear factor model estimator"], [20, 1, 1, 0, "LinearFactorModelGMM", "GMM estimator of Linear factor models"], [24, 1, 1, 0, "TradedFactorModel", "Linear factor models estimator applicable to traded factors"]], "linearmodels.asset_pricing.model.LinearFactorModel.__init__": [[16, 2, 2, 0, "factors", "Priced factor returns (nobs by nfactor)"], [16, 2, 2, 0, "portfolios", "Test portfolio returns (nobs by nportfolio)"], [16, 2, 2, 0, "risk_free", "Flag indicating whether the risk-free rate should be estimated from returns along other risk premia.  If False, the returns are assumed to be excess returns using the correct risk-free rate."], [16, 2, 2, 0, "sigma", "Positive definite residual covariance (nportfolio by nportfolio)"]], "linearmodels.asset_pricing.model.LinearFactorModel": [[17, 4, 1, 0, "fit", "Estimate model parameters"], [18, 3, 1, 0, "formula", ""], [19, 4, 1, 0, "from_formula", "Formula modified for the syntax described in the notes"]], "linearmodels.asset_pricing.model.LinearFactorModel.fit": [[17, 2, 2, 0, "cov_type", "Name of covariance estimator"], [17, 2, 2, 0, "debiased", "Flag indicating whether to debias the covariance estimator using a degree of freedom adjustment"]], "linearmodels.asset_pricing.model.LinearFactorModel.from_formula": [[19, 2, 2, 0, "data", "DataFrame containing the variables used in the formula"], [19, 2, 2, 0, "formula", "Formula modified for the syntax described in the notes"], [19, 2, 2, 0, "portfolios", "Portfolios to be used in the model. If provided, must use formula syntax containing only factors."], [19, 2, 2, 0, "risk_free", "Flag indicating whether the risk-free rate should be estimated from returns along other risk premia.  If False, the returns are assumed to be excess returns using the correct risk-free rate."], [19, 2, 2, 0, "sigma", "Positive definite residual covariance (nportfolio by nportfolio)"]], "linearmodels.asset_pricing.model.LinearFactorModelGMM.__init__": [[20, 2, 2, 0, "factors", "Priced factors values (nobs by nfactor)"], [20, 2, 2, 0, "portfolios", "Test portfolio returns (nobs by nportfolio)"], [20, 2, 2, 0, "risk_free", "Flag indicating whether the risk-free rate should be estimated from returns along other risk premia.  If False, the returns are assumed to be excess returns using the correct risk-free rate."]], "linearmodels.asset_pricing.model.LinearFactorModelGMM": [[21, 4, 1, 0, "fit", "Estimate model parameters"], [22, 3, 1, 0, "formula", ""], [23, 4, 1, 0, "from_formula", "Formula modified for the syntax described in the notes"]], "linearmodels.asset_pricing.model.LinearFactorModelGMM.fit": [[21, 2, 2, 0, "center", "Flag indicating to center the moment conditions before computing the weighting matrix."], [21, 2, 2, 0, "cov_type", "Name of covariance estimator"], [21, 2, 2, 0, "debiased", "Flag indicating whether to debias the covariance estimator using a degree of freedom adjustment"], [21, 2, 2, 0, "disp", "Number of iterations between printed update. 0 or negative values suppresses output"], [21, 2, 2, 0, "max_iter", "Maximum number of iterations when minimizing objective. Must be positive."], [21, 2, 2, 0, "opt_options", "Additional options to pass to scipy.optimize.minimize when optimizing the objective function. If not provided, defers to scipy to choose an appropriate optimizer. All minimize inputs except fun, x0, and args can be overridden."], [21, 2, 2, 0, "starting", "Starting values to use in optimization.  If not provided, 2SLS estimates are used."], [21, 2, 2, 0, "steps", "Number of steps to use when estimating parameters.  2 corresponds to the standard efficient GMM estimator. Higher values will iterate until convergence or up to the number of steps given"], [21, 2, 2, 0, "use_cue", "Flag indicating to use continuously updating estimator"]], "linearmodels.asset_pricing.model.LinearFactorModelGMM.from_formula": [[23, 2, 2, 0, "data", "DataFrame containing the variables used in the formula"], [23, 2, 2, 0, "formula", "Formula modified for the syntax described in the notes"], [23, 2, 2, 0, "portfolios", "Portfolios to be used in the model. If provided, must use formula syntax containing only factors."], [23, 2, 2, 0, "risk_free", "Flag indicating whether the risk-free rate should be estimated from returns along other risk premia.  If False, the returns are assumed to be excess returns using the correct risk-free rate."]], "linearmodels.asset_pricing.model.TradedFactorModel.__init__": [[24, 2, 2, 0, "factors", "Priced factor returns (nobs by nfactor)"], [24, 2, 2, 0, "portfolios", "Test portfolio returns (nobs by nportfolio)"]], "linearmodels.asset_pricing.model.TradedFactorModel": [[25, 4, 1, 0, "fit", "Estimate model parameters"], [26, 3, 1, 0, "formula", ""], [27, 4, 1, 0, "from_formula", "Formula modified for the syntax described in the notes"]], "linearmodels.asset_pricing.model.TradedFactorModel.fit": [[25, 2, 2, 0, "cov_type", "Name of covariance estimator"], [25, 2, 2, 0, "debiased", "Flag indicating whether to debias the covariance estimator using a degree of freedom adjustment"]], "linearmodels.asset_pricing.model.TradedFactorModel.from_formula": [[27, 2, 2, 0, "data", "DataFrame containing the variables used in the formula"], [27, 2, 2, 0, "formula", "Formula modified for the syntax described in the notes"], [27, 2, 2, 0, "portfolios", "Portfolios to be used in the model"]], "linearmodels.asset_pricing.results": [[28, 1, 1, 0, "GMMFactorModelResults", "alphas"], [49, 1, 1, 0, "LinearFactorModelResults", "Model results from a Linear Factor Model."]], "linearmodels.asset_pricing.results.GMMFactorModelResults": [[29, 3, 1, 0, "alphas", "Mispricing estimates"], [30, 3, 1, 0, "betas", "Estimated factor loadings"], [31, 3, 1, 0, "cov", "Estimated covariance of parameters"], [32, 3, 1, 0, "cov_estimator", "Type of covariance estimator used to compute covariance"], [33, 3, 1, 0, "full_summary", "Complete summary including factor loadings and mispricing measures"], [34, 3, 1, 0, "iterations", "Number of steps in GMM estimation"], [35, 3, 1, 0, "j_statistic", "Model J statistic"], [36, 3, 1, 0, "name", "Model type"], [37, 3, 1, 0, "nobs", "Number of observations"], [38, 3, 1, 0, "params", "Estimated parameters"], [39, 3, 1, 0, "pvalues", "Parameter p-vals. Uses t(df_resid) if debiased is True, else normal"], [40, 3, 1, 0, "residual_ss", "Residual sum of squares"], [41, 3, 1, 0, "risk_premia", "Estimated factor risk premia (lambda)"], [42, 3, 1, 0, "risk_premia_se", "Estimated factor risk premia standard errors"], [43, 3, 1, 0, "risk_premia_tstats", "Risk premia t-statistics"], [44, 3, 1, 0, "rsquared", "Coefficient of determination (R**2)"], [45, 3, 1, 0, "std_errors", "Estimated parameter standard errors"], [46, 3, 1, 0, "summary", "Model estimation summary."], [47, 3, 1, 0, "total_ss", "Total sum of squares"], [48, 3, 1, 0, "tstats", "Parameter t-statistics"]], "linearmodels.asset_pricing.results.LinearFactorModelResults.__init__": [[49, 2, 2, 0, "results", "A dictionary of results from the model estimation."]], "linearmodels.asset_pricing.results.LinearFactorModelResults": [[50, 3, 1, 0, "alphas", "Mispricing estimates"], [51, 3, 1, 0, "betas", "Estimated factor loadings"], [52, 3, 1, 0, "cov", "Estimated covariance of parameters"], [53, 3, 1, 0, "cov_estimator", "Type of covariance estimator used to compute covariance"], [54, 3, 1, 0, "full_summary", "Complete summary including factor loadings and mispricing measures"], [55, 3, 1, 0, "j_statistic", "Model J statistic"], [56, 3, 1, 0, "name", "Model type"], [57, 3, 1, 0, "nobs", "Number of observations"], [58, 3, 1, 0, "params", "Estimated parameters"], [59, 3, 1, 0, "pvalues", "Parameter p-vals. Uses t(df_resid) if debiased is True, else normal"], [60, 3, 1, 0, "residual_ss", "Residual sum of squares"], [61, 3, 1, 0, "risk_premia", "Estimated factor risk premia (lambda)"], [62, 3, 1, 0, "risk_premia_se", "Estimated factor risk premia standard errors"], [63, 3, 1, 0, "risk_premia_tstats", "Risk premia t-statistics"], [64, 3, 1, 0, "rsquared", "Coefficient of determination (R**2)"], [65, 3, 1, 0, "std_errors", "Estimated parameter standard errors"], [66, 3, 1, 0, "summary", "Model estimation summary."], [67, 3, 1, 0, "total_ss", "Total sum of squares"], [68, 3, 1, 0, "tstats", "Parameter t-statistics"]], "linearmodels.compat": [[80, 0, 0, 1, "statsmodels", ""]], "linearmodels.compat.statsmodels": [[81, 1, 1, 0, "Summary", "add_extra_txt(etext)"]], "linearmodels.compat.statsmodels.Summary": [[82, 4, 1, 0, "add_extra_txt", "add additional text that will be added at the end in text format"], [83, 4, 1, 0, "add_table_2cols", "Add a double table, 2 tables with one column merged horizontally"], [84, 4, 1, 0, "add_table_params", "create and add a table for the parameter estimates"], [85, 4, 1, 0, "as_csv", "return tables as string"], [86, 4, 1, 0, "as_html", "Return tables as string"], [87, 4, 1, 0, "as_latex", "return tables as string"], [88, 4, 1, 0, "as_text", "return tables as string"]], "linearmodels.compat.statsmodels.Summary.add_extra_txt": [[82, 2, 2, 0, "etext", "string with lines that are added to the text output."]], "linearmodels.compat.statsmodels.Summary.add_table_2cols": [[83, 2, 2, 0, "gleft", "elements for the left table, tuples are (name, value) pairs If gleft is None, then a default table is created"], [83, 2, 2, 0, "gright", "elements for the right table, tuples are (name, value) pairs"], [83, 2, 2, 0, "res", "some required information is directly taken from the result instance"], [83, 2, 2, 0, "title", "if None, then a default title is used."], [83, 2, 2, 0, "xname", "optional names for the exogenous variables, default is \"var_xx\". Must match the number of parameters in the model."], [83, 2, 2, 0, "yname", "optional name for the endogenous variable, default is \"y\""]], "linearmodels.compat.statsmodels.Summary.add_table_params": [[84, 2, 2, 0, "alpha", "significance level for the confidence intervals"], [84, 2, 2, 0, "res", "some required information is directly taken from the result instance"], [84, 2, 2, 0, "use_t", "indicator whether the p-values are based on the Student-t distribution (if True) or on the normal distribution (if False)"], [84, 2, 2, 0, "xname", "optional names for the exogenous variables, default is \"var_xx\""], [84, 2, 2, 0, "yname", "optional name for the endogenous variable, default is \"y\""]], "linearmodels.iv": [[395, 0, 0, 1, "absorbing", ""], [395, 0, 0, 1, "covariance", ""], [395, 0, 0, 1, "data", ""], [395, 0, 0, 1, "gmm", ""], [395, 0, 0, 1, "model", ""], [395, 0, 0, 1, "results", ""]], "linearmodels.iv.absorbing": [[91, 1, 1, 0, "AbsorbingLS", "Linear regression with high-dimensional effects"], [102, 1, 1, 0, "AbsorbingLSResults", "Results from IV estimation"], [134, 1, 1, 0, "AbsorbingRegressor", "Constructed weights sparse matrix from components"], [139, 1, 1, 0, "Interaction", "Class that simplifies specifying interactions"]], "linearmodels.iv.absorbing.AbsorbingLS.__init__": [[91, 2, 2, 0, "absorb", "The effects or continuous variables to absorb. When using a DataFrame, effects must be categorical variables. Other variable types are treated as continuous variables that should be absorbed. When using an Interaction, variables in the cat argument are treated as effects and variables in the cont argument are treated as continuous."], [91, 2, 2, 0, "dependent", "Endogenous variables (nobs by 1)"], [91, 2, 2, 0, "drop_absorbed", "Flag indicating whether to drop absorbed variables"], [91, 2, 2, 0, "exog", "Exogenous regressors  (nobs by nexog)"], [91, 2, 2, 0, "interactions", "Interactions containing both categorical and continuous variables.  Each interaction is constructed using the Cartesian product of the categorical variables to produce the dummy, which are then separately interacted with each continuous variable."], [91, 2, 2, 0, "weights", "Observation weights used in estimation"]], "linearmodels.iv.absorbing.AbsorbingLS": [[92, 3, 1, 0, "absorbed_dependent", "Dependent variable with effects absorbed"], [93, 3, 1, 0, "absorbed_exog", "Exogenous variables with effects absorbed"], [94, 3, 1, 0, "dependent", ""], [95, 3, 1, 0, "exog", ""], [96, 4, 1, 0, "fit", "Estimate model parameters"], [97, 3, 1, 0, "has_constant", ""], [98, 3, 1, 0, "instruments", ""], [99, 4, 1, 0, "resids", "Compute model residuals"], [100, 3, 1, 0, "weights", ""], [101, 4, 1, 0, "wresids", "Compute weighted model residuals"]], "linearmodels.iv.absorbing.AbsorbingLS.fit": [[96, 2, 2, 0, "absorb_options", "Dictionary of options to pass to the absorber. Passed to either scipy.sparse.linalg.lsmr or pyhdfe.create depending on the method used to absorb the absorbed regressors."], [96, 2, 2, 0, "cov_type", "Name of covariance estimator to use. Supported covariance estimators are:"], [96, 2, 2, 0, "debiased", "Flag indicating whether to debiased the covariance estimator using a degree of freedom adjustment."], [96, 2, 2, 0, "lsmr_options", "Options to ass to scipy.sparse.linalg.lsmr."], [96, 2, 2, 0, "method", "One of:"], [96, 2, 2, 0, "use_cache", "Flag indicating whether the variables, once purged from the absorbed variables and interactions, should be stored in the cache, and retrieved if available. Cache can dramatically speed up re-fitting large models when the set of absorbed variables and interactions are identical."]], "linearmodels.iv.absorbing.AbsorbingLS.resids": [[99, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.absorbing.AbsorbingLS.wresids": [[101, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.absorbing.AbsorbingLSResults.__init__": [[102, 2, 2, 0, "model", "The model used to estimate parameters."], [102, 2, 2, 0, "results", "A dictionary of results from the model estimation."]], "linearmodels.iv.absorbing.AbsorbingLSResults": [[103, 3, 1, 0, "absorbed_effects", "Fitted values from only absorbed terms"], [104, 3, 1, 0, "absorbed_rsquared", "Coefficient of determination (R**2), ignoring absorbed variables"], [105, 4, 1, 0, "conf_int", "Confidence interval construction"], [106, 3, 1, 0, "cov", "Estimated covariance of parameters"], [107, 3, 1, 0, "cov_config", "Parameter values from covariance estimator"], [108, 3, 1, 0, "cov_estimator", "Type of covariance estimator used to compute covariance"], [109, 3, 1, 0, "cov_type", "Covariance estimator used"], [110, 3, 1, 0, "debiased", "Flag indicating whether covariance uses a small-sample adjustment"], [111, 3, 1, 0, "df_absorbed", "Number of variables absorbed"], [112, 3, 1, 0, "df_model", "Model degree of freedom"], [113, 3, 1, 0, "df_resid", "Residual degree of freedom"], [114, 3, 1, 0, "f_statistic", "Model F-statistic"], [115, 3, 1, 0, "fitted_values", "Fitted values"], [116, 3, 1, 0, "has_constant", "Flag indicating the model includes a constant or equivalent"], [117, 3, 1, 0, "idiosyncratic", "Idiosyncratic error"], [118, 3, 1, 0, "method", "Method used to estimate model parameters"], [119, 3, 1, 0, "model_ss", "Residual sum of squares"], [120, 3, 1, 0, "nobs", "Number of observations"], [121, 3, 1, 0, "params", "Estimated parameters"], [122, 3, 1, 0, "pvalues", "Parameter p-vals. Uses t(df_resid) if debiased is True, else normal"], [123, 3, 1, 0, "resid_ss", "Residual sum of squares"], [124, 3, 1, 0, "resids", "Estimated residuals"], [125, 3, 1, 0, "rsquared", "Coefficient of determination (R**2)"], [126, 3, 1, 0, "rsquared_adj", "Sample-size adjusted coefficient of determination (R**2)"], [127, 3, 1, 0, "s2", "Residual variance estimator"], [128, 3, 1, 0, "std_errors", "Estimated parameter standard errors"], [129, 3, 1, 0, "summary", "Model estimation summary."], [130, 3, 1, 0, "total_ss", "Total sum of squares"], [131, 3, 1, 0, "tstats", "Parameter t-statistics"], [132, 4, 1, 0, "wald_test", "Test linear equality constraints using a Wald test"], [133, 3, 1, 0, "wresids", "Weighted estimated residuals"]], "linearmodels.iv.absorbing.AbsorbingLSResults.conf_int": [[105, 2, 2, 0, "level", "Confidence level for interval"]], "linearmodels.iv.absorbing.AbsorbingLSResults.wald_test": [[132, 2, 2, 0, "formula", "formulaic linear constraints. The simplest formats are one of:"], [132, 2, 2, 0, "restriction", "q by nvar array containing linear weights to apply to parameters when forming the restrictions. It is not possible to use both restriction and formula."], [132, 2, 2, 0, "value", "q element array containing the restricted values."]], "linearmodels.iv.absorbing.AbsorbingRegressor.__init__": [[134, 2, 2, 0, "cat", "List of categorical variables (factors) to absorb"], [134, 2, 2, 0, "cont", "List of continuous variables to absorb"], [134, 2, 2, 0, "interactions", "List of included interactions"], [134, 2, 2, 0, "weights", "Weights, if any"]], "linearmodels.iv.absorbing.AbsorbingRegressor": [[135, 3, 1, 0, "approx_rank", ""], [136, 3, 1, 0, "has_constant", "Flag indicating whether the regressors have a constant equivalent"], [137, 3, 1, 0, "hash", ""], [138, 3, 1, 0, "regressors", ""]], "linearmodels.iv.absorbing.Interaction.__init__": [[139, 2, 2, 0, "cat", "Variables to treat as categoricals. Best format is a Categorical Series or DataFrame containing Categorical Series. Other formats are converted to Categorical Series, column-by-column. cats has shape (nobs, ncat)."], [139, 2, 2, 0, "cont", "Variables to treat as continuous, (nobs, ncont)."]], "linearmodels.iv.absorbing.Interaction": [[140, 3, 1, 0, "cat", "Categorical Variables"], [141, 3, 1, 0, "cont", "Continuous Variables"], [142, 4, 1, 0, "drop", ""], [143, 4, 1, 0, "from_frame", "Convenience function the simplifies using a DataFrame"], [144, 3, 1, 0, "hash", "Construct a hash that will be invariant for any permutation of inputs that produce the same fit when used as regressors"], [145, 3, 1, 0, "isnull", ""], [146, 3, 1, 0, "nobs", ""], [147, 3, 1, 0, "sparse", "Construct a sparse interaction matrix"]], "linearmodels.iv.absorbing.Interaction.from_frame": [[143, 2, 2, 0, "frame", "Frame containing categorical and continuous variables. All categorical variables are passed to cat and all other variables are passed as cont."]], "linearmodels.iv.covariance": [[154, 1, 1, 0, "ClusteredCovariance", "Covariance estimation for clustered data"], [160, 1, 1, 0, "HeteroskedasticCovariance", "Covariance estimation for heteroskedastic data"], [166, 1, 1, 0, "HomoskedasticCovariance", "Covariance estimation for homoskedastic data"], [172, 1, 1, 0, "KernelCovariance", "Kernel weighted (HAC) covariance estimation"], [178, 5, 1, 0, "kernel_optimal_bandwidth", "Array of data to use when computing optimal bandwidth"], [179, 5, 1, 0, "kernel_weight_bartlett", "Kernel weights from a Bartlett kernel"], [180, 5, 1, 0, "kernel_weight_parzen", "Kernel weights from a Parzen kernel"], [181, 5, 1, 0, "kernel_weight_quadratic_spectral", "Kernel weights from a quadratic-spectral kernel"]], "linearmodels.iv.covariance.ClusteredCovariance.__init__": [[154, 2, 2, 0, "clusters", "Cluster group assignment.  If not provided, uses clusters of 1. Either nobs by ncluster where ncluster is 1 or 2."], [154, 2, 2, 0, "debiased", "Flag indicating whether to use a small-sample adjustment"], [154, 2, 2, 0, "kappa", "Value of kappa in k-class estimator"], [154, 2, 2, 0, "params", "Estimated model parameters (nvar by 1)"], [154, 2, 2, 0, "x", "Model regressors (nobs by nvar)"], [154, 2, 2, 0, "y", "Series ,modeled (nobs by 1)"], [154, 2, 2, 0, "z", "Instruments used for endogenous regressors (nobs by ninstr)"]], "linearmodels.iv.covariance.ClusteredCovariance": [[155, 3, 1, 0, "config", ""], [156, 3, 1, 0, "cov", "Covariance of estimated parameters"], [157, 3, 1, 0, "debiased", "Flag indicating if covariance is debiased"], [158, 3, 1, 0, "s", "Clustered estimator of score covariance"], [159, 3, 1, 0, "s2", "Estimated variance of residuals. Small-sample adjusted if debiased."]], "linearmodels.iv.covariance.HeteroskedasticCovariance.__init__": [[160, 2, 2, 0, "debiased", "Flag indicating whether to use a small-sample adjustment"], [160, 2, 2, 0, "kappa", "Value of kappa in k-class estimator"], [160, 2, 2, 0, "params", "Estimated model parameters (nvar by 1)"], [160, 2, 2, 0, "x", "Model regressors (nobs by nvar)"], [160, 2, 2, 0, "y", "Series ,modeled (nobs by 1)"], [160, 2, 2, 0, "z", "Instruments used for endogenous regressors (nobs by ninstr)"]], "linearmodels.iv.covariance.HeteroskedasticCovariance": [[161, 3, 1, 0, "config", ""], [162, 3, 1, 0, "cov", "Covariance of estimated parameters"], [163, 3, 1, 0, "debiased", "Flag indicating if covariance is debiased"], [164, 3, 1, 0, "s", "Heteroskedasticity-robust score covariance estimate"], [165, 3, 1, 0, "s2", "Estimated variance of residuals. Small-sample adjusted if debiased."]], "linearmodels.iv.covariance.HomoskedasticCovariance.__init__": [[166, 2, 2, 0, "debiased", "Flag indicating whether to use a small-sample adjustment"], [166, 2, 2, 0, "kappa", "Value of kappa in k-class estimator"], [166, 2, 2, 0, "params", "Estimated model parameters (nvar by 1)"], [166, 2, 2, 0, "x", "Model regressors (nobs by nvar)"], [166, 2, 2, 0, "y", "Series modeled (nobs by 1)"], [166, 2, 2, 0, "z", "Instruments used for endogenous regressors (nobs by ninstr)"]], "linearmodels.iv.covariance.HomoskedasticCovariance": [[167, 3, 1, 0, "config", ""], [168, 3, 1, 0, "cov", "Covariance of estimated parameters"], [169, 3, 1, 0, "debiased", "Flag indicating if covariance is debiased"], [170, 3, 1, 0, "s", "Score covariance estimate"], [171, 3, 1, 0, "s2", "Estimated variance of residuals. Small-sample adjusted if debiased."]], "linearmodels.iv.covariance.KernelCovariance.__init__": [[172, 2, 2, 0, "bandwidth", "Non-negative bandwidth to use with kernel. If None, automatic bandwidth selection is used."], [172, 2, 2, 0, "debiased", "Flag indicating whether to use a small-sample adjustment"], [172, 2, 2, 0, "kappa", "Value of kappa in k-class estimator"], [172, 2, 2, 0, "kernel", "Kernel name. Supported kernels are:"], [172, 2, 2, 0, "params", "Estimated model parameters (nvar by 1)"], [172, 2, 2, 0, "x", "Model regressors (nobs by nvar)"], [172, 2, 2, 0, "y", "Series ,modeled (nobs by 1)"], [172, 2, 2, 0, "z", "Instruments used for endogenous regressors (nobs by ninstr)"]], "linearmodels.iv.covariance.KernelCovariance": [[173, 3, 1, 0, "config", ""], [174, 3, 1, 0, "cov", "Covariance of estimated parameters"], [175, 3, 1, 0, "debiased", "Flag indicating if covariance is debiased"], [176, 3, 1, 0, "s", "HAC score covariance estimate"], [177, 3, 1, 0, "s2", "Estimated variance of residuals. Small-sample adjusted if debiased."]], "linearmodels.iv.covariance.kernel_optimal_bandwidth": [[178, 2, 2, 0, "kernel", "Name of kernel to use.  Supported kernels include:"], [178, 2, 2, 0, "x", "Array of data to use when computing optimal bandwidth"]], "linearmodels.iv.covariance.kernel_weight_bartlett": [[179, 2, 2, 0, "bw", "Maximum lag to used in kernel"]], "linearmodels.iv.covariance.kernel_weight_parzen": [[180, 2, 2, 0, "bw", "Maximum lag to used in kernel"]], "linearmodels.iv.covariance.kernel_weight_quadratic_spectral": [[181, 2, 2, 0, "bw", "Maximum lag to used in kernel"], [181, 2, 2, 0, "n", "Positive number of weight to return"]], "linearmodels.iv.data": [[182, 1, 1, 0, "IVData", "Type abstraction for use in univariate models."]], "linearmodels.iv.data.IVData.__init__": [[182, 2, 2, 0, "convert_dummies", "Flat indicating whether pandas categoricals or string input data should be converted to dummy variables"], [182, 2, 2, 0, "drop_first", "Flag indicating to drop first dummy category"], [182, 2, 2, 0, "nobs", "Number of observation, used when x is None. If x is array_like, then nobs is used to check the number of observations in x."], [182, 2, 2, 0, "var_name", "Variable name to use when naming variables in NumPy arrays or xarray DataArrays"], [182, 2, 2, 0, "x", "Data to wrap and standardize.  If None, then nobs must be provided to produce an IVData instance with shape (nobs, 0)."]], "linearmodels.iv.data.IVData": [[183, 3, 1, 0, "cols", "Column labels"], [184, 4, 1, 0, "drop", ""], [185, 3, 1, 0, "isnull", ""], [186, 3, 1, 0, "labels", "Dictionary containing row and column labels keyed by axis"], [187, 3, 1, 0, "ndarray", "ndarray view of data, always 2d"], [188, 3, 1, 0, "ndim", "Number of dimensions"], [189, 3, 1, 0, "pandas", "DataFrame view of data"], [190, 3, 1, 0, "rows", "Row labels (index)"], [191, 3, 1, 0, "shape", "Tuple containing shape"]], "linearmodels.iv.gmm": [[192, 1, 1, 0, "HeteroskedasticWeightMatrix", "Heteroskedasticity robust weight estimation"], [195, 1, 1, 0, "HomoskedasticWeightMatrix", "Homoskedastic (unadjusted) weight estimation"], [198, 1, 1, 0, "IVGMMCovariance", "Covariance estimation for GMM models"], [204, 1, 1, 0, "KernelWeightMatrix", "Heteroskedasticity, autocorrelation robust weight estimation"], [208, 1, 1, 0, "OneWayClusteredWeightMatrix", "Clustered (one-way) weight estimation"]], "linearmodels.iv.gmm.HeteroskedasticWeightMatrix.__init__": [[192, 2, 2, 0, "center", "Flag indicating whether to center the moment conditions by subtracting the mean before computing the weight matrix."], [192, 2, 2, 0, "debiased", "Flag indicating whether to use small-sample adjustments"]], "linearmodels.iv.gmm.HeteroskedasticWeightMatrix": [[193, 3, 1, 0, "config", "Weight estimator configuration"], [194, 4, 1, 0, "weight_matrix", "Model regressors (exog and endog), (nobs by nvar)"]], "linearmodels.iv.gmm.HeteroskedasticWeightMatrix.weight_matrix": [[194, 2, 2, 0, "eps", "Model errors (nobs by 1)"], [194, 2, 2, 0, "x", "Model regressors (exog and endog), (nobs by nvar)"], [194, 2, 2, 0, "z", "Model instruments (exog and instruments), (nobs by ninstr)"]], "linearmodels.iv.gmm.HomoskedasticWeightMatrix.__init__": [[195, 2, 2, 0, "center", "Flag indicating whether to center the moment conditions by subtracting the mean before computing the weight matrix."], [195, 2, 2, 0, "debiased", "Flag indicating whether to use small-sample adjustments"]], "linearmodels.iv.gmm.HomoskedasticWeightMatrix": [[196, 3, 1, 0, "config", "Weight estimator configuration"], [197, 4, 1, 0, "weight_matrix", "Model regressors (exog and endog), (nobs by nvar)"]], "linearmodels.iv.gmm.HomoskedasticWeightMatrix.weight_matrix": [[197, 2, 2, 0, "eps", "Model errors (nobs by 1)"], [197, 2, 2, 0, "x", "Model regressors (exog and endog), (nobs by nvar)"], [197, 2, 2, 0, "z", "Model instruments (exog and instruments), (nobs by ninstr)"]], "linearmodels.iv.gmm.IVGMMCovariance.__init__": [[198, 2, 2, 0, "cov_config", "Optional keyword arguments that are specific to a particular cov_type"], [198, 2, 2, 0, "cov_type", "Covariance estimator to use  Valid choices are"], [198, 2, 2, 0, "debiased", "Flag indicating whether to debias the covariance estimator"], [198, 2, 2, 0, "params", "Estimated model parameters (nvar by 1)"], [198, 2, 2, 0, "w", "Weighting matrix used in GMM estimation"], [198, 2, 2, 0, "x", "Model regressors (nobs by nvar)"], [198, 2, 2, 0, "y", "Series ,modeled (nobs by 1)"], [198, 2, 2, 0, "z", "Instruments used for endogenous regressors (nobs by ninstr)"]], "linearmodels.iv.gmm.IVGMMCovariance": [[199, 3, 1, 0, "config", ""], [200, 3, 1, 0, "cov", "Covariance of estimated parameters"], [201, 3, 1, 0, "debiased", "Flag indicating if covariance is debiased"], [202, 3, 1, 0, "s", "Score covariance estimate"], [203, 3, 1, 0, "s2", "Estimated variance of residuals. Small-sample adjusted if debiased."]], "linearmodels.iv.gmm.KernelWeightMatrix.__init__": [[204, 2, 2, 0, "bandwidth", "Bandwidth to use when computing kernel weights"], [204, 2, 2, 0, "center", "Flag indicating whether to center the moment conditions by subtracting the mean before computing the weight matrix."], [204, 2, 2, 0, "debiased", "Flag indicating whether to use small-sample adjustments"], [204, 2, 2, 0, "kernel", "Name of kernel weighting function to use"], [204, 2, 2, 0, "optimal_bw", "Flag indicating whether to estimate the optimal bandwidth, when bandwidth is None.  If False, nobs - 2 is used"]], "linearmodels.iv.gmm.KernelWeightMatrix": [[205, 3, 1, 0, "bandwidth", "Actual bandwidth used in estimating the weight matrix"], [206, 3, 1, 0, "config", "Weight estimator configuration"], [207, 4, 1, 0, "weight_matrix", "Model regressors (exog and endog), (nobs by nvar)"]], "linearmodels.iv.gmm.KernelWeightMatrix.weight_matrix": [[207, 2, 2, 0, "eps", "Model errors (nobs by 1)"], [207, 2, 2, 0, "x", "Model regressors (exog and endog), (nobs by nvar)"], [207, 2, 2, 0, "z", "Model instruments (exog and instruments), (nobs by ninstr)"]], "linearmodels.iv.gmm.OneWayClusteredWeightMatrix.__init__": [[208, 2, 2, 0, "center", "Flag indicating whether to center the moment conditions by subtracting the mean before computing the weight matrix."], [208, 2, 2, 0, "clusters", "Array indicating cluster membership"], [208, 2, 2, 0, "debiased", "Flag indicating whether to use small-sample adjustments"]], "linearmodels.iv.gmm.OneWayClusteredWeightMatrix": [[209, 3, 1, 0, "config", "Weight estimator configuration"], [210, 4, 1, 0, "weight_matrix", "Model regressors (exog and endog), (nobs by nvar)"]], "linearmodels.iv.gmm.OneWayClusteredWeightMatrix.weight_matrix": [[210, 2, 2, 0, "eps", "Model errors (nobs by 1)"], [210, 2, 2, 0, "x", "Model regressors (exog and endog), (nobs by nvar)"], [210, 2, 2, 0, "z", "Model instruments (exog and instruments), (nobs by ninstr)"]], "linearmodels.iv.model": [[211, 1, 1, 0, "IV2SLS", "Estimation of IV models using two-stage least squares"], [222, 1, 1, 0, "IVGMM", "Estimation of IV models using the generalized method of moments (GMM)"], [233, 1, 1, 0, "IVGMMCUE", "Estimation of IV models using continuously updating GMM"], [245, 1, 1, 0, "IVLIML", "Limited information ML and k-class estimation of IV models"], [256, 1, 1, 0, "_OLS", "Computes OLS estimates when required"]], "linearmodels.iv.model.IV2SLS.__init__": [[211, 2, 2, 0, "dependent", "Endogenous variables (nobs by 1)"], [211, 2, 2, 0, "endog", "Endogenous regressors (nobs by nendog)"], [211, 2, 2, 0, "exog", "Exogenous regressors  (nobs by nexog)"], [211, 2, 2, 0, "instruments", "Instrumental variables (nobs by ninstr)"], [211, 2, 2, 0, "weights", "Observation weights used in estimation"]], "linearmodels.iv.model.IV2SLS": [[212, 4, 1, 0, "estimate_parameters", "Parameter estimation without error checking"], [213, 4, 1, 0, "fit", "Estimate model parameters"], [214, 3, 1, 0, "formula", "Formula used to create the model"], [215, 4, 1, 0, "from_formula", "Formula modified for the IV syntax described in the notes section"], [216, 3, 1, 0, "has_constant", "Flag indicating the model includes a constant or equivalent"], [217, 3, 1, 0, "isnull", "Locations of observations with missing values"], [218, 3, 1, 0, "notnull", "Locations of observations included in estimation"], [219, 4, 1, 0, "predict", "Predict values for additional data"], [220, 4, 1, 0, "resids", "Compute model residuals"], [221, 4, 1, 0, "wresids", "Compute weighted model residuals"]], "linearmodels.iv.model.IV2SLS.estimate_parameters": [[212, 2, 2, 0, "kappa", "Parameter value for k-class estimator"], [212, 2, 2, 0, "x", "Regressor matrix (nobs by nvar)"], [212, 2, 2, 0, "y", "Regressand matrix (nobs by 1)"], [212, 2, 2, 0, "z", "Instrument matrix (nobs by ninstr)"]], "linearmodels.iv.model.IV2SLS.fit": [[213, 2, 2, 0, "cov_type", "Name of covariance estimator to use. Supported covariance estimators are:"], [213, 2, 2, 0, "debiased", "Flag indicating whether to debiased the covariance estimator using a degree of freedom adjustment."]], "linearmodels.iv.model.IV2SLS.from_formula": [[215, 2, 2, 0, "data", "DataFrame containing the variables used in the formula"], [215, 2, 2, 0, "formula", "Formula modified for the IV syntax described in the notes section"], [215, 2, 2, 0, "weights", "Observation weights used in estimation"]], "linearmodels.iv.model.IV2SLS.predict": [[219, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [219, 2, 2, 0, "endog", "Endogenous regressors (nobs by nendog)"], [219, 2, 2, 0, "eval_env", "Depth of use when evaluating formulas."], [219, 2, 2, 0, "exog", "Exogenous regressors (nobs by nexog)"], [219, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model.IV2SLS.resids": [[220, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model.IV2SLS.wresids": [[221, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model.IVGMM.__init__": [[222, 2, 2, 0, "dependent", "Endogenous variables (nobs by 1)"], [222, 2, 2, 0, "endog", "Endogenous regressors (nobs by nendog)"], [222, 2, 2, 0, "exog", "Exogenous regressors  (nobs by nexog)"], [222, 2, 2, 0, "instruments", "Instrumental variables (nobs by ninstr)"], [222, 2, 2, 0, "weight_type", "Name of moment condition weight function to use in the GMM estimation"], [222, 2, 2, 0, "weights", "Observation weights used in estimation"]], "linearmodels.iv.model.IVGMM": [[223, 4, 1, 0, "estimate_parameters", "Regressor matrix (nobs by nvar)"], [224, 4, 1, 0, "fit", "Estimate model parameters"], [225, 3, 1, 0, "formula", "Formula used to create the model"], [226, 4, 1, 0, "from_formula", "Formula modified for the IV syntax described in the notes section"], [227, 3, 1, 0, "has_constant", "Flag indicating the model includes a constant or equivalent"], [228, 3, 1, 0, "isnull", "Locations of observations with missing values"], [229, 3, 1, 0, "notnull", "Locations of observations included in estimation"], [230, 4, 1, 0, "predict", "Predict values for additional data"], [231, 4, 1, 0, "resids", "Compute model residuals"], [232, 4, 1, 0, "wresids", "Compute weighted model residuals"]], "linearmodels.iv.model.IVGMM.estimate_parameters": [[223, 2, 2, 0, "w", "GMM weight matrix (ninstr by ninstr)"], [223, 2, 2, 0, "x", "Regressor matrix (nobs by nvar)"], [223, 2, 2, 0, "y", "Regressand matrix (nobs by 1)"], [223, 2, 2, 0, "z", "Instrument matrix (nobs by ninstr)"]], "linearmodels.iv.model.IVGMM.fit": [[224, 2, 2, 0, "cov_type", "Name of covariance estimator to use. Available covariance functions are:"], [224, 2, 2, 0, "debiased", "Flag indicating whether to debiased the covariance estimator using a degree of freedom adjustment."], [224, 2, 2, 0, "initial_weight", "Initial weighting matrix to use in the first step.  If not specified, uses the average outer-product of the set containing the exogenous variables and instruments."], [224, 2, 2, 0, "iter_limit", "Maximum number of iterations.  Default is 2, which produces two-step efficient GMM estimates.  Larger values can be used to iterate between parameter estimation and optimal weight matrix estimation until convergence."], [224, 2, 2, 0, "tol", "Convergence criteria.  Measured as covariance normalized change in parameters across iterations where the covariance estimator is based on the first step parameter estimates."]], "linearmodels.iv.model.IVGMM.from_formula": [[226, 2, 2, 0, "data", "DataFrame containing the variables used in the formula"], [226, 2, 2, 0, "formula", "Formula modified for the IV syntax described in the notes section"], [226, 2, 2, 0, "weight_type", "Name of moment condition weight function to use in the GMM estimation"], [226, 2, 2, 0, "weights", "Observation weights used in estimation"]], "linearmodels.iv.model.IVGMM.predict": [[230, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [230, 2, 2, 0, "endog", "Endogenous regressors (nobs by nendog)"], [230, 2, 2, 0, "eval_env", "Depth of use when evaluating formulas."], [230, 2, 2, 0, "exog", "Exogenous regressors (nobs by nexog)"], [230, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model.IVGMM.resids": [[231, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model.IVGMM.wresids": [[232, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model.IVGMMCUE.__init__": [[233, 2, 2, 0, "dependent", "Endogenous variables (nobs by 1)"], [233, 2, 2, 0, "endog", "Endogenous regressors (nobs by nendog)"], [233, 2, 2, 0, "exog", "Exogenous regressors  (nobs by nexog)"], [233, 2, 2, 0, "instruments", "Instrumental variables (nobs by ninstr)"], [233, 2, 2, 0, "weight_type", "Name of moment condition weight function to use in the GMM estimation"], [233, 2, 2, 0, "weights", "Observation weights used in estimation"]], "linearmodels.iv.model.IVGMMCUE": [[234, 4, 1, 0, "estimate_parameters", "Starting values for the optimization"], [235, 4, 1, 0, "fit", "Estimate model parameters"], [236, 3, 1, 0, "formula", "Formula used to create the model"], [237, 4, 1, 0, "from_formula", "Formula modified for the IV syntax described in the notes section"], [238, 3, 1, 0, "has_constant", "Flag indicating the model includes a constant or equivalent"], [239, 3, 1, 0, "isnull", "Locations of observations with missing values"], [240, 4, 1, 0, "j", "Optimization target"], [241, 3, 1, 0, "notnull", "Locations of observations included in estimation"], [242, 4, 1, 0, "predict", "Predict values for additional data"], [243, 4, 1, 0, "resids", "Compute model residuals"], [244, 4, 1, 0, "wresids", "Compute weighted model residuals"]], "linearmodels.iv.model.IVGMMCUE.estimate_parameters": [[234, 2, 2, 0, "display", "Flag indicating whether to display iterative optimizer output"], [234, 2, 2, 0, "opt_options", "Dictionary containing additional keyword arguments to pass to scipy.optimize.minimize."], [234, 2, 2, 0, "starting", "Starting values for the optimization"], [234, 2, 2, 0, "x", "Regressor matrix (nobs by nvar)"], [234, 2, 2, 0, "y", "Regressand matrix (nobs by 1)"], [234, 2, 2, 0, "z", "Instrument matrix (nobs by ninstr)"]], "linearmodels.iv.model.IVGMMCUE.fit": [[235, 2, 2, 0, "cov_type", "Name of covariance estimator to use"], [235, 2, 2, 0, "debiased", "Flag indicating whether to debiased the covariance estimator using a degree of freedom adjustment."], [235, 2, 2, 0, "display", "Flag indicating whether to display optimization output"], [235, 2, 2, 0, "opt_options", "Additional options to pass to scipy.optimize.minimize when optimizing the objective function. If not provided, defers to scipy to choose an appropriate optimizer. All minimize inputs except fun, x0, and args can be overridden."], [235, 2, 2, 0, "starting", "Starting values to use in optimization.  If not provided, 2SLS estimates are used."]], "linearmodels.iv.model.IVGMMCUE.from_formula": [[237, 2, 2, 0, "data", "DataFrame containing the variables used in the formula"], [237, 2, 2, 0, "formula", "Formula modified for the IV syntax described in the notes section"], [237, 2, 2, 0, "weight_type", "Name of moment condition weight function to use in the GMM estimation"], [237, 2, 2, 0, "weights", "Observation weights used in estimation"]], "linearmodels.iv.model.IVGMMCUE.j": [[240, 2, 2, 0, "params", "Parameter vector (nvar)"], [240, 2, 2, 0, "x", "Regressor matrix (nobs by nvar)"], [240, 2, 2, 0, "y", "Regressand matrix (nobs by 1)"], [240, 2, 2, 0, "z", "Instrument matrix (nobs by ninstr)"]], "linearmodels.iv.model.IVGMMCUE.predict": [[242, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [242, 2, 2, 0, "endog", "Endogenous regressors (nobs by nendog)"], [242, 2, 2, 0, "eval_env", "Depth of use when evaluating formulas."], [242, 2, 2, 0, "exog", "Exogenous regressors (nobs by nexog)"], [242, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model.IVGMMCUE.resids": [[243, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model.IVGMMCUE.wresids": [[244, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model.IVLIML.__init__": [[245, 2, 2, 0, "dependent", "Endogenous variables (nobs by 1)"], [245, 2, 2, 0, "endog", "Endogenous regressors (nobs by nendog)"], [245, 2, 2, 0, "exog", "Exogenous regressors  (nobs by nexog)"], [245, 2, 2, 0, "fuller", "Fuller's alpha to modify LIML estimator. Default returns unmodified LIML estimator."], [245, 2, 2, 0, "instruments", "Instrumental variables (nobs by ninstr)"], [245, 2, 2, 0, "kappa", "Parameter value for k-class estimation.  If None, computed to produce LIML parameter estimate."], [245, 2, 2, 0, "weights", "Observation weights used in estimation"]], "linearmodels.iv.model.IVLIML": [[246, 4, 1, 0, "estimate_parameters", "Parameter estimation without error checking"], [247, 4, 1, 0, "fit", "Estimate model parameters"], [248, 3, 1, 0, "formula", "Formula used to create the model"], [249, 4, 1, 0, "from_formula", "Formula modified for the IV syntax described in the notes section"], [250, 3, 1, 0, "has_constant", "Flag indicating the model includes a constant or equivalent"], [251, 3, 1, 0, "isnull", "Locations of observations with missing values"], [252, 3, 1, 0, "notnull", "Locations of observations included in estimation"], [253, 4, 1, 0, "predict", "Predict values for additional data"], [254, 4, 1, 0, "resids", "Compute model residuals"], [255, 4, 1, 0, "wresids", "Compute weighted model residuals"]], "linearmodels.iv.model.IVLIML.estimate_parameters": [[246, 2, 2, 0, "kappa", "Parameter value for k-class estimator"], [246, 2, 2, 0, "x", "Regressor matrix (nobs by nvar)"], [246, 2, 2, 0, "y", "Regressand matrix (nobs by 1)"], [246, 2, 2, 0, "z", "Instrument matrix (nobs by ninstr)"]], "linearmodels.iv.model.IVLIML.fit": [[247, 2, 2, 0, "cov_type", "Name of covariance estimator to use. Supported covariance estimators are:"], [247, 2, 2, 0, "debiased", "Flag indicating whether to debiased the covariance estimator using a degree of freedom adjustment."]], "linearmodels.iv.model.IVLIML.from_formula": [[249, 2, 2, 0, "data", "DataFrame containing the variables used in the formula"], [249, 2, 2, 0, "formula", "Formula modified for the IV syntax described in the notes section"], [249, 2, 2, 0, "fuller", "Fuller's alpha to modify LIML estimator. Default returns unmodified LIML estimator."], [249, 2, 2, 0, "kappa", "Parameter value for k-class estimation.  If not provided, computed to produce LIML parameter estimate."], [249, 2, 2, 0, "weights", "Observation weights used in estimation"]], "linearmodels.iv.model.IVLIML.predict": [[253, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [253, 2, 2, 0, "endog", "Endogenous regressors (nobs by nendog)"], [253, 2, 2, 0, "eval_env", "Depth of use when evaluating formulas."], [253, 2, 2, 0, "exog", "Exogenous regressors (nobs by nexog)"], [253, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model.IVLIML.resids": [[254, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model.IVLIML.wresids": [[255, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model._OLS.__init__": [[256, 2, 2, 0, "dependent", "Endogenous variables (nobs by 1)"], [256, 2, 2, 0, "exog", "Exogenous regressors  (nobs by nexog)"], [256, 2, 2, 0, "weights", "Observation weights used in estimation"]], "linearmodels.iv.model._OLS": [[257, 4, 1, 0, "estimate_parameters", "Parameter estimation without error checking"], [258, 4, 1, 0, "fit", "Estimate model parameters"], [259, 3, 1, 0, "formula", "Formula used to create the model"], [260, 4, 1, 0, "from_formula", "Formula modified for the IV syntax described in the notes section"], [261, 3, 1, 0, "has_constant", "Flag indicating the model includes a constant or equivalent"], [262, 3, 1, 0, "isnull", "Locations of observations with missing values"], [263, 3, 1, 0, "notnull", "Locations of observations included in estimation"], [264, 4, 1, 0, "predict", "Predict values for additional data"], [265, 4, 1, 0, "resids", "Compute model residuals"], [266, 4, 1, 0, "wresids", "Compute weighted model residuals"]], "linearmodels.iv.model._OLS.estimate_parameters": [[257, 2, 2, 0, "kappa", "Parameter value for k-class estimator"], [257, 2, 2, 0, "x", "Regressor matrix (nobs by nvar)"], [257, 2, 2, 0, "y", "Regressand matrix (nobs by 1)"], [257, 2, 2, 0, "z", "Instrument matrix (nobs by ninstr)"]], "linearmodels.iv.model._OLS.fit": [[258, 2, 2, 0, "cov_type", "Name of covariance estimator to use. Supported covariance estimators are:"], [258, 2, 2, 0, "debiased", "Flag indicating whether to debiased the covariance estimator using a degree of freedom adjustment."]], "linearmodels.iv.model._OLS.from_formula": [[260, 2, 2, 0, "data", "DataFrame containing the variables used in the formula"], [260, 2, 2, 0, "formula", "Formula modified for the IV syntax described in the notes section"], [260, 2, 2, 0, "fuller", "Fuller's alpha to modify LIML estimator. Default returns unmodified LIML estimator."], [260, 2, 2, 0, "kappa", "Parameter value for k-class estimation.  If not provided, computed to produce LIML parameter estimate."], [260, 2, 2, 0, "weights", "Observation weights used in estimation"]], "linearmodels.iv.model._OLS.predict": [[264, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [264, 2, 2, 0, "endog", "Endogenous regressors (nobs by nendog)"], [264, 2, 2, 0, "eval_env", "Depth of use when evaluating formulas."], [264, 2, 2, 0, "exog", "Exogenous regressors (nobs by nexog)"], [264, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model._OLS.resids": [[265, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.model._OLS.wresids": [[266, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.iv.results": [[267, 1, 1, 0, "FirstStageResults", "First stage estimation results and diagnostics"], [271, 1, 1, 0, "IVGMMResults", "Results from GMM estimation of IV models"], [309, 1, 1, 0, "IVModelComparison", "Comparison of multiple models"], [321, 1, 1, 0, "IVResults", "Results from IV estimation"], [362, 1, 1, 0, "OLSResults", "Results from OLS model estimation"], [393, 5, 1, 0, "compare", "Compare the results of multiple models"]], "linearmodels.iv.results.FirstStageResults": [[268, 3, 1, 0, "diagnostics", "Post estimation diagnostics of first-stage fit"], [269, 3, 1, 0, "individual", "Individual model results from first-stage regressions"], [270, 3, 1, 0, "summary", "Model estimation summary."]], "linearmodels.iv.results.IVGMMResults.__init__": [[271, 2, 2, 0, "model", "The model used to estimate parameters."], [271, 2, 2, 0, "results", "A dictionary of results from the model estimation."]], "linearmodels.iv.results.IVGMMResults": [[272, 4, 1, 0, "c_stat", "C-test of endogeneity"], [273, 4, 1, 0, "conf_int", "Confidence interval construction"], [274, 3, 1, 0, "cov", "Estimated covariance of parameters"], [275, 3, 1, 0, "cov_config", "Parameter values from covariance estimator"], [276, 3, 1, 0, "cov_estimator", "Type of covariance estimator used to compute covariance"], [277, 3, 1, 0, "cov_type", "Covariance estimator used"], [278, 3, 1, 0, "debiased", "Flag indicating whether covariance uses a small-sample adjustment"], [279, 3, 1, 0, "df_model", "Model degree of freedom"], [280, 3, 1, 0, "df_resid", "Residual degree of freedom"], [281, 3, 1, 0, "f_statistic", "Model F-statistic"], [282, 3, 1, 0, "first_stage", "First stage regression results"], [283, 3, 1, 0, "fitted_values", "Fitted values"], [284, 3, 1, 0, "has_constant", "Flag indicating the model includes a constant or equivalent"], [285, 3, 1, 0, "idiosyncratic", "Idiosyncratic error"], [286, 3, 1, 0, "iterations", "Iterations used in GMM estimation"], [287, 3, 1, 0, "j_stat", "J-test of overidentifying restrictions"], [288, 3, 1, 0, "kappa", "k-class estimator value"], [289, 3, 1, 0, "method", "Method used to estimate model parameters"], [290, 3, 1, 0, "model_ss", "Residual sum of squares"], [291, 3, 1, 0, "nobs", "Number of observations"], [292, 3, 1, 0, "params", "Estimated parameters"], [293, 4, 1, 0, "predict", "In- and out-of-sample predictions"], [294, 3, 1, 0, "pvalues", "Parameter p-vals. Uses t(df_resid) if debiased is True, else normal"], [295, 3, 1, 0, "resid_ss", "Residual sum of squares"], [296, 3, 1, 0, "resids", "Estimated residuals"], [297, 3, 1, 0, "rsquared", "Coefficient of determination (R**2)"], [298, 3, 1, 0, "rsquared_adj", "Sample-size adjusted coefficient of determination (R**2)"], [299, 3, 1, 0, "s2", "Residual variance estimator"], [300, 3, 1, 0, "std_errors", "Estimated parameter standard errors"], [301, 3, 1, 0, "summary", "Model estimation summary."], [302, 3, 1, 0, "total_ss", "Total sum of squares"], [303, 3, 1, 0, "tstats", "Parameter t-statistics"], [304, 4, 1, 0, "wald_test", "Test linear equality constraints using a Wald test"], [305, 3, 1, 0, "weight_config", "Weighting matrix configuration used in estimation"], [306, 3, 1, 0, "weight_matrix", "Weight matrix used in the final-step GMM estimation"], [307, 3, 1, 0, "weight_type", "Weighting matrix method used in estimation"], [308, 3, 1, 0, "wresids", "Weighted estimated residuals"]], "linearmodels.iv.results.IVGMMResults.c_stat": [[272, 2, 2, 0, "variables", "List of variables to test for exogeneity.  If None, all variables are jointly tested."]], "linearmodels.iv.results.IVGMMResults.conf_int": [[273, 2, 2, 0, "level", "Confidence level for interval"]], "linearmodels.iv.results.IVGMMResults.predict": [[293, 2, 2, 0, "data", "DataFrame to use for out-of-sample predictions when model was constructed using a formula."], [293, 2, 2, 0, "endog", "Endogenous values to use in out-of-sample prediction (nobs by nendog)"], [293, 2, 2, 0, "exog", "Exogenous values to use in out-of-sample prediction (nobs by nexog)"], [293, 2, 2, 0, "fitted", "Flag indicating whether to include the fitted values"], [293, 2, 2, 0, "idiosyncratic", "Flag indicating whether to include the estimated idiosyncratic shock"], [293, 2, 2, 0, "missing", "Flag indicating to adjust for dropped observations.  If True, the values returned will have the same size as the original input data before filtering missing values.  If False, then missing observations will not be returned."]], "linearmodels.iv.results.IVGMMResults.wald_test": [[304, 2, 2, 0, "formula", "formulaic linear constraints. The simplest formats are one of:"], [304, 2, 2, 0, "restriction", "q by nvar array containing linear weights to apply to parameters when forming the restrictions. It is not possible to use both restriction and formula."], [304, 2, 2, 0, "value", "q element array containing the restricted values."]], "linearmodels.iv.results.IVModelComparison.__init__": [[309, 2, 2, 0, "precision", "Estimator precision estimator to include in the comparison output. Default is \"tstats\"."], [309, 2, 2, 0, "results", "Set of results to compare.  If a dict, the keys will be used as model names."], [309, 2, 2, 0, "stars", "Add stars based on the p-value of the coefficient where 1, 2 and 3-stars correspond to p-values of 10%, 5% and 1%, respectively."]], "linearmodels.iv.results.IVModelComparison": [[310, 3, 1, 0, "cov_estimator", "Covariance estimator descriptions"], [311, 3, 1, 0, "estimator_method", "Estimation methods"], [312, 3, 1, 0, "f_statistic", "F-statistics and P-values"], [313, 3, 1, 0, "nobs", "Parameters for all models"], [314, 3, 1, 0, "params", "Parameters for all models"], [315, 3, 1, 0, "pvalues", "Parameter p-vals for all models"], [316, 3, 1, 0, "rsquared", "Coefficients of determination (R**2)"], [317, 3, 1, 0, "rsquared_adj", "Sample-size adjusted coefficients of determination (R**2)"], [318, 3, 1, 0, "std_errors", "Parameter standard errors for all models"], [319, 3, 1, 0, "summary", "Model estimation summary."], [320, 3, 1, 0, "tstats", "Parameter t-stats for all models"]], "linearmodels.iv.results.IVResults.__init__": [[321, 2, 2, 0, "model", "The model used to estimate parameters."], [321, 2, 2, 0, "results", "A dictionary of results from the model estimation."]], "linearmodels.iv.results.IVResults": [[322, 3, 1, 0, "anderson_rubin", "Anderson-Rubin test of overidentifying restrictions"], [323, 3, 1, 0, "basmann", "Basmann's test of overidentifying restrictions"], [324, 3, 1, 0, "basmann_f", "Basmann's F test of overidentifying restrictions"], [325, 4, 1, 0, "conf_int", "Confidence interval construction"], [326, 3, 1, 0, "cov", "Estimated covariance of parameters"], [327, 3, 1, 0, "cov_config", "Parameter values from covariance estimator"], [328, 3, 1, 0, "cov_estimator", "Type of covariance estimator used to compute covariance"], [329, 3, 1, 0, "cov_type", "Covariance estimator used"], [330, 3, 1, 0, "debiased", "Flag indicating whether covariance uses a small-sample adjustment"], [331, 3, 1, 0, "df_model", "Model degree of freedom"], [332, 3, 1, 0, "df_resid", "Residual degree of freedom"], [333, 4, 1, 0, "durbin", "Durbin's test of exogeneity"], [334, 3, 1, 0, "f_statistic", "Model F-statistic"], [335, 3, 1, 0, "first_stage", "First stage regression results"], [336, 3, 1, 0, "fitted_values", "Fitted values"], [337, 3, 1, 0, "has_constant", "Flag indicating the model includes a constant or equivalent"], [338, 3, 1, 0, "idiosyncratic", "Idiosyncratic error"], [339, 3, 1, 0, "kappa", "k-class estimator value"], [340, 3, 1, 0, "method", "Method used to estimate model parameters"], [341, 3, 1, 0, "model_ss", "Residual sum of squares"], [342, 3, 1, 0, "nobs", "Number of observations"], [343, 3, 1, 0, "params", "Estimated parameters"], [344, 4, 1, 0, "predict", "In- and out-of-sample predictions"], [345, 3, 1, 0, "pvalues", "Parameter p-vals. Uses t(df_resid) if debiased is True, else normal"], [346, 3, 1, 0, "resid_ss", "Residual sum of squares"], [347, 3, 1, 0, "resids", "Estimated residuals"], [348, 3, 1, 0, "rsquared", "Coefficient of determination (R**2)"], [349, 3, 1, 0, "rsquared_adj", "Sample-size adjusted coefficient of determination (R**2)"], [350, 3, 1, 0, "s2", "Residual variance estimator"], [351, 3, 1, 0, "sargan", "Sargan test of overidentifying restrictions"], [352, 3, 1, 0, "std_errors", "Estimated parameter standard errors"], [353, 3, 1, 0, "summary", "Model estimation summary."], [354, 3, 1, 0, "total_ss", "Total sum of squares"], [355, 3, 1, 0, "tstats", "Parameter t-statistics"], [356, 4, 1, 0, "wald_test", "Test linear equality constraints using a Wald test"], [357, 3, 1, 0, "wooldridge_overid", "Wooldridge's score test of overidentification"], [358, 3, 1, 0, "wooldridge_regression", "Wooldridge's regression test of exogeneity"], [359, 3, 1, 0, "wooldridge_score", "Wooldridge's score test of exogeneity"], [360, 3, 1, 0, "wresids", "Weighted estimated residuals"], [361, 4, 1, 0, "wu_hausman", "Wu-Hausman test of exogeneity"]], "linearmodels.iv.results.IVResults.conf_int": [[325, 2, 2, 0, "level", "Confidence level for interval"]], "linearmodels.iv.results.IVResults.durbin": [[333, 2, 2, 0, "variables", "List of variables to test for exogeneity.  If None, all variables are jointly tested."]], "linearmodels.iv.results.IVResults.predict": [[344, 2, 2, 0, "data", "DataFrame to use for out-of-sample predictions when model was constructed using a formula."], [344, 2, 2, 0, "endog", "Endogenous values to use in out-of-sample prediction (nobs by nendog)"], [344, 2, 2, 0, "exog", "Exogenous values to use in out-of-sample prediction (nobs by nexog)"], [344, 2, 2, 0, "fitted", "Flag indicating whether to include the fitted values"], [344, 2, 2, 0, "idiosyncratic", "Flag indicating whether to include the estimated idiosyncratic shock"], [344, 2, 2, 0, "missing", "Flag indicating to adjust for dropped observations.  If True, the values returned will have the same size as the original input data before filtering missing values.  If False, then missing observations will not be returned."]], "linearmodels.iv.results.IVResults.wald_test": [[356, 2, 2, 0, "formula", "formulaic linear constraints. The simplest formats are one of:"], [356, 2, 2, 0, "restriction", "q by nvar array containing linear weights to apply to parameters when forming the restrictions. It is not possible to use both restriction and formula."], [356, 2, 2, 0, "value", "q element array containing the restricted values."]], "linearmodels.iv.results.IVResults.wu_hausman": [[361, 2, 2, 0, "variables", "List of variables to test for exogeneity.  If None, all variables are jointly tested."]], "linearmodels.iv.results.OLSResults.__init__": [[362, 2, 2, 0, "model", "The model used to estimate parameters."], [362, 2, 2, 0, "results", "A dictionary of results from the model estimation."]], "linearmodels.iv.results.OLSResults": [[363, 4, 1, 0, "conf_int", "Confidence interval construction"], [364, 3, 1, 0, "cov", "Estimated covariance of parameters"], [365, 3, 1, 0, "cov_config", "Parameter values from covariance estimator"], [366, 3, 1, 0, "cov_estimator", "Type of covariance estimator used to compute covariance"], [367, 3, 1, 0, "cov_type", "Covariance estimator used"], [368, 3, 1, 0, "debiased", "Flag indicating whether covariance uses a small-sample adjustment"], [369, 3, 1, 0, "df_model", "Model degree of freedom"], [370, 3, 1, 0, "df_resid", "Residual degree of freedom"], [371, 3, 1, 0, "f_statistic", "Model F-statistic"], [372, 3, 1, 0, "fitted_values", "Fitted values"], [373, 3, 1, 0, "has_constant", "Flag indicating the model includes a constant or equivalent"], [374, 3, 1, 0, "idiosyncratic", "Idiosyncratic error"], [375, 3, 1, 0, "kappa", "k-class estimator value"], [376, 3, 1, 0, "method", "Method used to estimate model parameters"], [377, 3, 1, 0, "model_ss", "Residual sum of squares"], [378, 3, 1, 0, "nobs", "Number of observations"], [379, 3, 1, 0, "params", "Estimated parameters"], [380, 4, 1, 0, "predict", "In- and out-of-sample predictions"], [381, 3, 1, 0, "pvalues", "Parameter p-vals. Uses t(df_resid) if debiased is True, else normal"], [382, 3, 1, 0, "resid_ss", "Residual sum of squares"], [383, 3, 1, 0, "resids", "Estimated residuals"], [384, 3, 1, 0, "rsquared", "Coefficient of determination (R**2)"], [385, 3, 1, 0, "rsquared_adj", "Sample-size adjusted coefficient of determination (R**2)"], [386, 3, 1, 0, "s2", "Residual variance estimator"], [387, 3, 1, 0, "std_errors", "Estimated parameter standard errors"], [388, 3, 1, 0, "summary", "Model estimation summary."], [389, 3, 1, 0, "total_ss", "Total sum of squares"], [390, 3, 1, 0, "tstats", "Parameter t-statistics"], [391, 4, 1, 0, "wald_test", "Test linear equality constraints using a Wald test"], [392, 3, 1, 0, "wresids", "Weighted estimated residuals"]], "linearmodels.iv.results.OLSResults.conf_int": [[363, 2, 2, 0, "level", "Confidence level for interval"]], "linearmodels.iv.results.OLSResults.predict": [[380, 2, 2, 0, "data", "DataFrame to use for out-of-sample predictions when model was constructed using a formula."], [380, 2, 2, 0, "endog", "Endogenous values to use in out-of-sample prediction (nobs by nendog)"], [380, 2, 2, 0, "exog", "Exogenous values to use in out-of-sample prediction (nobs by nexog)"], [380, 2, 2, 0, "fitted", "Flag indicating whether to include the fitted values"], [380, 2, 2, 0, "idiosyncratic", "Flag indicating whether to include the estimated idiosyncratic shock"], [380, 2, 2, 0, "missing", "Flag indicating to adjust for dropped observations.  If True, the values returned will have the same size as the original input data before filtering missing values.  If False, then missing observations will not be returned."]], "linearmodels.iv.results.OLSResults.wald_test": [[391, 2, 2, 0, "formula", "formulaic linear constraints. The simplest formats are one of:"], [391, 2, 2, 0, "restriction", "q by nvar array containing linear weights to apply to parameters when forming the restrictions. It is not possible to use both restriction and formula."], [391, 2, 2, 0, "value", "q element array containing the restricted values."]], "linearmodels.iv.results.compare": [[393, 2, 2, 0, "precision", "Estimator precision estimator to include in the comparison output. Default is \"tstats\"."], [393, 2, 2, 0, "results", "Set of results to compare.  If a dict, the keys will be used as model names."], [393, 2, 2, 0, "stars", "Add stars based on the p-value of the coefficient where 1, 2 and 3-stars correspond to p-values of 10%, 5% and 1%, respectively."]], "linearmodels.panel": [[711, 0, 0, 1, "covariance", ""], [711, 0, 0, 1, "data", ""], [711, 0, 0, 1, "model", ""], [711, 0, 0, 1, "results", ""], [711, 0, 0, 1, "utility", ""]], "linearmodels.panel.covariance": [[404, 1, 1, 0, "ACCovariance", "Autocorrelation robust covariance estimation"], [412, 1, 1, 0, "ClusteredCovariance", "One-way (Rogers) or two-way clustered covariance estimation"], [420, 1, 1, 0, "DriscollKraay", "Driscoll-Kraay heteroskedasticity-autocorrelation robust covariance estimation"], [428, 1, 1, 0, "FamaMacBethCovariance", "HAC estimator for Fama-MacBeth estimator"], [438, 1, 1, 0, "HeteroskedasticCovariance", "Covariance estimation using White estimator"], [446, 1, 1, 0, "HomoskedasticCovariance", "Homoskedastic covariance estimation"]], "linearmodels.panel.covariance.ACCovariance": [[405, 6, 1, 0, "ALLOWED_KWARGS", ""], [406, 6, 1, 0, "DEFAULT_KERNEL", ""], [407, 3, 1, 0, "cov", "Estimated covariance"], [408, 4, 1, 0, "deferred_cov", "Covariance calculation deferred until executed"], [409, 3, 1, 0, "eps", "Model residuals"], [410, 3, 1, 0, "name", "Covariance estimator name"], [411, 3, 1, 0, "s2", "Error variance"]], "linearmodels.panel.covariance.ACCovariance.__init__": [[404, 2, 2, 0, "bandwidth", "Non-negative integer to use as bandwidth.  If not provided a rule-of- thumb value is used."], [404, 2, 2, 0, "debiased", "Flag indicating whether to debias the estimator"], [404, 2, 2, 0, "entity_ids", "(entity x time) by 1 stacked array of entity ids"], [404, 2, 2, 0, "extra_df", "Additional degrees of freedom consumed by models beyond the number of columns in x, e.g., fixed effects.  Covariance estimators are always adjusted for extra_df irrespective of the setting of debiased"], [404, 2, 2, 0, "kernel", "Name of one of the supported kernels. If None, uses the Newey-West kernel."], [404, 2, 2, 0, "params", "variables by 1 array of estimated model parameters"], [404, 2, 2, 0, "time_ids", "(entity x time) by 1 stacked array of time ids"], [404, 2, 2, 0, "x", "(entity x time) by variables stacked array of exogenous"], [404, 2, 2, 0, "y", "(entity x time) by 1 stacked array of dependent"]], "linearmodels.panel.covariance.ClusteredCovariance": [[413, 6, 1, 0, "ALLOWED_KWARGS", ""], [414, 6, 1, 0, "DEFAULT_KERNEL", ""], [415, 3, 1, 0, "cov", "Estimated covariance"], [416, 4, 1, 0, "deferred_cov", "Covariance calculation deferred until executed"], [417, 3, 1, 0, "eps", "Model residuals"], [418, 3, 1, 0, "name", "Covariance estimator name"], [419, 3, 1, 0, "s2", "Error variance"]], "linearmodels.panel.covariance.ClusteredCovariance.__init__": [[412, 2, 2, 0, "clusters", "nobs by 1 or nobs by 2 array of cluster group ids"], [412, 2, 2, 0, "debiased", "Flag indicating whether to debias the estimator"], [412, 2, 2, 0, "entity_ids", "(entity x time) by 1 stacked array of entity ids"], [412, 2, 2, 0, "extra_df", "Additional degrees of freedom consumed by models beyond the number of columns in x, e.g., fixed effects.  Covariance estimators are always adjusted for extra_df irrespective of the setting of debiased"], [412, 2, 2, 0, "group_debias", "Flag indicating whether to apply small-number of groups adjustment."], [412, 2, 2, 0, "params", "variables by 1 array of estimated model parameters"], [412, 2, 2, 0, "time_ids", "(entity x time) by 1 stacked array of time ids"], [412, 2, 2, 0, "x", "nobs by variables stacked array of exogenous"], [412, 2, 2, 0, "y", "nobs by 1 stacked array of dependent"]], "linearmodels.panel.covariance.DriscollKraay": [[421, 6, 1, 0, "ALLOWED_KWARGS", ""], [422, 6, 1, 0, "DEFAULT_KERNEL", ""], [423, 3, 1, 0, "cov", "Estimated covariance"], [424, 4, 1, 0, "deferred_cov", "Covariance calculation deferred until executed"], [425, 3, 1, 0, "eps", "Model residuals"], [426, 3, 1, 0, "name", "Covariance estimator name"], [427, 3, 1, 0, "s2", "Error variance"]], "linearmodels.panel.covariance.DriscollKraay.__init__": [[420, 2, 2, 0, "bandwidth", "Non-negative integer to use as bandwidth.  If not provided a rule-of- thumb value is used."], [420, 2, 2, 0, "debiased", "Flag indicating whether to debias the estimator"], [420, 2, 2, 0, "entity_ids", "(entity x time) by 1 stacked array of entity ids"], [420, 2, 2, 0, "extra_df", "Additional degrees of freedom consumed by models beyond the number of columns in x, e.g., fixed effects.  Covariance estimators are always adjusted for extra_df irrespective of the setting of debiased."], [420, 2, 2, 0, "kernel", "Name of one of the supported kernels. If None, uses the Newey-West kernel."], [420, 2, 2, 0, "params", "variables by 1 array of estimated model parameters"], [420, 2, 2, 0, "time_ids", "(entity x time) by 1 stacked array of time ids"], [420, 2, 2, 0, "x", "(entity x time) by variables stacked array of exogenous"], [420, 2, 2, 0, "y", "(entity x time) by 1 stacked array of dependent"]], "linearmodels.panel.covariance.FamaMacBethCovariance": [[429, 6, 1, 0, "ALLOWED_KWARGS", ""], [430, 6, 1, 0, "DEFAULT_KERNEL", ""], [431, 3, 1, 0, "all_params", "The set of parameters estimated for each of the time periods"], [432, 3, 1, 0, "bandwidth", "Estimator bandwidth"], [433, 3, 1, 0, "cov", "Estimated covariance"], [434, 4, 1, 0, "deferred_cov", "Covariance calculation deferred until executed"], [435, 3, 1, 0, "eps", "Model residuals"], [436, 3, 1, 0, "name", "Covariance estimator name"], [437, 3, 1, 0, "s2", "Error variance"]], "linearmodels.panel.covariance.FamaMacBethCovariance.__init__": [[428, 2, 2, 0, "all_params", "(nobs by variables) array of all estimated model parameters"], [428, 2, 2, 0, "bandwidth", "Non-negative integer to use as bandwidth.  Set to 0 to disable autocorrelation robustness. If not provided a rule-of- thumb value is used."], [428, 2, 2, 0, "debiased", "Flag indicating whether to debias the estimator."], [428, 2, 2, 0, "kernel", "Name of one of the supported kernels. If None, uses the Newey-West kernel."], [428, 2, 2, 0, "params", "(variables by 1) array of estimated model parameters"], [428, 2, 2, 0, "x", "(entity x time) by variables stacked array of exogenous"], [428, 2, 2, 0, "y", "(entity x time) by 1 stacked array of dependent"]], "linearmodels.panel.covariance.HeteroskedasticCovariance": [[439, 6, 1, 0, "ALLOWED_KWARGS", ""], [440, 6, 1, 0, "DEFAULT_KERNEL", ""], [441, 3, 1, 0, "cov", "Estimated covariance"], [442, 4, 1, 0, "deferred_cov", "Covariance calculation deferred until executed"], [443, 3, 1, 0, "eps", "Model residuals"], [444, 3, 1, 0, "name", "Covariance estimator name"], [445, 3, 1, 0, "s2", "Error variance"]], "linearmodels.panel.covariance.HeteroskedasticCovariance.__init__": [[438, 2, 2, 0, "debiased", "Flag indicating whether to debias the estimator"], [438, 2, 2, 0, "entity_ids", "(entity x time) by 1 stacked array of entity ids"], [438, 2, 2, 0, "extra_df", "Additional degrees of freedom consumed by models beyond the number of columns in x, e.g., fixed effects.  Covariance estimators are always adjusted for extra_df irrespective of the setting of debiased"], [438, 2, 2, 0, "params", "variables by 1 array of estimated model parameters"], [438, 2, 2, 0, "time_ids", "(entity x time) by 1 stacked array of time ids"], [438, 2, 2, 0, "x", "(entity x time) by variables stacked array of exogenous"], [438, 2, 2, 0, "y", "(entity x time) by 1 stacked array of dependent"]], "linearmodels.panel.covariance.HomoskedasticCovariance": [[447, 6, 1, 0, "ALLOWED_KWARGS", ""], [448, 6, 1, 0, "DEFAULT_KERNEL", ""], [449, 3, 1, 0, "cov", "Estimated covariance"], [450, 4, 1, 0, "deferred_cov", "Covariance calculation deferred until executed"], [451, 3, 1, 0, "eps", "Model residuals"], [452, 3, 1, 0, "name", "Covariance estimator name"], [453, 3, 1, 0, "s2", "Error variance"]], "linearmodels.panel.covariance.HomoskedasticCovariance.__init__": [[446, 2, 2, 0, "debiased", "Flag indicating whether to debias the estimator"], [446, 2, 2, 0, "entity_ids", "(entity x time) by 1 stacked array of entity ids"], [446, 2, 2, 0, "extra_df", "Additional degrees of freedom consumed by models beyond the number of columns in x, e.g., fixed effects.  Covariance estimators are always adjusted for extra_df irrespective of the setting of debiased"], [446, 2, 2, 0, "params", "variables by 1 array of estimated model parameters"], [446, 2, 2, 0, "time_ids", "(entity x time) by 1 stacked array of time ids"], [446, 2, 2, 0, "x", "(entity x time) by variables stacked array of exogenous"], [446, 2, 2, 0, "y", "(entity x time) by 1 stacked array of dependent"]], "linearmodels.panel.data": [[454, 1, 1, 0, "PanelData", "Abstraction to handle alternative formats for panel data"], [479, 1, 1, 0, "_Panel", "Convert a MI DataFrame to a 3-d structure where columns are items."]], "linearmodels.panel.data.PanelData.__init__": [[454, 2, 2, 0, "convert_dummies", "Flat indicating whether pandas categoricals or string input data should be converted to dummy variables"], [454, 2, 2, 0, "copy", "Flag indicating whether to copy the input. Only has an effect when x is a DataFrame"], [454, 2, 2, 0, "drop_first", "Flag indicating to drop first dummy category when converting"], [454, 2, 2, 0, "var_name", "Variable name to use when naming variables in NumPy arrays or xarray DataArrays"], [454, 2, 2, 0, "x", "Input data"]], "linearmodels.panel.data.PanelData": [[455, 4, 1, 0, "copy", "Return a deep copy"], [456, 4, 1, 0, "count", "Count number of observations by entity or time"], [457, 3, 1, 0, "dataframe", "pandas DataFrame view of data"], [458, 4, 1, 0, "demean", "Demeans data by either entity or time group"], [459, 4, 1, 0, "drop", "Drop observations from the panel."], [460, 4, 1, 0, "dummies", "Generate entity or time dummies"], [461, 3, 1, 0, "entities", "List of entity index names"], [462, 3, 1, 0, "entity_ids", "Get array containing entity group membership information"], [463, 4, 1, 0, "first_difference", "Compute first differences of variables"], [464, 4, 1, 0, "general_demean", "Multi-way demeaning using only groupby"], [465, 3, 1, 0, "index", "Return the index of the multi-index dataframe view"], [466, 3, 1, 0, "isnull", "Locations with missing observations"], [467, 4, 1, 0, "mean", "Compute data mean by either entity or time group"], [468, 3, 1, 0, "ndim", "Number of dimensions of panel view of data"], [469, 3, 1, 0, "nentity", "Number of entities"], [470, 3, 1, 0, "nobs", "Number of time observations"], [471, 3, 1, 0, "nvar", "Number of variables"], [472, 3, 1, 0, "panel", "pandas Panel view of data"], [473, 3, 1, 0, "shape", "Shape of panel view of data"], [474, 3, 1, 0, "time", "List of time index names"], [475, 3, 1, 0, "time_ids", "Get array containing time membership information"], [476, 3, 1, 0, "values2d", "NumPy ndarray view of dataframe"], [477, 3, 1, 0, "values3d", "NumPy ndarray view of panel"], [478, 3, 1, 0, "vars", "List of variable names"]], "linearmodels.panel.data.PanelData.count": [[456, 2, 2, 0, "group", "Group to count"]], "linearmodels.panel.data.PanelData.demean": [[458, 2, 2, 0, "group", "Group to use in demeaning"], [458, 2, 2, 0, "low_memory", "Flag indicating whether to use a low memory implementation that avoids constructing dummy variables. Only relevant when group is \"both\""], [458, 2, 2, 0, "return_panel", "Flag indicating to return a PanelData object. If False, a 2-d NumPy representation of the panel is returned"], [458, 2, 2, 0, "weights", "Weights to implement weighted averaging"]], "linearmodels.panel.data.PanelData.drop": [[459, 2, 2, 0, "locs", "Boolean array indicating observations to drop with reference to the dataframe view of the data"]], "linearmodels.panel.data.PanelData.dummies": [[460, 2, 2, 0, "drop_first", "Flag indicating that the dummy column corresponding to the first entity or time period should be dropped"], [460, 2, 2, 0, "group", "Type of dummies to generate"]], "linearmodels.panel.data.PanelData.general_demean": [[464, 2, 2, 0, "groups", "Arrays with the same size containing group identifiers"], [464, 2, 2, 0, "weights", "Weights to use in the weighted demeaning"]], "linearmodels.panel.data.PanelData.mean": [[467, 2, 2, 0, "group", "Group to use in demeaning"], [467, 2, 2, 0, "weights", "Weights to implement weighted averaging"]], "linearmodels.panel.data._Panel.__init__": [[479, 2, 2, 0, "df", "MultiIndex DataFrame containing floats"]], "linearmodels.panel.data._Panel": [[480, 4, 1, 0, "from_array", ""], [481, 3, 1, 0, "items", ""], [482, 3, 1, 0, "major_axis", ""], [483, 3, 1, 0, "minor_axis", ""], [484, 3, 1, 0, "shape", ""], [485, 4, 1, 0, "to_frame", ""], [486, 3, 1, 0, "values", ""]], "linearmodels.panel.model": [[487, 1, 1, 0, "BetweenOLS", "Between estimator for panel data"], [495, 1, 1, 0, "FamaMacBeth", "Pooled coefficient estimator for panel data"], [503, 1, 1, 0, "FirstDifferenceOLS", "First difference model for panel data"], [511, 1, 1, 0, "PanelOLS", "One- and two-way fixed effects estimator for panel data"], [522, 1, 1, 0, "PooledOLS", "Pooled coefficient estimator for panel data"], [530, 1, 1, 0, "RandomEffects", "One-way Random Effects model for panel data"]], "linearmodels.panel.model.BetweenOLS.__init__": [[487, 2, 2, 0, "dependent", "Dependent (left-hand-side) variable (time by entity)"], [487, 2, 2, 0, "exog", "Exogenous or right-hand-side variables (variable by time by entity)."], [487, 2, 2, 0, "weights", "Weights to use in estimation.  Assumes residual variance is proportional to inverse of weight to that the residual time the weight should be homoskedastic."]], "linearmodels.panel.model.BetweenOLS": [[488, 4, 1, 0, "fit", "Estimate model parameters"], [489, 3, 1, 0, "formula", "Formula used to construct the model"], [490, 4, 1, 0, "from_formula", "Create a model from a formula"], [491, 3, 1, 0, "has_constant", "Flag indicating the model a constant or implicit constant"], [492, 3, 1, 0, "not_null", "Locations of non-missing observations"], [493, 4, 1, 0, "predict", "Predict values for additional data"], [494, 4, 1, 0, "reformat_clusters", "Reformat cluster variables"]], "linearmodels.panel.model.BetweenOLS.fit": [[488, 2, 2, 0, "cov_type", "Name of covariance estimator. See Notes."], [488, 2, 2, 0, "debiased", "Flag indicating whether to debiased the covariance estimator using a degree of freedom adjustment."], [488, 2, 2, 0, "reweight", "Flag indicating to reweight observations if the input data is unbalanced using a WLS estimator.  If weights are provided, these are accounted for when reweighting. Has no effect on balanced data."]], "linearmodels.panel.model.BetweenOLS.from_formula": [[490, 2, 2, 0, "check_rank", "Flag indicating whether to perform a rank check on the exogenous variables to ensure that the model is identified. Skipping this check can reduce the time required to validate a model specification. Results may be numerically unstable if this check is skipped and the matrix is not full rank."], [490, 2, 2, 0, "data", "Data structure that can be coerced into a PanelData.  In most cases, this should be a multi-index DataFrame where the level 0 index contains the entities and the level 1 contains the time."], [490, 2, 2, 0, "formula", "Formula to transform into model. Conforms to formulaic formula rules."], [490, 2, 2, 0, "weights", "Weights to use in estimation.  Assumes residual variance is proportional to inverse of weight to that the residual times the weight should be homoskedastic."]], "linearmodels.panel.model.BetweenOLS.predict": [[493, 2, 2, 0, "context", "Depth of use when evaluating formulas."], [493, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [493, 2, 2, 0, "exog", "Exogenous regressors (nobs by nvar)"], [493, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.panel.model.BetweenOLS.reformat_clusters": [[494, 2, 2, 0, "clusters", "Values to use for variance clustering"]], "linearmodels.panel.model.FamaMacBeth.__init__": [[495, 2, 2, 0, "dependent", "Dependent (left-hand-side) variable (time by entity)"], [495, 2, 2, 0, "exog", "Exogenous or right-hand-side variables (variable by time by entity)."], [495, 2, 2, 0, "weights", "Weights to use in estimation.  Assumes residual variance is proportional to inverse of weight to that the residual time the weight should be homoskedastic."]], "linearmodels.panel.model.FamaMacBeth": [[496, 4, 1, 0, "fit", "Estimate model parameters"], [497, 3, 1, 0, "formula", "Formula used to construct the model"], [498, 4, 1, 0, "from_formula", "Create a model from a formula"], [499, 3, 1, 0, "has_constant", "Flag indicating the model a constant or implicit constant"], [500, 3, 1, 0, "not_null", "Locations of non-missing observations"], [501, 4, 1, 0, "predict", "Predict values for additional data"], [502, 4, 1, 0, "reformat_clusters", "Reformat cluster variables"]], "linearmodels.panel.model.FamaMacBeth.fit": [[496, 2, 2, 0, "bandwidth", "The bandwidth to use when cov_type is \"kernel\". If None, it is automatically computed."], [496, 2, 2, 0, "cov_type", "Name of covariance estimator (see notes). Default is \"unadjusted\"."], [496, 2, 2, 0, "debiased", "Flag indicating whether to debiased the covariance estimator using a degree of freedom adjustment."], [496, 2, 2, 0, "kernel", "The kernel to use.  None chooses the default kernel."]], "linearmodels.panel.model.FamaMacBeth.from_formula": [[498, 2, 2, 0, "check_rank", "Flag indicating whether to perform a rank check on the exogenous variables to ensure that the model is identified. Skipping this check can reduce the time required to validate a model specification. Results may be numerically unstable if this check is skipped and the matrix is not full rank."], [498, 2, 2, 0, "data", "Data structure that can be coerced into a PanelData.  In most cases, this should be a multi-index DataFrame where the level 0 index contains the entities and the level 1 contains the time."], [498, 2, 2, 0, "formula", "Formula to transform into model. Conforms to formulaic formula rules."], [498, 2, 2, 0, "weights", "Weights to use in estimation.  Assumes residual variance is proportional to inverse of weight to that the residual times the weight should be homoskedastic."]], "linearmodels.panel.model.FamaMacBeth.predict": [[501, 2, 2, 0, "context", "Depth of use when evaluating formulas."], [501, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [501, 2, 2, 0, "exog", "Exogenous regressors (nobs by nvar)"], [501, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.panel.model.FamaMacBeth.reformat_clusters": [[502, 2, 2, 0, "clusters", "Values to use for variance clustering"]], "linearmodels.panel.model.FirstDifferenceOLS.__init__": [[503, 2, 2, 0, "dependent", "Dependent (left-hand-side) variable (time by entity)"], [503, 2, 2, 0, "exog", "Exogenous or right-hand-side variables (variable by time by entity)."], [503, 2, 2, 0, "weights", "Weights to use in estimation.  Assumes residual variance is proportional to inverse of weight to that the residual time the weight should be homoskedastic."]], "linearmodels.panel.model.FirstDifferenceOLS": [[504, 4, 1, 0, "fit", "Estimate model parameters"], [505, 3, 1, 0, "formula", "Formula used to construct the model"], [506, 4, 1, 0, "from_formula", "Create a model from a formula"], [507, 3, 1, 0, "has_constant", "Flag indicating the model a constant or implicit constant"], [508, 3, 1, 0, "not_null", "Locations of non-missing observations"], [509, 4, 1, 0, "predict", "Predict values for additional data"], [510, 4, 1, 0, "reformat_clusters", "Reformat cluster variables"]], "linearmodels.panel.model.FirstDifferenceOLS.fit": [[504, 2, 2, 0, "cov_type", "Name of covariance estimator. See Notes."], [504, 2, 2, 0, "debiased", "Flag indicating whether to debiased the covariance estimator using a degree of freedom adjustment."]], "linearmodels.panel.model.FirstDifferenceOLS.from_formula": [[506, 2, 2, 0, "check_rank", "Flag indicating whether to perform a rank check on the exogenous variables to ensure that the model is identified. Skipping this check can reduce the time required to validate a model specification. Results may be numerically unstable if this check is skipped and the matrix is not full rank."], [506, 2, 2, 0, "data", "Data structure that can be coerced into a PanelData.  In most cases, this should be a multi-index DataFrame where the level 0 index contains the entities and the level 1 contains the time."], [506, 2, 2, 0, "formula", "Formula to transform into model. Conforms to formulaic formula rules."], [506, 2, 2, 0, "weights", "Weights to use in estimation.  Assumes residual variance is proportional to inverse of weight to that the residual times the weight should be homoskedastic."]], "linearmodels.panel.model.FirstDifferenceOLS.predict": [[509, 2, 2, 0, "context", "Depth of use when evaluating formulas."], [509, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [509, 2, 2, 0, "exog", "Exogenous regressors (nobs by nvar)"], [509, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.panel.model.FirstDifferenceOLS.reformat_clusters": [[510, 2, 2, 0, "clusters", "Values to use for variance clustering"]], "linearmodels.panel.model.PanelOLS.__init__": [[511, 2, 2, 0, "check_rank", "Flag indicating whether to perform a rank check on the exogenous variables to ensure that the model is identified. Skipping this check can reduce the time required to validate a model specification. Results may be numerically unstable if this check is skipped and the matrix is not full rank."], [511, 2, 2, 0, "dependent", "Dependent (left-hand-side) variable (time by entity)."], [511, 2, 2, 0, "drop_absorbed", "Flag indicating whether to drop absorbed variables"], [511, 2, 2, 0, "entity_effects", "Flag whether to include entity (fixed) effects in the model"], [511, 2, 2, 0, "exog", "Exogenous or right-hand-side variables (variable by time by entity)."], [511, 2, 2, 0, "other_effects", "Category codes to use for any effects that are not entity or time effects. Each variable is treated as an effect."], [511, 2, 2, 0, "singletons", "Flag indicating whether to drop singleton observation"], [511, 2, 2, 0, "time_effects", "Flag whether to include time effects in the model"], [511, 2, 2, 0, "weights", "Weights to use in estimation.  Assumes residual variance is proportional to inverse of weight to that the residual time the weight should be homoskedastic."]], "linearmodels.panel.model.PanelOLS": [[512, 3, 1, 0, "entity_effects", "Flag indicating whether entity effects are included"], [513, 4, 1, 0, "fit", "Estimate model parameters"], [514, 3, 1, 0, "formula", "Formula used to construct the model"], [515, 4, 1, 0, "from_formula", "Create a model from a formula"], [516, 3, 1, 0, "has_constant", "Flag indicating the model a constant or implicit constant"], [517, 3, 1, 0, "not_null", "Locations of non-missing observations"], [518, 3, 1, 0, "other_effects", "Flag indicating whether other (generic) effects are included"], [519, 4, 1, 0, "predict", "Predict values for additional data"], [520, 4, 1, 0, "reformat_clusters", "Reformat cluster variables"], [521, 3, 1, 0, "time_effects", "Flag indicating whether time effects are included"]], "linearmodels.panel.model.PanelOLS.fit": [[513, 2, 2, 0, "auto_df", "Flag indicating that the treatment of estimated effects in degree of freedom adjustment is automatically handled. This is useful since clustered standard errors that are clustered using the same variable as an effect do not require degree of freedom correction while other estimators such as the unadjusted covariance do."], [513, 2, 2, 0, "count_effects", "Flag indicating that the covariance estimator should be adjusted to account for the estimation of effects in the model. Only used if auto_df=False."], [513, 2, 2, 0, "cov_type", "Name of covariance estimator. See Notes."], [513, 2, 2, 0, "debiased", "Flag indicating whether to debiased the covariance estimator using a degree of freedom adjustment."], [513, 2, 2, 0, "low_memory", "Flag indicating whether to use a low-memory algorithm when a model contains two-way fixed effects. If None, the choice is taken automatically, and the low memory algorithm is used if the required dummy variable array is both larger than then array of regressors in the model and requires more than 1 GiB ."], [513, 2, 2, 0, "use_lsdv", "Flag indicating to use the Least Squares Dummy Variable estimator to eliminate effects.  The default value uses only means and does note require constructing dummy variables for each effect."], [513, 2, 2, 0, "use_lsmr", "Flag indicating to use LSDV with the Sparse Equations and Least Squares estimator to eliminate the fixed effects."]], "linearmodels.panel.model.PanelOLS.from_formula": [[515, 2, 2, 0, "check_rank", "Flag indicating whether to perform a rank check on the exogenous variables to ensure that the model is identified. Skipping this check can reduce the time required to validate a model specification. Results may be numerically unstable if this check is skipped and the matrix is not full rank."], [515, 2, 2, 0, "data", "Data structure that can be coerced into a PanelData.  In most cases, this should be a multi-index DataFrame where the level 0 index contains the entities and the level 1 contains the time."], [515, 2, 2, 0, "drop_absorbed", "Flag indicating whether to drop absorbed variables"], [515, 2, 2, 0, "formula", "Formula to transform into model. Conforms to formulaic formula rules with two special variable names, EntityEffects and TimeEffects which can be used to specify that the model should contain an entity effect or a time effect, respectively. See Examples."], [515, 2, 2, 0, "other_effects", "Category codes to use for any effects that are not entity or time effects. Each variable is treated as an effect."], [515, 2, 2, 0, "singletons", "Flag indicating whether to drop singleton observation"], [515, 2, 2, 0, "weights", "Weights to use in estimation.  Assumes residual variance is proportional to inverse of weight to that the residual time the weight should be homoskedastic."]], "linearmodels.panel.model.PanelOLS.predict": [[519, 2, 2, 0, "context", "Depth of use when evaluating formulas."], [519, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [519, 2, 2, 0, "exog", "Exogenous regressors (nobs by nvar)"], [519, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.panel.model.PanelOLS.reformat_clusters": [[520, 2, 2, 0, "clusters", "Values to use for variance clustering"]], "linearmodels.panel.model.PooledOLS.__init__": [[522, 2, 2, 0, "check_rank", "Flag indicating whether to perform a rank check on the exogenous variables to ensure that the model is identified. Skipping this check can reduce the time required to validate a model specification. Results may be numerically unstable if this check is skipped and the matrix is not full rank."], [522, 2, 2, 0, "dependent", "Dependent (left-hand-side) variable (time by entity)"], [522, 2, 2, 0, "exog", "Exogenous or right-hand-side variables (variable by time by entity)."], [522, 2, 2, 0, "weights", "Weights to use in estimation.  Assumes residual variance is proportional to inverse of weight to that the residual time the weight should be homoskedastic."]], "linearmodels.panel.model.PooledOLS": [[523, 4, 1, 0, "fit", "Estimate model parameters"], [524, 3, 1, 0, "formula", "Formula used to construct the model"], [525, 4, 1, 0, "from_formula", "Create a model from a formula"], [526, 3, 1, 0, "has_constant", "Flag indicating the model a constant or implicit constant"], [527, 3, 1, 0, "not_null", "Locations of non-missing observations"], [528, 4, 1, 0, "predict", "Predict values for additional data"], [529, 4, 1, 0, "reformat_clusters", "Reformat cluster variables"]], "linearmodels.panel.model.PooledOLS.fit": [[523, 2, 2, 0, "cov_type", "Name of covariance estimator. See Notes."], [523, 2, 2, 0, "debiased", "Flag indicating whether to debiased the covariance estimator using a degree of freedom adjustment."]], "linearmodels.panel.model.PooledOLS.from_formula": [[525, 2, 2, 0, "check_rank", "Flag indicating whether to perform a rank check on the exogenous variables to ensure that the model is identified. Skipping this check can reduce the time required to validate a model specification. Results may be numerically unstable if this check is skipped and the matrix is not full rank."], [525, 2, 2, 0, "data", "Data structure that can be coerced into a PanelData.  In most cases, this should be a multi-index DataFrame where the level 0 index contains the entities and the level 1 contains the time."], [525, 2, 2, 0, "formula", "Formula to transform into model. Conforms to formulaic formula rules."], [525, 2, 2, 0, "weights", "Weights to use in estimation.  Assumes residual variance is proportional to inverse of weight to that the residual times the weight should be homoskedastic."]], "linearmodels.panel.model.PooledOLS.predict": [[528, 2, 2, 0, "context", "Depth to use when evaluating formulas."], [528, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [528, 2, 2, 0, "exog", "Exogenous regressors (nobs by nvar)"], [528, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.panel.model.PooledOLS.reformat_clusters": [[529, 2, 2, 0, "clusters", "Values to use for variance clustering"]], "linearmodels.panel.model.RandomEffects.__init__": [[530, 2, 2, 0, "dependent", "Dependent (left-hand-side) variable (time by entity)"], [530, 2, 2, 0, "exog", "Exogenous or right-hand-side variables (variable by time by entity)."], [530, 2, 2, 0, "weights", "Weights to use in estimation.  Assumes residual variance is proportional to inverse of weight to that the residual time the weight should be homoskedastic."]], "linearmodels.panel.model.RandomEffects": [[531, 4, 1, 0, "fit", "Estimate model parameters"], [532, 3, 1, 0, "formula", "Formula used to construct the model"], [533, 4, 1, 0, "from_formula", "Create a model from a formula"], [534, 3, 1, 0, "has_constant", "Flag indicating the model a constant or implicit constant"], [535, 3, 1, 0, "not_null", "Locations of non-missing observations"], [536, 4, 1, 0, "predict", "Predict values for additional data"], [537, 4, 1, 0, "reformat_clusters", "Reformat cluster variables"]], "linearmodels.panel.model.RandomEffects.fit": [[531, 2, 2, 0, "cov_type", "Name of covariance estimator (see notes). Default is \"unadjusted\"."], [531, 2, 2, 0, "debiased", "Flag indicating whether to debiased the covariance estimator using a degree of freedom adjustment."], [531, 2, 2, 0, "small_sample", "Apply a small-sample correction to the estimate of the variance of the random effect."]], "linearmodels.panel.model.RandomEffects.from_formula": [[533, 2, 2, 0, "check_rank", "Flag indicating whether to perform a rank check on the exogenous variables to ensure that the model is identified. Skipping this check can reduce the time required to validate a model specification. Results may be numerically unstable if this check is skipped and the matrix is not full rank."], [533, 2, 2, 0, "data", "Data structure that can be coerced into a PanelData.  In most cases, this should be a multi-index DataFrame where the level 0 index contains the entities and the level 1 contains the time."], [533, 2, 2, 0, "formula", "Formula to transform into model. Conforms to formulaic formula rules."], [533, 2, 2, 0, "weights", "Weights to use in estimation.  Assumes residual variance is proportional to inverse of weight to that the residual times the weight should be homoskedastic."]], "linearmodels.panel.model.RandomEffects.predict": [[536, 2, 2, 0, "context", "Depth of use when evaluating formulas."], [536, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [536, 2, 2, 0, "exog", "Exogenous regressors (nobs by nvar)"], [536, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.panel.model.RandomEffects.reformat_clusters": [[537, 2, 2, 0, "clusters", "Values to use for variance clustering"]], "linearmodels.panel.results": [[538, 1, 1, 0, "FamaMacBethResults", "Results container for Fama MacBeth panel data models"], [576, 1, 1, 0, "PanelEffectsResults", "Results container for panel data models that include effects"], [616, 1, 1, 0, "PanelModelComparison", "Comparison of multiple models"], [630, 1, 1, 0, "PanelResults", "Results container for panel data models that do not include effects"], [665, 1, 1, 0, "RandomEffectsResults", "Results container for random effect panel data models"], [702, 5, 1, 0, "compare", "Compare the results of multiple models"]], "linearmodels.panel.results.FamaMacBethResults": [[539, 3, 1, 0, "all_params", "The set of parameters estimated for each of the time periods"], [540, 3, 1, 0, "avg_adj_rsquared", "The average coefficient of determination, adjusted for sample size."], [541, 3, 1, 0, "avg_rsquared", "The average coefficient of determination"], [542, 4, 1, 0, "conf_int", "Confidence interval construction"], [543, 3, 1, 0, "corr_squared_between", "Between Coefficient of determination using squared correlation"], [544, 3, 1, 0, "corr_squared_overall", "Overall coefficient of determination using squared correlation"], [545, 3, 1, 0, "corr_squared_within", "Within coefficient of determination using squared correlation"], [546, 3, 1, 0, "cov", "Estimated covariance of parameters"], [547, 3, 1, 0, "df_model", "Model degree of freedom"], [548, 3, 1, 0, "df_resid", "Residual degree of freedom"], [549, 3, 1, 0, "entity_info", "Statistics on observations per entity"], [550, 3, 1, 0, "estimated_effects", "Estimated effects"], [551, 3, 1, 0, "f_statistic", "Joint test of significance for non-constant regressors"], [552, 3, 1, 0, "f_statistic_robust", "Joint test of significance for non-constant regressors"], [553, 3, 1, 0, "fitted_values", "Fitted values"], [554, 3, 1, 0, "idiosyncratic", "Idiosyncratic error"], [555, 3, 1, 0, "loglik", "Log-likelihood of model"], [556, 3, 1, 0, "model_ss", "Residual sum of squares"], [557, 3, 1, 0, "name", "Model name"], [558, 3, 1, 0, "nobs", "Number of observations used to estimate the model"], [559, 3, 1, 0, "params", "Estimated parameters"], [560, 4, 1, 0, "predict", "In- and out-of-sample predictions"], [561, 3, 1, 0, "pvalues", "Parameter p-vals. Uses t(df_resid) if debiased is True, else normal"], [562, 3, 1, 0, "resid_ss", "Residual sum of squares"], [563, 3, 1, 0, "resids", "Model residuals"], [564, 3, 1, 0, "rsquared", "Model Coefficient of determination"], [565, 3, 1, 0, "rsquared_between", "Between Coefficient of determination"], [566, 3, 1, 0, "rsquared_overall", "Overall coefficient of determination"], [567, 3, 1, 0, "rsquared_within", "Within coefficient of determination"], [568, 3, 1, 0, "s2", "Residual variance estimator"], [569, 3, 1, 0, "std_errors", "Estimated parameter standard errors"], [570, 3, 1, 0, "summary", "Model estimation summary."], [571, 3, 1, 0, "time_info", "Statistics on observations per time interval"], [572, 3, 1, 0, "total_ss", "Total sum of squares"], [573, 3, 1, 0, "tstats", "Parameter t-statistics"], [574, 4, 1, 0, "wald_test", "Test linear equality constraints using a Wald test"], [575, 3, 1, 0, "wresids", "Weighted model residuals"]], "linearmodels.panel.results.FamaMacBethResults.conf_int": [[542, 2, 2, 0, "level", "Confidence level for interval"]], "linearmodels.panel.results.FamaMacBethResults.predict": [[560, 2, 2, 0, "data", "DataFrame to use for out-of-sample predictions when model was constructed using a formula."], [560, 2, 2, 0, "effects", "Flag indicating whether to include estimated effects"], [560, 2, 2, 0, "exog", "Exogenous values to use in out-of-sample prediction (nobs by nexog)"], [560, 2, 2, 0, "fitted", "Flag indicating whether to include the fitted values"], [560, 2, 2, 0, "idiosyncratic", "Flag indicating whether to include the estimated idiosyncratic shock"], [560, 2, 2, 0, "missing", "Flag indicating to adjust for dropped observations.  if True, the values returns will have the same size as the original input data before filtering missing values"]], "linearmodels.panel.results.FamaMacBethResults.wald_test": [[574, 2, 2, 0, "formula", "formulaic linear constraints. The simplest formats are one of:"], [574, 2, 2, 0, "restriction", "q by nvar array containing linear weights to apply to parameters when forming the restrictions. It is not possible to use both restriction and formula."], [574, 2, 2, 0, "value", "q element array containing the restricted values."]], "linearmodels.panel.results.PanelEffectsResults": [[577, 4, 1, 0, "conf_int", "Confidence interval construction"], [578, 3, 1, 0, "corr_squared_between", "Between Coefficient of determination using squared correlation"], [579, 3, 1, 0, "corr_squared_overall", "Overall coefficient of determination using squared correlation"], [580, 3, 1, 0, "corr_squared_within", "Within coefficient of determination using squared correlation"], [581, 3, 1, 0, "cov", "Estimated covariance of parameters"], [582, 3, 1, 0, "df_model", "Model degree of freedom"], [583, 3, 1, 0, "df_resid", "Residual degree of freedom"], [584, 3, 1, 0, "entity_info", "Statistics on observations per entity"], [585, 3, 1, 0, "estimated_effects", "Estimated effects"], [586, 3, 1, 0, "f_pooled", "Test that included effects are jointly zero."], [587, 3, 1, 0, "f_statistic", "Joint test of significance for non-constant regressors"], [588, 3, 1, 0, "f_statistic_robust", "Joint test of significance for non-constant regressors"], [589, 3, 1, 0, "fitted_values", "Fitted values"], [590, 3, 1, 0, "idiosyncratic", "Idiosyncratic error"], [591, 3, 1, 0, "included_effects", "List of effects included in the model"], [592, 3, 1, 0, "loglik", "Log-likelihood of model"], [593, 3, 1, 0, "model_ss", "Residual sum of squares"], [594, 3, 1, 0, "name", "Model name"], [595, 3, 1, 0, "nobs", "Number of observations used to estimate the model"], [596, 3, 1, 0, "other_info", "Statistics on observations per group for other effects"], [597, 3, 1, 0, "params", "Estimated parameters"], [598, 4, 1, 0, "predict", "In- and out-of-sample predictions"], [599, 3, 1, 0, "pvalues", "Parameter p-vals. Uses t(df_resid) if debiased is True, else normal"], [600, 3, 1, 0, "resid_ss", "Residual sum of squares"], [601, 3, 1, 0, "resids", "Model residuals"], [602, 3, 1, 0, "rsquared", "Model Coefficient of determination"], [603, 3, 1, 0, "rsquared_between", "Between Coefficient of determination"], [604, 3, 1, 0, "rsquared_inclusive", "Model Coefficient of determination including fit of included effects"], [605, 3, 1, 0, "rsquared_overall", "Overall coefficient of determination"], [606, 3, 1, 0, "rsquared_within", "Within coefficient of determination"], [607, 3, 1, 0, "s2", "Residual variance estimator"], [608, 3, 1, 0, "std_errors", "Estimated parameter standard errors"], [609, 3, 1, 0, "summary", "Model estimation summary."], [610, 3, 1, 0, "time_info", "Statistics on observations per time interval"], [611, 3, 1, 0, "total_ss", "Total sum of squares"], [612, 3, 1, 0, "tstats", "Parameter t-statistics"], [613, 3, 1, 0, "variance_decomposition", "Decomposition of total variance into effects and residuals"], [614, 4, 1, 0, "wald_test", "Test linear equality constraints using a Wald test"], [615, 3, 1, 0, "wresids", "Weighted model residuals"]], "linearmodels.panel.results.PanelEffectsResults.conf_int": [[577, 2, 2, 0, "level", "Confidence level for interval"]], "linearmodels.panel.results.PanelEffectsResults.predict": [[598, 2, 2, 0, "data", "DataFrame to use for out-of-sample predictions when model was constructed using a formula."], [598, 2, 2, 0, "effects", "Flag indicating whether to include estimated effects"], [598, 2, 2, 0, "exog", "Exogenous values to use in out-of-sample prediction (nobs by nexog)"], [598, 2, 2, 0, "fitted", "Flag indicating whether to include the fitted values"], [598, 2, 2, 0, "idiosyncratic", "Flag indicating whether to include the estimated idiosyncratic shock"], [598, 2, 2, 0, "missing", "Flag indicating to adjust for dropped observations.  if True, the values returns will have the same size as the original input data before filtering missing values"]], "linearmodels.panel.results.PanelEffectsResults.wald_test": [[614, 2, 2, 0, "formula", "formulaic linear constraints. The simplest formats are one of:"], [614, 2, 2, 0, "restriction", "q by nvar array containing linear weights to apply to parameters when forming the restrictions. It is not possible to use both restriction and formula."], [614, 2, 2, 0, "value", "q element array containing the restricted values."]], "linearmodels.panel.results.PanelModelComparison.__init__": [[616, 2, 2, 0, "precision", "Estimator precision estimator to include in the comparison output. Default is \"tstats\"."], [616, 2, 2, 0, "results", "Set of results to compare.  If a dict, the keys will be used as model names."], [616, 2, 2, 0, "stars", "Add stars based on the p-value of the coefficient where 1, 2 and 3-stars correspond to p-values of 10%, 5% and 1%, respectively."]], "linearmodels.panel.results.PanelModelComparison": [[617, 3, 1, 0, "cov_estimator", "Covariance estimator descriptions"], [618, 3, 1, 0, "estimator_method", "Estimation methods"], [619, 3, 1, 0, "f_statistic", "F-statistics and P-values"], [620, 3, 1, 0, "nobs", "Parameters for all models"], [621, 3, 1, 0, "params", "Parameters for all models"], [622, 3, 1, 0, "pvalues", "Parameter p-vals for all models"], [623, 3, 1, 0, "rsquared", "Coefficients of determination (R**2)"], [624, 3, 1, 0, "rsquared_between", "Coefficients of determination (R**2)"], [625, 3, 1, 0, "rsquared_overall", "Coefficients of determination (R**2)"], [626, 3, 1, 0, "rsquared_within", "Coefficients of determination (R**2)"], [627, 3, 1, 0, "std_errors", "Parameter standard errors for all models"], [628, 3, 1, 0, "summary", "Model estimation summary."], [629, 3, 1, 0, "tstats", "Parameter t-stats for all models"]], "linearmodels.panel.results.PanelResults": [[631, 4, 1, 0, "conf_int", "Confidence interval construction"], [632, 3, 1, 0, "corr_squared_between", "Between Coefficient of determination using squared correlation"], [633, 3, 1, 0, "corr_squared_overall", "Overall coefficient of determination using squared correlation"], [634, 3, 1, 0, "corr_squared_within", "Within coefficient of determination using squared correlation"], [635, 3, 1, 0, "cov", "Estimated covariance of parameters"], [636, 3, 1, 0, "df_model", "Model degree of freedom"], [637, 3, 1, 0, "df_resid", "Residual degree of freedom"], [638, 3, 1, 0, "entity_info", "Statistics on observations per entity"], [639, 3, 1, 0, "estimated_effects", "Estimated effects"], [640, 3, 1, 0, "f_statistic", "Joint test of significance for non-constant regressors"], [641, 3, 1, 0, "f_statistic_robust", "Joint test of significance for non-constant regressors"], [642, 3, 1, 0, "fitted_values", "Fitted values"], [643, 3, 1, 0, "idiosyncratic", "Idiosyncratic error"], [644, 3, 1, 0, "loglik", "Log-likelihood of model"], [645, 3, 1, 0, "model_ss", "Residual sum of squares"], [646, 3, 1, 0, "name", "Model name"], [647, 3, 1, 0, "nobs", "Number of observations used to estimate the model"], [648, 3, 1, 0, "params", "Estimated parameters"], [649, 4, 1, 0, "predict", "In- and out-of-sample predictions"], [650, 3, 1, 0, "pvalues", "Parameter p-vals. Uses t(df_resid) if debiased is True, else normal"], [651, 3, 1, 0, "resid_ss", "Residual sum of squares"], [652, 3, 1, 0, "resids", "Model residuals"], [653, 3, 1, 0, "rsquared", "Model Coefficient of determination"], [654, 3, 1, 0, "rsquared_between", "Between Coefficient of determination"], [655, 3, 1, 0, "rsquared_overall", "Overall coefficient of determination"], [656, 3, 1, 0, "rsquared_within", "Within coefficient of determination"], [657, 3, 1, 0, "s2", "Residual variance estimator"], [658, 3, 1, 0, "std_errors", "Estimated parameter standard errors"], [659, 3, 1, 0, "summary", "Model estimation summary."], [660, 3, 1, 0, "time_info", "Statistics on observations per time interval"], [661, 3, 1, 0, "total_ss", "Total sum of squares"], [662, 3, 1, 0, "tstats", "Parameter t-statistics"], [663, 4, 1, 0, "wald_test", "Test linear equality constraints using a Wald test"], [664, 3, 1, 0, "wresids", "Weighted model residuals"]], "linearmodels.panel.results.PanelResults.conf_int": [[631, 2, 2, 0, "level", "Confidence level for interval"]], "linearmodels.panel.results.PanelResults.predict": [[649, 2, 2, 0, "data", "DataFrame to use for out-of-sample predictions when model was constructed using a formula."], [649, 2, 2, 0, "effects", "Flag indicating whether to include estimated effects"], [649, 2, 2, 0, "exog", "Exogenous values to use in out-of-sample prediction (nobs by nexog)"], [649, 2, 2, 0, "fitted", "Flag indicating whether to include the fitted values"], [649, 2, 2, 0, "idiosyncratic", "Flag indicating whether to include the estimated idiosyncratic shock"], [649, 2, 2, 0, "missing", "Flag indicating to adjust for dropped observations.  if True, the values returns will have the same size as the original input data before filtering missing values"]], "linearmodels.panel.results.PanelResults.wald_test": [[663, 2, 2, 0, "formula", "formulaic linear constraints. The simplest formats are one of:"], [663, 2, 2, 0, "restriction", "q by nvar array containing linear weights to apply to parameters when forming the restrictions. It is not possible to use both restriction and formula."], [663, 2, 2, 0, "value", "q element array containing the restricted values."]], "linearmodels.panel.results.RandomEffectsResults": [[666, 4, 1, 0, "conf_int", "Confidence interval construction"], [667, 3, 1, 0, "corr_squared_between", "Between Coefficient of determination using squared correlation"], [668, 3, 1, 0, "corr_squared_overall", "Overall coefficient of determination using squared correlation"], [669, 3, 1, 0, "corr_squared_within", "Within coefficient of determination using squared correlation"], [670, 3, 1, 0, "cov", "Estimated covariance of parameters"], [671, 3, 1, 0, "df_model", "Model degree of freedom"], [672, 3, 1, 0, "df_resid", "Residual degree of freedom"], [673, 3, 1, 0, "entity_info", "Statistics on observations per entity"], [674, 3, 1, 0, "estimated_effects", "Estimated effects"], [675, 3, 1, 0, "f_statistic", "Joint test of significance for non-constant regressors"], [676, 3, 1, 0, "f_statistic_robust", "Joint test of significance for non-constant regressors"], [677, 3, 1, 0, "fitted_values", "Fitted values"], [678, 3, 1, 0, "idiosyncratic", "Idiosyncratic error"], [679, 3, 1, 0, "loglik", "Log-likelihood of model"], [680, 3, 1, 0, "model_ss", "Residual sum of squares"], [681, 3, 1, 0, "name", "Model name"], [682, 3, 1, 0, "nobs", "Number of observations used to estimate the model"], [683, 3, 1, 0, "params", "Estimated parameters"], [684, 4, 1, 0, "predict", "In- and out-of-sample predictions"], [685, 3, 1, 0, "pvalues", "Parameter p-vals. Uses t(df_resid) if debiased is True, else normal"], [686, 3, 1, 0, "resid_ss", "Residual sum of squares"], [687, 3, 1, 0, "resids", "Model residuals"], [688, 3, 1, 0, "rsquared", "Model Coefficient of determination"], [689, 3, 1, 0, "rsquared_between", "Between Coefficient of determination"], [690, 3, 1, 0, "rsquared_overall", "Overall coefficient of determination"], [691, 3, 1, 0, "rsquared_within", "Within coefficient of determination"], [692, 3, 1, 0, "s2", "Residual variance estimator"], [693, 3, 1, 0, "std_errors", "Estimated parameter standard errors"], [694, 3, 1, 0, "summary", "Model estimation summary."], [695, 3, 1, 0, "theta", "Values used in generalized demeaning"], [696, 3, 1, 0, "time_info", "Statistics on observations per time interval"], [697, 3, 1, 0, "total_ss", "Total sum of squares"], [698, 3, 1, 0, "tstats", "Parameter t-statistics"], [699, 3, 1, 0, "variance_decomposition", "Decomposition of total variance into effects and residuals"], [700, 4, 1, 0, "wald_test", "Test linear equality constraints using a Wald test"], [701, 3, 1, 0, "wresids", "Weighted model residuals"]], "linearmodels.panel.results.RandomEffectsResults.conf_int": [[666, 2, 2, 0, "level", "Confidence level for interval"]], "linearmodels.panel.results.RandomEffectsResults.predict": [[684, 2, 2, 0, "data", "DataFrame to use for out-of-sample predictions when model was constructed using a formula."], [684, 2, 2, 0, "effects", "Flag indicating whether to include estimated effects"], [684, 2, 2, 0, "exog", "Exogenous values to use in out-of-sample prediction (nobs by nexog)"], [684, 2, 2, 0, "fitted", "Flag indicating whether to include the fitted values"], [684, 2, 2, 0, "idiosyncratic", "Flag indicating whether to include the estimated idiosyncratic shock"], [684, 2, 2, 0, "missing", "Flag indicating to adjust for dropped observations.  if True, the values returns will have the same size as the original input data before filtering missing values"]], "linearmodels.panel.results.RandomEffectsResults.wald_test": [[700, 2, 2, 0, "formula", "formulaic linear constraints. The simplest formats are one of:"], [700, 2, 2, 0, "restriction", "q by nvar array containing linear weights to apply to parameters when forming the restrictions. It is not possible to use both restriction and formula."], [700, 2, 2, 0, "value", "q element array containing the restricted values."]], "linearmodels.panel.results.compare": [[702, 2, 2, 0, "precision", "Estimator precision estimator to include in the comparison output. Default is \"tstats\"."], [702, 2, 2, 0, "results", "Set of results to compare.  If a dict, the keys will be used as model names."], [702, 2, 2, 0, "stars", "Add stars based on the p-value of the coefficient where 1, 2 and 3-stars correspond to p-values of 10%, 5% and 1%, respectively."]], "linearmodels.panel.utility": [[703, 1, 1, 0, "PanelModelData", "Typed namedtuple to hold simulated panel data"], [710, 5, 1, 0, "generate_panel_data", "Simulate panel data for testing"]], "linearmodels.panel.utility.PanelModelData.__init__": [[703, 2, 2, 0, "clusters", "DataFrame containing cluster ids."], [703, 2, 2, 0, "data", "DataFrame containing the panel model's data"], [703, 2, 2, 0, "other_effects", "DataFrame containing the panel model's effects, excluding time and entity effects."], [703, 2, 2, 0, "weights", "DataFrame containing  the panel model's weights"]], "linearmodels.panel.utility.PanelModelData": [[704, 6, 1, 0, "clusters", "Alias for field number 3"], [705, 4, 1, 0, "count", "Return number of occurrences of value."], [706, 6, 1, 0, "data", "Alias for field number 0"], [707, 4, 1, 0, "index", "Return first index of value."], [708, 6, 1, 0, "other_effects", "Alias for field number 2"], [709, 6, 1, 0, "weights", "Alias for field number 1"]], "linearmodels.panel.utility.generate_panel_data": [[710, 2, 2, 0, "const", "Flag indicating that the model should include a constant."], [710, 2, 2, 0, "missing", "The percentage of values that are missing. Should be between 0 and 100."], [710, 2, 2, 0, "ncats", "The number of categories to use in other_effects and variance clusters. If list-like, then it must have as many elements as other_effects."], [710, 2, 2, 0, "nentity", "The number of entities in the panel."], [710, 2, 2, 0, "nexog", "The number of explanatory variables in the dataset."], [710, 2, 2, 0, "ntime", "The number of time periods in the panel."], [710, 2, 2, 0, "other_effects", "The number of other effects generated."], [710, 2, 2, 0, "rng", "A NumPy RandomState instance. If not provided, one is initialized using a fixed seed."]], "linearmodels.shared.covariance": [[867, 5, 1, 0, "cov_cluster", "Core cluster covariance estimator"], [868, 5, 1, 0, "cov_kernel", "Core kernel covariance estimator"], [869, 5, 1, 0, "group_debias_coefficient", "Compute the group debiasing scale."]], "linearmodels.shared.covariance.cov_cluster": [[867, 2, 2, 0, "clusters", "n by 1 array"], [867, 2, 2, 0, "z", "n by k mean zero data array"]], "linearmodels.shared.covariance.cov_kernel": [[868, 2, 2, 0, "w", "m by 1"], [868, 2, 2, 0, "z", "n by k mean zero data array"]], "linearmodels.shared.covariance.group_debias_coefficient": [[869, 2, 2, 0, "clusters", "One-dimensional array containing cluster group membership."]], "linearmodels.shared.hypotheses": [[870, 1, 1, 0, "InvalidTestStatistic", "Class returned if a requested test is not valid for a model"], [875, 1, 1, 0, "WaldTestStatistic", "Test statistic holder for Wald-type tests"]], "linearmodels.shared.hypotheses.InvalidTestStatistic.__init__": [[870, 2, 2, 0, "name", "Name of test"], [870, 2, 2, 0, "reason", "Explanation why test is invalid"]], "linearmodels.shared.hypotheses.InvalidTestStatistic": [[871, 3, 1, 0, "critical_values", "Always returns None"], [872, 3, 1, 0, "null", "Null hypothesis"], [873, 3, 1, 0, "pval", "Always returns np.nan"], [874, 3, 1, 0, "stat", "Test statistic"]], "linearmodels.shared.hypotheses.WaldTestStatistic.__init__": [[875, 2, 2, 0, "df", "Degree of freedom."], [875, 2, 2, 0, "df_denom", "Numerator degree of freedom.  If provided, uses an F(df, df_denom) distribution."], [875, 2, 2, 0, "name", "Name of test"], [875, 2, 2, 0, "null", "A statement of the test's null hypothesis"], [875, 2, 2, 0, "stat", "The test statistic"]], "linearmodels.shared.hypotheses.WaldTestStatistic": [[876, 3, 1, 0, "critical_values", "Critical values test for common test sizes"], [877, 3, 1, 0, "null", "Null hypothesis"], [878, 3, 1, 0, "pval", "P-value of test statistic"], [879, 3, 1, 0, "stat", "Test statistic"]], "linearmodels.shared.utility": [[880, 1, 1, 0, "AttrDict", "Ordered dictionary-like object that exposes keys as attributes"]], "linearmodels.shared.utility.AttrDict": [[881, 4, 1, 0, "clear", "Remove all items from AD."], [882, 4, 1, 0, "copy", "Create a shallow copy of AD"], [883, 4, 1, 0, "get", ""], [884, 4, 1, 0, "items", "Return an ordered list-like object providing a view on AD's items"], [885, 4, 1, 0, "keys", "Return an ordered list-like object providing a view on AD's keys"], [886, 4, 1, 0, "pop", "Remove specified key and return the corresponding value. If key is not found, default is returned if given, otherwise KeyError is raised"], [887, 4, 1, 0, "popitem", "as a 2-tuple; but raise KeyError if D is empty."], [888, 4, 1, 0, "setdefault", ""], [889, 4, 1, 0, "update", "Update AD from dictionary or iterable E and F. If E is present and has a .keys() method, then does:  for k in E: AD[k] = E[k] If E is present and lacks a .keys() method, then does:  for k, v in E: AD[k] = v In either case, this is followed by: for k in F:  AD[k] = F[k]"], [890, 4, 1, 0, "values", "Return an ordered list-like object object providing a view on AD's values"]], "linearmodels.system": [[719, 0, 0, 1, "covariance", ""], [719, 0, 0, 1, "gmm", ""], [719, 0, 0, 1, "model", ""], [719, 0, 0, 1, "results", ""]], "linearmodels.system.covariance": [[720, 1, 1, 0, "ClusteredCovariance", "Heteroskedastic covariance estimation for system regression"], [724, 1, 1, 0, "GMMHeteroskedasticCovariance", "Covariance estimator for IV system estimation with homoskedastic data"], [727, 1, 1, 0, "GMMHomoskedasticCovariance", "Covariance estimator for IV system estimation with homoskedastic data"], [730, 1, 1, 0, "GMMKernelCovariance", "Covariance estimator for IV system estimation with homoskedastic data"], [735, 1, 1, 0, "HeteroskedasticCovariance", "Heteroskedastic covariance estimation for system regression"], [739, 1, 1, 0, "HomoskedasticCovariance", "Homoskedastic covariance estimation for system regression"], [743, 1, 1, 0, "KernelCovariance", "Kernel (HAC) covariance estimation for system regression"]], "linearmodels.system.covariance.ClusteredCovariance.__init__": [[720, 2, 2, 0, "clusters", "Optional array of cluster id.  Must be integer valued, and have shape (nobs, ncluster) where ncluster is 1 or 2."], [720, 2, 2, 0, "constraints", "Constraints used in estimation, if any"], [720, 2, 2, 0, "debiased", "Flag indicating to apply a small sample adjustment"], [720, 2, 2, 0, "eps", "Model residuals, ndependent by nobs"], [720, 2, 2, 0, "gls", "Flag indicating to compute the GLS covariance estimator.  If False, assume OLS was used"], [720, 2, 2, 0, "group_debias", "Flag indicating whether to debias by the number of groups."], [720, 2, 2, 0, "sigma", "Covariance matrix estimator of eps"], [720, 2, 2, 0, "x", "ndependent element list of regressor"]], "linearmodels.system.covariance.ClusteredCovariance": [[721, 3, 1, 0, "cov", "Parameter covariance"], [722, 3, 1, 0, "cov_config", "Optional configuration information used in covariance"], [723, 3, 1, 0, "sigma", "Error covariance"]], "linearmodels.system.covariance.GMMHeteroskedasticCovariance.__init__": [[724, 2, 2, 0, "constraints", "Constraints used in estimation, if any"], [724, 2, 2, 0, "eps", "nobs by neq array of residuals where each column corresponds an equation in the system"], [724, 2, 2, 0, "sigma", "Residual covariance used in estimation"], [724, 2, 2, 0, "w", "Weighting matrix used in estimation"], [724, 2, 2, 0, "x", "List containing the model regressors for each equation in the system"], [724, 2, 2, 0, "z", "List containing the model instruments for each equation in the system"]], "linearmodels.system.covariance.GMMHeteroskedasticCovariance": [[725, 3, 1, 0, "cov", "Parameter covariance"], [726, 3, 1, 0, "cov_config", "Optional configuration information used in covariance"]], "linearmodels.system.covariance.GMMHomoskedasticCovariance.__init__": [[727, 2, 2, 0, "constraints", "Constraints used in estimation, if any"], [727, 2, 2, 0, "eps", "nobs by neq array of residuals where each column corresponds an equation in the system"], [727, 2, 2, 0, "sigma", "Residual covariance used in estimation"], [727, 2, 2, 0, "w", "Weighting matrix used in estimation"], [727, 2, 2, 0, "x", "List containing the model regressors for each equation in the system"], [727, 2, 2, 0, "z", "List containing the model instruments for each equation in the system"]], "linearmodels.system.covariance.GMMHomoskedasticCovariance": [[728, 3, 1, 0, "cov", "Parameter covariance"], [729, 3, 1, 0, "cov_config", "Optional configuration information used in covariance"]], "linearmodels.system.covariance.GMMKernelCovariance.__init__": [[730, 2, 2, 0, "bandwidth", "Bandwidth to use for the kernel.  If not provided the optimal bandwidth will be estimated."], [730, 2, 2, 0, "constraints", "Constraints used in estimation, if any"], [730, 2, 2, 0, "eps", "nobs by neq array of residuals where each column corresponds an equation in the system"], [730, 2, 2, 0, "kernel", "Name of kernel to use.  Supported kernels include:"], [730, 2, 2, 0, "sigma", "Residual covariance used in estimation"], [730, 2, 2, 0, "w", "Weighting matrix used in estimation"], [730, 2, 2, 0, "x", "List containing the model regressors for each equation in the system"], [730, 2, 2, 0, "z", "List containing the model instruments for each equation in the system"]], "linearmodels.system.covariance.GMMKernelCovariance": [[731, 3, 1, 0, "bandwidth", "Bandwidth used in estimation"], [732, 3, 1, 0, "cov", "Parameter covariance"], [733, 3, 1, 0, "cov_config", "Optional configuration information used in covariance"], [734, 3, 1, 0, "kernel", "Kernel used in estimation"]], "linearmodels.system.covariance.HeteroskedasticCovariance.__init__": [[735, 2, 2, 0, "constraints", "Constraints used in estimation, if any"], [735, 2, 2, 0, "debiased", "Flag indicating to apply a small sample adjustment"], [735, 2, 2, 0, "eps", "Model residuals, ndependent by nobs"], [735, 2, 2, 0, "gls", "Flag indicating to compute the GLS covariance estimator.  If False, assume OLS was used"], [735, 2, 2, 0, "sigma", "Covariance matrix estimator of eps"], [735, 2, 2, 0, "x", "ndependent element list of regressor"]], "linearmodels.system.covariance.HeteroskedasticCovariance": [[736, 3, 1, 0, "cov", "Parameter covariance"], [737, 3, 1, 0, "cov_config", "Optional configuration information used in covariance"], [738, 3, 1, 0, "sigma", "Error covariance"]], "linearmodels.system.covariance.HomoskedasticCovariance.__init__": [[739, 2, 2, 0, "constraints", "Constraints used in estimation, if any"], [739, 2, 2, 0, "debiased", "Flag indicating to apply a small sample adjustment"], [739, 2, 2, 0, "eps", "Model residuals, ndependent by nobs"], [739, 2, 2, 0, "gls", "Flag indicating to compute the GLS covariance estimator.  If False, assume OLS was used"], [739, 2, 2, 0, "sigma", "Covariance matrix estimator of eps"], [739, 2, 2, 0, "x", "List of regressor arrays (ndependent)"]], "linearmodels.system.covariance.HomoskedasticCovariance": [[740, 3, 1, 0, "cov", "Parameter covariance"], [741, 3, 1, 0, "cov_config", "Optional configuration information used in covariance"], [742, 3, 1, 0, "sigma", "Error covariance"]], "linearmodels.system.covariance.KernelCovariance.__init__": [[743, 2, 2, 0, "bandwidth", "Bandwidth to use for the kernel.  If not provided the optimal bandwidth will be estimated."], [743, 2, 2, 0, "debiased", "Flag indicating to apply a small sample adjustment"], [743, 2, 2, 0, "eps", "Model residuals, ndependent by nobs"], [743, 2, 2, 0, "gls", "Flag indicating to compute the GLS covariance estimator.  If False, assume OLS was used"], [743, 2, 2, 0, "kernel", "Name of kernel to use.  Supported kernels include:"], [743, 2, 2, 0, "sigma", "Covariance matrix estimator of eps"], [743, 2, 2, 0, "x", "ndependent element list of regressor"]], "linearmodels.system.covariance.KernelCovariance": [[744, 3, 1, 0, "bandwidth", "Bandwidth used in estimation"], [745, 3, 1, 0, "cov", "Parameter covariance"], [746, 3, 1, 0, "cov_config", "Optional configuration information used in covariance"], [747, 3, 1, 0, "kernel", "Kernel used in estimation"], [748, 3, 1, 0, "sigma", "Error covariance"]], "linearmodels.system.gmm": [[749, 1, 1, 0, "HeteroskedasticWeightMatrix", "Heteroskedasticity robust weight estimation"], [753, 1, 1, 0, "HomoskedasticWeightMatrix", "Homoskedastic (unadjusted) weight estimation"], [757, 1, 1, 0, "KernelWeightMatrix", "Heteroskedasticity robust weight estimation"]], "linearmodels.system.gmm.HeteroskedasticWeightMatrix.__init__": [[749, 2, 2, 0, "center", "Flag indicating whether to center the moment conditions by subtracting the mean before computing the weight matrix."], [749, 2, 2, 0, "debiased", "Flag indicating whether to use small-sample adjustments"]], "linearmodels.system.gmm.HeteroskedasticWeightMatrix": [[750, 3, 1, 0, "config", "Weight estimator configuration"], [751, 4, 1, 0, "sigma", "Estimate residual covariance."], [752, 4, 1, 0, "weight_matrix", "Construct a GMM weight matrix for a model."]], "linearmodels.system.gmm.HeteroskedasticWeightMatrix.sigma": [[751, 2, 2, 0, "eps", "The residuals from the system of equations."], [751, 2, 2, 0, "x", "A list of the regressor matrices for each equation in the system."]], "linearmodels.system.gmm.HeteroskedasticWeightMatrix.weight_matrix": [[752, 2, 2, 0, "eps", "Model errors (nobs by 1)"], [752, 2, 2, 0, "sigma", "Fixed covariance of model errors. If None, estimated from eps."], [752, 2, 2, 0, "x", "Model regressors (exog and endog), (nobs by nvar)"], [752, 2, 2, 0, "z", "Model instruments (exog and instruments), (nobs by ninstr)"]], "linearmodels.system.gmm.HomoskedasticWeightMatrix.__init__": [[753, 2, 2, 0, "center", "Flag indicating whether to center the moment conditions by subtracting the mean before computing the weight matrix."], [753, 2, 2, 0, "debiased", "Flag indicating whether to use small-sample adjustments"]], "linearmodels.system.gmm.HomoskedasticWeightMatrix": [[754, 3, 1, 0, "config", "Weight estimator configuration"], [755, 4, 1, 0, "sigma", "Estimate residual covariance."], [756, 4, 1, 0, "weight_matrix", "Construct a GMM weight matrix for a model."]], "linearmodels.system.gmm.HomoskedasticWeightMatrix.sigma": [[755, 2, 2, 0, "eps", "The residuals from the system of equations."], [755, 2, 2, 0, "x", "A list of the regressor matrices for each equation in the system."]], "linearmodels.system.gmm.HomoskedasticWeightMatrix.weight_matrix": [[756, 2, 2, 0, "eps", "Model errors (nobs by neqn)"], [756, 2, 2, 0, "sigma", "Fixed covariance of model errors. If None, estimated from eps."], [756, 2, 2, 0, "x", "List of containing model regressors for each equation in the system"], [756, 2, 2, 0, "z", "List of containing instruments for each equation in the system"]], "linearmodels.system.gmm.KernelWeightMatrix.__init__": [[757, 2, 2, 0, "bandwidth", "Bandwidth to use for the kernel.  If not provided the optimal bandwidth will be estimated."], [757, 2, 2, 0, "center", "Flag indicating whether to center the moment conditions by subtracting the mean before computing the weight matrix."], [757, 2, 2, 0, "debiased", "Flag indicating whether to use small-sample adjustments"], [757, 2, 2, 0, "kernel", "Name of kernel to use.  Supported kernels include:"], [757, 2, 2, 0, "optimal_bw", "Flag indicating whether to estimate the optimal bandwidth, when bandwidth is None.  If False, nobs - 2 is used"]], "linearmodels.system.gmm.KernelWeightMatrix": [[758, 3, 1, 0, "bandwidth", "Bandwidth used to estimate covariance of moment conditions"], [759, 3, 1, 0, "config", "Weight estimator configuration"], [760, 3, 1, 0, "kernel", "Kernel used in estimation"], [761, 4, 1, 0, "sigma", "Estimate residual covariance."], [762, 4, 1, 0, "weight_matrix", "Construct a GMM weight matrix for a model."]], "linearmodels.system.gmm.KernelWeightMatrix.sigma": [[761, 2, 2, 0, "eps", "The residuals from the system of equations."], [761, 2, 2, 0, "x", "A list of the regressor matrices for each equation in the system."]], "linearmodels.system.gmm.KernelWeightMatrix.weight_matrix": [[762, 2, 2, 0, "eps", "Model errors (nobs by nequation)"], [762, 2, 2, 0, "sigma", "Fixed covariance of model errors. If None, estimated from eps."], [762, 2, 2, 0, "x", "Model regressors (exog and endog)"], [762, 2, 2, 0, "z", "Model instruments (exog and instruments)"]], "linearmodels.system.model": [[763, 1, 1, 0, "IV3SLS", "Three-stage Least Squares (3SLS) Estimator"], [774, 1, 1, 0, "IVSystemGMM", "System Generalized Method of Moments (GMM) estimation of linear IV models"], [784, 1, 1, 0, "LinearConstraint", "Linear constraint for regression estimation"], [789, 1, 1, 0, "SUR", "Seemingly unrelated regression estimation (SUR/SURE)"]], "linearmodels.system.model.IV3SLS.__init__": [[763, 2, 2, 0, "equations", "Dictionary-like structure containing dependent, exogenous, endogenous and instrumental variables.  Each key is an equations label and must be a string. Each value must be either a tuple of the form (dependent, exog, endog, instrument[, weights]) or a dictionary with keys \"dependent\", and at least one of \"exog\" or \"endog\" and \"instruments\".  When using a tuple, values must be provided for all 4 variables, although either empty arrays or None can be passed if a category of variable is not included in a model. The dictionary may contain optional keys for \"exog\", \"endog\", \"instruments\", and \"weights\". \"exog\" can be omitted if all variables in an equation are endogenous. Alternatively, \"exog\" can contain either an empty array or None to indicate that an equation contains no exogenous regressors. Similarly \"endog\" and \"instruments\" can either be omitted or may contain an empty array (or None) if all variables in an equation are exogenous."], [763, 2, 2, 0, "sigma", "Prespecified residual covariance to use in GLS estimation. If not provided, FGLS is implemented based on an estimate of sigma."]], "linearmodels.system.model.IV3SLS": [[764, 4, 1, 0, "add_constraints", "Add parameter constraints to a model."], [765, 3, 1, 0, "constraints", "Model constraints"], [766, 4, 1, 0, "fit", "Estimate model parameters"], [767, 3, 1, 0, "formula", "Set or get the formula used to construct the model"], [768, 4, 1, 0, "from_formula", "Specify a 3SLS using the formula interface"], [769, 3, 1, 0, "has_constant", "Vector indicating which equations contain constants"], [770, 4, 1, 0, "multivariate_iv", "Interface for specification of multivariate IV models"], [771, 3, 1, 0, "param_names", "Model parameter names"], [772, 4, 1, 0, "predict", "Predict values for additional data"], [773, 4, 1, 0, "reset_constraints", "Remove all model constraints"]], "linearmodels.system.model.IV3SLS.add_constraints": [[764, 2, 2, 0, "q", "Constraint values (nconstraints).  If not set, set to 0"], [764, 2, 2, 0, "r", "Constraint matrix. nconstraints by nparameters"]], "linearmodels.system.model.IV3SLS.fit": [[766, 2, 2, 0, "cov_type", "Name of covariance estimator. Valid options are"], [766, 2, 2, 0, "full_cov", "Flag indicating whether to utilize information in correlations when estimating the model with GLS"], [766, 2, 2, 0, "iter_limit", "Maximum number of iterations for iterative GLS"], [766, 2, 2, 0, "iterate", "Flag indicating to iterate GLS until convergence of iter limit iterations have been completed"], [766, 2, 2, 0, "method", "Estimation method.  Default auto selects based on regressors, using OLS only if all regressors are identical. The other two arguments force the use of GLS or OLS."], [766, 2, 2, 0, "tol", "Tolerance to use when checking for convergence in iterative GLS"]], "linearmodels.system.model.IV3SLS.from_formula": [[768, 2, 2, 0, "data", "Frame containing named variables"], [768, 2, 2, 0, "formula", "Either a string or a dictionary of strings where each value in the dictionary represents a single equation. See Notes for a description of the accepted syntax"], [768, 2, 2, 0, "sigma", "Prespecified residual covariance to use in GLS estimation. If not provided, FGLS is implemented based on an estimate of sigma."], [768, 2, 2, 0, "weights", "Dictionary like object (e.g. a DataFrame) containing variable weights.  Each entry must have the same number of observations as data.  If an equation label is not a key weights, the weights will be set to unity"]], "linearmodels.system.model.IV3SLS.multivariate_iv": [[770, 2, 2, 0, "dependent", "nobs by ndep array of dependent variables"], [770, 2, 2, 0, "endog", "nobs by nendog array of endogenous regressors common to all models"], [770, 2, 2, 0, "exog", "nobs by nexog array of exogenous regressors common to all models"], [770, 2, 2, 0, "instruments", "nobs by ninstr array of instruments to use in all equations"]], "linearmodels.system.model.IV3SLS.predict": [[772, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [772, 2, 2, 0, "equations", "Dictionary-like structure containing exogenous and endogenous variables.  Each key is an equations label and must match the labels used to fir the model. Each value must be a dictionary with keys \"exog\" and \"endog\". If predictions are not required for one of more of the model equations, these keys can be omitted."], [772, 2, 2, 0, "eval_env", "Depth to  use when evaluating formulas."], [772, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.system.model.IVSystemGMM.__init__": [[774, 2, 2, 0, "equations", "Dictionary-like structure containing dependent, exogenous, endogenous and instrumental variables.  Each key is an equations label and must be a string. Each value must be either a tuple of the form (dependent, exog, endog, instrument[, weights]) or a dictionary with keys \"dependent\", \"exog\".  The dictionary may contain optional keys for \"endog\", \"instruments\", and \"weights\". Endogenous and/or Instrument can be empty if all variables in an equation are exogenous."], [774, 2, 2, 0, "sigma", "Prespecified residual covariance to use in GLS estimation. If not provided, FGLS is implemented based on an estimate of sigma. Only used if weight_type is \"unadjusted\""], [774, 2, 2, 0, "weight_type", "Name of moment condition weight function to use in the GMM estimation"]], "linearmodels.system.model.IVSystemGMM": [[775, 4, 1, 0, "add_constraints", "Add parameter constraints to a model."], [776, 3, 1, 0, "constraints", "Model constraints"], [777, 4, 1, 0, "fit", "Estimate model parameters"], [778, 3, 1, 0, "formula", "Set or get the formula used to construct the model"], [779, 4, 1, 0, "from_formula", "Specify a 3SLS using the formula interface"], [780, 3, 1, 0, "has_constant", "Vector indicating which equations contain constants"], [781, 3, 1, 0, "param_names", "Model parameter names"], [782, 4, 1, 0, "predict", "Predict values for additional data"], [783, 4, 1, 0, "reset_constraints", "Remove all model constraints"]], "linearmodels.system.model.IVSystemGMM.add_constraints": [[775, 2, 2, 0, "q", "Constraint values (nconstraints).  If not set, set to 0"], [775, 2, 2, 0, "r", "Constraint matrix. nconstraints by nparameters"]], "linearmodels.system.model.IVSystemGMM.fit": [[777, 2, 2, 0, "cov_type", "Name of covariance estimator. Valid options are"], [777, 2, 2, 0, "initial_weight", "Initial weighting matrix to use in the first step. If not specified, uses the average outer-product of the set containing the exogenous variables and instruments."], [777, 2, 2, 0, "iter_limit", "Maximum number of iterations for iterative GLS"], [777, 2, 2, 0, "tol", "Tolerance to use when checking for convergence in iterative GLS"]], "linearmodels.system.model.IVSystemGMM.from_formula": [[779, 2, 2, 0, "data", "Frame containing named variables"], [779, 2, 2, 0, "formula", "Either a string or a dictionary of strings where each value in the dictionary represents a single equation. See Notes for a description of the accepted syntax"], [779, 2, 2, 0, "weight_type", "Name of moment condition weight function to use in the GMM estimation. Valid options are:"], [779, 2, 2, 0, "weights", "Dictionary like object (e.g. a DataFrame) containing variable weights.  Each entry must have the same number of observations as data.  If an equation label is not a key weights, the weights will be set to unity"]], "linearmodels.system.model.IVSystemGMM.predict": [[782, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [782, 2, 2, 0, "equations", "Dictionary-like structure containing exogenous and endogenous variables.  Each key is an equations label and must match the labels used to fir the model. Each value must be a dictionary with keys \"exog\" and \"endog\". If predictions are not required for one of more of the model equations, these keys can be omitted."], [782, 2, 2, 0, "eval_env", "Depth to  use when evaluating formulas."], [782, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.system.model.LinearConstraint.__init__": [[784, 2, 2, 0, "num_params", "Number of model parameter.  Used to test for correctness"], [784, 2, 2, 0, "q", "Restriction value"], [784, 2, 2, 0, "r", "Restriction loading matrix"], [784, 2, 2, 0, "require_pandas", "Flag indicating whether r and q must be pandas"]], "linearmodels.system.model.LinearConstraint": [[785, 3, 1, 0, "a", "Transformed constraint target"], [786, 3, 1, 0, "q", "Constrain target values"], [787, 3, 1, 0, "r", "Constraint loading matrix"], [788, 3, 1, 0, "t", "Constraint transformation matrix"]], "linearmodels.system.model.SUR.__init__": [[789, 2, 2, 0, "equations", "Dictionary-like structure containing dependent and exogenous variable values.  Each key is an equations label and must be a string. Each value must be either a tuple of the form (dependent, exog, [weights]) or a dictionary with keys \"dependent\" and \"exog\" and the optional key \"weights\"."], [789, 2, 2, 0, "sigma", "Prespecified residual covariance to use in GLS estimation. If not provided, FGLS is implemented based on an estimate of sigma."]], "linearmodels.system.model.SUR": [[790, 4, 1, 0, "add_constraints", "Add parameter constraints to a model."], [791, 3, 1, 0, "constraints", "Model constraints"], [792, 4, 1, 0, "fit", "Estimate model parameters"], [793, 3, 1, 0, "formula", "Set or get the formula used to construct the model"], [794, 4, 1, 0, "from_formula", "Specify a SUR using the formula interface"], [795, 3, 1, 0, "has_constant", "Vector indicating which equations contain constants"], [796, 4, 1, 0, "multivariate_ls", "Interface for specification of multivariate regression models"], [797, 3, 1, 0, "param_names", "Model parameter names"], [798, 4, 1, 0, "predict", "Predict values for additional data"], [799, 4, 1, 0, "reset_constraints", "Remove all model constraints"]], "linearmodels.system.model.SUR.add_constraints": [[790, 2, 2, 0, "q", "Constraint values (nconstraints).  If not set, set to 0"], [790, 2, 2, 0, "r", "Constraint matrix. nconstraints by nparameters"]], "linearmodels.system.model.SUR.fit": [[792, 2, 2, 0, "cov_type", "Name of covariance estimator. Valid options are"], [792, 2, 2, 0, "full_cov", "Flag indicating whether to utilize information in correlations when estimating the model with GLS"], [792, 2, 2, 0, "iter_limit", "Maximum number of iterations for iterative GLS"], [792, 2, 2, 0, "iterate", "Flag indicating to iterate GLS until convergence of iter limit iterations have been completed"], [792, 2, 2, 0, "method", "Estimation method.  Default auto selects based on regressors, using OLS only if all regressors are identical. The other two arguments force the use of GLS or OLS."], [792, 2, 2, 0, "tol", "Tolerance to use when checking for convergence in iterative GLS"]], "linearmodels.system.model.SUR.from_formula": [[794, 2, 2, 0, "data", "Frame containing named variables"], [794, 2, 2, 0, "formula", "Either a string or a dictionary of strings where each value in the dictionary represents a single equation. See Notes for a description of the accepted syntax"], [794, 2, 2, 0, "sigma", "Prespecified residual covariance to use in GLS estimation. If not provided, FGLS is implemented based on an estimate of sigma."], [794, 2, 2, 0, "weights", "Dictionary like object (e.g. a DataFrame) containing variable weights.  Each entry must have the same number of observations as data.  If an equation label is not a key weights, the weights will be set to unity"]], "linearmodels.system.model.SUR.multivariate_ls": [[796, 2, 2, 0, "dependent", "nobs by ndep array of dependent variables"], [796, 2, 2, 0, "exog", "nobs by nvar array of exogenous regressors common to all models"]], "linearmodels.system.model.SUR.predict": [[798, 2, 2, 0, "data", "Values to use when making predictions from a model constructed from a formula"], [798, 2, 2, 0, "equations", "Dictionary-like structure containing exogenous and endogenous variables.  Each key is an equations label and must match the labels used to fir the model. Each value must be a dictionary with keys \"exog\" and \"endog\". If predictions are not required for one of more of the model equations, these keys can be omitted."], [798, 2, 2, 0, "eval_env", "Depth to  use when evaluating formulas."], [798, 2, 2, 0, "params", "Model parameters (nvar by 1)"]], "linearmodels.system.results": [[800, 1, 1, 0, "GMMSystemResults", "Results from GMM System Estimators"], [835, 1, 1, 0, "SystemResults", "Results from Seemingly Unrelated Regression Estimators"]], "linearmodels.system.results.GMMSystemResults.__init__": [[800, 2, 2, 0, "results", "Dictionary of model estimation results"]], "linearmodels.system.results.GMMSystemResults": [[801, 4, 1, 0, "breusch_pagan", "Breusch-Pagan LM test for no cross-correlation"], [802, 4, 1, 0, "conf_int", "Confidence interval construction"], [803, 3, 1, 0, "cov", "Estimated covariance of parameters"], [804, 3, 1, 0, "cov_config", "Configuration of covariance estimator used to compute covariance"], [805, 3, 1, 0, "cov_estimator", "Type of covariance estimator used to compute covariance"], [806, 3, 1, 0, "debiased", "Flag indicating whether covariance uses a small-sample adjustment"], [807, 3, 1, 0, "df_model", "Model degree of freedom"], [808, 3, 1, 0, "df_resid", "Residual degree of freedom"], [809, 3, 1, 0, "equation_labels", "Individual equation labels"], [810, 3, 1, 0, "equations", "Individual equation results"], [811, 3, 1, 0, "fitted_values", "Fitted values"], [812, 3, 1, 0, "iterations", "Number of iterations of the GLS executed"], [813, 3, 1, 0, "j_stat", "J-test of overidentifying restrictions"], [814, 4, 1, 0, "likelihood_ratio", "Likelihood ratio test of no cross-correlation"], [815, 3, 1, 0, "method", "Estimation method"], [816, 3, 1, 0, "model", "Model used in estimation"], [817, 3, 1, 0, "model_ss", "Residual sum of squares"], [818, 3, 1, 0, "nobs", "Number of observations"], [819, 3, 1, 0, "params", "Estimated parameters"], [820, 4, 1, 0, "predict", "In- and out-of-sample predictions"], [821, 3, 1, 0, "pvalues", "Parameter p-vals. Uses t(df_resid) if debiased is True, else normal"], [822, 3, 1, 0, "resid_ss", "Residual sum of squares"], [823, 3, 1, 0, "resids", "Estimated residuals"], [824, 3, 1, 0, "rsquared", "Coefficient of determination (R2)"], [825, 3, 1, 0, "sigma", "Estimated residual covariance"], [826, 3, 1, 0, "std_errors", "Estimated parameter standard errors"], [827, 3, 1, 0, "summary", "Model estimation summary."], [828, 3, 1, 0, "system_rsquared", "Alternative measure of system fit"], [829, 3, 1, 0, "total_ss", "Total sum of squares"], [830, 3, 1, 0, "tstats", "Parameter t-statistics"], [831, 3, 1, 0, "w", "GMM weight matrix used in estimation"], [832, 3, 1, 0, "weight_config", "Weight configuration options used in GMM estimation"], [833, 3, 1, 0, "weight_type", "Type of weighting used in GMM estimation"], [834, 3, 1, 0, "wresids", "Weighted estimated residuals"]], "linearmodels.system.results.GMMSystemResults.conf_int": [[802, 2, 2, 0, "level", "Confidence level for interval"]], "linearmodels.system.results.GMMSystemResults.predict": [[820, 2, 2, 0, "data", "DataFrame to use for out-of-sample predictions when model was constructed using a formula."], [820, 2, 2, 0, "dataframe", "Flag indicating to return output as a dataframe. If False, a dictionary is returned using the equation labels as keys."], [820, 2, 2, 0, "equations", "Dictionary-like structure containing exogenous and endogenous variables.  Each key is an equations label and must match the labels used to fit the model. Each value must be either a tuple of the form (exog, endog) or a dictionary with keys \"exog\" and \"endog\". If predictions are not required for one of more of the model equations, these keys can be omitted."], [820, 2, 2, 0, "fitted", "Flag indicating whether to include the fitted values"], [820, 2, 2, 0, "idiosyncratic", "Flag indicating whether to include the estimated idiosyncratic shock"], [820, 2, 2, 0, "missing", "Flag indicating to adjust for dropped observations.  if True, the values returns will have the same size as the original input data before filtering missing values"]], "linearmodels.system.results.SystemResults.__init__": [[835, 2, 2, 0, "results", "Dictionary of model estimation results"]], "linearmodels.system.results.SystemResults": [[836, 4, 1, 0, "breusch_pagan", "Breusch-Pagan LM test for no cross-correlation"], [837, 4, 1, 0, "conf_int", "Confidence interval construction"], [838, 3, 1, 0, "cov", "Estimated covariance of parameters"], [839, 3, 1, 0, "cov_config", "Configuration of covariance estimator used to compute covariance"], [840, 3, 1, 0, "cov_estimator", "Type of covariance estimator used to compute covariance"], [841, 3, 1, 0, "debiased", "Flag indicating whether covariance uses a small-sample adjustment"], [842, 3, 1, 0, "df_model", "Model degree of freedom"], [843, 3, 1, 0, "df_resid", "Residual degree of freedom"], [844, 3, 1, 0, "equation_labels", "Individual equation labels"], [845, 3, 1, 0, "equations", "Individual equation results"], [846, 3, 1, 0, "fitted_values", "Fitted values"], [847, 3, 1, 0, "iterations", "Number of iterations of the GLS executed"], [848, 4, 1, 0, "likelihood_ratio", "Likelihood ratio test of no cross-correlation"], [849, 3, 1, 0, "method", "Estimation method"], [850, 3, 1, 0, "model", "Model used in estimation"], [851, 3, 1, 0, "model_ss", "Residual sum of squares"], [852, 3, 1, 0, "nobs", "Number of observations"], [853, 3, 1, 0, "params", "Estimated parameters"], [854, 4, 1, 0, "predict", "In- and out-of-sample predictions"], [855, 3, 1, 0, "pvalues", "Parameter p-vals. Uses t(df_resid) if debiased is True, else normal"], [856, 3, 1, 0, "resid_ss", "Residual sum of squares"], [857, 3, 1, 0, "resids", "Estimated residuals"], [858, 3, 1, 0, "rsquared", "Coefficient of determination (R2)"], [859, 3, 1, 0, "sigma", "Estimated residual covariance"], [860, 3, 1, 0, "std_errors", "Estimated parameter standard errors"], [861, 3, 1, 0, "summary", "Model estimation summary."], [862, 3, 1, 0, "system_rsquared", "Alternative measure of system fit"], [863, 3, 1, 0, "total_ss", "Total sum of squares"], [864, 3, 1, 0, "tstats", "Parameter t-statistics"], [865, 3, 1, 0, "wresids", "Weighted estimated residuals"]], "linearmodels.system.results.SystemResults.conf_int": [[837, 2, 2, 0, "level", "Confidence level for interval"]], "linearmodels.system.results.SystemResults.predict": [[854, 2, 2, 0, "data", "DataFrame to use for out-of-sample predictions when model was constructed using a formula."], [854, 2, 2, 0, "dataframe", "Flag indicating to return output as a dataframe. If False, a dictionary is returned using the equation labels as keys."], [854, 2, 2, 0, "equations", "Dictionary-like structure containing exogenous and endogenous variables.  Each key is an equations label and must match the labels used to fit the model. Each value must be either a tuple of the form (exog, endog) or a dictionary with keys \"exog\" and \"endog\". If predictions are not required for one of more of the model equations, these keys can be omitted."], [854, 2, 2, 0, "fitted", "Flag indicating whether to include the fitted values"], [854, 2, 2, 0, "idiosyncratic", "Flag indicating whether to include the estimated idiosyncratic shock"], [854, 2, 2, 0, "missing", "Flag indicating to adjust for dropped observations.  if True, the values returns will have the same size as the original input data before filtering missing values"]], "linearmodels": [[866, 0, 0, 1, "utility", ""]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:parameter", "3": "py:property", "4": "py:method", "5": "py:function", "6": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "property", "Python property"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "attribute", "Python attribute"]}, "titleterms": {"linearmodel": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890], "asset_pr": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "covari": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 74, 149, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 394, 395, 397, 399, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 711, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 866, 867, 868, 869], "heteroskedasticcovari": [0, 1, 2, 3, 4, 5, 6, 160, 161, 162, 163, 164, 165, 438, 439, 440, 441, 442, 443, 444, 445, 735, 736, 737, 738], "config": [1, 9, 155, 161, 167, 173, 193, 196, 199, 206, 209, 750, 754, 759], "cov": [2, 10, 31, 52, 106, 156, 162, 168, 174, 200, 274, 326, 364, 407, 415, 423, 433, 441, 449, 546, 581, 635, 670, 721, 725, 728, 732, 736, 740, 745, 803, 838], "inv_jacobian": [3, 11], "jacobian": [4, 12], "": [5, 14, 158, 164, 170, 176, 202], "squar": [6, 15, 394, 395, 712, 716, 718], "kernelcovari": [7, 8, 9, 10, 11, 12, 13, 14, 15, 172, 173, 174, 175, 176, 177, 743, 744, 745, 746, 747, 748], "see": [7, 91, 96, 172, 178, 198, 204, 211, 213, 222, 224, 233, 234, 235, 245, 247, 256, 258, 720, 743, 766, 792, 870, 875], "also": [7, 91, 96, 172, 178, 198, 204, 211, 213, 222, 224, 233, 234, 235, 245, 247, 256, 258, 720, 743, 766, 792, 870, 875], "bandwidth": [8, 205, 394, 432, 731, 744, 758], "kernel": [13, 394, 395, 714, 734, 747, 760], "model": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 71, 73, 74, 151, 153, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 397, 398, 400, 402, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 711, 712, 715, 716, 717, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 816, 850], "linearfactormodel": [16, 17, 18, 19], "fit": [17, 21, 25, 96, 213, 224, 235, 247, 258, 488, 496, 504, 513, 523, 531, 718, 766, 777, 792], "formula": [18, 22, 26, 70, 73, 150, 151, 214, 225, 236, 248, 259, 394, 398, 402, 489, 497, 505, 514, 524, 532, 715, 716, 767, 778, 793], "from_formula": [19, 23, 27, 215, 226, 237, 249, 260, 490, 498, 506, 515, 525, 533, 768, 779, 794], "linearfactormodelgmm": [20, 21, 22, 23], "tradedfactormodel": [24, 25, 26, 27], "result": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 74, 149, 151, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 711, 719, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865], "gmmfactormodelresult": [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "alpha": [29, 50], "beta": [30, 51], "cov_estim": [32, 53, 108, 276, 310, 328, 366, 617, 805, 840], "full_summari": [33, 54], "iter": [34, 69, 286, 714, 812, 847], "j_statist": [35, 55], "name": [36, 56, 410, 418, 426, 436, 444, 452, 557, 594, 646, 681], "nob": [37, 57, 120, 146, 291, 313, 342, 378, 470, 558, 595, 620, 647, 682, 818, 852], "param": [38, 58, 121, 292, 314, 343, 379, 559, 597, 621, 648, 683, 819, 853], "pvalu": [39, 59, 122, 294, 315, 345, 381, 561, 599, 622, 650, 685, 821, 855], "residual_ss": [40, 60], "risk_premia": [41, 61], "risk_premia_s": [42, 62], "risk_premia_tstat": [43, 63], "rsquar": [44, 64, 125, 297, 316, 348, 384, 564, 602, 623, 653, 688, 824, 858], "std_error": [45, 65, 128, 300, 318, 352, 387, 569, 608, 627, 658, 693, 826, 860], "summari": [46, 66, 80, 81, 82, 83, 84, 85, 86, 87, 88, 129, 270, 301, 319, 353, 388, 570, 609, 628, 659, 694, 827, 861], "total_ss": [47, 67, 130, 302, 354, 389, 572, 611, 661, 697, 829, 863], "tstat": [48, 68, 131, 303, 320, 355, 390, 573, 612, 629, 662, 698, 830, 864], "linearfactormodelresult": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "exampl": [69, 149, 150, 397, 714], "gener": [69, 394, 395, 711, 718, 719], "setup": 69, "import": [69, 70, 149], "data": [69, 70, 149, 151, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 395, 396, 397, 398, 400, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 706, 711, 712, 714, 716], "transform": [69, 70], "portfolio": [69, 70], "excess": [69, 70], "1": [69, 75, 76, 78], "step": 69, "estim": [69, 73, 74, 149, 150, 151, 152, 153, 394, 395, 397, 400, 402, 711, 712, 714, 715, 716, 718, 719, 866], "us": [69, 70, 73, 151, 397, 398, 714, 715], "seemingli": [69, 718], "unrel": [69, 718], "regress": [69, 148, 149, 397, 717, 718, 719], "sur": [69, 718, 719, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799], "2": [69, 75, 76, 78, 399, 402, 718], "gmm": [69, 73, 149, 153, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 394, 395, 716, 718, 719, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762], "until": 69, "converg": 69, "continu": [69, 149, 394], "updat": [69, 149, 394, 889], "avail": 70, "syntax": 70, "test": [70, 149, 394, 711, 718, 866], "factor": [70, 71, 73], "onli": 70, "return": 70, "first": [70, 149, 394, 397, 398, 402], "second": 70, "compar": [70, 149, 151, 393, 397, 702], "linear": [71, 73, 74, 149, 394], "asset": [71, 74, 712], "price": [71, 74, 712], "introduct": [72, 153, 401], "mathemat": [73, 151, 394, 402], "detail": [73, 394, 402], "trade": 73, "The": [73, 397], "j": [73, 240], "statist": [73, 394, 718], "non": 73, "improv": 73, "specif": [73, 153, 716], "gl": [73, 714], "modul": [74, 395, 711, 712, 719], "refer": [74, 395, 711, 713, 719], "chang": [75, 149], "log": 75, "verison": [75, 78], "5": [75, 77, 78], "4": [75, 77, 78], "version": [75, 76, 77, 78, 79], "3": [75, 76, 78], "0": [75, 76, 77, 78, 79], "past": 75, "releas": 75, "31": 77, "30": 77, "29": 77, "28": 77, "27": 77, "26": 77, "25": 77, "24": 77, "21": 77, "20": 77, "19": 77, "18": 77, "17": 77, "16": 77, "15": 77, "14": 77, "13": 77, "12": 77, "11": 77, "10": 77, "9": 77, "8": 77, "7": 77, "6": [77, 79], "note": [79, 90], "compat": [80, 81, 82, 83, 84, 85, 86, 87, 88], "statsmodel": [81, 82, 83, 84, 85, 86, 87, 88], "add_extra_txt": 82, "add_table_2col": 83, "add_table_param": 84, "as_csv": 85, "as_html": 86, "as_latex": 87, "as_text": 88, "contribut": 89, "indic": 90, "iv": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395], "absorb": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 395], "absorbingl": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "absorbed_depend": 92, "absorbed_exog": 93, "depend": 94, "exog": 95, "has_const": [97, 116, 136, 216, 227, 238, 250, 261, 284, 337, 373, 491, 499, 507, 516, 526, 534, 769, 780, 795], "instrument": [98, 149, 152, 395, 712], "resid": [99, 124, 220, 231, 243, 254, 265, 296, 347, 383, 563, 601, 652, 687, 823, 857], "weight": [100, 149, 150, 394, 395, 709, 715, 718, 719], "wresid": [101, 133, 221, 232, 244, 255, 266, 308, 360, 392, 575, 615, 664, 701, 834, 865], "absorbinglsresult": [102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], "absorbed_effect": 103, "absorbed_rsquar": 104, "conf_int": [105, 273, 325, 363, 542, 577, 631, 666, 802, 837], "cov_config": [107, 275, 327, 365, 722, 726, 729, 733, 737, 741, 746, 804, 839], "cov_typ": [109, 277, 329, 367], "debias": [110, 157, 163, 169, 175, 201, 278, 330, 368, 806, 841], "df_absorb": 111, "df_model": [112, 279, 331, 369, 547, 582, 636, 671, 807, 842], "df_resid": [113, 280, 332, 370, 548, 583, 637, 672, 808, 843], "f_statist": [114, 281, 312, 334, 371, 551, 587, 619, 640, 675], "fitted_valu": [115, 283, 336, 372, 553, 589, 642, 677, 811, 846], "idiosyncrat": [117, 285, 338, 374, 554, 590, 643, 678], "method": [118, 289, 340, 376, 394, 402, 718, 719, 815, 849], "model_ss": [119, 290, 341, 377, 556, 593, 645, 680, 817, 851], "resid_ss": [123, 295, 346, 382, 562, 600, 651, 686, 822, 856], "rsquared_adj": [126, 298, 317, 349, 385], "s2": [127, 159, 165, 171, 177, 203, 299, 350, 386, 411, 419, 427, 437, 445, 453, 568, 607, 657, 692], "wald_test": [132, 304, 356, 391, 574, 614, 663, 700], "absorbingregressor": [134, 135, 136, 137, 138], "approx_rank": 135, "hash": [137, 144], "regressor": [138, 714], "interact": [139, 140, 141, 142, 143, 144, 145, 146, 147], "cat": 140, "cont": 141, "drop": [142, 184, 459], "from_fram": 143, "isnul": [145, 185, 217, 228, 239, 251, 262, 466], "spars": 147, "includ": [148, 397], "constant": [148, 394, 398], "exclud": 148, "optim": 148, "option": [148, 153, 397, 714, 715], "further": 149, "variabl": [149, 150, 151, 152, 395, 397, 712], "2sl": [149, 153, 394], "ol": [149, 151, 398, 714], "just": 149, "identifi": 149, "multipl": [149, 151], "altern": [149, 714], "matrix": 149, "structur": [149, 395, 711], "endogen": [149, 151], "exogen": 149, "singl": 149, "stage": [149, 394, 716, 718], "diagnost": [149, 150, 268], "liml": [149, 153, 394], "iv2sl": [149, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221], "basic": [150, 151, 394, 397, 714, 718], "wage": 150, "marri": 150, "women": 150, "men": 150, "smoke": 150, "birth": 150, "proxim": 150, "educ": 150, "interfac": 150, "categor": [150, 396], "post": [150, 394], "panel": [150, 396, 397, 398, 400, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712], "specifi": [151, 398, 715], "usag": [151, 714], "standard": [151, 394, 402], "mep": 151, "express": 151, "argument": 153, "cue": [153, 394], "clusteredcovari": [154, 155, 156, 157, 158, 159, 412, 413, 414, 415, 416, 417, 418, 419, 720, 721, 722, 723], "homoskedasticcovari": [166, 167, 168, 169, 170, 171, 446, 447, 448, 449, 450, 451, 452, 453, 739, 740, 741, 742], "kernel_optimal_bandwidth": 178, "todo": [178, 211, 222, 245], "kernel_weight_bartlett": 179, "kernel_weight_parzen": 180, "kernel_weight_quadratic_spectr": 181, "ivdata": [182, 183, 184, 185, 186, 187, 188, 189, 190, 191], "col": 183, "label": [186, 715], "ndarrai": 187, "ndim": [188, 468], "panda": [189, 403], "row": 190, "shape": [191, 473, 484], "heteroskedasticweightmatrix": [192, 193, 194, 749, 750, 751, 752], "weight_matrix": [194, 197, 207, 210, 306, 752, 756, 762], "homoskedasticweightmatrix": [195, 196, 197, 753, 754, 755, 756], "ivgmmcovari": [198, 199, 200, 201, 202, 203], "kernelweightmatrix": [204, 205, 206, 207, 757, 758, 759, 760, 761, 762], "onewayclusteredweightmatrix": [208, 209, 210], "estimate_paramet": [212, 223, 234, 246, 257], "notnul": [218, 229, 241, 252, 263], "predict": [219, 230, 242, 253, 264, 293, 344, 380, 493, 501, 509, 519, 528, 536, 560, 598, 649, 684, 772, 782, 798, 820, 854], "ivgmm": [222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232], "ivgmmcu": [233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244], "ivliml": [245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], "_ol": [256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266], "firststageresult": [267, 268, 269, 270], "individu": 269, "ivgmmresult": [271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308], "c_stat": 272, "first_stag": [282, 335], "j_stat": [287, 813], "kappa": [288, 339, 375], "weight_config": [305, 832], "weight_typ": [307, 833], "ivmodelcomparison": [309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320], "estimator_method": [311, 618], "ivresult": [321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361], "anderson_rubin": 322, "basmann": 323, "basmann_f": 324, "durbin": 333, "sargan": 351, "wooldridge_overid": 357, "wooldridge_regress": 358, "wooldridge_scor": 359, "wu_hausman": 361, "olsresult": [362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392], "notat": [394, 718], "paramet": [394, 397, 718], "two": 394, "least": [394, 395, 712, 716, 718], "limit": 394, "inform": 394, "maximum": 394, "likelihood": 394, "k": 394, "class": 394, "moment": [394, 718, 719], "l": 394, "error": 394, "t": [394, 788], "p": 394, "valu": [394, 486, 890], "confid": 394, "interv": 394, "hypothesi": [394, 866], "analysi": [394, 396], "select": 394, "detect": 394, "format": 396, "multiindex": 396, "datafram": [396, 457], "numpi": 396, "arrai": 396, "xarrai": 396, "dataarrai": 396, "convers": 396, "string": 396, "dummi": [396, 397, 460], "load": [397, 398], "uncorrel": 397, "effect": [397, 398, 399, 402], "random": [397, 402], "between": [397, 398, 402], "other": [397, 715, 718], "handl": 397, "correl": [397, 402, 718], "fix": [397, 399, 402], "time": [397, 398, 474], "invari": 397, "v": 397, "differ": [397, 398, 402], "heteroskedast": [397, 402, 714, 718], "robust": [397, 402, 714], "cluster": [397, 399, 402, 704, 714], "entiti": [397, 398, 461], "prepar": 398, "panelol": [398, 402, 403, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521], "pool": [398, 402, 714], "implement": 399, "choic": 399, "r": [399, 402, 718, 787], "definit": 399, "randomeffect": [402, 530, 531, 532, 533, 534, 535, 536, 537], "betweenol": [402, 487, 488, 489, 490, 491, 492, 493, 494], "firstdifferenceol": [402, 503, 504, 505, 506, 507, 508, 509, 510], "pooledol": [402, 522, 523, 524, 525, 526, 527, 528, 529], "unadjust": 402, "driscol": 402, "kraai": 402, "calcul": [402, 718], "betweenr": 402, "overal": [402, 718], "within": 402, "withinr": 402, "comparison": 403, "famamacbeth": [403, 495, 496, 497, 498, 499, 500, 501, 502], "accovari": [404, 405, 406, 407, 408, 409, 410, 411], "allowed_kwarg": [405, 413, 421, 429, 439, 447], "default_kernel": [406, 414, 422, 430, 440, 448], "deferred_cov": [408, 416, 424, 434, 442, 450], "ep": [409, 417, 425, 435, 443, 451], "driscollkraai": [420, 421, 422, 423, 424, 425, 426, 427], "famamacbethcovari": [428, 429, 430, 431, 432, 433, 434, 435, 436, 437], "all_param": [431, 539], "paneldata": [454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478], "copi": [455, 882], "count": [456, 705], "demean": 458, "entity_id": 462, "first_differ": 463, "general_demean": 464, "index": [465, 707], "mean": 467, "nentiti": 469, "nvar": 471, "time_id": 475, "values2d": 476, "values3d": 477, "var": 478, "_panel": [479, 480, 481, 482, 483, 484, 485, 486], "from_arrai": 480, "item": [481, 884], "major_axi": 482, "minor_axi": 483, "to_fram": 485, "not_nul": [492, 500, 508, 517, 527, 535], "reformat_clust": [494, 502, 510, 520, 529, 537], "entity_effect": 512, "other_effect": [518, 708], "time_effect": 521, "famamacbethresult": [538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575], "avg_adj_rsquar": 540, "avg_rsquar": 541, "corr_squared_between": [543, 578, 632, 667], "corr_squared_overal": [544, 579, 633, 668], "corr_squared_within": [545, 580, 634, 669], "entity_info": [549, 584, 638, 673], "estimated_effect": [550, 585, 639, 674], "f_statistic_robust": [552, 588, 641, 676], "loglik": [555, 592, 644, 679], "rsquared_between": [565, 603, 624, 654, 689], "rsquared_overal": [566, 605, 625, 655, 690], "rsquared_within": [567, 606, 626, 656, 691], "time_info": [571, 610, 660, 696], "paneleffectsresult": [576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615], "f_pool": 586, "included_effect": 591, "other_info": 596, "rsquared_inclus": 604, "variance_decomposit": [613, 699], "panelmodelcomparison": [616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629], "panelresult": [630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664], "randomeffectsresult": [665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701], "theta": 695, "util": [703, 704, 705, 706, 707, 708, 709, 710, 866, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890], "panelmodeldata": [703, 704, 705, 706, 707, 708, 709], "generate_panel_data": 710, "plan": 712, "univari": 712, "dynam": 712, "system": [712, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865], "hac": 714, "roger": 714, "prespecifi": [714, 715], "residu": [714, 715], "diagon": 714, "cross": 714, "equat": [714, 716, 810, 845], "restrict": 714, "constraint": [714, 765, 776, 791], "multivari": 714, "common": 714, "dictionari": 715, "curli": 715, "brace": 715, "three": [716, 718], "3sl": [716, 718, 719], "direct": 716, "simultan": 716, "sure": 718, "memori": 718, "effici": 718, "homoskedast": 718, "measur": 718, "mcelroi": 718, "berndt": 718, "judg": 718, "dhryme": 718, "sigma": [723, 738, 742, 748, 751, 755, 761, 825, 859], "gmmheteroskedasticcovari": [724, 725, 726], "gmmhomoskedasticcovari": [727, 728, 729], "gmmkernelcovari": [730, 731, 732, 733, 734], "iv3sl": [763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773], "add_constraint": [764, 775, 790], "multivariate_iv": 770, "param_nam": [771, 781, 797], "reset_constraint": [773, 783, 799], "ivsystemgmm": [774, 775, 776, 777, 778, 779, 780, 781, 782, 783], "linearconstraint": [784, 785, 786, 787, 788], "q": 786, "multivariate_l": 796, "gmmsystemresult": [800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834], "breusch_pagan": [801, 836], "equation_label": [809, 844], "likelihood_ratio": [814, 848], "system_rsquar": [828, 862], "w": 831, "systemresult": [835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865], "contain": 866, "share": [867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890], "cov_clust": 867, "cov_kernel": 868, "group_debias_coeffici": 869, "hypothes": [870, 871, 872, 873, 874, 875, 876, 877, 878, 879], "invalidteststatist": [870, 871, 872, 873, 874], "critical_valu": [871, 876], "null": [872, 877], "pval": [873, 878], "stat": [874, 879], "waldteststatist": [875, 876, 877, 878, 879], "attrdict": [880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890], "clear": 881, "get": 883, "kei": 885, "pop": 886, "popitem": 887, "setdefault": 888}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"linearmodels.iv.absorbing.AbsorbingLSResults.df_resid": [[113, "linearmodels-iv-absorbing-absorbinglsresults-df-resid"]], "linearmodels.iv.absorbing.AbsorbingLSResults.conf_int": [[105, "linearmodels-iv-absorbing-absorbinglsresults-conf-int"]], "linearmodels.iv.absorbing.AbsorbingLSResults.df_absorbed": [[111, "linearmodels-iv-absorbing-absorbinglsresults-df-absorbed"]], "linearmodels.iv.absorbing.AbsorbingLSResults.cov_config": [[107, "linearmodels-iv-absorbing-absorbinglsresults-cov-config"]], "linearmodels.iv.absorbing.AbsorbingLSResults.cov_estimator": [[108, "linearmodels-iv-absorbing-absorbinglsresults-cov-estimator"]], "linearmodels.iv.absorbing.AbsorbingLS.resids": [[99, "linearmodels-iv-absorbing-absorbingls-resids"]], "linearmodels.iv.absorbing.AbsorbingLSResults.idiosyncratic": [[117, "linearmodels-iv-absorbing-absorbinglsresults-idiosyncratic"]], "linearmodels.iv.absorbing.AbsorbingLSResults.model_ss": [[119, "linearmodels-iv-absorbing-absorbinglsresults-model-ss"]], "linearmodels.iv.absorbing.AbsorbingLSResults.absorbed_rsquared": [[104, "linearmodels-iv-absorbing-absorbinglsresults-absorbed-rsquared"]], "linearmodels.iv.absorbing.AbsorbingLSResults.s2": [[127, "linearmodels-iv-absorbing-absorbinglsresults-s2"]], "linearmodels.iv.absorbing.AbsorbingLSResults.resids": [[124, "linearmodels-iv-absorbing-absorbinglsresults-resids"]], "linearmodels.iv.absorbing.AbsorbingLSResults.wald_test": [[132, "linearmodels-iv-absorbing-absorbinglsresults-wald-test"]], "linearmodels.iv.absorbing.AbsorbingRegressor": [[134, "linearmodels-iv-absorbing-absorbingregressor"]], "linearmodels.iv.absorbing.AbsorbingLS.wresids": [[101, "linearmodels-iv-absorbing-absorbingls-wresids"]], "linearmodels.iv.absorbing.AbsorbingLSResults.rsquared_adj": [[126, "linearmodels-iv-absorbing-absorbinglsresults-rsquared-adj"]], "linearmodels.iv.absorbing.AbsorbingLSResults.wresids": [[133, "linearmodels-iv-absorbing-absorbinglsresults-wresids"]], "linearmodels.iv.absorbing.AbsorbingLSResults.pvalues": [[122, "linearmodels-iv-absorbing-absorbinglsresults-pvalues"]], "linearmodels.iv.absorbing.AbsorbingLS.instruments": [[98, "linearmodels-iv-absorbing-absorbingls-instruments"]], "linearmodels.iv.absorbing.AbsorbingLSResults": [[102, "linearmodels-iv-absorbing-absorbinglsresults"]], "linearmodels.iv.absorbing.AbsorbingLSResults.cov_type": [[109, "linearmodels-iv-absorbing-absorbinglsresults-cov-type"]], "linearmodels.iv.absorbing.AbsorbingRegressor.regressors": [[138, "linearmodels-iv-absorbing-absorbingregressor-regressors"]], "linearmodels.iv.absorbing.AbsorbingRegressor.has_constant": [[136, "linearmodels-iv-absorbing-absorbingregressor-has-constant"]], "linearmodels.iv.absorbing.AbsorbingLSResults.fitted_values": [[115, "linearmodels-iv-absorbing-absorbinglsresults-fitted-values"]], "linearmodels.iv.absorbing.AbsorbingLSResults.has_constant": [[116, "linearmodels-iv-absorbing-absorbinglsresults-has-constant"]], "linearmodels.iv.absorbing.AbsorbingLS.exog": [[95, "linearmodels-iv-absorbing-absorbingls-exog"]], "linearmodels.iv.absorbing.AbsorbingLS.fit": [[96, "linearmodels-iv-absorbing-absorbingls-fit"]], "See also": [[96, null], [7, null], [870, null], [875, null], [792, null], [766, null], [743, null], [720, null], [91, null], [258, null], [235, null], [245, null], [247, null], [256, null], [224, null], [213, null], [204, null], [233, null], [222, null], [198, null], [211, null], [234, null], [172, null], [178, null]], "linearmodels.iv.absorbing.AbsorbingLSResults.std_errors": [[128, "linearmodels-iv-absorbing-absorbinglsresults-std-errors"]], "linearmodels.iv.absorbing.AbsorbingLSResults.rsquared": [[125, "linearmodels-iv-absorbing-absorbinglsresults-rsquared"]], "linearmodels.iv.absorbing.AbsorbingLS.weights": [[100, "linearmodels-iv-absorbing-absorbingls-weights"]], "linearmodels.iv.absorbing.AbsorbingLSResults.cov": [[106, "linearmodels-iv-absorbing-absorbinglsresults-cov"]], "linearmodels.iv.absorbing.AbsorbingRegressor.hash": [[137, "linearmodels-iv-absorbing-absorbingregressor-hash"]], "linearmodels.iv.absorbing.AbsorbingLSResults.summary": [[129, "linearmodels-iv-absorbing-absorbinglsresults-summary"]], "linearmodels.iv.absorbing.AbsorbingLS.dependent": [[94, "linearmodels-iv-absorbing-absorbingls-dependent"]], "linearmodels.iv.absorbing.Interaction.cat": [[140, "linearmodels-iv-absorbing-interaction-cat"]], "linearmodels.iv.absorbing.AbsorbingLSResults.total_ss": [[130, "linearmodels-iv-absorbing-absorbinglsresults-total-ss"]], "linearmodels.iv.absorbing.AbsorbingLSResults.resid_ss": [[123, "linearmodels-iv-absorbing-absorbinglsresults-resid-ss"]], "linearmodels.iv.absorbing.AbsorbingLSResults.absorbed_effects": [[103, "linearmodels-iv-absorbing-absorbinglsresults-absorbed-effects"]], "linearmodels.iv.absorbing.Interaction": [[139, "linearmodels-iv-absorbing-interaction"]], "linearmodels.iv.absorbing.AbsorbingLSResults.tstats": [[131, "linearmodels-iv-absorbing-absorbinglsresults-tstats"]], "linearmodels.iv.absorbing.AbsorbingLSResults.f_statistic": [[114, "linearmodels-iv-absorbing-absorbinglsresults-f-statistic"]], "linearmodels.iv.absorbing.AbsorbingLSResults.nobs": [[120, "linearmodels-iv-absorbing-absorbinglsresults-nobs"]], "linearmodels.iv.absorbing.AbsorbingLSResults.df_model": [[112, "linearmodels-iv-absorbing-absorbinglsresults-df-model"]], "linearmodels.iv.absorbing.AbsorbingLSResults.method": [[118, "linearmodels-iv-absorbing-absorbinglsresults-method"]], "linearmodels.iv.absorbing.AbsorbingLS.has_constant": [[97, "linearmodels-iv-absorbing-absorbingls-has-constant"]], "linearmodels.iv.absorbing.AbsorbingLSResults.debiased": [[110, "linearmodels-iv-absorbing-absorbinglsresults-debiased"]], "linearmodels.iv.absorbing.AbsorbingLSResults.params": [[121, "linearmodels-iv-absorbing-absorbinglsresults-params"]], "linearmodels.iv.absorbing.AbsorbingRegressor.approx_rank": [[135, "linearmodels-iv-absorbing-absorbingregressor-approx-rank"]], "linearmodels.asset_pricing.results.GMMFactorModelResults.risk_premia": [[41, "linearmodels-asset-pricing-results-gmmfactormodelresults-risk-premia"]], "linearmodels.asset_pricing.model.LinearFactorModelGMM.from_formula": [[23, "linearmodels-asset-pricing-model-linearfactormodelgmm-from-formula"]], "linearmodels.asset_pricing.model.TradedFactorModel.formula": [[26, "linearmodels-asset-pricing-model-tradedfactormodel-formula"]], "linearmodels.asset_pricing.results.GMMFactorModelResults.std_errors": [[45, "linearmodels-asset-pricing-results-gmmfactormodelresults-std-errors"]], "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance": [[0, "linearmodels-asset-pricing-covariance-heteroskedasticcovariance"]], "linearmodels.asset_pricing.results.GMMFactorModelResults.full_summary": [[33, "linearmodels-asset-pricing-results-gmmfactormodelresults-full-summary"]], "linearmodels.asset_pricing.model.LinearFactorModel.from_formula": [[19, "linearmodels-asset-pricing-model-linearfactormodel-from-formula"]], "linearmodels.asset_pricing.results.GMMFactorModelResults.j_statistic": [[35, "linearmodels-asset-pricing-results-gmmfactormodelresults-j-statistic"]], "linearmodels.asset_pricing.results.GMMFactorModelResults.params": [[38, "linearmodels-asset-pricing-results-gmmfactormodelresults-params"]], "linearmodels.asset_pricing.results.GMMFactorModelResults.rsquared": [[44, "linearmodels-asset-pricing-results-gmmfactormodelresults-rsquared"]], "linearmodels.asset_pricing.model.TradedFactorModel": [[24, "linearmodels-asset-pricing-model-tradedfactormodel"]], "linearmodels.asset_pricing.model.TradedFactorModel.from_formula": [[27, "linearmodels-asset-pricing-model-tradedfactormodel-from-formula"]], "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.cov": [[2, "linearmodels-asset-pricing-covariance-heteroskedasticcovariance-cov"]], "linearmodels.asset_pricing.model.TradedFactorModel.fit": [[25, "linearmodels-asset-pricing-model-tradedfactormodel-fit"]], "linearmodels.asset_pricing.model.LinearFactorModel": [[16, "linearmodels-asset-pricing-model-linearfactormodel"]], "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.jacobian": [[4, "linearmodels-asset-pricing-covariance-heteroskedasticcovariance-jacobian"]], "linearmodels.asset_pricing.covariance.KernelCovariance.config": [[9, "linearmodels-asset-pricing-covariance-kernelcovariance-config"]], "linearmodels.asset_pricing.covariance.KernelCovariance.kernel": [[13, "linearmodels-asset-pricing-covariance-kernelcovariance-kernel"]], "linearmodels.asset_pricing.covariance.KernelCovariance.s": [[14, "linearmodels-asset-pricing-covariance-kernelcovariance-s"]], "linearmodels.asset_pricing.results.GMMFactorModelResults.cov_estimator": [[32, "linearmodels-asset-pricing-results-gmmfactormodelresults-cov-estimator"]], "linearmodels.asset_pricing.model.LinearFactorModel.formula": [[18, "linearmodels-asset-pricing-model-linearfactormodel-formula"]], "linearmodels.asset_pricing.results.GMMFactorModelResults": [[28, "linearmodels-asset-pricing-results-gmmfactormodelresults"]], "linearmodels.asset_pricing.results.GMMFactorModelResults.residual_ss": [[40, "linearmodels-asset-pricing-results-gmmfactormodelresults-residual-ss"]], "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.config": [[1, "linearmodels-asset-pricing-covariance-heteroskedasticcovariance-config"]], "linearmodels.asset_pricing.results.GMMFactorModelResults.alphas": [[29, "linearmodels-asset-pricing-results-gmmfactormodelresults-alphas"]], "linearmodels.asset_pricing.model.LinearFactorModelGMM.formula": [[22, "linearmodels-asset-pricing-model-linearfactormodelgmm-formula"]], "linearmodels.asset_pricing.covariance.KernelCovariance.square": [[15, "linearmodels-asset-pricing-covariance-kernelcovariance-square"]], "linearmodels.asset_pricing.model.LinearFactorModel.fit": [[17, "linearmodels-asset-pricing-model-linearfactormodel-fit"]], "linearmodels.asset_pricing.results.GMMFactorModelResults.summary": [[46, "linearmodels-asset-pricing-results-gmmfactormodelresults-summary"]], "linearmodels.asset_pricing.model.LinearFactorModelGMM.fit": [[21, "linearmodels-asset-pricing-model-linearfactormodelgmm-fit"]], "linearmodels.asset_pricing.results.GMMFactorModelResults.betas": [[30, "linearmodels-asset-pricing-results-gmmfactormodelresults-betas"]], "linearmodels.asset_pricing.results.GMMFactorModelResults.pvalues": [[39, "linearmodels-asset-pricing-results-gmmfactormodelresults-pvalues"]], "linearmodels.asset_pricing.covariance.KernelCovariance.inv_jacobian": [[11, "linearmodels-asset-pricing-covariance-kernelcovariance-inv-jacobian"]], "linearmodels.asset_pricing.covariance.KernelCovariance.jacobian": [[12, "linearmodels-asset-pricing-covariance-kernelcovariance-jacobian"]], "linearmodels.asset_pricing.covariance.KernelCovariance.cov": [[10, "linearmodels-asset-pricing-covariance-kernelcovariance-cov"]], "linearmodels.asset_pricing.results.GMMFactorModelResults.nobs": [[37, "linearmodels-asset-pricing-results-gmmfactormodelresults-nobs"]], "linearmodels.asset_pricing.results.GMMFactorModelResults.risk_premia_tstats": [[43, "linearmodels-asset-pricing-results-gmmfactormodelresults-risk-premia-tstats"]], "linearmodels.asset_pricing.model.LinearFactorModelGMM": [[20, "linearmodels-asset-pricing-model-linearfactormodelgmm"]], "linearmodels.asset_pricing.results.GMMFactorModelResults.name": [[36, "linearmodels-asset-pricing-results-gmmfactormodelresults-name"]], "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.inv_jacobian": [[3, "linearmodels-asset-pricing-covariance-heteroskedasticcovariance-inv-jacobian"]], "linearmodels.asset_pricing.results.GMMFactorModelResults.cov": [[31, "linearmodels-asset-pricing-results-gmmfactormodelresults-cov"]], "linearmodels.asset_pricing.results.GMMFactorModelResults.risk_premia_se": [[42, "linearmodels-asset-pricing-results-gmmfactormodelresults-risk-premia-se"]], "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.square": [[6, "linearmodels-asset-pricing-covariance-heteroskedasticcovariance-square"]], "linearmodels.asset_pricing.covariance.KernelCovariance": [[7, "linearmodels-asset-pricing-covariance-kernelcovariance"]], "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.s": [[5, "linearmodels-asset-pricing-covariance-heteroskedasticcovariance-s"]], "linearmodels.asset_pricing.results.GMMFactorModelResults.iterations": [[34, "linearmodels-asset-pricing-results-gmmfactormodelresults-iterations"]], "linearmodels.asset_pricing.covariance.KernelCovariance.bandwidth": [[8, "linearmodels-asset-pricing-covariance-kernelcovariance-bandwidth"]], "linearmodels.shared.utility.AttrDict.get": [[883, "linearmodels-shared-utility-attrdict-get"]], "linearmodels.shared.hypotheses.InvalidTestStatistic.pval": [[873, "linearmodels-shared-hypotheses-invalidteststatistic-pval"]], "linearmodels.system.results.SystemResults.summary": [[861, "linearmodels-system-results-systemresults-summary"]], "linearmodels.system.results.SystemResults.nobs": [[852, "linearmodels-system-results-systemresults-nobs"]], "linearmodels.shared.covariance.group_debias_coefficient": [[869, "linearmodels-shared-covariance-group-debias-coefficient"]], "Utilities": [[866, "utilities"]], "Containers": [[866, "module-linearmodels.utility"]], "Hypothesis Testing": [[866, "hypothesis-testing"]], "Covariance Estimation": [[866, "covariance-estimation"], [718, "covariance-estimation"]], "linearmodels.shared.hypotheses.WaldTestStatistic.pval": [[878, "linearmodels-shared-hypotheses-waldteststatistic-pval"]], "linearmodels.shared.utility.AttrDict.pop": [[886, "linearmodels-shared-utility-attrdict-pop"]], "linearmodels.shared.utility.AttrDict.popitem": [[887, "linearmodels-shared-utility-attrdict-popitem"]], "linearmodels.system.results.SystemResults.total_ss": [[863, "linearmodels-system-results-systemresults-total-ss"]], "linearmodels.system.results.SystemResults.method": [[849, "linearmodels-system-results-systemresults-method"]], "linearmodels.system.results.SystemResults.model": [[850, "linearmodels-system-results-systemresults-model"]], "linearmodels.system.results.SystemResults.predict": [[854, "linearmodels-system-results-systemresults-predict"]], "linearmodels.shared.hypotheses.InvalidTestStatistic.critical_values": [[871, "linearmodels-shared-hypotheses-invalidteststatistic-critical-values"]], "linearmodels.shared.hypotheses.WaldTestStatistic.stat": [[879, "linearmodels-shared-hypotheses-waldteststatistic-stat"]], "linearmodels.shared.utility.AttrDict.setdefault": [[888, "linearmodels-shared-utility-attrdict-setdefault"]], "linearmodels.system.results.SystemResults.params": [[853, "linearmodels-system-results-systemresults-params"]], "linearmodels.shared.utility.AttrDict": [[880, "linearmodels-shared-utility-attrdict"]], "linearmodels.shared.hypotheses.InvalidTestStatistic.null": [[872, "linearmodels-shared-hypotheses-invalidteststatistic-null"]], "linearmodels.system.results.SystemResults.likelihood_ratio": [[848, "linearmodels-system-results-systemresults-likelihood-ratio"]], "linearmodels.shared.hypotheses.InvalidTestStatistic.stat": [[874, "linearmodels-shared-hypotheses-invalidteststatistic-stat"]], "linearmodels.shared.covariance.cov_cluster": [[867, "linearmodels-shared-covariance-cov-cluster"]], "linearmodels.system.results.SystemResults.sigma": [[859, "linearmodels-system-results-systemresults-sigma"]], "linearmodels.system.results.SystemResults.iterations": [[847, "linearmodels-system-results-systemresults-iterations"]], "linearmodels.system.results.SystemResults.rsquared": [[858, "linearmodels-system-results-systemresults-rsquared"]], "linearmodels.system.results.SystemResults.fitted_values": [[846, "linearmodels-system-results-systemresults-fitted-values"]], "linearmodels.system.results.SystemResults.model_ss": [[851, "linearmodels-system-results-systemresults-model-ss"]], "linearmodels.shared.utility.AttrDict.copy": [[882, "linearmodels-shared-utility-attrdict-copy"]], "linearmodels.shared.utility.AttrDict.values": [[890, "linearmodels-shared-utility-attrdict-values"]], "linearmodels.shared.hypotheses.InvalidTestStatistic": [[870, "linearmodels-shared-hypotheses-invalidteststatistic"]], "linearmodels.shared.hypotheses.WaldTestStatistic.critical_values": [[876, "linearmodels-shared-hypotheses-waldteststatistic-critical-values"]], "linearmodels.shared.utility.AttrDict.items": [[884, "linearmodels-shared-utility-attrdict-items"]], "linearmodels.system.results.SystemResults.resids": [[857, "linearmodels-system-results-systemresults-resids"]], "linearmodels.system.results.SystemResults.system_rsquared": [[862, "linearmodels-system-results-systemresults-system-rsquared"]], "linearmodels.shared.hypotheses.WaldTestStatistic.null": [[877, "linearmodels-shared-hypotheses-waldteststatistic-null"]], "linearmodels.system.results.SystemResults.tstats": [[864, "linearmodels-system-results-systemresults-tstats"]], "linearmodels.shared.utility.AttrDict.clear": [[881, "linearmodels-shared-utility-attrdict-clear"]], "linearmodels.system.results.SystemResults.pvalues": [[855, "linearmodels-system-results-systemresults-pvalues"]], "linearmodels.shared.covariance.cov_kernel": [[868, "linearmodels-shared-covariance-cov-kernel"]], "linearmodels.system.results.SystemResults.wresids": [[865, "linearmodels-system-results-systemresults-wresids"]], "linearmodels.shared.utility.AttrDict.keys": [[885, "linearmodels-shared-utility-attrdict-keys"]], "linearmodels.system.results.SystemResults.resid_ss": [[856, "linearmodels-system-results-systemresults-resid-ss"]], "linearmodels.shared.utility.AttrDict.update": [[889, "linearmodels-shared-utility-attrdict-update"]], "linearmodels.system.results.SystemResults.std_errors": [[860, "linearmodels-system-results-systemresults-std-errors"]], "linearmodels.shared.hypotheses.WaldTestStatistic": [[875, "linearmodels-shared-hypotheses-waldteststatistic"]], "linearmodels.system.results.GMMSystemResults.resids": [[823, "linearmodels-system-results-gmmsystemresults-resids"]], "linearmodels.system.results.GMMSystemResults.total_ss": [[829, "linearmodels-system-results-gmmsystemresults-total-ss"]], "linearmodels.system.results.SystemResults.df_model": [[842, "linearmodels-system-results-systemresults-df-model"]], "linearmodels.system.results.GMMSystemResults.tstats": [[830, "linearmodels-system-results-gmmsystemresults-tstats"]], "linearmodels.system.results.GMMSystemResults.predict": [[820, "linearmodels-system-results-gmmsystemresults-predict"]], "linearmodels.system.results.SystemResults.cov_estimator": [[840, "linearmodels-system-results-systemresults-cov-estimator"]], "linearmodels.system.results.SystemResults.equations": [[845, "linearmodels-system-results-systemresults-equations"]], "linearmodels.system.results.GMMSystemResults.weight_type": [[833, "linearmodels-system-results-gmmsystemresults-weight-type"]], "linearmodels.system.results.GMMSystemResults.resid_ss": [[822, "linearmodels-system-results-gmmsystemresults-resid-ss"]], "linearmodels.system.results.GMMSystemResults.std_errors": [[826, "linearmodels-system-results-gmmsystemresults-std-errors"]], "linearmodels.system.results.GMMSystemResults.iterations": [[812, "linearmodels-system-results-gmmsystemresults-iterations"]], "linearmodels.system.results.SystemResults.cov": [[838, "linearmodels-system-results-systemresults-cov"]], "linearmodels.system.results.GMMSystemResults.model_ss": [[817, "linearmodels-system-results-gmmsystemresults-model-ss"]], "linearmodels.system.results.SystemResults.breusch_pagan": [[836, "linearmodels-system-results-systemresults-breusch-pagan"]], "linearmodels.system.results.GMMSystemResults.debiased": [[806, "linearmodels-system-results-gmmsystemresults-debiased"]], "linearmodels.system.model.SUR.reset_constraints": [[799, "linearmodels-system-model-sur-reset-constraints"]], "linearmodels.system.results.GMMSystemResults.nobs": [[818, "linearmodels-system-results-gmmsystemresults-nobs"]], "linearmodels.system.results.GMMSystemResults.pvalues": [[821, "linearmodels-system-results-gmmsystemresults-pvalues"]], "linearmodels.system.results.GMMSystemResults.method": [[815, "linearmodels-system-results-gmmsystemresults-method"]], "linearmodels.system.results.GMMSystemResults.summary": [[827, "linearmodels-system-results-gmmsystemresults-summary"]], "linearmodels.system.results.GMMSystemResults.weight_config": [[832, "linearmodels-system-results-gmmsystemresults-weight-config"]], "linearmodels.system.results.SystemResults.df_resid": [[843, "linearmodels-system-results-systemresults-df-resid"]], "linearmodels.system.results.GMMSystemResults.model": [[816, "linearmodels-system-results-gmmsystemresults-model"]], "linearmodels.system.results.SystemResults.equation_labels": [[844, "linearmodels-system-results-systemresults-equation-labels"]], "linearmodels.system.results.GMMSystemResults": [[800, "linearmodels-system-results-gmmsystemresults"]], "linearmodels.system.results.GMMSystemResults.params": [[819, "linearmodels-system-results-gmmsystemresults-params"]], "linearmodels.system.results.GMMSystemResults.breusch_pagan": [[801, "linearmodels-system-results-gmmsystemresults-breusch-pagan"]], "linearmodels.system.results.GMMSystemResults.equations": [[810, "linearmodels-system-results-gmmsystemresults-equations"]], "linearmodels.system.results.GMMSystemResults.cov": [[803, "linearmodels-system-results-gmmsystemresults-cov"]], "linearmodels.system.results.GMMSystemResults.conf_int": [[802, "linearmodels-system-results-gmmsystemresults-conf-int"]], "linearmodels.system.results.GMMSystemResults.sigma": [[825, "linearmodels-system-results-gmmsystemresults-sigma"]], "linearmodels.system.results.GMMSystemResults.likelihood_ratio": [[814, "linearmodels-system-results-gmmsystemresults-likelihood-ratio"]], "linearmodels.system.results.GMMSystemResults.system_rsquared": [[828, "linearmodels-system-results-gmmsystemresults-system-rsquared"]], "linearmodels.system.results.GMMSystemResults.df_resid": [[808, "linearmodels-system-results-gmmsystemresults-df-resid"]], "linearmodels.system.results.GMMSystemResults.wresids": [[834, "linearmodels-system-results-gmmsystemresults-wresids"]], "linearmodels.system.results.GMMSystemResults.equation_labels": [[809, "linearmodels-system-results-gmmsystemresults-equation-labels"]], "linearmodels.system.results.GMMSystemResults.rsquared": [[824, "linearmodels-system-results-gmmsystemresults-rsquared"]], "linearmodels.system.results.GMMSystemResults.w": [[831, "linearmodels-system-results-gmmsystemresults-w"]], "linearmodels.system.results.GMMSystemResults.cov_estimator": [[805, "linearmodels-system-results-gmmsystemresults-cov-estimator"]], "linearmodels.system.results.GMMSystemResults.fitted_values": [[811, "linearmodels-system-results-gmmsystemresults-fitted-values"]], "linearmodels.system.results.SystemResults.cov_config": [[839, "linearmodels-system-results-systemresults-cov-config"]], "linearmodels.system.results.GMMSystemResults.cov_config": [[804, "linearmodels-system-results-gmmsystemresults-cov-config"]], "linearmodels.system.results.SystemResults": [[835, "linearmodels-system-results-systemresults"]], "linearmodels.system.results.GMMSystemResults.j_stat": [[813, "linearmodels-system-results-gmmsystemresults-j-stat"]], "linearmodels.system.results.SystemResults.conf_int": [[837, "linearmodels-system-results-systemresults-conf-int"]], "linearmodels.system.results.GMMSystemResults.df_model": [[807, "linearmodels-system-results-gmmsystemresults-df-model"]], "linearmodels.system.results.SystemResults.debiased": [[841, "linearmodels-system-results-systemresults-debiased"]], "linearmodels.system.model.IVSystemGMM.add_constraints": [[775, "linearmodels-system-model-ivsystemgmm-add-constraints"]], "linearmodels.system.model.SUR.has_constant": [[795, "linearmodels-system-model-sur-has-constant"]], "linearmodels.system.model.SUR.fit": [[792, "linearmodels-system-model-sur-fit"]], "linearmodels.system.model.IV3SLS.from_formula": [[768, "linearmodels-system-model-iv3sls-from-formula"]], "linearmodels.system.model.IV3SLS.fit": [[766, "linearmodels-system-model-iv3sls-fit"]], "linearmodels.system.model.IVSystemGMM": [[774, "linearmodels-system-model-ivsystemgmm"]], "linearmodels.system.model.IV3SLS.constraints": [[765, "linearmodels-system-model-iv3sls-constraints"]], "linearmodels.system.model.SUR.predict": [[798, "linearmodels-system-model-sur-predict"]], "linearmodels.system.gmm.HomoskedasticWeightMatrix.sigma": [[755, "linearmodels-system-gmm-homoskedasticweightmatrix-sigma"]], "linearmodels.system.model.IV3SLS.predict": [[772, "linearmodels-system-model-iv3sls-predict"]], "linearmodels.system.gmm.KernelWeightMatrix.config": [[759, "linearmodels-system-gmm-kernelweightmatrix-config"]], "linearmodels.system.model.IV3SLS.has_constant": [[769, "linearmodels-system-model-iv3sls-has-constant"]], "linearmodels.system.model.IVSystemGMM.param_names": [[781, "linearmodels-system-model-ivsystemgmm-param-names"]], "linearmodels.system.model.SUR.formula": [[793, "linearmodels-system-model-sur-formula"]], "linearmodels.system.model.SUR": [[789, "linearmodels-system-model-sur"]], "linearmodels.system.model.IV3SLS": [[763, "linearmodels-system-model-iv3sls"]], "linearmodels.system.model.LinearConstraint.t": [[788, "linearmodels-system-model-linearconstraint-t"]], "linearmodels.system.model.LinearConstraint.q": [[786, "linearmodels-system-model-linearconstraint-q"]], "linearmodels.system.model.SUR.constraints": [[791, "linearmodels-system-model-sur-constraints"]], "linearmodels.system.model.SUR.param_names": [[797, "linearmodels-system-model-sur-param-names"]], "linearmodels.system.gmm.KernelWeightMatrix.weight_matrix": [[762, "linearmodels-system-gmm-kernelweightmatrix-weight-matrix"]], "linearmodels.system.model.IVSystemGMM.reset_constraints": [[783, "linearmodels-system-model-ivsystemgmm-reset-constraints"]], "linearmodels.system.gmm.KernelWeightMatrix.kernel": [[760, "linearmodels-system-gmm-kernelweightmatrix-kernel"]], "linearmodels.system.model.SUR.from_formula": [[794, "linearmodels-system-model-sur-from-formula"]], "linearmodels.system.model.IVSystemGMM.fit": [[777, "linearmodels-system-model-ivsystemgmm-fit"]], "linearmodels.system.gmm.HeteroskedasticWeightMatrix.weight_matrix": [[752, "linearmodels-system-gmm-heteroskedasticweightmatrix-weight-matrix"]], "linearmodels.system.gmm.KernelWeightMatrix.sigma": [[761, "linearmodels-system-gmm-kernelweightmatrix-sigma"]], "linearmodels.system.model.IV3SLS.add_constraints": [[764, "linearmodels-system-model-iv3sls-add-constraints"]], "linearmodels.system.model.IV3SLS.multivariate_iv": [[770, "linearmodels-system-model-iv3sls-multivariate-iv"]], "linearmodels.system.model.SUR.multivariate_ls": [[796, "linearmodels-system-model-sur-multivariate-ls"]], "linearmodels.system.model.IVSystemGMM.formula": [[778, "linearmodels-system-model-ivsystemgmm-formula"]], "linearmodels.system.model.IV3SLS.formula": [[767, "linearmodels-system-model-iv3sls-formula"]], "linearmodels.system.model.IVSystemGMM.has_constant": [[780, "linearmodels-system-model-ivsystemgmm-has-constant"]], "linearmodels.system.model.IVSystemGMM.predict": [[782, "linearmodels-system-model-ivsystemgmm-predict"]], "linearmodels.system.gmm.HomoskedasticWeightMatrix.config": [[754, "linearmodels-system-gmm-homoskedasticweightmatrix-config"]], "linearmodels.system.gmm.KernelWeightMatrix": [[757, "linearmodels-system-gmm-kernelweightmatrix"]], "linearmodels.system.model.LinearConstraint": [[784, "linearmodels-system-model-linearconstraint"]], "linearmodels.system.model.LinearConstraint.a": [[785, "linearmodels-system-model-linearconstraint-a"]], "linearmodels.system.gmm.KernelWeightMatrix.bandwidth": [[758, "linearmodels-system-gmm-kernelweightmatrix-bandwidth"]], "linearmodels.system.model.IV3SLS.reset_constraints": [[773, "linearmodels-system-model-iv3sls-reset-constraints"]], "linearmodels.system.model.SUR.add_constraints": [[790, "linearmodels-system-model-sur-add-constraints"]], "linearmodels.system.model.LinearConstraint.r": [[787, "linearmodels-system-model-linearconstraint-r"]], "linearmodels.system.gmm.HomoskedasticWeightMatrix": [[753, "linearmodels-system-gmm-homoskedasticweightmatrix"]], "linearmodels.system.model.IV3SLS.param_names": [[771, "linearmodels-system-model-iv3sls-param-names"]], "linearmodels.system.model.IVSystemGMM.constraints": [[776, "linearmodels-system-model-ivsystemgmm-constraints"]], "linearmodels.system.gmm.HomoskedasticWeightMatrix.weight_matrix": [[756, "linearmodels-system-gmm-homoskedasticweightmatrix-weight-matrix"]], "linearmodels.system.model.IVSystemGMM.from_formula": [[779, "linearmodels-system-model-ivsystemgmm-from-formula"]], "linearmodels.panel.utility.PanelModelData.clusters": [[704, "linearmodels-panel-utility-panelmodeldata-clusters"]], "linearmodels.panel.results.RandomEffectsResults.f_statistic_robust": [[676, "linearmodels-panel-results-randomeffectsresults-f-statistic-robust"]], "linearmodels.panel.results.RandomEffectsResults.fitted_values": [[677, "linearmodels-panel-results-randomeffectsresults-fitted-values"]], "linearmodels.panel.results.RandomEffectsResults.loglik": [[679, "linearmodels-panel-results-randomeffectsresults-loglik"]], "linearmodels.panel.results.PanelResults.total_ss": [[661, "linearmodels-panel-results-panelresults-total-ss"]], "linearmodels.panel.results.RandomEffectsResults.rsquared": [[688, "linearmodels-panel-results-randomeffectsresults-rsquared"]], "linearmodels.panel.results.PanelResults.std_errors": [[658, "linearmodels-panel-results-panelresults-std-errors"]], "linearmodels.panel.results.RandomEffectsResults.entity_info": [[673, "linearmodels-panel-results-randomeffectsresults-entity-info"]], "linearmodels.panel.results.RandomEffectsResults.time_info": [[696, "linearmodels-panel-results-randomeffectsresults-time-info"]], "linearmodels.panel.results.RandomEffectsResults.rsquared_between": [[689, "linearmodels-panel-results-randomeffectsresults-rsquared-between"]], "linearmodels.panel.results.RandomEffectsResults.tstats": [[698, "linearmodels-panel-results-randomeffectsresults-tstats"]], "linearmodels.panel.results.RandomEffectsResults.rsquared_within": [[691, "linearmodels-panel-results-randomeffectsresults-rsquared-within"]], "linearmodels.panel.results.RandomEffectsResults.std_errors": [[693, "linearmodels-panel-results-randomeffectsresults-std-errors"]], "linearmodels.panel.results.RandomEffectsResults.corr_squared_within": [[669, "linearmodels-panel-results-randomeffectsresults-corr-squared-within"]], "linearmodels.panel.results.RandomEffectsResults.f_statistic": [[675, "linearmodels-panel-results-randomeffectsresults-f-statistic"]], "linearmodels.panel.results.PanelResults.wresids": [[664, "linearmodels-panel-results-panelresults-wresids"]], "linearmodels.panel.results.PanelResults.tstats": [[662, "linearmodels-panel-results-panelresults-tstats"]], "linearmodels.panel.results.RandomEffectsResults.pvalues": [[685, "linearmodels-panel-results-randomeffectsresults-pvalues"]], "linearmodels.panel.results.PanelResults.wald_test": [[663, "linearmodels-panel-results-panelresults-wald-test"]], "linearmodels.panel.results.RandomEffectsResults.df_model": [[671, "linearmodels-panel-results-randomeffectsresults-df-model"]], "linearmodels.panel.results.RandomEffectsResults.nobs": [[682, "linearmodels-panel-results-randomeffectsresults-nobs"]], "linearmodels.panel.results.RandomEffectsResults.total_ss": [[697, "linearmodels-panel-results-randomeffectsresults-total-ss"]], "linearmodels.panel.results.RandomEffectsResults.theta": [[695, "linearmodels-panel-results-randomeffectsresults-theta"]], "linearmodels.panel.results.RandomEffectsResults.predict": [[684, "linearmodels-panel-results-randomeffectsresults-predict"]], "linearmodels.panel.results.RandomEffectsResults.cov": [[670, "linearmodels-panel-results-randomeffectsresults-cov"]], "linearmodels.panel.results.RandomEffectsResults.resids": [[687, "linearmodels-panel-results-randomeffectsresults-resids"]], "linearmodels.panel.results.RandomEffectsResults.params": [[683, "linearmodels-panel-results-randomeffectsresults-params"]], "linearmodels.panel.results.RandomEffectsResults.s2": [[692, "linearmodels-panel-results-randomeffectsresults-s2"]], "linearmodels.panel.results.RandomEffectsResults.model_ss": [[680, "linearmodels-panel-results-randomeffectsresults-model-ss"]], "linearmodels.panel.results.RandomEffectsResults.name": [[681, "linearmodels-panel-results-randomeffectsresults-name"]], "linearmodels.panel.utility.PanelModelData": [[703, "linearmodels-panel-utility-panelmodeldata"]], "linearmodels.panel.results.RandomEffectsResults.wresids": [[701, "linearmodels-panel-results-randomeffectsresults-wresids"]], "linearmodels.panel.results.RandomEffectsResults.summary": [[694, "linearmodels-panel-results-randomeffectsresults-summary"]], "linearmodels.panel.results.RandomEffectsResults.variance_decomposition": [[699, "linearmodels-panel-results-randomeffectsresults-variance-decomposition"]], "linearmodels.panel.results.RandomEffectsResults.rsquared_overall": [[690, "linearmodels-panel-results-randomeffectsresults-rsquared-overall"]], "linearmodels.panel.results.compare": [[702, "linearmodels-panel-results-compare"]], "linearmodels.panel.results.RandomEffectsResults.corr_squared_overall": [[668, "linearmodels-panel-results-randomeffectsresults-corr-squared-overall"]], "linearmodels.panel.results.RandomEffectsResults.conf_int": [[666, "linearmodels-panel-results-randomeffectsresults-conf-int"]], "linearmodels.panel.results.PanelResults.summary": [[659, "linearmodels-panel-results-panelresults-summary"]], "linearmodels.panel.results.RandomEffectsResults.corr_squared_between": [[667, "linearmodels-panel-results-randomeffectsresults-corr-squared-between"]], "linearmodels.panel.results.RandomEffectsResults.df_resid": [[672, "linearmodels-panel-results-randomeffectsresults-df-resid"]], "linearmodels.panel.results.RandomEffectsResults": [[665, "linearmodels-panel-results-randomeffectsresults"]], "linearmodels.panel.results.RandomEffectsResults.idiosyncratic": [[678, "linearmodels-panel-results-randomeffectsresults-idiosyncratic"]], "linearmodels.panel.results.PanelResults.time_info": [[660, "linearmodels-panel-results-panelresults-time-info"]], "linearmodels.panel.results.RandomEffectsResults.resid_ss": [[686, "linearmodels-panel-results-randomeffectsresults-resid-ss"]], "linearmodels.panel.results.RandomEffectsResults.wald_test": [[700, "linearmodels-panel-results-randomeffectsresults-wald-test"]], "linearmodels.panel.results.RandomEffectsResults.estimated_effects": [[674, "linearmodels-panel-results-randomeffectsresults-estimated-effects"]], "linearmodels.panel.results.PanelEffectsResults.total_ss": [[611, "linearmodels-panel-results-paneleffectsresults-total-ss"]], "linearmodels.panel.results.PanelResults.name": [[646, "linearmodels-panel-results-panelresults-name"]], "linearmodels.panel.results.PanelResults.idiosyncratic": [[643, "linearmodels-panel-results-panelresults-idiosyncratic"]], "linearmodels.panel.results.PanelEffectsResults.wresids": [[615, "linearmodels-panel-results-paneleffectsresults-wresids"]], "linearmodels.panel.results.PanelModelComparison.std_errors": [[627, "linearmodels-panel-results-panelmodelcomparison-std-errors"]], "linearmodels.panel.results.PanelResults.estimated_effects": [[639, "linearmodels-panel-results-panelresults-estimated-effects"]], "linearmodels.panel.results.PanelModelComparison.rsquared_overall": [[625, "linearmodels-panel-results-panelmodelcomparison-rsquared-overall"]], "linearmodels.panel.results.PanelResults.s2": [[657, "linearmodels-panel-results-panelresults-s2"]], "linearmodels.panel.results.PanelResults.resids": [[652, "linearmodels-panel-results-panelresults-resids"]], "linearmodels.panel.results.PanelModelComparison.tstats": [[629, "linearmodels-panel-results-panelmodelcomparison-tstats"]], "linearmodels.panel.results.PanelModelComparison.f_statistic": [[619, "linearmodels-panel-results-panelmodelcomparison-f-statistic"]], "linearmodels.panel.results.PanelResults.nobs": [[647, "linearmodels-panel-results-panelresults-nobs"]], "linearmodels.panel.results.PanelModelComparison.summary": [[628, "linearmodels-panel-results-panelmodelcomparison-summary"]], "linearmodels.panel.results.PanelResults.entity_info": [[638, "linearmodels-panel-results-panelresults-entity-info"]], "linearmodels.panel.results.PanelResults.cov": [[635, "linearmodels-panel-results-panelresults-cov"]], "linearmodels.panel.results.PanelResults.rsquared": [[653, "linearmodels-panel-results-panelresults-rsquared"]], "linearmodels.panel.results.PanelEffectsResults.wald_test": [[614, "linearmodels-panel-results-paneleffectsresults-wald-test"]], "linearmodels.panel.results.PanelResults.corr_squared_within": [[634, "linearmodels-panel-results-panelresults-corr-squared-within"]], "linearmodels.panel.results.PanelResults.df_resid": [[637, "linearmodels-panel-results-panelresults-df-resid"]], "linearmodels.panel.results.PanelModelComparison.estimator_method": [[618, "linearmodels-panel-results-panelmodelcomparison-estimator-method"]], "linearmodels.panel.results.PanelResults.resid_ss": [[651, "linearmodels-panel-results-panelresults-resid-ss"]], "linearmodels.panel.results.PanelResults.model_ss": [[645, "linearmodels-panel-results-panelresults-model-ss"]], "linearmodels.panel.results.PanelModelComparison.cov_estimator": [[617, "linearmodels-panel-results-panelmodelcomparison-cov-estimator"]], "linearmodels.panel.results.PanelModelComparison.rsquared_between": [[624, "linearmodels-panel-results-panelmodelcomparison-rsquared-between"]], "linearmodels.panel.results.PanelResults.rsquared_between": [[654, "linearmodels-panel-results-panelresults-rsquared-between"]], "linearmodels.panel.results.PanelResults.fitted_values": [[642, "linearmodels-panel-results-panelresults-fitted-values"]], "linearmodels.panel.results.PanelModelComparison.pvalues": [[622, "linearmodels-panel-results-panelmodelcomparison-pvalues"]], "linearmodels.panel.results.PanelResults": [[630, "linearmodels-panel-results-panelresults"]], "linearmodels.panel.results.PanelResults.f_statistic": [[640, "linearmodels-panel-results-panelresults-f-statistic"]], "linearmodels.panel.results.PanelResults.rsquared_within": [[656, "linearmodels-panel-results-panelresults-rsquared-within"]], "linearmodels.panel.results.PanelResults.loglik": [[644, "linearmodels-panel-results-panelresults-loglik"]], "linearmodels.panel.results.PanelEffectsResults.tstats": [[612, "linearmodels-panel-results-paneleffectsresults-tstats"]], "linearmodels.panel.results.PanelModelComparison.nobs": [[620, "linearmodels-panel-results-panelmodelcomparison-nobs"]], "linearmodels.panel.results.PanelResults.predict": [[649, "linearmodels-panel-results-panelresults-predict"]], "linearmodels.panel.results.PanelResults.rsquared_overall": [[655, "linearmodels-panel-results-panelresults-rsquared-overall"]], "linearmodels.panel.results.PanelEffectsResults.variance_decomposition": [[613, "linearmodels-panel-results-paneleffectsresults-variance-decomposition"]], "linearmodels.panel.results.PanelResults.params": [[648, "linearmodels-panel-results-panelresults-params"]], "linearmodels.panel.results.PanelModelComparison.rsquared_within": [[626, "linearmodels-panel-results-panelmodelcomparison-rsquared-within"]], "linearmodels.panel.results.PanelModelComparison.params": [[621, "linearmodels-panel-results-panelmodelcomparison-params"]], "linearmodels.panel.results.PanelResults.pvalues": [[650, "linearmodels-panel-results-panelresults-pvalues"]], "linearmodels.panel.results.PanelResults.corr_squared_between": [[632, "linearmodels-panel-results-panelresults-corr-squared-between"]], "linearmodels.panel.results.PanelResults.df_model": [[636, "linearmodels-panel-results-panelresults-df-model"]], "linearmodels.panel.results.PanelResults.f_statistic_robust": [[641, "linearmodels-panel-results-panelresults-f-statistic-robust"]], "linearmodels.panel.results.PanelResults.corr_squared_overall": [[633, "linearmodels-panel-results-panelresults-corr-squared-overall"]], "linearmodels.panel.results.PanelModelComparison": [[616, "linearmodels-panel-results-panelmodelcomparison"]], "linearmodels.panel.results.PanelModelComparison.rsquared": [[623, "linearmodels-panel-results-panelmodelcomparison-rsquared"]], "linearmodels.panel.results.PanelResults.conf_int": [[631, "linearmodels-panel-results-panelresults-conf-int"]], "linearmodels.panel.results.PanelEffectsResults.df_resid": [[583, "linearmodels-panel-results-paneleffectsresults-df-resid"]], "linearmodels.panel.results.PanelEffectsResults.f_statistic_robust": [[588, "linearmodels-panel-results-paneleffectsresults-f-statistic-robust"]], "linearmodels.panel.results.FamaMacBethResults.time_info": [[571, "linearmodels-panel-results-famamacbethresults-time-info"]], "linearmodels.panel.results.FamaMacBethResults.wresids": [[575, "linearmodels-panel-results-famamacbethresults-wresids"]], "linearmodels.panel.results.PanelEffectsResults.f_pooled": [[586, "linearmodels-panel-results-paneleffectsresults-f-pooled"]], "linearmodels.panel.results.PanelEffectsResults.included_effects": [[591, "linearmodels-panel-results-paneleffectsresults-included-effects"]], "linearmodels.panel.results.FamaMacBethResults.rsquared_within": [[567, "linearmodels-panel-results-famamacbethresults-rsquared-within"]], "linearmodels.panel.results.PanelEffectsResults.cov": [[581, "linearmodels-panel-results-paneleffectsresults-cov"]], "linearmodels.panel.results.PanelEffectsResults.estimated_effects": [[585, "linearmodels-panel-results-paneleffectsresults-estimated-effects"]], "linearmodels.panel.results.PanelEffectsResults.std_errors": [[608, "linearmodels-panel-results-paneleffectsresults-std-errors"]], "linearmodels.panel.results.PanelEffectsResults.resids": [[601, "linearmodels-panel-results-paneleffectsresults-resids"]], "linearmodels.panel.results.PanelEffectsResults.model_ss": [[593, "linearmodels-panel-results-paneleffectsresults-model-ss"]], "linearmodels.panel.results.PanelEffectsResults.fitted_values": [[589, "linearmodels-panel-results-paneleffectsresults-fitted-values"]], "linearmodels.panel.results.PanelEffectsResults.f_statistic": [[587, "linearmodels-panel-results-paneleffectsresults-f-statistic"]], "linearmodels.panel.results.PanelEffectsResults.params": [[597, "linearmodels-panel-results-paneleffectsresults-params"]], "linearmodels.panel.results.PanelEffectsResults.resid_ss": [[600, "linearmodels-panel-results-paneleffectsresults-resid-ss"]], "linearmodels.panel.results.PanelEffectsResults.time_info": [[610, "linearmodels-panel-results-paneleffectsresults-time-info"]], "linearmodels.panel.results.FamaMacBethResults.rsquared": [[564, "linearmodels-panel-results-famamacbethresults-rsquared"]], "linearmodels.panel.results.FamaMacBethResults.total_ss": [[572, "linearmodels-panel-results-famamacbethresults-total-ss"]], "linearmodels.panel.results.PanelEffectsResults.corr_squared_overall": [[579, "linearmodels-panel-results-paneleffectsresults-corr-squared-overall"]], "linearmodels.panel.results.PanelEffectsResults.rsquared": [[602, "linearmodels-panel-results-paneleffectsresults-rsquared"]], "linearmodels.panel.results.PanelEffectsResults.entity_info": [[584, "linearmodels-panel-results-paneleffectsresults-entity-info"]], "linearmodels.panel.results.PanelEffectsResults.name": [[594, "linearmodels-panel-results-paneleffectsresults-name"]], "linearmodels.panel.results.PanelEffectsResults.summary": [[609, "linearmodels-panel-results-paneleffectsresults-summary"]], "linearmodels.panel.results.PanelEffectsResults.corr_squared_within": [[580, "linearmodels-panel-results-paneleffectsresults-corr-squared-within"]], "linearmodels.panel.results.FamaMacBethResults.wald_test": [[574, "linearmodels-panel-results-famamacbethresults-wald-test"]], "linearmodels.panel.results.PanelEffectsResults.conf_int": [[577, "linearmodels-panel-results-paneleffectsresults-conf-int"]], "linearmodels.panel.results.PanelEffectsResults.rsquared_within": [[606, "linearmodels-panel-results-paneleffectsresults-rsquared-within"]], "linearmodels.panel.results.FamaMacBethResults.tstats": [[573, "linearmodels-panel-results-famamacbethresults-tstats"]], "linearmodels.panel.results.PanelEffectsResults.corr_squared_between": [[578, "linearmodels-panel-results-paneleffectsresults-corr-squared-between"]], "linearmodels.panel.results.PanelEffectsResults.other_info": [[596, "linearmodels-panel-results-paneleffectsresults-other-info"]], "linearmodels.panel.results.FamaMacBethResults.s2": [[568, "linearmodels-panel-results-famamacbethresults-s2"]], "linearmodels.panel.results.FamaMacBethResults.std_errors": [[569, "linearmodels-panel-results-famamacbethresults-std-errors"]], "linearmodels.panel.results.PanelEffectsResults": [[576, "linearmodels-panel-results-paneleffectsresults"]], "linearmodels.panel.results.PanelEffectsResults.idiosyncratic": [[590, "linearmodels-panel-results-paneleffectsresults-idiosyncratic"]], "linearmodels.panel.results.PanelEffectsResults.predict": [[598, "linearmodels-panel-results-paneleffectsresults-predict"]], "linearmodels.panel.results.PanelEffectsResults.rsquared_overall": [[605, "linearmodels-panel-results-paneleffectsresults-rsquared-overall"]], "linearmodels.panel.results.PanelEffectsResults.nobs": [[595, "linearmodels-panel-results-paneleffectsresults-nobs"]], "linearmodels.panel.results.FamaMacBethResults.summary": [[570, "linearmodels-panel-results-famamacbethresults-summary"]], "linearmodels.panel.results.FamaMacBethResults.rsquared_overall": [[566, "linearmodels-panel-results-famamacbethresults-rsquared-overall"]], "linearmodels.panel.results.PanelEffectsResults.pvalues": [[599, "linearmodels-panel-results-paneleffectsresults-pvalues"]], "linearmodels.panel.results.PanelEffectsResults.rsquared_between": [[603, "linearmodels-panel-results-paneleffectsresults-rsquared-between"]], "linearmodels.panel.results.PanelEffectsResults.df_model": [[582, "linearmodels-panel-results-paneleffectsresults-df-model"]], "linearmodels.panel.results.PanelEffectsResults.loglik": [[592, "linearmodels-panel-results-paneleffectsresults-loglik"]], "linearmodels.panel.results.FamaMacBethResults.rsquared_between": [[565, "linearmodels-panel-results-famamacbethresults-rsquared-between"]], "linearmodels.panel.results.PanelEffectsResults.s2": [[607, "linearmodels-panel-results-paneleffectsresults-s2"]], "linearmodels.panel.results.PanelEffectsResults.rsquared_inclusive": [[604, "linearmodels-panel-results-paneleffectsresults-rsquared-inclusive"]], "linearmodels.panel.model.PanelOLS.other_effects": [[518, "linearmodels-panel-model-panelols-other-effects"]], "linearmodels.panel.results.FamaMacBethResults.entity_info": [[549, "linearmodels-panel-results-famamacbethresults-entity-info"]], "linearmodels.panel.results.FamaMacBethResults.estimated_effects": [[550, "linearmodels-panel-results-famamacbethresults-estimated-effects"]], "linearmodels.panel.model.RandomEffects.has_constant": [[534, "linearmodels-panel-model-randomeffects-has-constant"]], "linearmodels.panel.model.PooledOLS.not_null": [[527, "linearmodels-panel-model-pooledols-not-null"]], "linearmodels.panel.model.PooledOLS.reformat_clusters": [[529, "linearmodels-panel-model-pooledols-reformat-clusters"]], "linearmodels.panel.results.FamaMacBethResults.resid_ss": [[562, "linearmodels-panel-results-famamacbethresults-resid-ss"]], "linearmodels.panel.results.FamaMacBethResults": [[538, "linearmodels-panel-results-famamacbethresults"]], "linearmodels.panel.results.FamaMacBethResults.predict": [[560, "linearmodels-panel-results-famamacbethresults-predict"]], "linearmodels.panel.results.FamaMacBethResults.name": [[557, "linearmodels-panel-results-famamacbethresults-name"]], "linearmodels.panel.model.PooledOLS.has_constant": [[526, "linearmodels-panel-model-pooledols-has-constant"]], "linearmodels.panel.results.FamaMacBethResults.f_statistic_robust": [[552, "linearmodels-panel-results-famamacbethresults-f-statistic-robust"]], "linearmodels.panel.results.FamaMacBethResults.all_params": [[539, "linearmodels-panel-results-famamacbethresults-all-params"]], "linearmodels.panel.model.RandomEffects.reformat_clusters": [[537, "linearmodels-panel-model-randomeffects-reformat-clusters"]], "linearmodels.panel.results.FamaMacBethResults.fitted_values": [[553, "linearmodels-panel-results-famamacbethresults-fitted-values"]], "linearmodels.panel.model.RandomEffects": [[530, "linearmodels-panel-model-randomeffects"]], "linearmodels.panel.results.FamaMacBethResults.model_ss": [[556, "linearmodels-panel-results-famamacbethresults-model-ss"]], "linearmodels.panel.results.FamaMacBethResults.conf_int": [[542, "linearmodels-panel-results-famamacbethresults-conf-int"]], "linearmodels.panel.results.FamaMacBethResults.avg_rsquared": [[541, "linearmodels-panel-results-famamacbethresults-avg-rsquared"]], "linearmodels.panel.results.FamaMacBethResults.pvalues": [[561, "linearmodels-panel-results-famamacbethresults-pvalues"]], "linearmodels.panel.results.FamaMacBethResults.df_model": [[547, "linearmodels-panel-results-famamacbethresults-df-model"]], "linearmodels.panel.model.PanelOLS.reformat_clusters": [[520, "linearmodels-panel-model-panelols-reformat-clusters"]], "linearmodels.panel.model.PanelOLS.not_null": [[517, "linearmodels-panel-model-panelols-not-null"]], "linearmodels.panel.model.PooledOLS.from_formula": [[525, "linearmodels-panel-model-pooledols-from-formula"]], "linearmodels.panel.model.PooledOLS": [[522, "linearmodels-panel-model-pooledols"]], "linearmodels.panel.results.FamaMacBethResults.idiosyncratic": [[554, "linearmodels-panel-results-famamacbethresults-idiosyncratic"]], "linearmodels.panel.model.RandomEffects.from_formula": [[533, "linearmodels-panel-model-randomeffects-from-formula"]], "linearmodels.panel.results.FamaMacBethResults.cov": [[546, "linearmodels-panel-results-famamacbethresults-cov"]], "linearmodels.panel.results.FamaMacBethResults.resids": [[563, "linearmodels-panel-results-famamacbethresults-resids"]], "linearmodels.panel.model.RandomEffects.formula": [[532, "linearmodels-panel-model-randomeffects-formula"]], "linearmodels.panel.model.PooledOLS.predict": [[528, "linearmodels-panel-model-pooledols-predict"]], "linearmodels.panel.model.RandomEffects.predict": [[536, "linearmodels-panel-model-randomeffects-predict"]], "linearmodels.panel.results.FamaMacBethResults.loglik": [[555, "linearmodels-panel-results-famamacbethresults-loglik"]], "linearmodels.panel.results.FamaMacBethResults.avg_adj_rsquared": [[540, "linearmodels-panel-results-famamacbethresults-avg-adj-rsquared"]], "linearmodels.panel.model.PooledOLS.formula": [[524, "linearmodels-panel-model-pooledols-formula"]], "linearmodels.panel.model.PanelOLS.time_effects": [[521, "linearmodels-panel-model-panelols-time-effects"]], "linearmodels.panel.results.FamaMacBethResults.df_resid": [[548, "linearmodels-panel-results-famamacbethresults-df-resid"]], "linearmodels.panel.results.FamaMacBethResults.f_statistic": [[551, "linearmodels-panel-results-famamacbethresults-f-statistic"]], "linearmodels.panel.results.FamaMacBethResults.nobs": [[558, "linearmodels-panel-results-famamacbethresults-nobs"]], "linearmodels.panel.results.FamaMacBethResults.corr_squared_overall": [[544, "linearmodels-panel-results-famamacbethresults-corr-squared-overall"]], "linearmodels.panel.results.FamaMacBethResults.corr_squared_within": [[545, "linearmodels-panel-results-famamacbethresults-corr-squared-within"]], "linearmodels.panel.results.FamaMacBethResults.params": [[559, "linearmodels-panel-results-famamacbethresults-params"]], "linearmodels.panel.model.PanelOLS.predict": [[519, "linearmodels-panel-model-panelols-predict"]], "linearmodels.panel.model.PooledOLS.fit": [[523, "linearmodels-panel-model-pooledols-fit"]], "linearmodels.panel.results.FamaMacBethResults.corr_squared_between": [[543, "linearmodels-panel-results-famamacbethresults-corr-squared-between"]], "linearmodels.panel.model.RandomEffects.fit": [[531, "linearmodels-panel-model-randomeffects-fit"]], "linearmodels.panel.model.RandomEffects.not_null": [[535, "linearmodels-panel-model-randomeffects-not-null"]], "linearmodels.panel.model.FamaMacBeth.not_null": [[500, "linearmodels-panel-model-famamacbeth-not-null"]], "linearmodels.panel.model.PanelOLS.fit": [[513, "linearmodels-panel-model-panelols-fit"]], "linearmodels.panel.data.PanelData.values2d": [[476, "linearmodels-panel-data-paneldata-values2d"]], "linearmodels.panel.model.BetweenOLS.fit": [[488, "linearmodels-panel-model-betweenols-fit"]], "linearmodels.panel.model.FirstDifferenceOLS.fit": [[504, "linearmodels-panel-model-firstdifferenceols-fit"]], "linearmodels.panel.model.BetweenOLS.formula": [[489, "linearmodels-panel-model-betweenols-formula"]], "linearmodels.panel.model.FirstDifferenceOLS.from_formula": [[506, "linearmodels-panel-model-firstdifferenceols-from-formula"]], "linearmodels.panel.model.BetweenOLS.from_formula": [[490, "linearmodels-panel-model-betweenols-from-formula"]], "linearmodels.panel.data.PanelData.nvar": [[471, "linearmodels-panel-data-paneldata-nvar"]], "linearmodels.panel.model.BetweenOLS.predict": [[493, "linearmodels-panel-model-betweenols-predict"]], "linearmodels.panel.data.PanelData.vars": [[478, "linearmodels-panel-data-paneldata-vars"]], "linearmodels.panel.model.FamaMacBeth": [[495, "linearmodels-panel-model-famamacbeth"]], "linearmodels.panel.data.PanelData.time_ids": [[475, "linearmodels-panel-data-paneldata-time-ids"]], "linearmodels.panel.data.PanelData.values3d": [[477, "linearmodels-panel-data-paneldata-values3d"]], "linearmodels.panel.model.PanelOLS.has_constant": [[516, "linearmodels-panel-model-panelols-has-constant"]], "linearmodels.panel.model.FamaMacBeth.fit": [[496, "linearmodels-panel-model-famamacbeth-fit"]], "linearmodels.panel.data._Panel.values": [[486, "linearmodels-panel-data-panel-values"]], "linearmodels.panel.model.BetweenOLS.not_null": [[492, "linearmodels-panel-model-betweenols-not-null"]], "linearmodels.panel.model.FirstDifferenceOLS.predict": [[509, "linearmodels-panel-model-firstdifferenceols-predict"]], "linearmodels.panel.model.FamaMacBeth.from_formula": [[498, "linearmodels-panel-model-famamacbeth-from-formula"]], "linearmodels.panel.model.FirstDifferenceOLS.has_constant": [[507, "linearmodels-panel-model-firstdifferenceols-has-constant"]], "linearmodels.panel.model.PanelOLS.formula": [[514, "linearmodels-panel-model-panelols-formula"]], "linearmodels.panel.data._Panel.from_array": [[480, "linearmodels-panel-data-panel-from-array"]], "linearmodels.panel.model.PanelOLS": [[511, "linearmodels-panel-model-panelols"]], "linearmodels.panel.model.PanelOLS.from_formula": [[515, "linearmodels-panel-model-panelols-from-formula"]], "linearmodels.panel.data.PanelData.panel": [[472, "linearmodels-panel-data-paneldata-panel"]], "linearmodels.panel.model.BetweenOLS": [[487, "linearmodels-panel-model-betweenols"]], "linearmodels.panel.model.FamaMacBeth.reformat_clusters": [[502, "linearmodels-panel-model-famamacbeth-reformat-clusters"]], "linearmodels.panel.data.PanelData.nobs": [[470, "linearmodels-panel-data-paneldata-nobs"]], "linearmodels.panel.model.FamaMacBeth.formula": [[497, "linearmodels-panel-model-famamacbeth-formula"]], "linearmodels.panel.model.BetweenOLS.reformat_clusters": [[494, "linearmodels-panel-model-betweenols-reformat-clusters"]], "linearmodels.panel.data._Panel.shape": [[484, "linearmodels-panel-data-panel-shape"]], "linearmodels.panel.model.PanelOLS.entity_effects": [[512, "linearmodels-panel-model-panelols-entity-effects"]], "linearmodels.panel.data._Panel.minor_axis": [[483, "linearmodels-panel-data-panel-minor-axis"]], "linearmodels.panel.data.PanelData.time": [[474, "linearmodels-panel-data-paneldata-time"]], "linearmodels.panel.model.BetweenOLS.has_constant": [[491, "linearmodels-panel-model-betweenols-has-constant"]], "linearmodels.panel.data._Panel.to_frame": [[485, "linearmodels-panel-data-panel-to-frame"]], "linearmodels.panel.model.FamaMacBeth.predict": [[501, "linearmodels-panel-model-famamacbeth-predict"]], "linearmodels.panel.model.FirstDifferenceOLS.not_null": [[508, "linearmodels-panel-model-firstdifferenceols-not-null"]], "linearmodels.panel.data._Panel.items": [[481, "linearmodels-panel-data-panel-items"]], "linearmodels.panel.model.FirstDifferenceOLS": [[503, "linearmodels-panel-model-firstdifferenceols"]], "linearmodels.panel.model.FamaMacBeth.has_constant": [[499, "linearmodels-panel-model-famamacbeth-has-constant"]], "linearmodels.panel.model.FirstDifferenceOLS.reformat_clusters": [[510, "linearmodels-panel-model-firstdifferenceols-reformat-clusters"]], "linearmodels.panel.data._Panel.major_axis": [[482, "linearmodels-panel-data-panel-major-axis"]], "linearmodels.panel.data._Panel": [[479, "linearmodels-panel-data-panel"]], "linearmodels.panel.data.PanelData.shape": [[473, "linearmodels-panel-data-paneldata-shape"]], "linearmodels.panel.model.FirstDifferenceOLS.formula": [[505, "linearmodels-panel-model-firstdifferenceols-formula"]], "linearmodels.panel.data.PanelData.drop": [[459, "linearmodels-panel-data-paneldata-drop"]], "linearmodels.panel.covariance.FamaMacBethCovariance.name": [[436, "linearmodels-panel-covariance-famamacbethcovariance-name"]], "linearmodels.panel.covariance.HeteroskedasticCovariance.eps": [[443, "linearmodels-panel-covariance-heteroskedasticcovariance-eps"]], "linearmodels.panel.data.PanelData.entity_ids": [[462, "linearmodels-panel-data-paneldata-entity-ids"]], "linearmodels.panel.covariance.FamaMacBethCovariance.ALLOWED_KWARGS": [[429, "linearmodels-panel-covariance-famamacbethcovariance-allowed-kwargs"]], "linearmodels.panel.data.PanelData.index": [[465, "linearmodels-panel-data-paneldata-index"]], "linearmodels.panel.covariance.DriscollKraay.s2": [[427, "linearmodels-panel-covariance-driscollkraay-s2"]], "linearmodels.panel.covariance.HomoskedasticCovariance.deferred_cov": [[450, "linearmodels-panel-covariance-homoskedasticcovariance-deferred-cov"]], "linearmodels.panel.data.PanelData.demean": [[458, "linearmodels-panel-data-paneldata-demean"]], "linearmodels.panel.covariance.HeteroskedasticCovariance.deferred_cov": [[442, "linearmodels-panel-covariance-heteroskedasticcovariance-deferred-cov"]], "linearmodels.panel.covariance.DriscollKraay.deferred_cov": [[424, "linearmodels-panel-covariance-driscollkraay-deferred-cov"]], "linearmodels.panel.data.PanelData.nentity": [[469, "linearmodels-panel-data-paneldata-nentity"]], "linearmodels.panel.covariance.HeteroskedasticCovariance.ALLOWED_KWARGS": [[439, "linearmodels-panel-covariance-heteroskedasticcovariance-allowed-kwargs"]], "linearmodels.panel.covariance.HomoskedasticCovariance.ALLOWED_KWARGS": [[447, "linearmodels-panel-covariance-homoskedasticcovariance-allowed-kwargs"]], "linearmodels.panel.covariance.HomoskedasticCovariance.DEFAULT_KERNEL": [[448, "linearmodels-panel-covariance-homoskedasticcovariance-default-kernel"]], "linearmodels.panel.covariance.HeteroskedasticCovariance.name": [[444, "linearmodels-panel-covariance-heteroskedasticcovariance-name"]], "linearmodels.panel.covariance.FamaMacBethCovariance.eps": [[435, "linearmodels-panel-covariance-famamacbethcovariance-eps"]], "linearmodels.panel.covariance.HomoskedasticCovariance": [[446, "linearmodels-panel-covariance-homoskedasticcovariance"]], "linearmodels.panel.data.PanelData.dummies": [[460, "linearmodels-panel-data-paneldata-dummies"]], "linearmodels.panel.covariance.HeteroskedasticCovariance.s2": [[445, "linearmodels-panel-covariance-heteroskedasticcovariance-s2"]], "linearmodels.panel.covariance.HeteroskedasticCovariance": [[438, "linearmodels-panel-covariance-heteroskedasticcovariance"]], "linearmodels.panel.covariance.FamaMacBethCovariance.all_params": [[431, "linearmodels-panel-covariance-famamacbethcovariance-all-params"]], "linearmodels.panel.covariance.FamaMacBethCovariance.DEFAULT_KERNEL": [[430, "linearmodels-panel-covariance-famamacbethcovariance-default-kernel"]], "linearmodels.panel.data.PanelData.general_demean": [[464, "linearmodels-panel-data-paneldata-general-demean"]], "linearmodels.panel.data.PanelData": [[454, "linearmodels-panel-data-paneldata"]], "linearmodels.panel.covariance.DriscollKraay.eps": [[425, "linearmodels-panel-covariance-driscollkraay-eps"]], "linearmodels.panel.covariance.HeteroskedasticCovariance.cov": [[441, "linearmodels-panel-covariance-heteroskedasticcovariance-cov"]], "linearmodels.panel.data.PanelData.dataframe": [[457, "linearmodels-panel-data-paneldata-dataframe"]], "linearmodels.panel.covariance.HomoskedasticCovariance.name": [[452, "linearmodels-panel-covariance-homoskedasticcovariance-name"]], "linearmodels.panel.data.PanelData.first_difference": [[463, "linearmodels-panel-data-paneldata-first-difference"]], "linearmodels.panel.covariance.FamaMacBethCovariance.bandwidth": [[432, "linearmodels-panel-covariance-famamacbethcovariance-bandwidth"]], "linearmodels.panel.covariance.HomoskedasticCovariance.cov": [[449, "linearmodels-panel-covariance-homoskedasticcovariance-cov"]], "linearmodels.panel.covariance.DriscollKraay.cov": [[423, "linearmodels-panel-covariance-driscollkraay-cov"]], "linearmodels.panel.data.PanelData.copy": [[455, "linearmodels-panel-data-paneldata-copy"]], "linearmodels.panel.data.PanelData.isnull": [[466, "linearmodels-panel-data-paneldata-isnull"]], "linearmodels.panel.covariance.HomoskedasticCovariance.s2": [[453, "linearmodels-panel-covariance-homoskedasticcovariance-s2"]], "linearmodels.panel.covariance.HeteroskedasticCovariance.DEFAULT_KERNEL": [[440, "linearmodels-panel-covariance-heteroskedasticcovariance-default-kernel"]], "linearmodels.panel.covariance.HomoskedasticCovariance.eps": [[451, "linearmodels-panel-covariance-homoskedasticcovariance-eps"]], "linearmodels.panel.data.PanelData.mean": [[467, "linearmodels-panel-data-paneldata-mean"]], "linearmodels.panel.covariance.FamaMacBethCovariance.cov": [[433, "linearmodels-panel-covariance-famamacbethcovariance-cov"]], "linearmodels.panel.covariance.FamaMacBethCovariance.s2": [[437, "linearmodels-panel-covariance-famamacbethcovariance-s2"]], "linearmodels.panel.covariance.FamaMacBethCovariance.deferred_cov": [[434, "linearmodels-panel-covariance-famamacbethcovariance-deferred-cov"]], "linearmodels.panel.data.PanelData.ndim": [[468, "linearmodels-panel-data-paneldata-ndim"]], "linearmodels.panel.covariance.DriscollKraay.name": [[426, "linearmodels-panel-covariance-driscollkraay-name"]], "linearmodels.panel.covariance.FamaMacBethCovariance": [[428, "linearmodels-panel-covariance-famamacbethcovariance"]], "linearmodels.panel.data.PanelData.count": [[456, "linearmodels-panel-data-paneldata-count"]], "linearmodels.panel.data.PanelData.entities": [[461, "linearmodels-panel-data-paneldata-entities"]], "linearmodels.panel.utility.PanelModelData.weights": [[709, "linearmodels-panel-utility-panelmodeldata-weights"]], "linearmodels.system.covariance.HomoskedasticCovariance.cov_config": [[741, "linearmodels-system-covariance-homoskedasticcovariance-cov-config"]], "linearmodels.system.covariance.GMMKernelCovariance": [[730, "linearmodels-system-covariance-gmmkernelcovariance"]], "Examples": [[714, "Examples"], [69, "Examples"], [397, "Examples"]], "Data": [[714, "Data"], [716, "Data"]], "Basic Usage": [[714, "Basic-Usage"], [151, "Basic-Usage"]], "Estimation Options": [[714, "Estimation-Options"]], "Iterative GLS": [[714, "Iterative-GLS"]], "Alternative Covariance Estimators": [[714, "Alternative-Covariance-Estimators"]], "Heteroskedasticity Robust Covariance Estimation": [[714, "Heteroskedasticity-Robust-Covariance-Estimation"]], "Kernel (HAC)": [[714, "Kernel-(HAC)"]], "Clustered (Rogers)": [[714, "Clustered-(Rogers)"]], "Prespecified Residual Covariance Estimators": [[714, "Prespecified-Residual-Covariance-Estimators"]], "Diagonal Residual Covariance": [[714, "Diagonal-Residual-Covariance"]], "Cross-Equation Restrictions": [[714, "Cross-Equation-Restrictions"]], "Pooling using constraints": [[714, "Pooling-using-constraints"]], "Multivariate OLS": [[714, "Multivariate-OLS"]], "Using GLS with common regressors": [[714, "Using-GLS-with-common-regressors"]], "linearmodels.system.covariance.GMMHomoskedasticCovariance.cov": [[728, "linearmodels-system-covariance-gmmhomoskedasticcovariance-cov"]], "linearmodels.system.covariance.KernelCovariance.cov": [[745, "linearmodels-system-covariance-kernelcovariance-cov"]], "linearmodels.system.covariance.GMMKernelCovariance.bandwidth": [[731, "linearmodels-system-covariance-gmmkernelcovariance-bandwidth"]], "linearmodels.system.covariance.ClusteredCovariance.sigma": [[723, "linearmodels-system-covariance-clusteredcovariance-sigma"]], "linearmodels.panel.utility.PanelModelData.other_effects": [[708, "linearmodels-panel-utility-panelmodeldata-other-effects"]], "linearmodels.system.covariance.KernelCovariance.sigma": [[748, "linearmodels-system-covariance-kernelcovariance-sigma"]], "linearmodels.system.covariance.HeteroskedasticCovariance.cov_config": [[737, "linearmodels-system-covariance-heteroskedasticcovariance-cov-config"]], "linearmodels.system.gmm.HeteroskedasticWeightMatrix": [[749, "linearmodels-system-gmm-heteroskedasticweightmatrix"]], "linearmodels.system.covariance.GMMHomoskedasticCovariance.cov_config": [[729, "linearmodels-system-covariance-gmmhomoskedasticcovariance-cov-config"]], "linearmodels.system.covariance.GMMKernelCovariance.cov_config": [[733, "linearmodels-system-covariance-gmmkernelcovariance-cov-config"]], "linearmodels.system.covariance.KernelCovariance": [[743, "linearmodels-system-covariance-kernelcovariance"]], "linearmodels.panel.utility.generate_panel_data": [[710, "linearmodels-panel-utility-generate-panel-data"]], "linearmodels.system.covariance.ClusteredCovariance.cov": [[721, "linearmodels-system-covariance-clusteredcovariance-cov"]], "linearmodels.system.covariance.GMMKernelCovariance.kernel": [[734, "linearmodels-system-covariance-gmmkernelcovariance-kernel"]], "linearmodels.system.covariance.HeteroskedasticCovariance.sigma": [[738, "linearmodels-system-covariance-heteroskedasticcovariance-sigma"]], "linearmodels.system.covariance.HomoskedasticCovariance.cov": [[740, "linearmodels-system-covariance-homoskedasticcovariance-cov"]], "Three-stage Least Squares (3SLS)": [[716, "Three-stage-Least-Squares-(3SLS)"]], "Formulas": [[716, "Formulas"]], "Direct Model Specification": [[716, "Direct-Model-Specification"]], "System GMM Estimation": [[716, "System-GMM-Estimation"]], "Simultaneous Equations": [[716, "Simultaneous-Equations"]], "linearmodels.system.covariance.GMMKernelCovariance.cov": [[732, "linearmodels-system-covariance-gmmkernelcovariance-cov"]], "Module Plans": [[712, "module-plans"]], "Univariate": [[712, "univariate"]], "Panel": [[712, "panel"]], "Least Squares Estimators": [[712, "least-squares-estimators"]], "Asset Pricing": [[712, "asset-pricing"]], "Dynamic Panel Data Models": [[712, "dynamic-panel-data-models"]], "Panel Instrumental Variable Estimators": [[712, "panel-instrumental-variable-estimators"]], "System Estimation": [[712, "system-estimation"]], "Instrumental Variable Estimators": [[712, "instrumental-variable-estimators"]], "linearmodels.system.covariance.ClusteredCovariance": [[720, "linearmodels-system-covariance-clusteredcovariance"]], "linearmodels.system.covariance.HomoskedasticCovariance.sigma": [[742, "linearmodels-system-covariance-homoskedasticcovariance-sigma"]], "linearmodels.system.covariance.GMMHeteroskedasticCovariance.cov_config": [[726, "linearmodels-system-covariance-gmmheteroskedasticcovariance-cov-config"]], "linearmodels.panel.utility.PanelModelData.index": [[707, "linearmodels-panel-utility-panelmodeldata-index"]], "Module Reference": [[719, "module-reference"], [711, "module-reference"], [74, "module-reference"], [395, "module-reference"]], "System Regression Estimators": [[719, "module-linearmodels.system.model"]], "Estimation Results": [[719, "module-linearmodels.system.results"], [711, "module-linearmodels.panel.results"], [74, "module-linearmodels.asset_pricing.results"], [395, "module-linearmodels.iv.results"]], "System Regression Estimator Covariance Estimation": [[719, "module-linearmodels.system.covariance"]], "SUR and 3SLS": [[719, "sur-and-3sls"]], "Generalized Method of Moments (GMM)": [[719, "generalized-method-of-moments-gmm"], [394, "generalized-method-of-moments-gmm"]], "GMM Moment Weighting": [[719, "module-linearmodels.system.gmm"]], "References": [[713, "references"]], "linearmodels.system.covariance.GMMHeteroskedasticCovariance.cov": [[725, "linearmodels-system-covariance-gmmheteroskedasticcovariance-cov"]], "linearmodels.system.covariance.HomoskedasticCovariance": [[739, "linearmodels-system-covariance-homoskedasticcovariance"]], "linearmodels.system.gmm.HeteroskedasticWeightMatrix.config": [[750, "linearmodels-system-gmm-heteroskedasticweightmatrix-config"]], "linearmodels.panel.utility.PanelModelData.count": [[705, "linearmodels-panel-utility-panelmodeldata-count"]], "System Regression Models": [[717, "system-regression-models"]], "Seemingly Unrelated Regression (SUR/SURE)": [[718, "seemingly-unrelated-regression-sur-sure"]], "Basic Notation": [[718, "basic-notation"], [718, "basic-notation-1"]], "Other Statistics": [[718, "other-statistics"]], "Memory efficient calculations": [[718, "memory-efficient-calculations"]], "Three Stage Least Squares (3SLS)": [[718, "three-stage-least-squares-3sls"]], "System Generalized Method of Moments (GMM)": [[718, "system-generalized-method-of-moments-gmm"]], "Homoskedastic Weighting": [[718, "homoskedastic-weighting"]], "Heteroskedastic Weighting": [[718, "heteroskedastic-weighting"]], "Parameter Covariance": [[718, "parameter-covariance"]], "Testing Covariance and Correlations": [[718, "testing-covariance-and-correlations"]], "System Measures of Fit (R^{2})": [[718, "system-measures-of-fit-r-2"]], "Overall R^{2}": [[718, "overall-r-2"], [402, "overall-r-2"]], "McElroy": [[718, "mcelroy"]], "Berndt": [[718, "berndt"]], "Judge": [[718, "judge"]], "Dhrymes": [[718, "dhrymes"]], "linearmodels.system.covariance.KernelCovariance.cov_config": [[746, "linearmodels-system-covariance-kernelcovariance-cov-config"]], "linearmodels.system.covariance.KernelCovariance.bandwidth": [[744, "linearmodels-system-covariance-kernelcovariance-bandwidth"]], "linearmodels.system.covariance.GMMHeteroskedasticCovariance": [[724, "linearmodels-system-covariance-gmmheteroskedasticcovariance"]], "linearmodels.system.gmm.HeteroskedasticWeightMatrix.sigma": [[751, "linearmodels-system-gmm-heteroskedasticweightmatrix-sigma"]], "Using formulas to specify models": [[715, "Using-formulas-to-specify-models"], [398, "Using-formulas-to-specify-models"], [151, "Using-formulas-to-specify-models"]], "Dictionary": [[715, "Dictionary"]], "Curly Braces": [[715, "Curly-Braces"]], "Labeled Formulas": [[715, "Labeled-Formulas"]], "Other Options": [[715, "Other-Options"], [397, "Other-Options"]], "Estimation Weights": [[715, "Estimation-Weights"]], "Prespecified Residual Covariance": [[715, "Prespecified-Residual-Covariance"]], "linearmodels.system.covariance.HeteroskedasticCovariance.cov": [[736, "linearmodels-system-covariance-heteroskedasticcovariance-cov"]], "linearmodels.system.covariance.ClusteredCovariance.cov_config": [[722, "linearmodels-system-covariance-clusteredcovariance-cov-config"]], "linearmodels.system.covariance.KernelCovariance.kernel": [[747, "linearmodels-system-covariance-kernelcovariance-kernel"]], "linearmodels.system.covariance.GMMHomoskedasticCovariance": [[727, "linearmodels-system-covariance-gmmhomoskedasticcovariance"]], "linearmodels.system.covariance.HeteroskedasticCovariance": [[735, "linearmodels-system-covariance-heteroskedasticcovariance"]], "Models for Panel Data": [[711, "module-linearmodels.panel.model"]], "Panel Model Covariance Estimators": [[711, "module-linearmodels.panel.covariance"]], "Panel Data Structures": [[711, "module-linearmodels.panel.data"]], "Test Data Generation": [[711, "module-linearmodels.panel.utility"]], "linearmodels.panel.utility.PanelModelData.data": [[706, "linearmodels-panel-utility-panelmodeldata-data"]], "linearmodels.iv.results.IVResults.summary": [[353, "linearmodels-iv-results-ivresults-summary"]], "linearmodels.iv.results.IVResults.pvalues": [[345, "linearmodels-iv-results-ivresults-pvalues"]], "linearmodels.iv.results.OLSResults.has_constant": [[373, "linearmodels-iv-results-olsresults-has-constant"]], "linearmodels.iv.results.IVResults.wooldridge_overid": [[357, "linearmodels-iv-results-ivresults-wooldridge-overid"]], "linearmodels.iv.results.OLSResults.kappa": [[375, "linearmodels-iv-results-olsresults-kappa"]], "linearmodels.iv.results.IVResults.resid_ss": [[346, "linearmodels-iv-results-ivresults-resid-ss"]], "linearmodels.iv.results.OLSResults.df_resid": [[370, "linearmodels-iv-results-olsresults-df-resid"]], "linearmodels.iv.results.IVResults.idiosyncratic": [[338, "linearmodels-iv-results-ivresults-idiosyncratic"]], "linearmodels.iv.results.IVResults.predict": [[344, "linearmodels-iv-results-ivresults-predict"]], "linearmodels.iv.results.IVResults.debiased": [[330, "linearmodels-iv-results-ivresults-debiased"]], "linearmodels.iv.results.IVResults.sargan": [[351, "linearmodels-iv-results-ivresults-sargan"]], "linearmodels.iv.results.OLSResults.cov": [[364, "linearmodels-iv-results-olsresults-cov"]], "linearmodels.iv.results.IVResults.s2": [[350, "linearmodels-iv-results-ivresults-s2"]], "linearmodels.iv.results.OLSResults.cov_type": [[367, "linearmodels-iv-results-olsresults-cov-type"]], "linearmodels.iv.results.OLSResults": [[362, "linearmodels-iv-results-olsresults"]], "linearmodels.iv.results.IVResults.method": [[340, "linearmodels-iv-results-ivresults-method"]], "linearmodels.iv.results.OLSResults.idiosyncratic": [[374, "linearmodels-iv-results-olsresults-idiosyncratic"]], "linearmodels.iv.results.IVResults.wu_hausman": [[361, "linearmodels-iv-results-ivresults-wu-hausman"]], "linearmodels.iv.results.OLSResults.conf_int": [[363, "linearmodels-iv-results-olsresults-conf-int"]], "linearmodels.iv.results.IVResults.wald_test": [[356, "linearmodels-iv-results-ivresults-wald-test"]], "linearmodels.iv.results.OLSResults.debiased": [[368, "linearmodels-iv-results-olsresults-debiased"]], "linearmodels.iv.results.IVResults.kappa": [[339, "linearmodels-iv-results-ivresults-kappa"]], "linearmodels.iv.results.IVResults.tstats": [[355, "linearmodels-iv-results-ivresults-tstats"]], "linearmodels.iv.results.IVResults.f_statistic": [[334, "linearmodels-iv-results-ivresults-f-statistic"]], "linearmodels.iv.results.IVResults.first_stage": [[335, "linearmodels-iv-results-ivresults-first-stage"]], "linearmodels.iv.results.IVResults.fitted_values": [[336, "linearmodels-iv-results-ivresults-fitted-values"]], "linearmodels.iv.results.IVResults.rsquared": [[348, "linearmodels-iv-results-ivresults-rsquared"]], "linearmodels.iv.results.IVResults.rsquared_adj": [[349, "linearmodels-iv-results-ivresults-rsquared-adj"]], "linearmodels.iv.results.IVResults.wresids": [[360, "linearmodels-iv-results-ivresults-wresids"]], "linearmodels.iv.results.IVResults.has_constant": [[337, "linearmodels-iv-results-ivresults-has-constant"]], "linearmodels.iv.results.OLSResults.f_statistic": [[371, "linearmodels-iv-results-olsresults-f-statistic"]], "linearmodels.iv.results.IVResults.std_errors": [[352, "linearmodels-iv-results-ivresults-std-errors"]], "linearmodels.iv.results.IVResults.nobs": [[342, "linearmodels-iv-results-ivresults-nobs"]], "linearmodels.iv.results.IVResults.total_ss": [[354, "linearmodels-iv-results-ivresults-total-ss"]], "linearmodels.iv.results.OLSResults.cov_estimator": [[366, "linearmodels-iv-results-olsresults-cov-estimator"]], "linearmodels.iv.results.IVResults.wooldridge_regression": [[358, "linearmodels-iv-results-ivresults-wooldridge-regression"]], "linearmodels.iv.results.IVResults.cov_type": [[329, "linearmodels-iv-results-ivresults-cov-type"]], "linearmodels.iv.results.IVResults.wooldridge_score": [[359, "linearmodels-iv-results-ivresults-wooldridge-score"]], "linearmodels.iv.results.IVResults.params": [[343, "linearmodels-iv-results-ivresults-params"]], "linearmodels.iv.results.IVResults.model_ss": [[341, "linearmodels-iv-results-ivresults-model-ss"]], "linearmodels.iv.results.IVResults.resids": [[347, "linearmodels-iv-results-ivresults-resids"]], "linearmodels.iv.results.OLSResults.cov_config": [[365, "linearmodels-iv-results-olsresults-cov-config"]], "linearmodels.iv.results.OLSResults.df_model": [[369, "linearmodels-iv-results-olsresults-df-model"]], "linearmodels.iv.results.OLSResults.fitted_values": [[372, "linearmodels-iv-results-olsresults-fitted-values"]], "linearmodels.iv.results.IVResults.durbin": [[333, "linearmodels-iv-results-ivresults-durbin"]], "linearmodels.iv.results.IVResults.df_resid": [[332, "linearmodels-iv-results-ivresults-df-resid"]], "linearmodels.iv.results.IVResults.df_model": [[331, "linearmodels-iv-results-ivresults-df-model"]], "linearmodels.iv.results.IVGMMResults.kappa": [[288, "linearmodels-iv-results-ivgmmresults-kappa"]], "linearmodels.iv.results.IVGMMResults.weight_config": [[305, "linearmodels-iv-results-ivgmmresults-weight-config"]], "linearmodels.iv.results.IVModelComparison": [[309, "linearmodels-iv-results-ivmodelcomparison"]], "linearmodels.iv.results.IVGMMResults.tstats": [[303, "linearmodels-iv-results-ivgmmresults-tstats"]], "linearmodels.iv.results.IVGMMResults.wald_test": [[304, "linearmodels-iv-results-ivgmmresults-wald-test"]], "linearmodels.iv.results.IVModelComparison.rsquared": [[316, "linearmodels-iv-results-ivmodelcomparison-rsquared"]], "linearmodels.iv.results.IVResults.basmann": [[323, "linearmodels-iv-results-ivresults-basmann"]], "linearmodels.iv.results.IVResults.anderson_rubin": [[322, "linearmodels-iv-results-ivresults-anderson-rubin"]], "linearmodels.iv.results.IVGMMResults.model_ss": [[290, "linearmodels-iv-results-ivgmmresults-model-ss"]], "linearmodels.iv.results.IVResults.cov_estimator": [[328, "linearmodels-iv-results-ivresults-cov-estimator"]], "linearmodels.iv.results.IVGMMResults.total_ss": [[302, "linearmodels-iv-results-ivgmmresults-total-ss"]], "linearmodels.iv.results.IVModelComparison.tstats": [[320, "linearmodels-iv-results-ivmodelcomparison-tstats"]], "linearmodels.iv.results.IVModelComparison.pvalues": [[315, "linearmodels-iv-results-ivmodelcomparison-pvalues"]], "linearmodels.iv.results.IVGMMResults.std_errors": [[300, "linearmodels-iv-results-ivgmmresults-std-errors"]], "linearmodels.iv.results.IVGMMResults.summary": [[301, "linearmodels-iv-results-ivgmmresults-summary"]], "linearmodels.iv.results.IVGMMResults.resid_ss": [[295, "linearmodels-iv-results-ivgmmresults-resid-ss"]], "linearmodels.iv.results.IVGMMResults.nobs": [[291, "linearmodels-iv-results-ivgmmresults-nobs"]], "linearmodels.iv.results.IVGMMResults.j_stat": [[287, "linearmodels-iv-results-ivgmmresults-j-stat"]], "linearmodels.iv.results.IVModelComparison.f_statistic": [[312, "linearmodels-iv-results-ivmodelcomparison-f-statistic"]], "linearmodels.iv.results.IVModelComparison.params": [[314, "linearmodels-iv-results-ivmodelcomparison-params"]], "linearmodels.iv.results.IVResults.conf_int": [[325, "linearmodels-iv-results-ivresults-conf-int"]], "linearmodels.iv.results.IVGMMResults.params": [[292, "linearmodels-iv-results-ivgmmresults-params"]], "linearmodels.iv.results.IVGMMResults.wresids": [[308, "linearmodels-iv-results-ivgmmresults-wresids"]], "linearmodels.iv.results.IVResults.cov": [[326, "linearmodels-iv-results-ivresults-cov"]], "linearmodels.iv.results.IVResults": [[321, "linearmodels-iv-results-ivresults"]], "linearmodels.iv.results.IVGMMResults.idiosyncratic": [[285, "linearmodels-iv-results-ivgmmresults-idiosyncratic"]], "linearmodels.iv.results.IVGMMResults.first_stage": [[282, "linearmodels-iv-results-ivgmmresults-first-stage"]], "linearmodels.iv.results.IVGMMResults.weight_type": [[307, "linearmodels-iv-results-ivgmmresults-weight-type"]], "linearmodels.iv.results.IVModelComparison.estimator_method": [[311, "linearmodels-iv-results-ivmodelcomparison-estimator-method"]], "linearmodels.iv.results.IVGMMResults.rsquared_adj": [[298, "linearmodels-iv-results-ivgmmresults-rsquared-adj"]], "linearmodels.iv.results.IVModelComparison.cov_estimator": [[310, "linearmodels-iv-results-ivmodelcomparison-cov-estimator"]], "linearmodels.iv.results.IVGMMResults.rsquared": [[297, "linearmodels-iv-results-ivgmmresults-rsquared"]], "linearmodels.iv.results.IVResults.basmann_f": [[324, "linearmodels-iv-results-ivresults-basmann-f"]], "linearmodels.iv.results.IVGMMResults.has_constant": [[284, "linearmodels-iv-results-ivgmmresults-has-constant"]], "linearmodels.iv.results.IVGMMResults.resids": [[296, "linearmodels-iv-results-ivgmmresults-resids"]], "linearmodels.iv.results.IVGMMResults.predict": [[293, "linearmodels-iv-results-ivgmmresults-predict"]], "linearmodels.iv.results.IVModelComparison.nobs": [[313, "linearmodels-iv-results-ivmodelcomparison-nobs"]], "linearmodels.iv.results.IVGMMResults.iterations": [[286, "linearmodels-iv-results-ivgmmresults-iterations"]], "linearmodels.iv.results.IVGMMResults.fitted_values": [[283, "linearmodels-iv-results-ivgmmresults-fitted-values"]], "linearmodels.iv.results.IVGMMResults.pvalues": [[294, "linearmodels-iv-results-ivgmmresults-pvalues"]], "linearmodels.iv.results.IVResults.cov_config": [[327, "linearmodels-iv-results-ivresults-cov-config"]], "linearmodels.iv.results.IVGMMResults.weight_matrix": [[306, "linearmodels-iv-results-ivgmmresults-weight-matrix"]], "linearmodels.iv.results.IVModelComparison.rsquared_adj": [[317, "linearmodels-iv-results-ivmodelcomparison-rsquared-adj"]], "linearmodels.iv.results.IVModelComparison.summary": [[319, "linearmodels-iv-results-ivmodelcomparison-summary"]], "linearmodels.iv.results.IVGMMResults.method": [[289, "linearmodels-iv-results-ivgmmresults-method"]], "linearmodels.iv.results.IVGMMResults.s2": [[299, "linearmodels-iv-results-ivgmmresults-s2"]], "linearmodels.iv.results.IVModelComparison.std_errors": [[318, "linearmodels-iv-results-ivmodelcomparison-std-errors"]], "linearmodels.asset_pricing.results.GMMFactorModelResults.total_ss": [[47, "linearmodels-asset-pricing-results-gmmfactormodelresults-total-ss"]], "General Setup": [[69, "General-Setup"]], "Import data": [[69, "Import-data"]], "Transform the portfolios to be excesses": [[69, "Transform-the-portfolios-to-be-excesses"]], "1-Step Estimation using Seemingly Unrelated Regression (SUR)": [[69, "1-Step-Estimation-using-Seemingly-Unrelated-Regression-(SUR)"]], "2-Step Estimation": [[69, "2-Step-Estimation"]], "GMM Estimation": [[69, "GMM-Estimation"], [149, "GMM-Estimation"], [153, "gmm-estimation"]], "Iterating until convergence": [[69, "Iterating-until-convergence"]], "Continuously Updating Estimator": [[69, "Continuously-Updating-Estimator"]], "Using Formulas": [[70, "Using-Formulas"]], "Available Syntax": [[70, "Available-Syntax"]], "Test Portfolios and Factors": [[70, "Test-Portfolios-and-Factors"]], "Factors Only": [[70, "Factors-Only"]], "Import data and transform to be excess returns": [[70, "Import-data-and-transform-to-be-excess-returns"]], "First Syntax": [[70, "First-Syntax"]], "Second Syntax": [[70, "Second-Syntax"]], "Comparing results": [[70, "Comparing-results"], [151, "Comparing-results"], [149, "Comparing-results"]], "Introduction": [[72, "introduction"], [401, "introduction"], [153, "introduction"]], "linearmodels.asset_pricing.results.GMMFactorModelResults.tstats": [[48, "linearmodels-asset-pricing-results-gmmfactormodelresults-tstats"]], "linearmodels.asset_pricing.results.LinearFactorModelResults.total_ss": [[67, "linearmodels-asset-pricing-results-linearfactormodelresults-total-ss"]], "Linear Factor Models for Asset Pricing": [[71, "linear-factor-models-for-asset-pricing"]], "Note": [[90, null], [79, null]], "linearmodels": [[90, "linearmodels"]], "Indices": [[90, "indices"]], "linearmodels.iv.absorbing.AbsorbingLS": [[91, "linearmodels-iv-absorbing-absorbingls"]], "linearmodels.asset_pricing.results.LinearFactorModelResults.cov_estimator": [[53, "linearmodels-asset-pricing-results-linearfactormodelresults-cov-estimator"]], "linearmodels.asset_pricing.results.LinearFactorModelResults.rsquared": [[64, "linearmodels-asset-pricing-results-linearfactormodelresults-rsquared"]], "linearmodels.asset_pricing.results.LinearFactorModelResults.std_errors": [[65, "linearmodels-asset-pricing-results-linearfactormodelresults-std-errors"]], "linearmodels.compat.statsmodels.Summary.as_latex": [[87, "linearmodels-compat-statsmodels-summary-as-latex"]], "linearmodels.compat.statsmodels.Summary.add_extra_txt": [[82, "linearmodels-compat-statsmodels-summary-add-extra-txt"]], "Linear Asset Pricing Models": [[74, "module-linearmodels.asset_pricing.model"]], "Linear Asset Pricing Model Covariance Estimators": [[74, "module-linearmodels.asset_pricing.covariance"]], "linearmodels.asset_pricing.results.LinearFactorModelResults.params": [[58, "linearmodels-asset-pricing-results-linearfactormodelresults-params"]], "Compatibility": [[80, "compatibility"]], "Summaries": [[80, "module-linearmodels.compat.statsmodels"]], "linearmodels.asset_pricing.results.LinearFactorModelResults.risk_premia_tstats": [[63, "linearmodels-asset-pricing-results-linearfactormodelresults-risk-premia-tstats"]], "linearmodels.asset_pricing.results.LinearFactorModelResults.name": [[56, "linearmodels-asset-pricing-results-linearfactormodelresults-name"]], "linearmodels.asset_pricing.results.LinearFactorModelResults.cov": [[52, "linearmodels-asset-pricing-results-linearfactormodelresults-cov"]], "linearmodels.asset_pricing.results.LinearFactorModelResults.pvalues": [[59, "linearmodels-asset-pricing-results-linearfactormodelresults-pvalues"]], "linearmodels.asset_pricing.results.LinearFactorModelResults.alphas": [[50, "linearmodels-asset-pricing-results-linearfactormodelresults-alphas"]], "linearmodels.iv.absorbing.AbsorbingLS.absorbed_dependent": [[92, "linearmodels-iv-absorbing-absorbingls-absorbed-dependent"]], "linearmodels.asset_pricing.results.LinearFactorModelResults.betas": [[51, "linearmodels-asset-pricing-results-linearfactormodelresults-betas"]], "Verison 5.5": [[78, "verison-5-5"], [75, "verison-5-5"]], "Verison 5.4": [[78, "verison-5-4"], [75, "verison-5-4"]], "Version 5.3": [[78, "version-5-3"], [75, "version-5-3"]], "Version 5.2": [[78, "version-5-2"], [75, "version-5-2"]], "Version 5.1": [[78, "version-5-1"], [75, "version-5-1"]], "Version 5.0": [[78, "version-5-0"], [75, "version-5-0"]], "Version 6.0": [[79, "version-6-0"]], "Formulas and Mathematical Detail": [[73, "formulas-and-mathematical-detail"], [402, "formulas-and-mathematical-detail"], [394, "formulas-and-mathematical-detail"]], "Linear Factor Model for Traded Factors": [[73, "linear-factor-model-for-traded-factors"]], "The J statistic": [[73, "the-j-statistic"], [73, "id1"]], "Linear Factor Model for Non-traded Factors": [[73, "linear-factor-model-for-non-traded-factors"]], "Improved Specification using GLS": [[73, "improved-specification-using-gls"]], "GMM Estimation of Linear Factor Models": [[73, "gmm-estimation-of-linear-factor-models"]], "linearmodels.asset_pricing.results.LinearFactorModelResults.j_statistic": [[55, "linearmodels-asset-pricing-results-linearfactormodelresults-j-statistic"]], "linearmodels.compat.statsmodels.Summary.add_table_params": [[84, "linearmodels-compat-statsmodels-summary-add-table-params"]], "Version 4": [[77, "version-4"]], "Version 4.31": [[77, "version-4-31"]], "Version 4.30": [[77, "version-4-30"]], "Version 4.29": [[77, "version-4-29"]], "Version 4.28": [[77, "version-4-28"]], "Version 4.27": [[77, "version-4-27"]], "Version 4.26": [[77, "version-4-26"]], "Version 4.25": [[77, "version-4-25"]], "Version 4.24": [[77, "version-4-24"]], "Version 4.21": [[77, "version-4-21"]], "Version 4.20": [[77, "version-4-20"]], "Version 4.19": [[77, "version-4-19"]], "Version 4.18": [[77, "version-4-18"]], "Version 4.17": [[77, "version-4-17"]], "Version 4.16": [[77, "version-4-16"]], "Version 4.15": [[77, "version-4-15"]], "Version 4.14": [[77, "version-4-14"]], "Version 4.13": [[77, "version-4-13"]], "Version 4.12": [[77, "version-4-12"]], "Version 4.11": [[77, "version-4-11"]], "Version 4.10": [[77, "version-4-10"]], "Version 4.9": [[77, "version-4-9"]], "Version 4.8": [[77, "version-4-8"]], "Version 4.7": [[77, "version-4-7"]], "Version 4.6": [[77, "version-4-6"]], "Version 4.5": [[77, "version-4-5"]], "Version 4.0": [[77, "version-4-0"]], "linearmodels.asset_pricing.results.LinearFactorModelResults.risk_premia_se": [[62, "linearmodels-asset-pricing-results-linearfactormodelresults-risk-premia-se"]], "linearmodels.asset_pricing.results.LinearFactorModelResults.risk_premia": [[61, "linearmodels-asset-pricing-results-linearfactormodelresults-risk-premia"]], "Contributing": [[89, "contributing"]], "linearmodels.asset_pricing.results.LinearFactorModelResults.summary": [[66, "linearmodels-asset-pricing-results-linearfactormodelresults-summary"]], "Change Log": [[75, "change-log"]], "Past Releases": [[75, "past-releases"]], "linearmodels.compat.statsmodels.Summary.add_table_2cols": [[83, "linearmodels-compat-statsmodels-summary-add-table-2cols"]], "Version 3.0": [[76, "version-3-0"]], "Version 2.0": [[76, "version-2-0"]], "Version 1.0": [[76, "version-1-0"]], "linearmodels.compat.statsmodels.Summary.as_html": [[86, "linearmodels-compat-statsmodels-summary-as-html"]], "linearmodels.iv.absorbing.AbsorbingLS.absorbed_exog": [[93, "linearmodels-iv-absorbing-absorbingls-absorbed-exog"]], "linearmodels.asset_pricing.results.LinearFactorModelResults.tstats": [[68, "linearmodels-asset-pricing-results-linearfactormodelresults-tstats"]], "linearmodels.asset_pricing.results.LinearFactorModelResults.residual_ss": [[60, "linearmodels-asset-pricing-results-linearfactormodelresults-residual-ss"]], "linearmodels.asset_pricing.results.LinearFactorModelResults.full_summary": [[54, "linearmodels-asset-pricing-results-linearfactormodelresults-full-summary"]], "linearmodels.compat.statsmodels.Summary": [[81, "linearmodels-compat-statsmodels-summary"]], "linearmodels.asset_pricing.results.LinearFactorModelResults.nobs": [[57, "linearmodels-asset-pricing-results-linearfactormodelresults-nobs"]], "linearmodels.asset_pricing.results.LinearFactorModelResults": [[49, "linearmodels-asset-pricing-results-linearfactormodelresults"]], "linearmodels.compat.statsmodels.Summary.as_text": [[88, "linearmodels-compat-statsmodels-summary-as-text"]], "linearmodels.compat.statsmodels.Summary.as_csv": [[85, "linearmodels-compat-statsmodels-summary-as-csv"]], "linearmodels.iv.model._OLS.fit": [[258, "linearmodels-iv-model-ols-fit"]], "linearmodels.iv.model._OLS.predict": [[264, "linearmodels-iv-model-ols-predict"]], "linearmodels.iv.model.IVGMMCUE.fit": [[235, "linearmodels-iv-model-ivgmmcue-fit"]], "linearmodels.iv.model.IVGMMCUE.j": [[240, "linearmodels-iv-model-ivgmmcue-j"]], "linearmodels.iv.model._OLS.wresids": [[266, "linearmodels-iv-model-ols-wresids"]], "linearmodels.iv.model.IVLIML": [[245, "linearmodels-iv-model-ivliml"]], "Todo": [[245, "id1"], [222, "id1"], [211, "id1"], [178, "id1"]], "linearmodels.iv.model.IVGMMCUE.has_constant": [[238, "linearmodels-iv-model-ivgmmcue-has-constant"]], "linearmodels.iv.model.IVLIML.estimate_parameters": [[246, "linearmodels-iv-model-ivliml-estimate-parameters"]], "linearmodels.iv.results.IVGMMResults": [[271, "linearmodels-iv-results-ivgmmresults"]], "linearmodels.iv.model.IVGMMCUE.wresids": [[244, "linearmodels-iv-model-ivgmmcue-wresids"]], "linearmodels.iv.model.IVGMMCUE.formula": [[236, "linearmodels-iv-model-ivgmmcue-formula"]], "linearmodels.iv.results.IVGMMResults.df_model": [[279, "linearmodels-iv-results-ivgmmresults-df-model"]], "linearmodels.iv.model.IVLIML.from_formula": [[249, "linearmodels-iv-model-ivliml-from-formula"]], "linearmodels.iv.results.IVGMMResults.cov_config": [[275, "linearmodels-iv-results-ivgmmresults-cov-config"]], "linearmodels.iv.results.FirstStageResults.diagnostics": [[268, "linearmodels-iv-results-firststageresults-diagnostics"]], "linearmodels.iv.model.IVLIML.notnull": [[252, "linearmodels-iv-model-ivliml-notnull"]], "linearmodels.iv.results.IVGMMResults.c_stat": [[272, "linearmodels-iv-results-ivgmmresults-c-stat"]], "linearmodels.iv.model._OLS.has_constant": [[261, "linearmodels-iv-model-ols-has-constant"]], "linearmodels.iv.results.IVGMMResults.f_statistic": [[281, "linearmodels-iv-results-ivgmmresults-f-statistic"]], "linearmodels.iv.model.IVLIML.isnull": [[251, "linearmodels-iv-model-ivliml-isnull"]], "linearmodels.iv.results.FirstStageResults": [[267, "linearmodels-iv-results-firststageresults"]], "linearmodels.iv.model._OLS.resids": [[265, "linearmodels-iv-model-ols-resids"]], "linearmodels.iv.results.FirstStageResults.summary": [[270, "linearmodels-iv-results-firststageresults-summary"]], "linearmodels.iv.model.IVGMMCUE.predict": [[242, "linearmodels-iv-model-ivgmmcue-predict"]], "linearmodels.iv.results.IVGMMResults.df_resid": [[280, "linearmodels-iv-results-ivgmmresults-df-resid"]], "linearmodels.iv.model.IVLIML.fit": [[247, "linearmodels-iv-model-ivliml-fit"]], "linearmodels.iv.model._OLS.estimate_parameters": [[257, "linearmodels-iv-model-ols-estimate-parameters"]], "linearmodels.iv.model._OLS": [[256, "linearmodels-iv-model-ols"]], "linearmodels.iv.model._OLS.from_formula": [[260, "linearmodels-iv-model-ols-from-formula"]], "linearmodels.iv.results.IVGMMResults.cov": [[274, "linearmodels-iv-results-ivgmmresults-cov"]], "linearmodels.iv.model.IVGMMCUE.from_formula": [[237, "linearmodels-iv-model-ivgmmcue-from-formula"]], "linearmodels.iv.model.IVLIML.predict": [[253, "linearmodels-iv-model-ivliml-predict"]], "linearmodels.iv.results.FirstStageResults.individual": [[269, "linearmodels-iv-results-firststageresults-individual"]], "linearmodels.iv.results.IVGMMResults.debiased": [[278, "linearmodels-iv-results-ivgmmresults-debiased"]], "linearmodels.iv.results.IVGMMResults.cov_type": [[277, "linearmodels-iv-results-ivgmmresults-cov-type"]], "linearmodels.iv.model.IVLIML.formula": [[248, "linearmodels-iv-model-ivliml-formula"]], "linearmodels.iv.model.IVGMMCUE.notnull": [[241, "linearmodels-iv-model-ivgmmcue-notnull"]], "linearmodels.iv.model._OLS.notnull": [[263, "linearmodels-iv-model-ols-notnull"]], "linearmodels.iv.model.IVGMMCUE.resids": [[243, "linearmodels-iv-model-ivgmmcue-resids"]], "linearmodels.iv.model.IVLIML.resids": [[254, "linearmodels-iv-model-ivliml-resids"]], "linearmodels.iv.model.IVLIML.wresids": [[255, "linearmodels-iv-model-ivliml-wresids"]], "linearmodels.iv.model.IVLIML.has_constant": [[250, "linearmodels-iv-model-ivliml-has-constant"]], "linearmodels.iv.model.IVGMMCUE.isnull": [[239, "linearmodels-iv-model-ivgmmcue-isnull"]], "linearmodels.iv.model._OLS.isnull": [[262, "linearmodels-iv-model-ols-isnull"]], "linearmodels.iv.results.IVGMMResults.conf_int": [[273, "linearmodels-iv-results-ivgmmresults-conf-int"]], "linearmodels.iv.model._OLS.formula": [[259, "linearmodels-iv-model-ols-formula"]], "linearmodels.iv.results.IVGMMResults.cov_estimator": [[276, "linearmodels-iv-results-ivgmmresults-cov-estimator"]], "linearmodels.iv.data.IVData.pandas": [[189, "linearmodels-iv-data-ivdata-pandas"]], "linearmodels.iv.gmm.IVGMMCovariance.s": [[202, "linearmodels-iv-gmm-ivgmmcovariance-s"]], "linearmodels.iv.gmm.KernelWeightMatrix.bandwidth": [[205, "linearmodels-iv-gmm-kernelweightmatrix-bandwidth"]], "linearmodels.iv.model.IVGMM.fit": [[224, "linearmodels-iv-model-ivgmm-fit"]], "linearmodels.iv.data.IVData.ndim": [[188, "linearmodels-iv-data-ivdata-ndim"]], "linearmodels.iv.gmm.OneWayClusteredWeightMatrix": [[208, "linearmodels-iv-gmm-onewayclusteredweightmatrix"]], "linearmodels.iv.gmm.HeteroskedasticWeightMatrix.config": [[193, "linearmodels-iv-gmm-heteroskedasticweightmatrix-config"]], "linearmodels.iv.gmm.KernelWeightMatrix.weight_matrix": [[207, "linearmodels-iv-gmm-kernelweightmatrix-weight-matrix"]], "linearmodels.iv.gmm.IVGMMCovariance.debiased": [[201, "linearmodels-iv-gmm-ivgmmcovariance-debiased"]], "linearmodels.iv.model.IV2SLS.resids": [[220, "linearmodels-iv-model-iv2sls-resids"]], "linearmodels.iv.gmm.IVGMMCovariance.config": [[199, "linearmodels-iv-gmm-ivgmmcovariance-config"]], "linearmodels.iv.model.IV2SLS.fit": [[213, "linearmodels-iv-model-iv2sls-fit"]], "linearmodels.iv.gmm.OneWayClusteredWeightMatrix.weight_matrix": [[210, "linearmodels-iv-gmm-onewayclusteredweightmatrix-weight-matrix"]], "linearmodels.iv.gmm.KernelWeightMatrix": [[204, "linearmodels-iv-gmm-kernelweightmatrix"]], "linearmodels.iv.model.IV2SLS.from_formula": [[215, "linearmodels-iv-model-iv2sls-from-formula"]], "linearmodels.iv.gmm.HomoskedasticWeightMatrix.config": [[196, "linearmodels-iv-gmm-homoskedasticweightmatrix-config"]], "linearmodels.iv.gmm.IVGMMCovariance.s2": [[203, "linearmodels-iv-gmm-ivgmmcovariance-s2"]], "linearmodels.iv.gmm.HeteroskedasticWeightMatrix.weight_matrix": [[194, "linearmodels-iv-gmm-heteroskedasticweightmatrix-weight-matrix"]], "linearmodels.iv.gmm.IVGMMCovariance.cov": [[200, "linearmodels-iv-gmm-ivgmmcovariance-cov"]], "linearmodels.iv.model.IV2SLS.formula": [[214, "linearmodels-iv-model-iv2sls-formula"]], "linearmodels.iv.gmm.KernelWeightMatrix.config": [[206, "linearmodels-iv-gmm-kernelweightmatrix-config"]], "linearmodels.iv.model.IV2SLS.isnull": [[217, "linearmodels-iv-model-iv2sls-isnull"]], "linearmodels.iv.model.IVGMM.estimate_parameters": [[223, "linearmodels-iv-model-ivgmm-estimate-parameters"]], "linearmodels.iv.model.IVGMM.predict": [[230, "linearmodels-iv-model-ivgmm-predict"]], "linearmodels.iv.data.IVData.rows": [[190, "linearmodels-iv-data-ivdata-rows"]], "linearmodels.iv.model.IVGMMCUE": [[233, "linearmodels-iv-model-ivgmmcue"]], "linearmodels.iv.gmm.HeteroskedasticWeightMatrix": [[192, "linearmodels-iv-gmm-heteroskedasticweightmatrix"]], "linearmodels.iv.model.IV2SLS.predict": [[219, "linearmodels-iv-model-iv2sls-predict"]], "linearmodels.iv.model.IVGMM": [[222, "linearmodels-iv-model-ivgmm"]], "linearmodels.iv.model.IVGMM.from_formula": [[226, "linearmodels-iv-model-ivgmm-from-formula"]], "linearmodels.iv.gmm.IVGMMCovariance": [[198, "linearmodels-iv-gmm-ivgmmcovariance"]], "linearmodels.iv.model.IV2SLS.notnull": [[218, "linearmodels-iv-model-iv2sls-notnull"]], "linearmodels.iv.model.IVGMM.resids": [[231, "linearmodels-iv-model-ivgmm-resids"]], "linearmodels.iv.model.IV2SLS": [[211, "linearmodels-iv-model-iv2sls"]], "linearmodels.iv.model.IVGMM.formula": [[225, "linearmodels-iv-model-ivgmm-formula"]], "linearmodels.iv.model.IVGMM.wresids": [[232, "linearmodels-iv-model-ivgmm-wresids"]], "linearmodels.iv.model.IV2SLS.estimate_parameters": [[212, "linearmodels-iv-model-iv2sls-estimate-parameters"]], "linearmodels.iv.model.IVGMMCUE.estimate_parameters": [[234, "linearmodels-iv-model-ivgmmcue-estimate-parameters"]], "linearmodels.iv.gmm.HomoskedasticWeightMatrix": [[195, "linearmodels-iv-gmm-homoskedasticweightmatrix"]], "linearmodels.iv.data.IVData.shape": [[191, "linearmodels-iv-data-ivdata-shape"]], "linearmodels.iv.gmm.HomoskedasticWeightMatrix.weight_matrix": [[197, "linearmodels-iv-gmm-homoskedasticweightmatrix-weight-matrix"]], "linearmodels.iv.model.IVGMM.notnull": [[229, "linearmodels-iv-model-ivgmm-notnull"]], "linearmodels.iv.model.IV2SLS.wresids": [[221, "linearmodels-iv-model-iv2sls-wresids"]], "linearmodels.iv.model.IV2SLS.has_constant": [[216, "linearmodels-iv-model-iv2sls-has-constant"]], "linearmodels.iv.model.IVGMM.has_constant": [[227, "linearmodels-iv-model-ivgmm-has-constant"]], "linearmodels.iv.model.IVGMM.isnull": [[228, "linearmodels-iv-model-ivgmm-isnull"]], "linearmodels.iv.gmm.OneWayClusteredWeightMatrix.config": [[209, "linearmodels-iv-gmm-onewayclusteredweightmatrix-config"]], "linearmodels.iv.results.OLSResults.resid_ss": [[382, "linearmodels-iv-results-olsresults-resid-ss"]], "linearmodels.iv.results.OLSResults.method": [[376, "linearmodels-iv-results-olsresults-method"]], "linearmodels.panel.covariance.ClusteredCovariance.s2": [[419, "linearmodels-panel-covariance-clusteredcovariance-s2"]], "linearmodels.iv.results.compare": [[393, "linearmodels-iv-results-compare"]], "linearmodels.panel.covariance.ACCovariance.deferred_cov": [[408, "linearmodels-panel-covariance-accovariance-deferred-cov"]], "Models": [[402, "models"]], "Fixed Effect Estimation (PanelOLS)": [[402, "fixed-effect-estimation-panelols"]], "Random Effect Estimation (RandomEffects)": [[402, "random-effect-estimation-randomeffects"]], "Between Estimation (BetweenOLS)": [[402, "between-estimation-betweenols"]], "First Difference Estimation (FirstDifferenceOLS)": [[402, "first-difference-estimation-firstdifferenceols"]], "Pooled Model Estimation (PooledOLS)": [[402, "pooled-model-estimation-pooledols"]], "Covariance Estimators": [[402, "covariance-estimators"]], "Standard Covariance Estimator (unadjusted)": [[402, "standard-covariance-estimator-unadjusted"]], "Heteroskedastic Covariance Estimator (robust)": [[402, "heteroskedastic-covariance-estimator-robust"]], "Clustered Covariance Estimator": [[402, "clustered-covariance-estimator"]], "Driscoll-Kraay Covariance Estimator": [[402, "driscoll-kraay-covariance-estimator"]], "R^{2} Calculation": [[402, "r-2-calculation"]], "Between R^{2}": [[402, "between-r-2"]], "BetweenR^{2} (correlation method)": [[402, "betweenr-2-correlation-method"]], "Overall R^{2} (correlation method)": [[402, "overall-r-2-correlation-method"]], "Within R^{2}": [[402, "within-r-2"]], "WithinR^{2} (correlation method)": [[402, "withinr-2-correlation-method"]], "Instrumental Variable Estimation": [[395, "module-linearmodels.iv.model"], [152, "instrumental-variable-estimation"]], "Absorbing Least Squares": [[395, "absorbing-least-squares"]], "Instrumental Variable Covariance Estimation": [[395, "module-linearmodels.iv.covariance"]], "Kernel Weight Generators": [[395, "kernel-weight-generators"]], "GMM Weight and Covariance Estimation": [[395, "module-linearmodels.iv.gmm"]], "IV Data Structures": [[395, "module-linearmodels.iv.data"]], "Data Formats for Panel Data Analysis": [[396, "Data-Formats-for-Panel-Data-Analysis"]], "MultiIndex DataFrames": [[396, "MultiIndex-DataFrames"]], "NumPy arrays": [[396, "NumPy-arrays"]], "xarray DataArrays": [[396, "xarray-DataArrays"]], "Conversion of Categorical and Strings to Dummies": [[396, "Conversion-of-Categorical-and-Strings-to-Dummies"]], "linearmodels.iv.results.OLSResults.tstats": [[390, "linearmodels-iv-results-olsresults-tstats"]], "Comparison with pandas PanelOLS and FamaMacBeth": [[403, "comparison-with-pandas-panelols-and-famamacbeth"]], "linearmodels.iv.results.OLSResults.wald_test": [[391, "linearmodels-iv-results-olsresults-wald-test"]], "linearmodels.panel.covariance.ACCovariance.DEFAULT_KERNEL": [[406, "linearmodels-panel-covariance-accovariance-default-kernel"]], "linearmodels.panel.covariance.ACCovariance.eps": [[409, "linearmodels-panel-covariance-accovariance-eps"]], "linearmodels.panel.covariance.DriscollKraay": [[420, "linearmodels-panel-covariance-driscollkraay"]], "linearmodels.iv.results.OLSResults.predict": [[380, "linearmodels-iv-results-olsresults-predict"]], "Panel Data Model Estimation": [[400, "panel-data-model-estimation"]], "Notation": [[394, "notation"]], "Parameter Estimation": [[394, "parameter-estimation"]], "Two-stage Least Squares (2SLS)": [[394, "two-stage-least-squares-2sls"]], "Limited Information Maximum Likelihood and k-class Estimators": [[394, "limited-information-maximum-likelihood-and-k-class-estimators"]], "Continuously Updating Generalized Method of Moments (GMM-CUE)": [[394, "continuously-updating-generalized-method-of-moments-gmm-cue"]], "Basic Statistics": [[394, "basic-statistics"]], "Parameter Covariance Estimation": [[394, "parameter-covariance-estimation"]], "Two-stage LS, LIML and k-class estimators": [[394, "two-stage-ls-liml-and-k-class-estimators"]], "Standard Errors": [[394, "standard-errors"]], "T-statistics": [[394, "t-statistics"]], "P-values": [[394, "p-values"]], "Confidence Intervals": [[394, "confidence-intervals"]], "Linear Hypothesis Tests": [[394, "linear-hypothesis-tests"]], "GMM Covariance estimators": [[394, "gmm-covariance-estimators"]], "GMM Weight Estimators": [[394, "gmm-weight-estimators"]], "Post-estimation": [[394, "post-estimation"]], "2SLS and LIML Post-estimation Results": [[394, "sls-and-liml-post-estimation-results"]], "GMM Post-estimation Results": [[394, "gmm-post-estimation-results"]], "First-stage Estimation Analysis": [[394, "first-stage-estimation-analysis"]], "Kernel Weights and Bandwidth Selection": [[394, "kernel-weights-and-bandwidth-selection"]], "Constant Detection": [[394, "constant-detection"]], "linearmodels.panel.covariance.ACCovariance.s2": [[411, "linearmodels-panel-covariance-accovariance-s2"]], "linearmodels.panel.covariance.ACCovariance": [[404, "linearmodels-panel-covariance-accovariance"]], "linearmodels.iv.results.OLSResults.model_ss": [[377, "linearmodels-iv-results-olsresults-model-ss"]], "linearmodels.panel.covariance.ClusteredCovariance.deferred_cov": [[416, "linearmodels-panel-covariance-clusteredcovariance-deferred-cov"]], "Loading and preparing data": [[398, "Loading-and-preparing-data"]], "PanelOLS with Entity Effects": [[398, "PanelOLS-with-Entity-Effects"]], "PanelOLS with Entity Effects and a constant": [[398, "PanelOLS-with-Entity-Effects-and-a-constant"]], "Panel with Entity and Time Effects": [[398, "Panel-with-Entity-and-Time-Effects"]], "Between OLS": [[398, "Between-OLS"]], "First Difference OLS": [[398, "First-Difference-OLS"]], "Pooled OLS": [[398, "Pooled-OLS"]], "linearmodels.panel.covariance.ClusteredCovariance": [[412, "linearmodels-panel-covariance-clusteredcovariance"]], "linearmodels.iv.results.OLSResults.wresids": [[392, "linearmodels-iv-results-olsresults-wresids"]], "Implementation Choices": [[399, "implementation-choices"]], "Clustered Covariance with Fixed Effects": [[399, "clustered-covariance-with-fixed-effects"]], "R^2 definitions": [[399, "r-2-definitions"]], "linearmodels.panel.covariance.ClusteredCovariance.ALLOWED_KWARGS": [[413, "linearmodels-panel-covariance-clusteredcovariance-allowed-kwargs"]], "linearmodels.panel.covariance.DriscollKraay.DEFAULT_KERNEL": [[422, "linearmodels-panel-covariance-driscollkraay-default-kernel"]], "linearmodels.panel.covariance.ACCovariance.name": [[410, "linearmodels-panel-covariance-accovariance-name"]], "linearmodels.iv.results.OLSResults.rsquared": [[384, "linearmodels-iv-results-olsresults-rsquared"]], "linearmodels.iv.results.OLSResults.resids": [[383, "linearmodels-iv-results-olsresults-resids"]], "linearmodels.iv.results.OLSResults.s2": [[386, "linearmodels-iv-results-olsresults-s2"]], "linearmodels.panel.covariance.ACCovariance.cov": [[407, "linearmodels-panel-covariance-accovariance-cov"]], "linearmodels.panel.covariance.ClusteredCovariance.eps": [[417, "linearmodels-panel-covariance-clusteredcovariance-eps"]], "linearmodels.iv.results.OLSResults.rsquared_adj": [[385, "linearmodels-iv-results-olsresults-rsquared-adj"]], "linearmodels.iv.results.OLSResults.params": [[379, "linearmodels-iv-results-olsresults-params"]], "linearmodels.panel.covariance.ClusteredCovariance.cov": [[415, "linearmodels-panel-covariance-clusteredcovariance-cov"]], "linearmodels.iv.results.OLSResults.std_errors": [[387, "linearmodels-iv-results-olsresults-std-errors"]], "linearmodels.iv.results.OLSResults.total_ss": [[389, "linearmodels-iv-results-olsresults-total-ss"]], "linearmodels.iv.results.OLSResults.summary": [[388, "linearmodels-iv-results-olsresults-summary"]], "Loading data": [[397, "Loading-data"]], "Basic regression on panel data": [[397, "Basic-regression-on-panel-data"]], "Estimating parameters with uncorrelated effects": [[397, "Estimating-parameters-with-uncorrelated-effects"]], "Random effects": [[397, "Random-effects"]], "The between estimator": [[397, "The-between-estimator"]], "Other options": [[397, "Other-options"]], "Handling correlated effects": [[397, "Handling-correlated-effects"]], "Including fixed effects": [[397, "Including-fixed-effects"]], "Time-invariant Variables": [[397, "Time-invariant-Variables"]], "Time Effects": [[397, "Time-Effects"]], "Effects vs Dummies": [[397, "Effects-vs-Dummies"]], "Other Effects": [[397, "Other-Effects"]], "Using first differences": [[397, "Using-first-differences"]], "Comparing models": [[397, "Comparing-models"]], "Covariance options": [[397, "Covariance-options"]], "Heteroskedasticity Robust Covariance": [[397, "Heteroskedasticity-Robust-Covariance"]], "Clustered by Entity": [[397, "Clustered-by-Entity"]], "Other clusters": [[397, "Other-clusters"]], "linearmodels.panel.covariance.ClusteredCovariance.name": [[418, "linearmodels-panel-covariance-clusteredcovariance-name"]], "linearmodels.panel.covariance.DriscollKraay.ALLOWED_KWARGS": [[421, "linearmodels-panel-covariance-driscollkraay-allowed-kwargs"]], "linearmodels.iv.results.OLSResults.pvalues": [[381, "linearmodels-iv-results-olsresults-pvalues"]], "linearmodels.panel.covariance.ACCovariance.ALLOWED_KWARGS": [[405, "linearmodels-panel-covariance-accovariance-allowed-kwargs"]], "linearmodels.panel.covariance.ClusteredCovariance.DEFAULT_KERNEL": [[414, "linearmodels-panel-covariance-clusteredcovariance-default-kernel"]], "linearmodels.iv.results.OLSResults.nobs": [[378, "linearmodels-iv-results-olsresults-nobs"]], "linearmodels.iv.absorbing.Interaction.isnull": [[145, "linearmodels-iv-absorbing-interaction-isnull"]], "linearmodels.iv.absorbing.Interaction.from_frame": [[143, "linearmodels-iv-absorbing-interaction-from-frame"]], "linearmodels.iv.covariance.KernelCovariance": [[172, "linearmodels-iv-covariance-kernelcovariance"]], "linearmodels.iv.covariance.KernelCovariance.debiased": [[175, "linearmodels-iv-covariance-kernelcovariance-debiased"]], "linearmodels.iv.covariance.KernelCovariance.config": [[173, "linearmodels-iv-covariance-kernelcovariance-config"]], "linearmodels.iv.covariance.ClusteredCovariance.cov": [[156, "linearmodels-iv-covariance-clusteredcovariance-cov"]], "linearmodels.iv.absorbing.Interaction.sparse": [[147, "linearmodels-iv-absorbing-interaction-sparse"]], "Basic Examples": [[150, "Basic-Examples"]], "Wages of Married Women": [[150, "Wages-of-Married-Women"]], "Wages of Men": [[150, "Wages-of-Men"]], "Weighted IV": [[150, "Weighted-IV"]], "Smoking and birth weight": [[150, "Smoking-and-birth-weight"]], "Proximity and education": [[150, "Proximity-and-education"]], "Formula interface": [[150, "Formula-interface"]], "Categorical Variables": [[150, "Categorical-Variables"]], "Post-estimation diagnostics": [[150, "Post-estimation-diagnostics"]], "Panel IV": [[150, "Panel-IV"]], "linearmodels.iv.covariance.HomoskedasticCovariance.s": [[170, "linearmodels-iv-covariance-homoskedasticcovariance-s"]], "Multiple Endogenous Variables": [[151, "Multiple-Endogenous-Variables"]], "Standard formulaic": [[151, "Standard-formulaic"]], "MEPS data": [[151, "MEPS-data"]], "Estimating a model with a formula": [[151, "Estimating-a-model-with-a-formula"]], "Mathematical expression in formulas": [[151, "Mathematical-expression-in-formulas"]], "OLS": [[151, "OLS"]], "Absorbing Regression": [[148, "Absorbing-Regression"]], "Including a constant": [[148, "Including-a-constant"]], "Excluding the constant": [[148, "Excluding-the-constant"]], "Optimization Options": [[148, "Optimization-Options"]], "linearmodels.iv.covariance.HeteroskedasticCovariance.cov": [[162, "linearmodels-iv-covariance-heteroskedasticcovariance-cov"]], "linearmodels.iv.covariance.HeteroskedasticCovariance.s": [[164, "linearmodels-iv-covariance-heteroskedasticcovariance-s"]], "linearmodels.iv.covariance.HeteroskedasticCovariance": [[160, "linearmodels-iv-covariance-heteroskedasticcovariance"]], "linearmodels.iv.covariance.ClusteredCovariance.s2": [[159, "linearmodels-iv-covariance-clusteredcovariance-s2"]], "linearmodels.iv.absorbing.Interaction.nobs": [[146, "linearmodels-iv-absorbing-interaction-nobs"]], "linearmodels.iv.covariance.kernel_weight_parzen": [[180, "linearmodels-iv-covariance-kernel-weight-parzen"]], "linearmodels.iv.data.IVData.isnull": [[185, "linearmodels-iv-data-ivdata-isnull"]], "linearmodels.iv.covariance.HeteroskedasticCovariance.config": [[161, "linearmodels-iv-covariance-heteroskedasticcovariance-config"]], "linearmodels.iv.absorbing.Interaction.hash": [[144, "linearmodels-iv-absorbing-interaction-hash"]], "linearmodels.iv.covariance.HomoskedasticCovariance": [[166, "linearmodels-iv-covariance-homoskedasticcovariance"]], "linearmodels.iv.covariance.HomoskedasticCovariance.debiased": [[169, "linearmodels-iv-covariance-homoskedasticcovariance-debiased"]], "linearmodels.iv.covariance.kernel_weight_quadratic_spectral": [[181, "linearmodels-iv-covariance-kernel-weight-quadratic-spectral"]], "linearmodels.iv.data.IVData": [[182, "linearmodels-iv-data-ivdata"]], "linearmodels.iv.covariance.kernel_weight_bartlett": [[179, "linearmodels-iv-covariance-kernel-weight-bartlett"]], "Further Examples": [[149, "Further-Examples"]], "Linear Instrumental-Variables Regression": [[149, "Linear-Instrumental-Variables-Regression"]], "Importing data": [[149, "Importing-data"]], "2SLS as OLS": [[149, "2SLS-as-OLS"]], "Just identified 2SLS": [[149, "Just-identified-2SLS"]], "Multiple Instruments": [[149, "Multiple-Instruments"]], "Alternative covariance estimators": [[149, "Alternative-covariance-estimators"]], "Changing the weighting matrix structure in GMM estimation": [[149, "Changing-the-weighting-matrix-structure-in-GMM-estimation"]], "Continuously updating GMM": [[149, "Continuously-updating-GMM"]], "Testing endogeneity": [[149, "Testing-endogeneity"]], "Exogeneity Testing": [[149, "Exogeneity-Testing"]], "Single Instrument Regressions": [[149, "Single-Instrument-Regressions"]], "First Stage Diagnostics": [[149, "First-Stage-Diagnostics"]], "LIML": [[149, "LIML"]], "IV2SLS as OLS": [[149, "IV2SLS-as-OLS"]], "linearmodels.iv.data.IVData.drop": [[184, "linearmodels-iv-data-ivdata-drop"]], "linearmodels.iv.data.IVData.labels": [[186, "linearmodels-iv-data-ivdata-labels"]], "Estimators": [[153, "estimators"]], "Optional Arguments": [[153, "optional-arguments"]], "2SLS Estimation": [[153, "sls-estimation"]], "LIML Estimation": [[153, "liml-estimation"]], "GMM and GMM-CUE Estimation": [[153, "gmm-and-gmm-cue-estimation"]], "Model Estimation and Covariance Specification": [[153, "model-estimation-and-covariance-specification"]], "GMM-CUE Estimation": [[153, "gmm-cue-estimation"]], "linearmodels.iv.covariance.HeteroskedasticCovariance.s2": [[165, "linearmodels-iv-covariance-heteroskedasticcovariance-s2"]], "linearmodels.iv.covariance.HeteroskedasticCovariance.debiased": [[163, "linearmodels-iv-covariance-heteroskedasticcovariance-debiased"]], "linearmodels.iv.covariance.HomoskedasticCovariance.config": [[167, "linearmodels-iv-covariance-homoskedasticcovariance-config"]], "linearmodels.iv.absorbing.Interaction.drop": [[142, "linearmodels-iv-absorbing-interaction-drop"]], "linearmodels.iv.covariance.ClusteredCovariance.s": [[158, "linearmodels-iv-covariance-clusteredcovariance-s"]], "linearmodels.iv.covariance.HomoskedasticCovariance.s2": [[171, "linearmodels-iv-covariance-homoskedasticcovariance-s2"]], "linearmodels.iv.covariance.HomoskedasticCovariance.cov": [[168, "linearmodels-iv-covariance-homoskedasticcovariance-cov"]], "linearmodels.iv.covariance.ClusteredCovariance.debiased": [[157, "linearmodels-iv-covariance-clusteredcovariance-debiased"]], "linearmodels.iv.covariance.KernelCovariance.s2": [[177, "linearmodels-iv-covariance-kernelcovariance-s2"]], "linearmodels.iv.covariance.kernel_optimal_bandwidth": [[178, "linearmodels-iv-covariance-kernel-optimal-bandwidth"]], "linearmodels.iv.covariance.ClusteredCovariance": [[154, "linearmodels-iv-covariance-clusteredcovariance"]], "linearmodels.iv.data.IVData.ndarray": [[187, "linearmodels-iv-data-ivdata-ndarray"]], "linearmodels.iv.data.IVData.cols": [[183, "linearmodels-iv-data-ivdata-cols"]], "linearmodels.iv.covariance.KernelCovariance.s": [[176, "linearmodels-iv-covariance-kernelcovariance-s"]], "linearmodels.iv.covariance.KernelCovariance.cov": [[174, "linearmodels-iv-covariance-kernelcovariance-cov"]], "linearmodels.iv.absorbing.Interaction.cont": [[141, "linearmodels-iv-absorbing-interaction-cont"]], "linearmodels.iv.covariance.ClusteredCovariance.config": [[155, "linearmodels-iv-covariance-clusteredcovariance-config"]]}, "indexentries": {"heteroskedasticcovariance (class in linearmodels.asset_pricing.covariance)": [[0, "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance"]], "config (linearmodels.asset_pricing.covariance.heteroskedasticcovariance property)": [[1, "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.config"]], "cov (linearmodels.asset_pricing.covariance.heteroskedasticcovariance property)": [[2, "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.cov"]], "inv_jacobian (linearmodels.asset_pricing.covariance.heteroskedasticcovariance property)": [[3, "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.inv_jacobian"]], "jacobian (linearmodels.asset_pricing.covariance.heteroskedasticcovariance property)": [[4, "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.jacobian"]], "s (linearmodels.asset_pricing.covariance.heteroskedasticcovariance property)": [[5, "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.s"]], "square (linearmodels.asset_pricing.covariance.heteroskedasticcovariance property)": [[6, "linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.square"]], "kernelcovariance (class in linearmodels.asset_pricing.covariance)": [[7, "linearmodels.asset_pricing.covariance.KernelCovariance"]], "bandwidth (linearmodels.asset_pricing.covariance.kernelcovariance property)": [[8, "linearmodels.asset_pricing.covariance.KernelCovariance.bandwidth"]], "config (linearmodels.asset_pricing.covariance.kernelcovariance property)": [[9, "linearmodels.asset_pricing.covariance.KernelCovariance.config"]], "cov (linearmodels.asset_pricing.covariance.kernelcovariance property)": [[10, "linearmodels.asset_pricing.covariance.KernelCovariance.cov"]], "inv_jacobian (linearmodels.asset_pricing.covariance.kernelcovariance property)": [[11, "linearmodels.asset_pricing.covariance.KernelCovariance.inv_jacobian"]], "jacobian (linearmodels.asset_pricing.covariance.kernelcovariance property)": [[12, "linearmodels.asset_pricing.covariance.KernelCovariance.jacobian"]], "kernel (linearmodels.asset_pricing.covariance.kernelcovariance property)": [[13, "linearmodels.asset_pricing.covariance.KernelCovariance.kernel"]], "s (linearmodels.asset_pricing.covariance.kernelcovariance property)": [[14, "linearmodels.asset_pricing.covariance.KernelCovariance.s"]], "square (linearmodels.asset_pricing.covariance.kernelcovariance property)": [[15, "linearmodels.asset_pricing.covariance.KernelCovariance.square"]], "linearfactormodel (class in linearmodels.asset_pricing.model)": [[16, "linearmodels.asset_pricing.model.LinearFactorModel"]], "fit() (linearmodels.asset_pricing.model.linearfactormodel method)": [[17, "linearmodels.asset_pricing.model.LinearFactorModel.fit"]], "formula (linearmodels.asset_pricing.model.linearfactormodel property)": [[18, "linearmodels.asset_pricing.model.LinearFactorModel.formula"]], "from_formula() (linearmodels.asset_pricing.model.linearfactormodel class method)": [[19, "linearmodels.asset_pricing.model.LinearFactorModel.from_formula"]], "linearfactormodelgmm (class in linearmodels.asset_pricing.model)": [[20, "linearmodels.asset_pricing.model.LinearFactorModelGMM"]], "fit() (linearmodels.asset_pricing.model.linearfactormodelgmm method)": [[21, "linearmodels.asset_pricing.model.LinearFactorModelGMM.fit"]], "formula (linearmodels.asset_pricing.model.linearfactormodelgmm property)": [[22, "linearmodels.asset_pricing.model.LinearFactorModelGMM.formula"]], "from_formula() (linearmodels.asset_pricing.model.linearfactormodelgmm class method)": [[23, "linearmodels.asset_pricing.model.LinearFactorModelGMM.from_formula"]], "tradedfactormodel (class in linearmodels.asset_pricing.model)": [[24, "linearmodels.asset_pricing.model.TradedFactorModel"]], "fit() (linearmodels.asset_pricing.model.tradedfactormodel method)": [[25, "linearmodels.asset_pricing.model.TradedFactorModel.fit"]], "formula (linearmodels.asset_pricing.model.tradedfactormodel property)": [[26, "linearmodels.asset_pricing.model.TradedFactorModel.formula"]], "from_formula() (linearmodels.asset_pricing.model.tradedfactormodel class method)": [[27, "linearmodels.asset_pricing.model.TradedFactorModel.from_formula"]], "gmmfactormodelresults (class in linearmodels.asset_pricing.results)": [[28, "linearmodels.asset_pricing.results.GMMFactorModelResults"]], "alphas (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[29, "linearmodels.asset_pricing.results.GMMFactorModelResults.alphas"]], "betas (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[30, "linearmodels.asset_pricing.results.GMMFactorModelResults.betas"]], "cov (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[31, "linearmodels.asset_pricing.results.GMMFactorModelResults.cov"]], "cov_estimator (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[32, "linearmodels.asset_pricing.results.GMMFactorModelResults.cov_estimator"]], "full_summary (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[33, "linearmodels.asset_pricing.results.GMMFactorModelResults.full_summary"]], "iterations (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[34, "linearmodels.asset_pricing.results.GMMFactorModelResults.iterations"]], "j_statistic (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[35, "linearmodels.asset_pricing.results.GMMFactorModelResults.j_statistic"]], "name (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[36, "linearmodels.asset_pricing.results.GMMFactorModelResults.name"]], "nobs (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[37, "linearmodels.asset_pricing.results.GMMFactorModelResults.nobs"]], "params (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[38, "linearmodels.asset_pricing.results.GMMFactorModelResults.params"]], "pvalues (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[39, "linearmodels.asset_pricing.results.GMMFactorModelResults.pvalues"]], "residual_ss (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[40, "linearmodels.asset_pricing.results.GMMFactorModelResults.residual_ss"]], "risk_premia (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[41, "linearmodels.asset_pricing.results.GMMFactorModelResults.risk_premia"]], "risk_premia_se (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[42, "linearmodels.asset_pricing.results.GMMFactorModelResults.risk_premia_se"]], "risk_premia_tstats (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[43, "linearmodels.asset_pricing.results.GMMFactorModelResults.risk_premia_tstats"]], "rsquared (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[44, "linearmodels.asset_pricing.results.GMMFactorModelResults.rsquared"]], "std_errors (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[45, "linearmodels.asset_pricing.results.GMMFactorModelResults.std_errors"]], "summary (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[46, "linearmodels.asset_pricing.results.GMMFactorModelResults.summary"]], "total_ss (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[47, "linearmodels.asset_pricing.results.GMMFactorModelResults.total_ss"]], "tstats (linearmodels.asset_pricing.results.gmmfactormodelresults property)": [[48, "linearmodels.asset_pricing.results.GMMFactorModelResults.tstats"]], "linearfactormodelresults (class in linearmodels.asset_pricing.results)": [[49, "linearmodels.asset_pricing.results.LinearFactorModelResults"]], "alphas (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[50, "linearmodels.asset_pricing.results.LinearFactorModelResults.alphas"]], "betas (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[51, "linearmodels.asset_pricing.results.LinearFactorModelResults.betas"]], "cov (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[52, "linearmodels.asset_pricing.results.LinearFactorModelResults.cov"]], "cov_estimator (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[53, "linearmodels.asset_pricing.results.LinearFactorModelResults.cov_estimator"]], "full_summary (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[54, "linearmodels.asset_pricing.results.LinearFactorModelResults.full_summary"]], "j_statistic (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[55, "linearmodels.asset_pricing.results.LinearFactorModelResults.j_statistic"]], "name (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[56, "linearmodels.asset_pricing.results.LinearFactorModelResults.name"]], "nobs (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[57, "linearmodels.asset_pricing.results.LinearFactorModelResults.nobs"]], "params (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[58, "linearmodels.asset_pricing.results.LinearFactorModelResults.params"]], "pvalues (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[59, "linearmodels.asset_pricing.results.LinearFactorModelResults.pvalues"]], "residual_ss (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[60, "linearmodels.asset_pricing.results.LinearFactorModelResults.residual_ss"]], "risk_premia (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[61, "linearmodels.asset_pricing.results.LinearFactorModelResults.risk_premia"]], "risk_premia_se (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[62, "linearmodels.asset_pricing.results.LinearFactorModelResults.risk_premia_se"]], "risk_premia_tstats (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[63, "linearmodels.asset_pricing.results.LinearFactorModelResults.risk_premia_tstats"]], "rsquared (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[64, "linearmodels.asset_pricing.results.LinearFactorModelResults.rsquared"]], "std_errors (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[65, "linearmodels.asset_pricing.results.LinearFactorModelResults.std_errors"]], "summary (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[66, "linearmodels.asset_pricing.results.LinearFactorModelResults.summary"]], "total_ss (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[67, "linearmodels.asset_pricing.results.LinearFactorModelResults.total_ss"]], "tstats (linearmodels.asset_pricing.results.linearfactormodelresults property)": [[68, "linearmodels.asset_pricing.results.LinearFactorModelResults.tstats"]], "linearmodels.asset_pricing.covariance": [[74, "module-linearmodels.asset_pricing.covariance"]], "linearmodels.asset_pricing.model": [[74, "module-linearmodels.asset_pricing.model"]], "linearmodels.asset_pricing.results": [[74, "module-linearmodels.asset_pricing.results"]], "module": [[74, "module-linearmodels.asset_pricing.covariance"], [74, "module-linearmodels.asset_pricing.model"], [74, "module-linearmodels.asset_pricing.results"], [80, "module-linearmodels.compat.statsmodels"], [395, "module-linearmodels.iv.absorbing"], [395, "module-linearmodels.iv.covariance"], [395, "module-linearmodels.iv.data"], [395, "module-linearmodels.iv.gmm"], [395, "module-linearmodels.iv.model"], [395, "module-linearmodels.iv.results"], [711, "module-linearmodels.panel.covariance"], [711, "module-linearmodels.panel.data"], [711, "module-linearmodels.panel.model"], [711, "module-linearmodels.panel.results"], [711, "module-linearmodels.panel.utility"], [719, "module-linearmodels.system.covariance"], [719, "module-linearmodels.system.gmm"], [719, "module-linearmodels.system.model"], [719, "module-linearmodels.system.results"], [866, "module-linearmodels.utility"]], "linearmodels.compat.statsmodels": [[80, "module-linearmodels.compat.statsmodels"]], "summary (class in linearmodels.compat.statsmodels)": [[81, "linearmodels.compat.statsmodels.Summary"]], "add_extra_txt() (linearmodels.compat.statsmodels.summary method)": [[82, "linearmodels.compat.statsmodels.Summary.add_extra_txt"]], "add_table_2cols() (linearmodels.compat.statsmodels.summary method)": [[83, "linearmodels.compat.statsmodels.Summary.add_table_2cols"]], "add_table_params() (linearmodels.compat.statsmodels.summary method)": [[84, "linearmodels.compat.statsmodels.Summary.add_table_params"]], "as_csv() (linearmodels.compat.statsmodels.summary method)": [[85, "linearmodels.compat.statsmodels.Summary.as_csv"]], "as_html() (linearmodels.compat.statsmodels.summary method)": [[86, "linearmodels.compat.statsmodels.Summary.as_html"]], "as_latex() (linearmodels.compat.statsmodels.summary method)": [[87, "linearmodels.compat.statsmodels.Summary.as_latex"]], "as_text() (linearmodels.compat.statsmodels.summary method)": [[88, "linearmodels.compat.statsmodels.Summary.as_text"]], "absorbingls (class in linearmodels.iv.absorbing)": [[91, "linearmodels.iv.absorbing.AbsorbingLS"]], "absorbed_dependent (linearmodels.iv.absorbing.absorbingls property)": [[92, "linearmodels.iv.absorbing.AbsorbingLS.absorbed_dependent"]], "absorbed_exog (linearmodels.iv.absorbing.absorbingls property)": [[93, "linearmodels.iv.absorbing.AbsorbingLS.absorbed_exog"]], "dependent (linearmodels.iv.absorbing.absorbingls property)": [[94, "linearmodels.iv.absorbing.AbsorbingLS.dependent"]], "exog (linearmodels.iv.absorbing.absorbingls property)": [[95, "linearmodels.iv.absorbing.AbsorbingLS.exog"]], "fit() (linearmodels.iv.absorbing.absorbingls method)": [[96, "linearmodels.iv.absorbing.AbsorbingLS.fit"]], "has_constant (linearmodels.iv.absorbing.absorbingls property)": [[97, "linearmodels.iv.absorbing.AbsorbingLS.has_constant"]], "instruments (linearmodels.iv.absorbing.absorbingls property)": [[98, "linearmodels.iv.absorbing.AbsorbingLS.instruments"]], "resids() (linearmodels.iv.absorbing.absorbingls method)": [[99, "linearmodels.iv.absorbing.AbsorbingLS.resids"]], "weights (linearmodels.iv.absorbing.absorbingls property)": [[100, "linearmodels.iv.absorbing.AbsorbingLS.weights"]], "wresids() (linearmodels.iv.absorbing.absorbingls method)": [[101, "linearmodels.iv.absorbing.AbsorbingLS.wresids"]], "absorbinglsresults (class in linearmodels.iv.absorbing)": [[102, "linearmodels.iv.absorbing.AbsorbingLSResults"]], "absorbed_effects (linearmodels.iv.absorbing.absorbinglsresults property)": [[103, "linearmodels.iv.absorbing.AbsorbingLSResults.absorbed_effects"]], "absorbed_rsquared (linearmodels.iv.absorbing.absorbinglsresults property)": [[104, "linearmodels.iv.absorbing.AbsorbingLSResults.absorbed_rsquared"]], "conf_int() (linearmodels.iv.absorbing.absorbinglsresults method)": [[105, "linearmodels.iv.absorbing.AbsorbingLSResults.conf_int"]], "cov (linearmodels.iv.absorbing.absorbinglsresults property)": [[106, "linearmodels.iv.absorbing.AbsorbingLSResults.cov"]], "cov_config (linearmodels.iv.absorbing.absorbinglsresults property)": [[107, "linearmodels.iv.absorbing.AbsorbingLSResults.cov_config"]], "cov_estimator (linearmodels.iv.absorbing.absorbinglsresults property)": [[108, "linearmodels.iv.absorbing.AbsorbingLSResults.cov_estimator"]], "cov_type (linearmodels.iv.absorbing.absorbinglsresults property)": [[109, "linearmodels.iv.absorbing.AbsorbingLSResults.cov_type"]], "debiased (linearmodels.iv.absorbing.absorbinglsresults property)": [[110, "linearmodels.iv.absorbing.AbsorbingLSResults.debiased"]], "df_absorbed (linearmodels.iv.absorbing.absorbinglsresults property)": [[111, "linearmodels.iv.absorbing.AbsorbingLSResults.df_absorbed"]], "df_model (linearmodels.iv.absorbing.absorbinglsresults property)": [[112, "linearmodels.iv.absorbing.AbsorbingLSResults.df_model"]], "df_resid (linearmodels.iv.absorbing.absorbinglsresults property)": [[113, "linearmodels.iv.absorbing.AbsorbingLSResults.df_resid"]], "f_statistic (linearmodels.iv.absorbing.absorbinglsresults property)": [[114, "linearmodels.iv.absorbing.AbsorbingLSResults.f_statistic"]], "fitted_values (linearmodels.iv.absorbing.absorbinglsresults property)": [[115, "linearmodels.iv.absorbing.AbsorbingLSResults.fitted_values"]], "has_constant (linearmodels.iv.absorbing.absorbinglsresults property)": [[116, "linearmodels.iv.absorbing.AbsorbingLSResults.has_constant"]], "idiosyncratic (linearmodels.iv.absorbing.absorbinglsresults property)": [[117, "linearmodels.iv.absorbing.AbsorbingLSResults.idiosyncratic"]], "method (linearmodels.iv.absorbing.absorbinglsresults property)": [[118, "linearmodels.iv.absorbing.AbsorbingLSResults.method"]], "model_ss (linearmodels.iv.absorbing.absorbinglsresults property)": [[119, "linearmodels.iv.absorbing.AbsorbingLSResults.model_ss"]], "nobs (linearmodels.iv.absorbing.absorbinglsresults property)": [[120, "linearmodels.iv.absorbing.AbsorbingLSResults.nobs"]], "params (linearmodels.iv.absorbing.absorbinglsresults property)": [[121, "linearmodels.iv.absorbing.AbsorbingLSResults.params"]], "pvalues (linearmodels.iv.absorbing.absorbinglsresults property)": [[122, "linearmodels.iv.absorbing.AbsorbingLSResults.pvalues"]], "resid_ss (linearmodels.iv.absorbing.absorbinglsresults property)": [[123, "linearmodels.iv.absorbing.AbsorbingLSResults.resid_ss"]], "resids (linearmodels.iv.absorbing.absorbinglsresults property)": [[124, "linearmodels.iv.absorbing.AbsorbingLSResults.resids"]], "rsquared (linearmodels.iv.absorbing.absorbinglsresults property)": [[125, "linearmodels.iv.absorbing.AbsorbingLSResults.rsquared"]], "rsquared_adj (linearmodels.iv.absorbing.absorbinglsresults property)": [[126, "linearmodels.iv.absorbing.AbsorbingLSResults.rsquared_adj"]], "s2 (linearmodels.iv.absorbing.absorbinglsresults property)": [[127, "linearmodels.iv.absorbing.AbsorbingLSResults.s2"]], "std_errors (linearmodels.iv.absorbing.absorbinglsresults property)": [[128, "linearmodels.iv.absorbing.AbsorbingLSResults.std_errors"]], "summary (linearmodels.iv.absorbing.absorbinglsresults property)": [[129, "linearmodels.iv.absorbing.AbsorbingLSResults.summary"]], "total_ss (linearmodels.iv.absorbing.absorbinglsresults property)": [[130, "linearmodels.iv.absorbing.AbsorbingLSResults.total_ss"]], "tstats (linearmodels.iv.absorbing.absorbinglsresults property)": [[131, "linearmodels.iv.absorbing.AbsorbingLSResults.tstats"]], "wald_test() (linearmodels.iv.absorbing.absorbinglsresults method)": [[132, "linearmodels.iv.absorbing.AbsorbingLSResults.wald_test"]], "wresids (linearmodels.iv.absorbing.absorbinglsresults property)": [[133, "linearmodels.iv.absorbing.AbsorbingLSResults.wresids"]], "absorbingregressor (class in linearmodels.iv.absorbing)": [[134, "linearmodels.iv.absorbing.AbsorbingRegressor"]], "approx_rank (linearmodels.iv.absorbing.absorbingregressor property)": [[135, "linearmodels.iv.absorbing.AbsorbingRegressor.approx_rank"]], "has_constant (linearmodels.iv.absorbing.absorbingregressor property)": [[136, "linearmodels.iv.absorbing.AbsorbingRegressor.has_constant"]], "hash (linearmodels.iv.absorbing.absorbingregressor property)": [[137, "linearmodels.iv.absorbing.AbsorbingRegressor.hash"]], "regressors (linearmodels.iv.absorbing.absorbingregressor property)": [[138, "linearmodels.iv.absorbing.AbsorbingRegressor.regressors"]], "interaction (class in linearmodels.iv.absorbing)": [[139, "linearmodels.iv.absorbing.Interaction"]], "cat (linearmodels.iv.absorbing.interaction property)": [[140, "linearmodels.iv.absorbing.Interaction.cat"]], "cont (linearmodels.iv.absorbing.interaction property)": [[141, "linearmodels.iv.absorbing.Interaction.cont"]], "drop() (linearmodels.iv.absorbing.interaction method)": [[142, "linearmodels.iv.absorbing.Interaction.drop"]], "from_frame() (linearmodels.iv.absorbing.interaction static method)": [[143, "linearmodels.iv.absorbing.Interaction.from_frame"]], "hash (linearmodels.iv.absorbing.interaction property)": [[144, "linearmodels.iv.absorbing.Interaction.hash"]], "isnull (linearmodels.iv.absorbing.interaction property)": [[145, "linearmodels.iv.absorbing.Interaction.isnull"]], "nobs (linearmodels.iv.absorbing.interaction property)": [[146, "linearmodels.iv.absorbing.Interaction.nobs"]], "sparse (linearmodels.iv.absorbing.interaction property)": [[147, "linearmodels.iv.absorbing.Interaction.sparse"]], "clusteredcovariance (class in linearmodels.iv.covariance)": [[154, "linearmodels.iv.covariance.ClusteredCovariance"]], "config (linearmodels.iv.covariance.clusteredcovariance property)": [[155, "linearmodels.iv.covariance.ClusteredCovariance.config"]], "cov (linearmodels.iv.covariance.clusteredcovariance property)": [[156, "linearmodels.iv.covariance.ClusteredCovariance.cov"]], "debiased (linearmodels.iv.covariance.clusteredcovariance property)": [[157, "linearmodels.iv.covariance.ClusteredCovariance.debiased"]], "s (linearmodels.iv.covariance.clusteredcovariance property)": [[158, "linearmodels.iv.covariance.ClusteredCovariance.s"]], "s2 (linearmodels.iv.covariance.clusteredcovariance property)": [[159, "linearmodels.iv.covariance.ClusteredCovariance.s2"]], "heteroskedasticcovariance (class in linearmodels.iv.covariance)": [[160, "linearmodels.iv.covariance.HeteroskedasticCovariance"]], "config (linearmodels.iv.covariance.heteroskedasticcovariance property)": [[161, "linearmodels.iv.covariance.HeteroskedasticCovariance.config"]], "cov (linearmodels.iv.covariance.heteroskedasticcovariance property)": [[162, "linearmodels.iv.covariance.HeteroskedasticCovariance.cov"]], "debiased (linearmodels.iv.covariance.heteroskedasticcovariance property)": [[163, "linearmodels.iv.covariance.HeteroskedasticCovariance.debiased"]], "s (linearmodels.iv.covariance.heteroskedasticcovariance property)": [[164, "linearmodels.iv.covariance.HeteroskedasticCovariance.s"]], "s2 (linearmodels.iv.covariance.heteroskedasticcovariance property)": [[165, "linearmodels.iv.covariance.HeteroskedasticCovariance.s2"]], "homoskedasticcovariance (class in linearmodels.iv.covariance)": [[166, "linearmodels.iv.covariance.HomoskedasticCovariance"]], "config (linearmodels.iv.covariance.homoskedasticcovariance property)": [[167, "linearmodels.iv.covariance.HomoskedasticCovariance.config"]], "cov (linearmodels.iv.covariance.homoskedasticcovariance property)": [[168, "linearmodels.iv.covariance.HomoskedasticCovariance.cov"]], "debiased (linearmodels.iv.covariance.homoskedasticcovariance property)": [[169, "linearmodels.iv.covariance.HomoskedasticCovariance.debiased"]], "s (linearmodels.iv.covariance.homoskedasticcovariance property)": [[170, "linearmodels.iv.covariance.HomoskedasticCovariance.s"]], "s2 (linearmodels.iv.covariance.homoskedasticcovariance property)": [[171, "linearmodels.iv.covariance.HomoskedasticCovariance.s2"]], "kernelcovariance (class in linearmodels.iv.covariance)": [[172, "linearmodels.iv.covariance.KernelCovariance"]], "config (linearmodels.iv.covariance.kernelcovariance property)": [[173, "linearmodels.iv.covariance.KernelCovariance.config"]], "cov (linearmodels.iv.covariance.kernelcovariance property)": [[174, "linearmodels.iv.covariance.KernelCovariance.cov"]], "debiased (linearmodels.iv.covariance.kernelcovariance property)": [[175, "linearmodels.iv.covariance.KernelCovariance.debiased"]], "s (linearmodels.iv.covariance.kernelcovariance property)": [[176, "linearmodels.iv.covariance.KernelCovariance.s"]], "s2 (linearmodels.iv.covariance.kernelcovariance property)": [[177, "linearmodels.iv.covariance.KernelCovariance.s2"]], "kernel_optimal_bandwidth() (in module linearmodels.iv.covariance)": [[178, "linearmodels.iv.covariance.kernel_optimal_bandwidth"]], "kernel_weight_bartlett() (in module linearmodels.iv.covariance)": [[179, "linearmodels.iv.covariance.kernel_weight_bartlett"]], "kernel_weight_parzen() (in module linearmodels.iv.covariance)": [[180, "linearmodels.iv.covariance.kernel_weight_parzen"]], "kernel_weight_quadratic_spectral() (in module linearmodels.iv.covariance)": [[181, "linearmodels.iv.covariance.kernel_weight_quadratic_spectral"]], "ivdata (class in linearmodels.iv.data)": [[182, "linearmodels.iv.data.IVData"]], "cols (linearmodels.iv.data.ivdata property)": [[183, "linearmodels.iv.data.IVData.cols"]], "drop() (linearmodels.iv.data.ivdata method)": [[184, "linearmodels.iv.data.IVData.drop"]], "isnull (linearmodels.iv.data.ivdata property)": [[185, "linearmodels.iv.data.IVData.isnull"]], "labels (linearmodels.iv.data.ivdata property)": [[186, "linearmodels.iv.data.IVData.labels"]], "ndarray (linearmodels.iv.data.ivdata property)": [[187, "linearmodels.iv.data.IVData.ndarray"]], "ndim (linearmodels.iv.data.ivdata property)": [[188, "linearmodels.iv.data.IVData.ndim"]], "pandas (linearmodels.iv.data.ivdata property)": [[189, "linearmodels.iv.data.IVData.pandas"]], "rows (linearmodels.iv.data.ivdata property)": [[190, "linearmodels.iv.data.IVData.rows"]], "shape (linearmodels.iv.data.ivdata property)": [[191, "linearmodels.iv.data.IVData.shape"]], "heteroskedasticweightmatrix (class in linearmodels.iv.gmm)": [[192, "linearmodels.iv.gmm.HeteroskedasticWeightMatrix"]], "config (linearmodels.iv.gmm.heteroskedasticweightmatrix property)": [[193, "linearmodels.iv.gmm.HeteroskedasticWeightMatrix.config"]], "weight_matrix() (linearmodels.iv.gmm.heteroskedasticweightmatrix method)": [[194, "linearmodels.iv.gmm.HeteroskedasticWeightMatrix.weight_matrix"]], "homoskedasticweightmatrix (class in linearmodels.iv.gmm)": [[195, "linearmodels.iv.gmm.HomoskedasticWeightMatrix"]], "config (linearmodels.iv.gmm.homoskedasticweightmatrix property)": [[196, "linearmodels.iv.gmm.HomoskedasticWeightMatrix.config"]], "weight_matrix() (linearmodels.iv.gmm.homoskedasticweightmatrix method)": [[197, "linearmodels.iv.gmm.HomoskedasticWeightMatrix.weight_matrix"]], "ivgmmcovariance (class in linearmodels.iv.gmm)": [[198, "linearmodels.iv.gmm.IVGMMCovariance"]], "config (linearmodels.iv.gmm.ivgmmcovariance property)": [[199, "linearmodels.iv.gmm.IVGMMCovariance.config"]], "cov (linearmodels.iv.gmm.ivgmmcovariance property)": [[200, "linearmodels.iv.gmm.IVGMMCovariance.cov"]], "debiased (linearmodels.iv.gmm.ivgmmcovariance property)": [[201, "linearmodels.iv.gmm.IVGMMCovariance.debiased"]], "s (linearmodels.iv.gmm.ivgmmcovariance property)": [[202, "linearmodels.iv.gmm.IVGMMCovariance.s"]], "s2 (linearmodels.iv.gmm.ivgmmcovariance property)": [[203, "linearmodels.iv.gmm.IVGMMCovariance.s2"]], "kernelweightmatrix (class in linearmodels.iv.gmm)": [[204, "linearmodels.iv.gmm.KernelWeightMatrix"]], "bandwidth (linearmodels.iv.gmm.kernelweightmatrix property)": [[205, "linearmodels.iv.gmm.KernelWeightMatrix.bandwidth"]], "config (linearmodels.iv.gmm.kernelweightmatrix property)": [[206, "linearmodels.iv.gmm.KernelWeightMatrix.config"]], "weight_matrix() (linearmodels.iv.gmm.kernelweightmatrix method)": [[207, "linearmodels.iv.gmm.KernelWeightMatrix.weight_matrix"]], "onewayclusteredweightmatrix (class in linearmodels.iv.gmm)": [[208, "linearmodels.iv.gmm.OneWayClusteredWeightMatrix"]], "config (linearmodels.iv.gmm.onewayclusteredweightmatrix property)": [[209, "linearmodels.iv.gmm.OneWayClusteredWeightMatrix.config"]], "weight_matrix() (linearmodels.iv.gmm.onewayclusteredweightmatrix method)": [[210, "linearmodels.iv.gmm.OneWayClusteredWeightMatrix.weight_matrix"]], "iv2sls (class in linearmodels.iv.model)": [[211, "linearmodels.iv.model.IV2SLS"]], "estimate_parameters() (linearmodels.iv.model.iv2sls static method)": [[212, "linearmodels.iv.model.IV2SLS.estimate_parameters"]], "fit() (linearmodels.iv.model.iv2sls method)": [[213, "linearmodels.iv.model.IV2SLS.fit"]], "formula (linearmodels.iv.model.iv2sls property)": [[214, "linearmodels.iv.model.IV2SLS.formula"]], "from_formula() (linearmodels.iv.model.iv2sls static method)": [[215, "linearmodels.iv.model.IV2SLS.from_formula"]], "has_constant (linearmodels.iv.model.iv2sls property)": [[216, "linearmodels.iv.model.IV2SLS.has_constant"]], "isnull (linearmodels.iv.model.iv2sls property)": [[217, "linearmodels.iv.model.IV2SLS.isnull"]], "notnull (linearmodels.iv.model.iv2sls property)": [[218, "linearmodels.iv.model.IV2SLS.notnull"]], "predict() (linearmodels.iv.model.iv2sls method)": [[219, "linearmodels.iv.model.IV2SLS.predict"]], "resids() (linearmodels.iv.model.iv2sls method)": [[220, "linearmodels.iv.model.IV2SLS.resids"]], "wresids() (linearmodels.iv.model.iv2sls method)": [[221, "linearmodels.iv.model.IV2SLS.wresids"]], "ivgmm (class in linearmodels.iv.model)": [[222, "linearmodels.iv.model.IVGMM"]], "estimate_parameters() (linearmodels.iv.model.ivgmm static method)": [[223, "linearmodels.iv.model.IVGMM.estimate_parameters"]], "fit() (linearmodels.iv.model.ivgmm method)": [[224, "linearmodels.iv.model.IVGMM.fit"]], "formula (linearmodels.iv.model.ivgmm property)": [[225, "linearmodels.iv.model.IVGMM.formula"]], "from_formula() (linearmodels.iv.model.ivgmm static method)": [[226, "linearmodels.iv.model.IVGMM.from_formula"]], "has_constant (linearmodels.iv.model.ivgmm property)": [[227, "linearmodels.iv.model.IVGMM.has_constant"]], "isnull (linearmodels.iv.model.ivgmm property)": [[228, "linearmodels.iv.model.IVGMM.isnull"]], "notnull (linearmodels.iv.model.ivgmm property)": [[229, "linearmodels.iv.model.IVGMM.notnull"]], "predict() (linearmodels.iv.model.ivgmm method)": [[230, "linearmodels.iv.model.IVGMM.predict"]], "resids() (linearmodels.iv.model.ivgmm method)": [[231, "linearmodels.iv.model.IVGMM.resids"]], "wresids() (linearmodels.iv.model.ivgmm method)": [[232, "linearmodels.iv.model.IVGMM.wresids"]], "ivgmmcue (class in linearmodels.iv.model)": [[233, "linearmodels.iv.model.IVGMMCUE"]], "estimate_parameters() (linearmodels.iv.model.ivgmmcue method)": [[234, "linearmodels.iv.model.IVGMMCUE.estimate_parameters"]], "fit() (linearmodels.iv.model.ivgmmcue method)": [[235, "linearmodels.iv.model.IVGMMCUE.fit"]], "formula (linearmodels.iv.model.ivgmmcue property)": [[236, "linearmodels.iv.model.IVGMMCUE.formula"]], "from_formula() (linearmodels.iv.model.ivgmmcue static method)": [[237, "linearmodels.iv.model.IVGMMCUE.from_formula"]], "has_constant (linearmodels.iv.model.ivgmmcue property)": [[238, "linearmodels.iv.model.IVGMMCUE.has_constant"]], "isnull (linearmodels.iv.model.ivgmmcue property)": [[239, "linearmodels.iv.model.IVGMMCUE.isnull"]], "j() (linearmodels.iv.model.ivgmmcue method)": [[240, "linearmodels.iv.model.IVGMMCUE.j"]], "notnull (linearmodels.iv.model.ivgmmcue property)": [[241, "linearmodels.iv.model.IVGMMCUE.notnull"]], "predict() (linearmodels.iv.model.ivgmmcue method)": [[242, "linearmodels.iv.model.IVGMMCUE.predict"]], "resids() (linearmodels.iv.model.ivgmmcue method)": [[243, "linearmodels.iv.model.IVGMMCUE.resids"]], "wresids() (linearmodels.iv.model.ivgmmcue method)": [[244, "linearmodels.iv.model.IVGMMCUE.wresids"]], "ivliml (class in linearmodels.iv.model)": [[245, "linearmodels.iv.model.IVLIML"]], "estimate_parameters() (linearmodels.iv.model.ivliml static method)": [[246, "linearmodels.iv.model.IVLIML.estimate_parameters"]], "fit() (linearmodels.iv.model.ivliml method)": [[247, "linearmodels.iv.model.IVLIML.fit"]], "formula (linearmodels.iv.model.ivliml property)": [[248, "linearmodels.iv.model.IVLIML.formula"]], "from_formula() (linearmodels.iv.model.ivliml static method)": [[249, "linearmodels.iv.model.IVLIML.from_formula"]], "has_constant (linearmodels.iv.model.ivliml property)": [[250, "linearmodels.iv.model.IVLIML.has_constant"]], "isnull (linearmodels.iv.model.ivliml property)": [[251, "linearmodels.iv.model.IVLIML.isnull"]], "notnull (linearmodels.iv.model.ivliml property)": [[252, "linearmodels.iv.model.IVLIML.notnull"]], "predict() (linearmodels.iv.model.ivliml method)": [[253, "linearmodels.iv.model.IVLIML.predict"]], "resids() (linearmodels.iv.model.ivliml method)": [[254, "linearmodels.iv.model.IVLIML.resids"]], "wresids() (linearmodels.iv.model.ivliml method)": [[255, "linearmodels.iv.model.IVLIML.wresids"]], "_ols (class in linearmodels.iv.model)": [[256, "linearmodels.iv.model._OLS"]], "estimate_parameters() (linearmodels.iv.model._ols static method)": [[257, "linearmodels.iv.model._OLS.estimate_parameters"]], "fit() (linearmodels.iv.model._ols method)": [[258, "linearmodels.iv.model._OLS.fit"]], "formula (linearmodels.iv.model._ols property)": [[259, "linearmodels.iv.model._OLS.formula"]], "from_formula() (linearmodels.iv.model._ols static method)": [[260, "linearmodels.iv.model._OLS.from_formula"]], "has_constant (linearmodels.iv.model._ols property)": [[261, "linearmodels.iv.model._OLS.has_constant"]], "isnull (linearmodels.iv.model._ols property)": [[262, "linearmodels.iv.model._OLS.isnull"]], "notnull (linearmodels.iv.model._ols property)": [[263, "linearmodels.iv.model._OLS.notnull"]], "predict() (linearmodels.iv.model._ols method)": [[264, "linearmodels.iv.model._OLS.predict"]], "resids() (linearmodels.iv.model._ols method)": [[265, "linearmodels.iv.model._OLS.resids"]], "wresids() (linearmodels.iv.model._ols method)": [[266, "linearmodels.iv.model._OLS.wresids"]], "firststageresults (class in linearmodels.iv.results)": [[267, "linearmodels.iv.results.FirstStageResults"]], "diagnostics (linearmodels.iv.results.firststageresults property)": [[268, "linearmodels.iv.results.FirstStageResults.diagnostics"]], "individual (linearmodels.iv.results.firststageresults property)": [[269, "linearmodels.iv.results.FirstStageResults.individual"]], "summary (linearmodels.iv.results.firststageresults property)": [[270, "linearmodels.iv.results.FirstStageResults.summary"]], "ivgmmresults (class in linearmodels.iv.results)": [[271, "linearmodels.iv.results.IVGMMResults"]], "c_stat() (linearmodels.iv.results.ivgmmresults method)": [[272, "linearmodels.iv.results.IVGMMResults.c_stat"]], "conf_int() (linearmodels.iv.results.ivgmmresults method)": [[273, "linearmodels.iv.results.IVGMMResults.conf_int"]], "cov (linearmodels.iv.results.ivgmmresults property)": [[274, "linearmodels.iv.results.IVGMMResults.cov"]], "cov_config (linearmodels.iv.results.ivgmmresults property)": [[275, "linearmodels.iv.results.IVGMMResults.cov_config"]], "cov_estimator (linearmodels.iv.results.ivgmmresults property)": [[276, "linearmodels.iv.results.IVGMMResults.cov_estimator"]], "cov_type (linearmodels.iv.results.ivgmmresults property)": [[277, "linearmodels.iv.results.IVGMMResults.cov_type"]], "debiased (linearmodels.iv.results.ivgmmresults property)": [[278, "linearmodels.iv.results.IVGMMResults.debiased"]], "df_model (linearmodels.iv.results.ivgmmresults property)": [[279, "linearmodels.iv.results.IVGMMResults.df_model"]], "df_resid (linearmodels.iv.results.ivgmmresults property)": [[280, "linearmodels.iv.results.IVGMMResults.df_resid"]], "f_statistic (linearmodels.iv.results.ivgmmresults property)": [[281, "linearmodels.iv.results.IVGMMResults.f_statistic"]], "first_stage (linearmodels.iv.results.ivgmmresults property)": [[282, "linearmodels.iv.results.IVGMMResults.first_stage"]], "fitted_values (linearmodels.iv.results.ivgmmresults property)": [[283, "linearmodels.iv.results.IVGMMResults.fitted_values"]], "has_constant (linearmodels.iv.results.ivgmmresults property)": [[284, "linearmodels.iv.results.IVGMMResults.has_constant"]], "idiosyncratic (linearmodels.iv.results.ivgmmresults property)": [[285, "linearmodels.iv.results.IVGMMResults.idiosyncratic"]], "iterations (linearmodels.iv.results.ivgmmresults property)": [[286, "linearmodels.iv.results.IVGMMResults.iterations"]], "j_stat (linearmodels.iv.results.ivgmmresults property)": [[287, "linearmodels.iv.results.IVGMMResults.j_stat"]], "kappa (linearmodels.iv.results.ivgmmresults property)": [[288, "linearmodels.iv.results.IVGMMResults.kappa"]], "method (linearmodels.iv.results.ivgmmresults property)": [[289, "linearmodels.iv.results.IVGMMResults.method"]], "model_ss (linearmodels.iv.results.ivgmmresults property)": [[290, "linearmodels.iv.results.IVGMMResults.model_ss"]], "nobs (linearmodels.iv.results.ivgmmresults property)": [[291, "linearmodels.iv.results.IVGMMResults.nobs"]], "params (linearmodels.iv.results.ivgmmresults property)": [[292, "linearmodels.iv.results.IVGMMResults.params"]], "predict() (linearmodels.iv.results.ivgmmresults method)": [[293, "linearmodels.iv.results.IVGMMResults.predict"]], "pvalues (linearmodels.iv.results.ivgmmresults property)": [[294, "linearmodels.iv.results.IVGMMResults.pvalues"]], "resid_ss (linearmodels.iv.results.ivgmmresults property)": [[295, "linearmodels.iv.results.IVGMMResults.resid_ss"]], "resids (linearmodels.iv.results.ivgmmresults property)": [[296, "linearmodels.iv.results.IVGMMResults.resids"]], "rsquared (linearmodels.iv.results.ivgmmresults property)": [[297, "linearmodels.iv.results.IVGMMResults.rsquared"]], "rsquared_adj (linearmodels.iv.results.ivgmmresults property)": [[298, "linearmodels.iv.results.IVGMMResults.rsquared_adj"]], "s2 (linearmodels.iv.results.ivgmmresults property)": [[299, "linearmodels.iv.results.IVGMMResults.s2"]], "std_errors (linearmodels.iv.results.ivgmmresults property)": [[300, "linearmodels.iv.results.IVGMMResults.std_errors"]], "summary (linearmodels.iv.results.ivgmmresults property)": [[301, "linearmodels.iv.results.IVGMMResults.summary"]], "total_ss (linearmodels.iv.results.ivgmmresults property)": [[302, "linearmodels.iv.results.IVGMMResults.total_ss"]], "tstats (linearmodels.iv.results.ivgmmresults property)": [[303, "linearmodels.iv.results.IVGMMResults.tstats"]], "wald_test() (linearmodels.iv.results.ivgmmresults method)": [[304, "linearmodels.iv.results.IVGMMResults.wald_test"]], "weight_config (linearmodels.iv.results.ivgmmresults property)": [[305, "linearmodels.iv.results.IVGMMResults.weight_config"]], "weight_matrix (linearmodels.iv.results.ivgmmresults property)": [[306, "linearmodels.iv.results.IVGMMResults.weight_matrix"]], "weight_type (linearmodels.iv.results.ivgmmresults property)": [[307, "linearmodels.iv.results.IVGMMResults.weight_type"]], "wresids (linearmodels.iv.results.ivgmmresults property)": [[308, "linearmodels.iv.results.IVGMMResults.wresids"]], "ivmodelcomparison (class in linearmodels.iv.results)": [[309, "linearmodels.iv.results.IVModelComparison"]], "cov_estimator (linearmodels.iv.results.ivmodelcomparison property)": [[310, "linearmodels.iv.results.IVModelComparison.cov_estimator"]], "estimator_method (linearmodels.iv.results.ivmodelcomparison property)": [[311, "linearmodels.iv.results.IVModelComparison.estimator_method"]], "f_statistic (linearmodels.iv.results.ivmodelcomparison property)": [[312, "linearmodels.iv.results.IVModelComparison.f_statistic"]], "nobs (linearmodels.iv.results.ivmodelcomparison property)": [[313, "linearmodels.iv.results.IVModelComparison.nobs"]], "params (linearmodels.iv.results.ivmodelcomparison property)": [[314, "linearmodels.iv.results.IVModelComparison.params"]], "pvalues (linearmodels.iv.results.ivmodelcomparison property)": [[315, "linearmodels.iv.results.IVModelComparison.pvalues"]], "rsquared (linearmodels.iv.results.ivmodelcomparison property)": [[316, "linearmodels.iv.results.IVModelComparison.rsquared"]], "rsquared_adj (linearmodels.iv.results.ivmodelcomparison property)": [[317, "linearmodels.iv.results.IVModelComparison.rsquared_adj"]], "std_errors (linearmodels.iv.results.ivmodelcomparison property)": [[318, "linearmodels.iv.results.IVModelComparison.std_errors"]], "summary (linearmodels.iv.results.ivmodelcomparison property)": [[319, "linearmodels.iv.results.IVModelComparison.summary"]], "tstats (linearmodels.iv.results.ivmodelcomparison property)": [[320, "linearmodels.iv.results.IVModelComparison.tstats"]], "ivresults (class in linearmodels.iv.results)": [[321, "linearmodels.iv.results.IVResults"]], "anderson_rubin (linearmodels.iv.results.ivresults property)": [[322, "linearmodels.iv.results.IVResults.anderson_rubin"]], "basmann (linearmodels.iv.results.ivresults property)": [[323, "linearmodels.iv.results.IVResults.basmann"]], "basmann_f (linearmodels.iv.results.ivresults property)": [[324, "linearmodels.iv.results.IVResults.basmann_f"]], "conf_int() (linearmodels.iv.results.ivresults method)": [[325, "linearmodels.iv.results.IVResults.conf_int"]], "cov (linearmodels.iv.results.ivresults property)": [[326, "linearmodels.iv.results.IVResults.cov"]], "cov_config (linearmodels.iv.results.ivresults property)": [[327, "linearmodels.iv.results.IVResults.cov_config"]], "cov_estimator (linearmodels.iv.results.ivresults property)": [[328, "linearmodels.iv.results.IVResults.cov_estimator"]], "cov_type (linearmodels.iv.results.ivresults property)": [[329, "linearmodels.iv.results.IVResults.cov_type"]], "debiased (linearmodels.iv.results.ivresults property)": [[330, "linearmodels.iv.results.IVResults.debiased"]], "df_model (linearmodels.iv.results.ivresults property)": [[331, "linearmodels.iv.results.IVResults.df_model"]], "df_resid (linearmodels.iv.results.ivresults property)": [[332, "linearmodels.iv.results.IVResults.df_resid"]], "durbin() (linearmodels.iv.results.ivresults method)": [[333, "linearmodels.iv.results.IVResults.durbin"]], "f_statistic (linearmodels.iv.results.ivresults property)": [[334, "linearmodels.iv.results.IVResults.f_statistic"]], "first_stage (linearmodels.iv.results.ivresults property)": [[335, "linearmodels.iv.results.IVResults.first_stage"]], "fitted_values (linearmodels.iv.results.ivresults property)": [[336, "linearmodels.iv.results.IVResults.fitted_values"]], "has_constant (linearmodels.iv.results.ivresults property)": [[337, "linearmodels.iv.results.IVResults.has_constant"]], "idiosyncratic (linearmodels.iv.results.ivresults property)": [[338, "linearmodels.iv.results.IVResults.idiosyncratic"]], "kappa (linearmodels.iv.results.ivresults property)": [[339, "linearmodels.iv.results.IVResults.kappa"]], "method (linearmodels.iv.results.ivresults property)": [[340, "linearmodels.iv.results.IVResults.method"]], "model_ss (linearmodels.iv.results.ivresults property)": [[341, "linearmodels.iv.results.IVResults.model_ss"]], "nobs (linearmodels.iv.results.ivresults property)": [[342, "linearmodels.iv.results.IVResults.nobs"]], "params (linearmodels.iv.results.ivresults property)": [[343, "linearmodels.iv.results.IVResults.params"]], "predict() (linearmodels.iv.results.ivresults method)": [[344, "linearmodels.iv.results.IVResults.predict"]], "pvalues (linearmodels.iv.results.ivresults property)": [[345, "linearmodels.iv.results.IVResults.pvalues"]], "resid_ss (linearmodels.iv.results.ivresults property)": [[346, "linearmodels.iv.results.IVResults.resid_ss"]], "resids (linearmodels.iv.results.ivresults property)": [[347, "linearmodels.iv.results.IVResults.resids"]], "rsquared (linearmodels.iv.results.ivresults property)": [[348, "linearmodels.iv.results.IVResults.rsquared"]], "rsquared_adj (linearmodels.iv.results.ivresults property)": [[349, "linearmodels.iv.results.IVResults.rsquared_adj"]], "s2 (linearmodels.iv.results.ivresults property)": [[350, "linearmodels.iv.results.IVResults.s2"]], "sargan (linearmodels.iv.results.ivresults property)": [[351, "linearmodels.iv.results.IVResults.sargan"]], "std_errors (linearmodels.iv.results.ivresults property)": [[352, "linearmodels.iv.results.IVResults.std_errors"]], "summary (linearmodels.iv.results.ivresults property)": [[353, "linearmodels.iv.results.IVResults.summary"]], "total_ss (linearmodels.iv.results.ivresults property)": [[354, "linearmodels.iv.results.IVResults.total_ss"]], "tstats (linearmodels.iv.results.ivresults property)": [[355, "linearmodels.iv.results.IVResults.tstats"]], "wald_test() (linearmodels.iv.results.ivresults method)": [[356, "linearmodels.iv.results.IVResults.wald_test"]], "wooldridge_overid (linearmodels.iv.results.ivresults property)": [[357, "linearmodels.iv.results.IVResults.wooldridge_overid"]], "wooldridge_regression (linearmodels.iv.results.ivresults property)": [[358, "linearmodels.iv.results.IVResults.wooldridge_regression"]], "wooldridge_score (linearmodels.iv.results.ivresults property)": [[359, "linearmodels.iv.results.IVResults.wooldridge_score"]], "wresids (linearmodels.iv.results.ivresults property)": [[360, "linearmodels.iv.results.IVResults.wresids"]], "wu_hausman() (linearmodels.iv.results.ivresults method)": [[361, "linearmodels.iv.results.IVResults.wu_hausman"]], "olsresults (class in linearmodels.iv.results)": [[362, "linearmodels.iv.results.OLSResults"]], "conf_int() (linearmodels.iv.results.olsresults method)": [[363, "linearmodels.iv.results.OLSResults.conf_int"]], "cov (linearmodels.iv.results.olsresults property)": [[364, "linearmodels.iv.results.OLSResults.cov"]], "cov_config (linearmodels.iv.results.olsresults property)": [[365, "linearmodels.iv.results.OLSResults.cov_config"]], "cov_estimator (linearmodels.iv.results.olsresults property)": [[366, "linearmodels.iv.results.OLSResults.cov_estimator"]], "cov_type (linearmodels.iv.results.olsresults property)": [[367, "linearmodels.iv.results.OLSResults.cov_type"]], "debiased (linearmodels.iv.results.olsresults property)": [[368, "linearmodels.iv.results.OLSResults.debiased"]], "df_model (linearmodels.iv.results.olsresults property)": [[369, "linearmodels.iv.results.OLSResults.df_model"]], "df_resid (linearmodels.iv.results.olsresults property)": [[370, "linearmodels.iv.results.OLSResults.df_resid"]], "f_statistic (linearmodels.iv.results.olsresults property)": [[371, "linearmodels.iv.results.OLSResults.f_statistic"]], "fitted_values (linearmodels.iv.results.olsresults property)": [[372, "linearmodels.iv.results.OLSResults.fitted_values"]], "has_constant (linearmodels.iv.results.olsresults property)": [[373, "linearmodels.iv.results.OLSResults.has_constant"]], "idiosyncratic (linearmodels.iv.results.olsresults property)": [[374, "linearmodels.iv.results.OLSResults.idiosyncratic"]], "kappa (linearmodels.iv.results.olsresults property)": [[375, "linearmodels.iv.results.OLSResults.kappa"]], "method (linearmodels.iv.results.olsresults property)": [[376, "linearmodels.iv.results.OLSResults.method"]], "model_ss (linearmodels.iv.results.olsresults property)": [[377, "linearmodels.iv.results.OLSResults.model_ss"]], "nobs (linearmodels.iv.results.olsresults property)": [[378, "linearmodels.iv.results.OLSResults.nobs"]], "params (linearmodels.iv.results.olsresults property)": [[379, "linearmodels.iv.results.OLSResults.params"]], "predict() (linearmodels.iv.results.olsresults method)": [[380, "linearmodels.iv.results.OLSResults.predict"]], "pvalues (linearmodels.iv.results.olsresults property)": [[381, "linearmodels.iv.results.OLSResults.pvalues"]], "resid_ss (linearmodels.iv.results.olsresults property)": [[382, "linearmodels.iv.results.OLSResults.resid_ss"]], "resids (linearmodels.iv.results.olsresults property)": [[383, "linearmodels.iv.results.OLSResults.resids"]], "rsquared (linearmodels.iv.results.olsresults property)": [[384, "linearmodels.iv.results.OLSResults.rsquared"]], "rsquared_adj (linearmodels.iv.results.olsresults property)": [[385, "linearmodels.iv.results.OLSResults.rsquared_adj"]], "s2 (linearmodels.iv.results.olsresults property)": [[386, "linearmodels.iv.results.OLSResults.s2"]], "std_errors (linearmodels.iv.results.olsresults property)": [[387, "linearmodels.iv.results.OLSResults.std_errors"]], "summary (linearmodels.iv.results.olsresults property)": [[388, "linearmodels.iv.results.OLSResults.summary"]], "total_ss (linearmodels.iv.results.olsresults property)": [[389, "linearmodels.iv.results.OLSResults.total_ss"]], "tstats (linearmodels.iv.results.olsresults property)": [[390, "linearmodels.iv.results.OLSResults.tstats"]], "wald_test() (linearmodels.iv.results.olsresults method)": [[391, "linearmodels.iv.results.OLSResults.wald_test"]], "wresids (linearmodels.iv.results.olsresults property)": [[392, "linearmodels.iv.results.OLSResults.wresids"]], "compare() (in module linearmodels.iv.results)": [[393, "linearmodels.iv.results.compare"]], "linearmodels.iv.absorbing": [[395, "module-linearmodels.iv.absorbing"]], "linearmodels.iv.covariance": [[395, "module-linearmodels.iv.covariance"]], "linearmodels.iv.data": [[395, "module-linearmodels.iv.data"]], "linearmodels.iv.gmm": [[395, "module-linearmodels.iv.gmm"]], "linearmodels.iv.model": [[395, "module-linearmodels.iv.model"]], "linearmodels.iv.results": [[395, "module-linearmodels.iv.results"]], "accovariance (class in linearmodels.panel.covariance)": [[404, "linearmodels.panel.covariance.ACCovariance"]], "allowed_kwargs (linearmodels.panel.covariance.accovariance attribute)": [[405, "linearmodels.panel.covariance.ACCovariance.ALLOWED_KWARGS"]], "default_kernel (linearmodels.panel.covariance.accovariance attribute)": [[406, "linearmodels.panel.covariance.ACCovariance.DEFAULT_KERNEL"]], "cov (linearmodels.panel.covariance.accovariance property)": [[407, "linearmodels.panel.covariance.ACCovariance.cov"]], "deferred_cov() (linearmodels.panel.covariance.accovariance method)": [[408, "linearmodels.panel.covariance.ACCovariance.deferred_cov"]], "eps (linearmodels.panel.covariance.accovariance property)": [[409, "linearmodels.panel.covariance.ACCovariance.eps"]], "name (linearmodels.panel.covariance.accovariance property)": [[410, "linearmodels.panel.covariance.ACCovariance.name"]], "s2 (linearmodels.panel.covariance.accovariance property)": [[411, "linearmodels.panel.covariance.ACCovariance.s2"]], "clusteredcovariance (class in linearmodels.panel.covariance)": [[412, "linearmodels.panel.covariance.ClusteredCovariance"]], "allowed_kwargs (linearmodels.panel.covariance.clusteredcovariance attribute)": [[413, "linearmodels.panel.covariance.ClusteredCovariance.ALLOWED_KWARGS"]], "default_kernel (linearmodels.panel.covariance.clusteredcovariance attribute)": [[414, "linearmodels.panel.covariance.ClusteredCovariance.DEFAULT_KERNEL"]], "cov (linearmodels.panel.covariance.clusteredcovariance property)": [[415, "linearmodels.panel.covariance.ClusteredCovariance.cov"]], "deferred_cov() (linearmodels.panel.covariance.clusteredcovariance method)": [[416, "linearmodels.panel.covariance.ClusteredCovariance.deferred_cov"]], "eps (linearmodels.panel.covariance.clusteredcovariance property)": [[417, "linearmodels.panel.covariance.ClusteredCovariance.eps"]], "name (linearmodels.panel.covariance.clusteredcovariance property)": [[418, "linearmodels.panel.covariance.ClusteredCovariance.name"]], "s2 (linearmodels.panel.covariance.clusteredcovariance property)": [[419, "linearmodels.panel.covariance.ClusteredCovariance.s2"]], "driscollkraay (class in linearmodels.panel.covariance)": [[420, "linearmodels.panel.covariance.DriscollKraay"]], "allowed_kwargs (linearmodels.panel.covariance.driscollkraay attribute)": [[421, "linearmodels.panel.covariance.DriscollKraay.ALLOWED_KWARGS"]], "default_kernel (linearmodels.panel.covariance.driscollkraay attribute)": [[422, "linearmodels.panel.covariance.DriscollKraay.DEFAULT_KERNEL"]], "cov (linearmodels.panel.covariance.driscollkraay property)": [[423, "linearmodels.panel.covariance.DriscollKraay.cov"]], "deferred_cov() (linearmodels.panel.covariance.driscollkraay method)": [[424, "linearmodels.panel.covariance.DriscollKraay.deferred_cov"]], "eps (linearmodels.panel.covariance.driscollkraay property)": [[425, "linearmodels.panel.covariance.DriscollKraay.eps"]], "name (linearmodels.panel.covariance.driscollkraay property)": [[426, "linearmodels.panel.covariance.DriscollKraay.name"]], "s2 (linearmodels.panel.covariance.driscollkraay property)": [[427, "linearmodels.panel.covariance.DriscollKraay.s2"]], "famamacbethcovariance (class in linearmodels.panel.covariance)": [[428, "linearmodels.panel.covariance.FamaMacBethCovariance"]], "allowed_kwargs (linearmodels.panel.covariance.famamacbethcovariance attribute)": [[429, "linearmodels.panel.covariance.FamaMacBethCovariance.ALLOWED_KWARGS"]], "default_kernel (linearmodels.panel.covariance.famamacbethcovariance attribute)": [[430, "linearmodels.panel.covariance.FamaMacBethCovariance.DEFAULT_KERNEL"]], "all_params (linearmodels.panel.covariance.famamacbethcovariance property)": [[431, "linearmodels.panel.covariance.FamaMacBethCovariance.all_params"]], "bandwidth (linearmodels.panel.covariance.famamacbethcovariance property)": [[432, "linearmodels.panel.covariance.FamaMacBethCovariance.bandwidth"]], "cov (linearmodels.panel.covariance.famamacbethcovariance property)": [[433, "linearmodels.panel.covariance.FamaMacBethCovariance.cov"]], "deferred_cov() (linearmodels.panel.covariance.famamacbethcovariance method)": [[434, "linearmodels.panel.covariance.FamaMacBethCovariance.deferred_cov"]], "eps (linearmodels.panel.covariance.famamacbethcovariance property)": [[435, "linearmodels.panel.covariance.FamaMacBethCovariance.eps"]], "name (linearmodels.panel.covariance.famamacbethcovariance property)": [[436, "linearmodels.panel.covariance.FamaMacBethCovariance.name"]], "s2 (linearmodels.panel.covariance.famamacbethcovariance property)": [[437, "linearmodels.panel.covariance.FamaMacBethCovariance.s2"]], "heteroskedasticcovariance (class in linearmodels.panel.covariance)": [[438, "linearmodels.panel.covariance.HeteroskedasticCovariance"]], "allowed_kwargs (linearmodels.panel.covariance.heteroskedasticcovariance attribute)": [[439, "linearmodels.panel.covariance.HeteroskedasticCovariance.ALLOWED_KWARGS"]], "default_kernel (linearmodels.panel.covariance.heteroskedasticcovariance attribute)": [[440, "linearmodels.panel.covariance.HeteroskedasticCovariance.DEFAULT_KERNEL"]], "cov (linearmodels.panel.covariance.heteroskedasticcovariance property)": [[441, "linearmodels.panel.covariance.HeteroskedasticCovariance.cov"]], "deferred_cov() (linearmodels.panel.covariance.heteroskedasticcovariance method)": [[442, "linearmodels.panel.covariance.HeteroskedasticCovariance.deferred_cov"]], "eps (linearmodels.panel.covariance.heteroskedasticcovariance property)": [[443, "linearmodels.panel.covariance.HeteroskedasticCovariance.eps"]], "name (linearmodels.panel.covariance.heteroskedasticcovariance property)": [[444, "linearmodels.panel.covariance.HeteroskedasticCovariance.name"]], "s2 (linearmodels.panel.covariance.heteroskedasticcovariance property)": [[445, "linearmodels.panel.covariance.HeteroskedasticCovariance.s2"]], "homoskedasticcovariance (class in linearmodels.panel.covariance)": [[446, "linearmodels.panel.covariance.HomoskedasticCovariance"]], "allowed_kwargs (linearmodels.panel.covariance.homoskedasticcovariance attribute)": [[447, "linearmodels.panel.covariance.HomoskedasticCovariance.ALLOWED_KWARGS"]], "default_kernel (linearmodels.panel.covariance.homoskedasticcovariance attribute)": [[448, "linearmodels.panel.covariance.HomoskedasticCovariance.DEFAULT_KERNEL"]], "cov (linearmodels.panel.covariance.homoskedasticcovariance property)": [[449, "linearmodels.panel.covariance.HomoskedasticCovariance.cov"]], "deferred_cov() (linearmodels.panel.covariance.homoskedasticcovariance method)": [[450, "linearmodels.panel.covariance.HomoskedasticCovariance.deferred_cov"]], "eps (linearmodels.panel.covariance.homoskedasticcovariance property)": [[451, "linearmodels.panel.covariance.HomoskedasticCovariance.eps"]], "name (linearmodels.panel.covariance.homoskedasticcovariance property)": [[452, "linearmodels.panel.covariance.HomoskedasticCovariance.name"]], "s2 (linearmodels.panel.covariance.homoskedasticcovariance property)": [[453, "linearmodels.panel.covariance.HomoskedasticCovariance.s2"]], "paneldata (class in linearmodels.panel.data)": [[454, "linearmodels.panel.data.PanelData"]], "copy() (linearmodels.panel.data.paneldata method)": [[455, "linearmodels.panel.data.PanelData.copy"]], "count() (linearmodels.panel.data.paneldata method)": [[456, "linearmodels.panel.data.PanelData.count"]], "dataframe (linearmodels.panel.data.paneldata property)": [[457, "linearmodels.panel.data.PanelData.dataframe"]], "demean() (linearmodels.panel.data.paneldata method)": [[458, "linearmodels.panel.data.PanelData.demean"]], "drop() (linearmodels.panel.data.paneldata method)": [[459, "linearmodels.panel.data.PanelData.drop"]], "dummies() (linearmodels.panel.data.paneldata method)": [[460, "linearmodels.panel.data.PanelData.dummies"]], "entities (linearmodels.panel.data.paneldata property)": [[461, "linearmodels.panel.data.PanelData.entities"]], "entity_ids (linearmodels.panel.data.paneldata property)": [[462, "linearmodels.panel.data.PanelData.entity_ids"]], "first_difference() (linearmodels.panel.data.paneldata method)": [[463, "linearmodels.panel.data.PanelData.first_difference"]], "general_demean() (linearmodels.panel.data.paneldata method)": [[464, "linearmodels.panel.data.PanelData.general_demean"]], "index (linearmodels.panel.data.paneldata property)": [[465, "linearmodels.panel.data.PanelData.index"]], "isnull (linearmodels.panel.data.paneldata property)": [[466, "linearmodels.panel.data.PanelData.isnull"]], "mean() (linearmodels.panel.data.paneldata method)": [[467, "linearmodels.panel.data.PanelData.mean"]], "ndim (linearmodels.panel.data.paneldata property)": [[468, "linearmodels.panel.data.PanelData.ndim"]], "nentity (linearmodels.panel.data.paneldata property)": [[469, "linearmodels.panel.data.PanelData.nentity"]], "nobs (linearmodels.panel.data.paneldata property)": [[470, "linearmodels.panel.data.PanelData.nobs"]], "nvar (linearmodels.panel.data.paneldata property)": [[471, "linearmodels.panel.data.PanelData.nvar"]], "panel (linearmodels.panel.data.paneldata property)": [[472, "linearmodels.panel.data.PanelData.panel"]], "shape (linearmodels.panel.data.paneldata property)": [[473, "linearmodels.panel.data.PanelData.shape"]], "time (linearmodels.panel.data.paneldata property)": [[474, "linearmodels.panel.data.PanelData.time"]], "time_ids (linearmodels.panel.data.paneldata property)": [[475, "linearmodels.panel.data.PanelData.time_ids"]], "values2d (linearmodels.panel.data.paneldata property)": [[476, "linearmodels.panel.data.PanelData.values2d"]], "values3d (linearmodels.panel.data.paneldata property)": [[477, "linearmodels.panel.data.PanelData.values3d"]], "vars (linearmodels.panel.data.paneldata property)": [[478, "linearmodels.panel.data.PanelData.vars"]], "_panel (class in linearmodels.panel.data)": [[479, "linearmodels.panel.data._Panel"]], "from_array() (linearmodels.panel.data._panel class method)": [[480, "linearmodels.panel.data._Panel.from_array"]], "items (linearmodels.panel.data._panel property)": [[481, "linearmodels.panel.data._Panel.items"]], "major_axis (linearmodels.panel.data._panel property)": [[482, "linearmodels.panel.data._Panel.major_axis"]], "minor_axis (linearmodels.panel.data._panel property)": [[483, "linearmodels.panel.data._Panel.minor_axis"]], "shape (linearmodels.panel.data._panel property)": [[484, "linearmodels.panel.data._Panel.shape"]], "to_frame() (linearmodels.panel.data._panel method)": [[485, "linearmodels.panel.data._Panel.to_frame"]], "values (linearmodels.panel.data._panel property)": [[486, "linearmodels.panel.data._Panel.values"]], "betweenols (class in linearmodels.panel.model)": [[487, "linearmodels.panel.model.BetweenOLS"]], "fit() (linearmodels.panel.model.betweenols method)": [[488, "linearmodels.panel.model.BetweenOLS.fit"]], "formula (linearmodels.panel.model.betweenols property)": [[489, "linearmodels.panel.model.BetweenOLS.formula"]], "from_formula() (linearmodels.panel.model.betweenols class method)": [[490, "linearmodels.panel.model.BetweenOLS.from_formula"]], "has_constant (linearmodels.panel.model.betweenols property)": [[491, "linearmodels.panel.model.BetweenOLS.has_constant"]], "not_null (linearmodels.panel.model.betweenols property)": [[492, "linearmodels.panel.model.BetweenOLS.not_null"]], "predict() (linearmodels.panel.model.betweenols method)": [[493, "linearmodels.panel.model.BetweenOLS.predict"]], "reformat_clusters() (linearmodels.panel.model.betweenols method)": [[494, "linearmodels.panel.model.BetweenOLS.reformat_clusters"]], "famamacbeth (class in linearmodels.panel.model)": [[495, "linearmodels.panel.model.FamaMacBeth"]], "fit() (linearmodels.panel.model.famamacbeth method)": [[496, "linearmodels.panel.model.FamaMacBeth.fit"]], "formula (linearmodels.panel.model.famamacbeth property)": [[497, "linearmodels.panel.model.FamaMacBeth.formula"]], "from_formula() (linearmodels.panel.model.famamacbeth class method)": [[498, "linearmodels.panel.model.FamaMacBeth.from_formula"]], "has_constant (linearmodels.panel.model.famamacbeth property)": [[499, "linearmodels.panel.model.FamaMacBeth.has_constant"]], "not_null (linearmodels.panel.model.famamacbeth property)": [[500, "linearmodels.panel.model.FamaMacBeth.not_null"]], "predict() (linearmodels.panel.model.famamacbeth method)": [[501, "linearmodels.panel.model.FamaMacBeth.predict"]], "reformat_clusters() (linearmodels.panel.model.famamacbeth method)": [[502, "linearmodels.panel.model.FamaMacBeth.reformat_clusters"]], "firstdifferenceols (class in linearmodels.panel.model)": [[503, "linearmodels.panel.model.FirstDifferenceOLS"]], "fit() (linearmodels.panel.model.firstdifferenceols method)": [[504, "linearmodels.panel.model.FirstDifferenceOLS.fit"]], "formula (linearmodels.panel.model.firstdifferenceols property)": [[505, "linearmodels.panel.model.FirstDifferenceOLS.formula"]], "from_formula() (linearmodels.panel.model.firstdifferenceols class method)": [[506, "linearmodels.panel.model.FirstDifferenceOLS.from_formula"]], "has_constant (linearmodels.panel.model.firstdifferenceols property)": [[507, "linearmodels.panel.model.FirstDifferenceOLS.has_constant"]], "not_null (linearmodels.panel.model.firstdifferenceols property)": [[508, "linearmodels.panel.model.FirstDifferenceOLS.not_null"]], "predict() (linearmodels.panel.model.firstdifferenceols method)": [[509, "linearmodels.panel.model.FirstDifferenceOLS.predict"]], "reformat_clusters() (linearmodels.panel.model.firstdifferenceols method)": [[510, "linearmodels.panel.model.FirstDifferenceOLS.reformat_clusters"]], "panelols (class in linearmodels.panel.model)": [[511, "linearmodels.panel.model.PanelOLS"]], "entity_effects (linearmodels.panel.model.panelols property)": [[512, "linearmodels.panel.model.PanelOLS.entity_effects"]], "fit() (linearmodels.panel.model.panelols method)": [[513, "linearmodels.panel.model.PanelOLS.fit"]], "formula (linearmodels.panel.model.panelols property)": [[514, "linearmodels.panel.model.PanelOLS.formula"]], "from_formula() (linearmodels.panel.model.panelols class method)": [[515, "linearmodels.panel.model.PanelOLS.from_formula"]], "has_constant (linearmodels.panel.model.panelols property)": [[516, "linearmodels.panel.model.PanelOLS.has_constant"]], "not_null (linearmodels.panel.model.panelols property)": [[517, "linearmodels.panel.model.PanelOLS.not_null"]], "other_effects (linearmodels.panel.model.panelols property)": [[518, "linearmodels.panel.model.PanelOLS.other_effects"]], "predict() (linearmodels.panel.model.panelols method)": [[519, "linearmodels.panel.model.PanelOLS.predict"]], "reformat_clusters() (linearmodels.panel.model.panelols method)": [[520, "linearmodels.panel.model.PanelOLS.reformat_clusters"]], "time_effects (linearmodels.panel.model.panelols property)": [[521, "linearmodels.panel.model.PanelOLS.time_effects"]], "pooledols (class in linearmodels.panel.model)": [[522, "linearmodels.panel.model.PooledOLS"]], "fit() (linearmodels.panel.model.pooledols method)": [[523, "linearmodels.panel.model.PooledOLS.fit"]], "formula (linearmodels.panel.model.pooledols property)": [[524, "linearmodels.panel.model.PooledOLS.formula"]], "from_formula() (linearmodels.panel.model.pooledols class method)": [[525, "linearmodels.panel.model.PooledOLS.from_formula"]], "has_constant (linearmodels.panel.model.pooledols property)": [[526, "linearmodels.panel.model.PooledOLS.has_constant"]], "not_null (linearmodels.panel.model.pooledols property)": [[527, "linearmodels.panel.model.PooledOLS.not_null"]], "predict() (linearmodels.panel.model.pooledols method)": [[528, "linearmodels.panel.model.PooledOLS.predict"]], "reformat_clusters() (linearmodels.panel.model.pooledols method)": [[529, "linearmodels.panel.model.PooledOLS.reformat_clusters"]], "randomeffects (class in linearmodels.panel.model)": [[530, "linearmodels.panel.model.RandomEffects"]], "fit() (linearmodels.panel.model.randomeffects method)": [[531, "linearmodels.panel.model.RandomEffects.fit"]], "formula (linearmodels.panel.model.randomeffects property)": [[532, "linearmodels.panel.model.RandomEffects.formula"]], "from_formula() (linearmodels.panel.model.randomeffects class method)": [[533, "linearmodels.panel.model.RandomEffects.from_formula"]], "has_constant (linearmodels.panel.model.randomeffects property)": [[534, "linearmodels.panel.model.RandomEffects.has_constant"]], "not_null (linearmodels.panel.model.randomeffects property)": [[535, "linearmodels.panel.model.RandomEffects.not_null"]], "predict() (linearmodels.panel.model.randomeffects method)": [[536, "linearmodels.panel.model.RandomEffects.predict"]], "reformat_clusters() (linearmodels.panel.model.randomeffects method)": [[537, "linearmodels.panel.model.RandomEffects.reformat_clusters"]], "famamacbethresults (class in linearmodels.panel.results)": [[538, "linearmodels.panel.results.FamaMacBethResults"]], "all_params (linearmodels.panel.results.famamacbethresults property)": [[539, "linearmodels.panel.results.FamaMacBethResults.all_params"]], "avg_adj_rsquared (linearmodels.panel.results.famamacbethresults property)": [[540, "linearmodels.panel.results.FamaMacBethResults.avg_adj_rsquared"]], "avg_rsquared (linearmodels.panel.results.famamacbethresults property)": [[541, "linearmodels.panel.results.FamaMacBethResults.avg_rsquared"]], "conf_int() (linearmodels.panel.results.famamacbethresults method)": [[542, "linearmodels.panel.results.FamaMacBethResults.conf_int"]], "corr_squared_between (linearmodels.panel.results.famamacbethresults property)": [[543, "linearmodels.panel.results.FamaMacBethResults.corr_squared_between"]], "corr_squared_overall (linearmodels.panel.results.famamacbethresults property)": [[544, "linearmodels.panel.results.FamaMacBethResults.corr_squared_overall"]], "corr_squared_within (linearmodels.panel.results.famamacbethresults property)": [[545, "linearmodels.panel.results.FamaMacBethResults.corr_squared_within"]], "cov (linearmodels.panel.results.famamacbethresults property)": [[546, "linearmodels.panel.results.FamaMacBethResults.cov"]], "df_model (linearmodels.panel.results.famamacbethresults property)": [[547, "linearmodels.panel.results.FamaMacBethResults.df_model"]], "df_resid (linearmodels.panel.results.famamacbethresults property)": [[548, "linearmodels.panel.results.FamaMacBethResults.df_resid"]], "entity_info (linearmodels.panel.results.famamacbethresults property)": [[549, "linearmodels.panel.results.FamaMacBethResults.entity_info"]], "estimated_effects (linearmodels.panel.results.famamacbethresults property)": [[550, "linearmodels.panel.results.FamaMacBethResults.estimated_effects"]], "f_statistic (linearmodels.panel.results.famamacbethresults property)": [[551, "linearmodels.panel.results.FamaMacBethResults.f_statistic"]], "f_statistic_robust (linearmodels.panel.results.famamacbethresults property)": [[552, "linearmodels.panel.results.FamaMacBethResults.f_statistic_robust"]], "fitted_values (linearmodels.panel.results.famamacbethresults property)": [[553, "linearmodels.panel.results.FamaMacBethResults.fitted_values"]], "idiosyncratic (linearmodels.panel.results.famamacbethresults property)": [[554, "linearmodels.panel.results.FamaMacBethResults.idiosyncratic"]], "loglik (linearmodels.panel.results.famamacbethresults property)": [[555, "linearmodels.panel.results.FamaMacBethResults.loglik"]], "model_ss (linearmodels.panel.results.famamacbethresults property)": [[556, "linearmodels.panel.results.FamaMacBethResults.model_ss"]], "name (linearmodels.panel.results.famamacbethresults property)": [[557, "linearmodels.panel.results.FamaMacBethResults.name"]], "nobs (linearmodels.panel.results.famamacbethresults property)": [[558, "linearmodels.panel.results.FamaMacBethResults.nobs"]], "params (linearmodels.panel.results.famamacbethresults property)": [[559, "linearmodels.panel.results.FamaMacBethResults.params"]], "predict() (linearmodels.panel.results.famamacbethresults method)": [[560, "linearmodels.panel.results.FamaMacBethResults.predict"]], "pvalues (linearmodels.panel.results.famamacbethresults property)": [[561, "linearmodels.panel.results.FamaMacBethResults.pvalues"]], "resid_ss (linearmodels.panel.results.famamacbethresults property)": [[562, "linearmodels.panel.results.FamaMacBethResults.resid_ss"]], "resids (linearmodels.panel.results.famamacbethresults property)": [[563, "linearmodels.panel.results.FamaMacBethResults.resids"]], "rsquared (linearmodels.panel.results.famamacbethresults property)": [[564, "linearmodels.panel.results.FamaMacBethResults.rsquared"]], "rsquared_between (linearmodels.panel.results.famamacbethresults property)": [[565, "linearmodels.panel.results.FamaMacBethResults.rsquared_between"]], "rsquared_overall (linearmodels.panel.results.famamacbethresults property)": [[566, "linearmodels.panel.results.FamaMacBethResults.rsquared_overall"]], "rsquared_within (linearmodels.panel.results.famamacbethresults property)": [[567, "linearmodels.panel.results.FamaMacBethResults.rsquared_within"]], "s2 (linearmodels.panel.results.famamacbethresults property)": [[568, "linearmodels.panel.results.FamaMacBethResults.s2"]], "std_errors (linearmodels.panel.results.famamacbethresults property)": [[569, "linearmodels.panel.results.FamaMacBethResults.std_errors"]], "summary (linearmodels.panel.results.famamacbethresults property)": [[570, "linearmodels.panel.results.FamaMacBethResults.summary"]], "time_info (linearmodels.panel.results.famamacbethresults property)": [[571, "linearmodels.panel.results.FamaMacBethResults.time_info"]], "total_ss (linearmodels.panel.results.famamacbethresults property)": [[572, "linearmodels.panel.results.FamaMacBethResults.total_ss"]], "tstats (linearmodels.panel.results.famamacbethresults property)": [[573, "linearmodels.panel.results.FamaMacBethResults.tstats"]], "wald_test() (linearmodels.panel.results.famamacbethresults method)": [[574, "linearmodels.panel.results.FamaMacBethResults.wald_test"]], "wresids (linearmodels.panel.results.famamacbethresults property)": [[575, "linearmodels.panel.results.FamaMacBethResults.wresids"]], "paneleffectsresults (class in linearmodels.panel.results)": [[576, "linearmodels.panel.results.PanelEffectsResults"]], "conf_int() (linearmodels.panel.results.paneleffectsresults method)": [[577, "linearmodels.panel.results.PanelEffectsResults.conf_int"]], "corr_squared_between (linearmodels.panel.results.paneleffectsresults property)": [[578, "linearmodels.panel.results.PanelEffectsResults.corr_squared_between"]], "corr_squared_overall (linearmodels.panel.results.paneleffectsresults property)": [[579, "linearmodels.panel.results.PanelEffectsResults.corr_squared_overall"]], "corr_squared_within (linearmodels.panel.results.paneleffectsresults property)": [[580, "linearmodels.panel.results.PanelEffectsResults.corr_squared_within"]], "cov (linearmodels.panel.results.paneleffectsresults property)": [[581, "linearmodels.panel.results.PanelEffectsResults.cov"]], "df_model (linearmodels.panel.results.paneleffectsresults property)": [[582, "linearmodels.panel.results.PanelEffectsResults.df_model"]], "df_resid (linearmodels.panel.results.paneleffectsresults property)": [[583, "linearmodels.panel.results.PanelEffectsResults.df_resid"]], "entity_info (linearmodels.panel.results.paneleffectsresults property)": [[584, "linearmodels.panel.results.PanelEffectsResults.entity_info"]], "estimated_effects (linearmodels.panel.results.paneleffectsresults property)": [[585, "linearmodels.panel.results.PanelEffectsResults.estimated_effects"]], "f_pooled (linearmodels.panel.results.paneleffectsresults property)": [[586, "linearmodels.panel.results.PanelEffectsResults.f_pooled"]], "f_statistic (linearmodels.panel.results.paneleffectsresults property)": [[587, "linearmodels.panel.results.PanelEffectsResults.f_statistic"]], "f_statistic_robust (linearmodels.panel.results.paneleffectsresults property)": [[588, "linearmodels.panel.results.PanelEffectsResults.f_statistic_robust"]], "fitted_values (linearmodels.panel.results.paneleffectsresults property)": [[589, "linearmodels.panel.results.PanelEffectsResults.fitted_values"]], "idiosyncratic (linearmodels.panel.results.paneleffectsresults property)": [[590, "linearmodels.panel.results.PanelEffectsResults.idiosyncratic"]], "included_effects (linearmodels.panel.results.paneleffectsresults property)": [[591, "linearmodels.panel.results.PanelEffectsResults.included_effects"]], "loglik (linearmodels.panel.results.paneleffectsresults property)": [[592, "linearmodels.panel.results.PanelEffectsResults.loglik"]], "model_ss (linearmodels.panel.results.paneleffectsresults property)": [[593, "linearmodels.panel.results.PanelEffectsResults.model_ss"]], "name (linearmodels.panel.results.paneleffectsresults property)": [[594, "linearmodels.panel.results.PanelEffectsResults.name"]], "nobs (linearmodels.panel.results.paneleffectsresults property)": [[595, "linearmodels.panel.results.PanelEffectsResults.nobs"]], "other_info (linearmodels.panel.results.paneleffectsresults property)": [[596, "linearmodels.panel.results.PanelEffectsResults.other_info"]], "params (linearmodels.panel.results.paneleffectsresults property)": [[597, "linearmodels.panel.results.PanelEffectsResults.params"]], "predict() (linearmodels.panel.results.paneleffectsresults method)": [[598, "linearmodels.panel.results.PanelEffectsResults.predict"]], "pvalues (linearmodels.panel.results.paneleffectsresults property)": [[599, "linearmodels.panel.results.PanelEffectsResults.pvalues"]], "resid_ss (linearmodels.panel.results.paneleffectsresults property)": [[600, "linearmodels.panel.results.PanelEffectsResults.resid_ss"]], "resids (linearmodels.panel.results.paneleffectsresults property)": [[601, "linearmodels.panel.results.PanelEffectsResults.resids"]], "rsquared (linearmodels.panel.results.paneleffectsresults property)": [[602, "linearmodels.panel.results.PanelEffectsResults.rsquared"]], "rsquared_between (linearmodels.panel.results.paneleffectsresults property)": [[603, "linearmodels.panel.results.PanelEffectsResults.rsquared_between"]], "rsquared_inclusive (linearmodels.panel.results.paneleffectsresults property)": [[604, "linearmodels.panel.results.PanelEffectsResults.rsquared_inclusive"]], "rsquared_overall (linearmodels.panel.results.paneleffectsresults property)": [[605, "linearmodels.panel.results.PanelEffectsResults.rsquared_overall"]], "rsquared_within (linearmodels.panel.results.paneleffectsresults property)": [[606, "linearmodels.panel.results.PanelEffectsResults.rsquared_within"]], "s2 (linearmodels.panel.results.paneleffectsresults property)": [[607, "linearmodels.panel.results.PanelEffectsResults.s2"]], "std_errors (linearmodels.panel.results.paneleffectsresults property)": [[608, "linearmodels.panel.results.PanelEffectsResults.std_errors"]], "summary (linearmodels.panel.results.paneleffectsresults property)": [[609, "linearmodels.panel.results.PanelEffectsResults.summary"]], "time_info (linearmodels.panel.results.paneleffectsresults property)": [[610, "linearmodels.panel.results.PanelEffectsResults.time_info"]], "total_ss (linearmodels.panel.results.paneleffectsresults property)": [[611, "linearmodels.panel.results.PanelEffectsResults.total_ss"]], "tstats (linearmodels.panel.results.paneleffectsresults property)": [[612, "linearmodels.panel.results.PanelEffectsResults.tstats"]], "variance_decomposition (linearmodels.panel.results.paneleffectsresults property)": [[613, "linearmodels.panel.results.PanelEffectsResults.variance_decomposition"]], "wald_test() (linearmodels.panel.results.paneleffectsresults method)": [[614, "linearmodels.panel.results.PanelEffectsResults.wald_test"]], "wresids (linearmodels.panel.results.paneleffectsresults property)": [[615, "linearmodels.panel.results.PanelEffectsResults.wresids"]], "panelmodelcomparison (class in linearmodels.panel.results)": [[616, "linearmodels.panel.results.PanelModelComparison"]], "cov_estimator (linearmodels.panel.results.panelmodelcomparison property)": [[617, "linearmodels.panel.results.PanelModelComparison.cov_estimator"]], "estimator_method (linearmodels.panel.results.panelmodelcomparison property)": [[618, "linearmodels.panel.results.PanelModelComparison.estimator_method"]], "f_statistic (linearmodels.panel.results.panelmodelcomparison property)": [[619, "linearmodels.panel.results.PanelModelComparison.f_statistic"]], "nobs (linearmodels.panel.results.panelmodelcomparison property)": [[620, "linearmodels.panel.results.PanelModelComparison.nobs"]], "params (linearmodels.panel.results.panelmodelcomparison property)": [[621, "linearmodels.panel.results.PanelModelComparison.params"]], "pvalues (linearmodels.panel.results.panelmodelcomparison property)": [[622, "linearmodels.panel.results.PanelModelComparison.pvalues"]], "rsquared (linearmodels.panel.results.panelmodelcomparison property)": [[623, "linearmodels.panel.results.PanelModelComparison.rsquared"]], "rsquared_between (linearmodels.panel.results.panelmodelcomparison property)": [[624, "linearmodels.panel.results.PanelModelComparison.rsquared_between"]], "rsquared_overall (linearmodels.panel.results.panelmodelcomparison property)": [[625, "linearmodels.panel.results.PanelModelComparison.rsquared_overall"]], "rsquared_within (linearmodels.panel.results.panelmodelcomparison property)": [[626, "linearmodels.panel.results.PanelModelComparison.rsquared_within"]], "std_errors (linearmodels.panel.results.panelmodelcomparison property)": [[627, "linearmodels.panel.results.PanelModelComparison.std_errors"]], "summary (linearmodels.panel.results.panelmodelcomparison property)": [[628, "linearmodels.panel.results.PanelModelComparison.summary"]], "tstats (linearmodels.panel.results.panelmodelcomparison property)": [[629, "linearmodels.panel.results.PanelModelComparison.tstats"]], "panelresults (class in linearmodels.panel.results)": [[630, "linearmodels.panel.results.PanelResults"]], "conf_int() (linearmodels.panel.results.panelresults method)": [[631, "linearmodels.panel.results.PanelResults.conf_int"]], "corr_squared_between (linearmodels.panel.results.panelresults property)": [[632, "linearmodels.panel.results.PanelResults.corr_squared_between"]], "corr_squared_overall (linearmodels.panel.results.panelresults property)": [[633, "linearmodels.panel.results.PanelResults.corr_squared_overall"]], "corr_squared_within (linearmodels.panel.results.panelresults property)": [[634, "linearmodels.panel.results.PanelResults.corr_squared_within"]], "cov (linearmodels.panel.results.panelresults property)": [[635, "linearmodels.panel.results.PanelResults.cov"]], "df_model (linearmodels.panel.results.panelresults property)": [[636, "linearmodels.panel.results.PanelResults.df_model"]], "df_resid (linearmodels.panel.results.panelresults property)": [[637, "linearmodels.panel.results.PanelResults.df_resid"]], "entity_info (linearmodels.panel.results.panelresults property)": [[638, "linearmodels.panel.results.PanelResults.entity_info"]], "estimated_effects (linearmodels.panel.results.panelresults property)": [[639, "linearmodels.panel.results.PanelResults.estimated_effects"]], "f_statistic (linearmodels.panel.results.panelresults property)": [[640, "linearmodels.panel.results.PanelResults.f_statistic"]], "f_statistic_robust (linearmodels.panel.results.panelresults property)": [[641, "linearmodels.panel.results.PanelResults.f_statistic_robust"]], "fitted_values (linearmodels.panel.results.panelresults property)": [[642, "linearmodels.panel.results.PanelResults.fitted_values"]], "idiosyncratic (linearmodels.panel.results.panelresults property)": [[643, "linearmodels.panel.results.PanelResults.idiosyncratic"]], "loglik (linearmodels.panel.results.panelresults property)": [[644, "linearmodels.panel.results.PanelResults.loglik"]], "model_ss (linearmodels.panel.results.panelresults property)": [[645, "linearmodels.panel.results.PanelResults.model_ss"]], "name (linearmodels.panel.results.panelresults property)": [[646, "linearmodels.panel.results.PanelResults.name"]], "nobs (linearmodels.panel.results.panelresults property)": [[647, "linearmodels.panel.results.PanelResults.nobs"]], "params (linearmodels.panel.results.panelresults property)": [[648, "linearmodels.panel.results.PanelResults.params"]], "predict() (linearmodels.panel.results.panelresults method)": [[649, "linearmodels.panel.results.PanelResults.predict"]], "pvalues (linearmodels.panel.results.panelresults property)": [[650, "linearmodels.panel.results.PanelResults.pvalues"]], "resid_ss (linearmodels.panel.results.panelresults property)": [[651, "linearmodels.panel.results.PanelResults.resid_ss"]], "resids (linearmodels.panel.results.panelresults property)": [[652, "linearmodels.panel.results.PanelResults.resids"]], "rsquared (linearmodels.panel.results.panelresults property)": [[653, "linearmodels.panel.results.PanelResults.rsquared"]], "rsquared_between (linearmodels.panel.results.panelresults property)": [[654, "linearmodels.panel.results.PanelResults.rsquared_between"]], "rsquared_overall (linearmodels.panel.results.panelresults property)": [[655, "linearmodels.panel.results.PanelResults.rsquared_overall"]], "rsquared_within (linearmodels.panel.results.panelresults property)": [[656, "linearmodels.panel.results.PanelResults.rsquared_within"]], "s2 (linearmodels.panel.results.panelresults property)": [[657, "linearmodels.panel.results.PanelResults.s2"]], "std_errors (linearmodels.panel.results.panelresults property)": [[658, "linearmodels.panel.results.PanelResults.std_errors"]], "summary (linearmodels.panel.results.panelresults property)": [[659, "linearmodels.panel.results.PanelResults.summary"]], "time_info (linearmodels.panel.results.panelresults property)": [[660, "linearmodels.panel.results.PanelResults.time_info"]], "total_ss (linearmodels.panel.results.panelresults property)": [[661, "linearmodels.panel.results.PanelResults.total_ss"]], "tstats (linearmodels.panel.results.panelresults property)": [[662, "linearmodels.panel.results.PanelResults.tstats"]], "wald_test() (linearmodels.panel.results.panelresults method)": [[663, "linearmodels.panel.results.PanelResults.wald_test"]], "wresids (linearmodels.panel.results.panelresults property)": [[664, "linearmodels.panel.results.PanelResults.wresids"]], "randomeffectsresults (class in linearmodels.panel.results)": [[665, "linearmodels.panel.results.RandomEffectsResults"]], "conf_int() (linearmodels.panel.results.randomeffectsresults method)": [[666, "linearmodels.panel.results.RandomEffectsResults.conf_int"]], "corr_squared_between (linearmodels.panel.results.randomeffectsresults property)": [[667, "linearmodels.panel.results.RandomEffectsResults.corr_squared_between"]], "corr_squared_overall (linearmodels.panel.results.randomeffectsresults property)": [[668, "linearmodels.panel.results.RandomEffectsResults.corr_squared_overall"]], "corr_squared_within (linearmodels.panel.results.randomeffectsresults property)": [[669, "linearmodels.panel.results.RandomEffectsResults.corr_squared_within"]], "cov (linearmodels.panel.results.randomeffectsresults property)": [[670, "linearmodels.panel.results.RandomEffectsResults.cov"]], "df_model (linearmodels.panel.results.randomeffectsresults property)": [[671, "linearmodels.panel.results.RandomEffectsResults.df_model"]], "df_resid (linearmodels.panel.results.randomeffectsresults property)": [[672, "linearmodels.panel.results.RandomEffectsResults.df_resid"]], "entity_info (linearmodels.panel.results.randomeffectsresults property)": [[673, "linearmodels.panel.results.RandomEffectsResults.entity_info"]], "estimated_effects (linearmodels.panel.results.randomeffectsresults property)": [[674, "linearmodels.panel.results.RandomEffectsResults.estimated_effects"]], "f_statistic (linearmodels.panel.results.randomeffectsresults property)": [[675, "linearmodels.panel.results.RandomEffectsResults.f_statistic"]], "f_statistic_robust (linearmodels.panel.results.randomeffectsresults property)": [[676, "linearmodels.panel.results.RandomEffectsResults.f_statistic_robust"]], "fitted_values (linearmodels.panel.results.randomeffectsresults property)": [[677, "linearmodels.panel.results.RandomEffectsResults.fitted_values"]], "idiosyncratic (linearmodels.panel.results.randomeffectsresults property)": [[678, "linearmodels.panel.results.RandomEffectsResults.idiosyncratic"]], "loglik (linearmodels.panel.results.randomeffectsresults property)": [[679, "linearmodels.panel.results.RandomEffectsResults.loglik"]], "model_ss (linearmodels.panel.results.randomeffectsresults property)": [[680, "linearmodels.panel.results.RandomEffectsResults.model_ss"]], "name (linearmodels.panel.results.randomeffectsresults property)": [[681, "linearmodels.panel.results.RandomEffectsResults.name"]], "nobs (linearmodels.panel.results.randomeffectsresults property)": [[682, "linearmodels.panel.results.RandomEffectsResults.nobs"]], "params (linearmodels.panel.results.randomeffectsresults property)": [[683, "linearmodels.panel.results.RandomEffectsResults.params"]], "predict() (linearmodels.panel.results.randomeffectsresults method)": [[684, "linearmodels.panel.results.RandomEffectsResults.predict"]], "pvalues (linearmodels.panel.results.randomeffectsresults property)": [[685, "linearmodels.panel.results.RandomEffectsResults.pvalues"]], "resid_ss (linearmodels.panel.results.randomeffectsresults property)": [[686, "linearmodels.panel.results.RandomEffectsResults.resid_ss"]], "resids (linearmodels.panel.results.randomeffectsresults property)": [[687, "linearmodels.panel.results.RandomEffectsResults.resids"]], "rsquared (linearmodels.panel.results.randomeffectsresults property)": [[688, "linearmodels.panel.results.RandomEffectsResults.rsquared"]], "rsquared_between (linearmodels.panel.results.randomeffectsresults property)": [[689, "linearmodels.panel.results.RandomEffectsResults.rsquared_between"]], "rsquared_overall (linearmodels.panel.results.randomeffectsresults property)": [[690, "linearmodels.panel.results.RandomEffectsResults.rsquared_overall"]], "rsquared_within (linearmodels.panel.results.randomeffectsresults property)": [[691, "linearmodels.panel.results.RandomEffectsResults.rsquared_within"]], "s2 (linearmodels.panel.results.randomeffectsresults property)": [[692, "linearmodels.panel.results.RandomEffectsResults.s2"]], "std_errors (linearmodels.panel.results.randomeffectsresults property)": [[693, "linearmodels.panel.results.RandomEffectsResults.std_errors"]], "summary (linearmodels.panel.results.randomeffectsresults property)": [[694, "linearmodels.panel.results.RandomEffectsResults.summary"]], "theta (linearmodels.panel.results.randomeffectsresults property)": [[695, "linearmodels.panel.results.RandomEffectsResults.theta"]], "time_info (linearmodels.panel.results.randomeffectsresults property)": [[696, "linearmodels.panel.results.RandomEffectsResults.time_info"]], "total_ss (linearmodels.panel.results.randomeffectsresults property)": [[697, "linearmodels.panel.results.RandomEffectsResults.total_ss"]], "tstats (linearmodels.panel.results.randomeffectsresults property)": [[698, "linearmodels.panel.results.RandomEffectsResults.tstats"]], "variance_decomposition (linearmodels.panel.results.randomeffectsresults property)": [[699, "linearmodels.panel.results.RandomEffectsResults.variance_decomposition"]], "wald_test() (linearmodels.panel.results.randomeffectsresults method)": [[700, "linearmodels.panel.results.RandomEffectsResults.wald_test"]], "wresids (linearmodels.panel.results.randomeffectsresults property)": [[701, "linearmodels.panel.results.RandomEffectsResults.wresids"]], "compare() (in module linearmodels.panel.results)": [[702, "linearmodels.panel.results.compare"]], "panelmodeldata (class in linearmodels.panel.utility)": [[703, "linearmodels.panel.utility.PanelModelData"]], "clusters (linearmodels.panel.utility.panelmodeldata attribute)": [[704, "linearmodels.panel.utility.PanelModelData.clusters"]], "count() (linearmodels.panel.utility.panelmodeldata method)": [[705, "linearmodels.panel.utility.PanelModelData.count"]], "data (linearmodels.panel.utility.panelmodeldata attribute)": [[706, "linearmodels.panel.utility.PanelModelData.data"]], "index() (linearmodels.panel.utility.panelmodeldata method)": [[707, "linearmodels.panel.utility.PanelModelData.index"]], "other_effects (linearmodels.panel.utility.panelmodeldata attribute)": [[708, "linearmodels.panel.utility.PanelModelData.other_effects"]], "weights (linearmodels.panel.utility.panelmodeldata attribute)": [[709, "linearmodels.panel.utility.PanelModelData.weights"]], "generate_panel_data() (in module linearmodels.panel.utility)": [[710, "linearmodels.panel.utility.generate_panel_data"]], "linearmodels.panel.covariance": [[711, "module-linearmodels.panel.covariance"]], "linearmodels.panel.data": [[711, "module-linearmodels.panel.data"]], "linearmodels.panel.model": [[711, "module-linearmodels.panel.model"]], "linearmodels.panel.results": [[711, "module-linearmodels.panel.results"]], "linearmodels.panel.utility": [[711, "module-linearmodels.panel.utility"]], "linearmodels.system.covariance": [[719, "module-linearmodels.system.covariance"]], "linearmodels.system.gmm": [[719, "module-linearmodels.system.gmm"]], "linearmodels.system.model": [[719, "module-linearmodels.system.model"]], "linearmodels.system.results": [[719, "module-linearmodels.system.results"]], "clusteredcovariance (class in linearmodels.system.covariance)": [[720, "linearmodels.system.covariance.ClusteredCovariance"]], "cov (linearmodels.system.covariance.clusteredcovariance property)": [[721, "linearmodels.system.covariance.ClusteredCovariance.cov"]], "cov_config (linearmodels.system.covariance.clusteredcovariance property)": [[722, "linearmodels.system.covariance.ClusteredCovariance.cov_config"]], "sigma (linearmodels.system.covariance.clusteredcovariance property)": [[723, "linearmodels.system.covariance.ClusteredCovariance.sigma"]], "gmmheteroskedasticcovariance (class in linearmodels.system.covariance)": [[724, "linearmodels.system.covariance.GMMHeteroskedasticCovariance"]], "cov (linearmodels.system.covariance.gmmheteroskedasticcovariance property)": [[725, "linearmodels.system.covariance.GMMHeteroskedasticCovariance.cov"]], "cov_config (linearmodels.system.covariance.gmmheteroskedasticcovariance property)": [[726, "linearmodels.system.covariance.GMMHeteroskedasticCovariance.cov_config"]], "gmmhomoskedasticcovariance (class in linearmodels.system.covariance)": [[727, "linearmodels.system.covariance.GMMHomoskedasticCovariance"]], "cov (linearmodels.system.covariance.gmmhomoskedasticcovariance property)": [[728, "linearmodels.system.covariance.GMMHomoskedasticCovariance.cov"]], "cov_config (linearmodels.system.covariance.gmmhomoskedasticcovariance property)": [[729, "linearmodels.system.covariance.GMMHomoskedasticCovariance.cov_config"]], "gmmkernelcovariance (class in linearmodels.system.covariance)": [[730, "linearmodels.system.covariance.GMMKernelCovariance"]], "bandwidth (linearmodels.system.covariance.gmmkernelcovariance property)": [[731, "linearmodels.system.covariance.GMMKernelCovariance.bandwidth"]], "cov (linearmodels.system.covariance.gmmkernelcovariance property)": [[732, "linearmodels.system.covariance.GMMKernelCovariance.cov"]], "cov_config (linearmodels.system.covariance.gmmkernelcovariance property)": [[733, "linearmodels.system.covariance.GMMKernelCovariance.cov_config"]], "kernel (linearmodels.system.covariance.gmmkernelcovariance property)": [[734, "linearmodels.system.covariance.GMMKernelCovariance.kernel"]], "heteroskedasticcovariance (class in linearmodels.system.covariance)": [[735, "linearmodels.system.covariance.HeteroskedasticCovariance"]], "cov (linearmodels.system.covariance.heteroskedasticcovariance property)": [[736, "linearmodels.system.covariance.HeteroskedasticCovariance.cov"]], "cov_config (linearmodels.system.covariance.heteroskedasticcovariance property)": [[737, "linearmodels.system.covariance.HeteroskedasticCovariance.cov_config"]], "sigma (linearmodels.system.covariance.heteroskedasticcovariance property)": [[738, "linearmodels.system.covariance.HeteroskedasticCovariance.sigma"]], "homoskedasticcovariance (class in linearmodels.system.covariance)": [[739, "linearmodels.system.covariance.HomoskedasticCovariance"]], "cov (linearmodels.system.covariance.homoskedasticcovariance property)": [[740, "linearmodels.system.covariance.HomoskedasticCovariance.cov"]], "cov_config (linearmodels.system.covariance.homoskedasticcovariance property)": [[741, "linearmodels.system.covariance.HomoskedasticCovariance.cov_config"]], "sigma (linearmodels.system.covariance.homoskedasticcovariance property)": [[742, "linearmodels.system.covariance.HomoskedasticCovariance.sigma"]], "kernelcovariance (class in linearmodels.system.covariance)": [[743, "linearmodels.system.covariance.KernelCovariance"]], "bandwidth (linearmodels.system.covariance.kernelcovariance property)": [[744, "linearmodels.system.covariance.KernelCovariance.bandwidth"]], "cov (linearmodels.system.covariance.kernelcovariance property)": [[745, "linearmodels.system.covariance.KernelCovariance.cov"]], "cov_config (linearmodels.system.covariance.kernelcovariance property)": [[746, "linearmodels.system.covariance.KernelCovariance.cov_config"]], "kernel (linearmodels.system.covariance.kernelcovariance property)": [[747, "linearmodels.system.covariance.KernelCovariance.kernel"]], "sigma (linearmodels.system.covariance.kernelcovariance property)": [[748, "linearmodels.system.covariance.KernelCovariance.sigma"]], "heteroskedasticweightmatrix (class in linearmodels.system.gmm)": [[749, "linearmodels.system.gmm.HeteroskedasticWeightMatrix"]], "config (linearmodels.system.gmm.heteroskedasticweightmatrix property)": [[750, "linearmodels.system.gmm.HeteroskedasticWeightMatrix.config"]], "sigma() (linearmodels.system.gmm.heteroskedasticweightmatrix method)": [[751, "linearmodels.system.gmm.HeteroskedasticWeightMatrix.sigma"]], "weight_matrix() (linearmodels.system.gmm.heteroskedasticweightmatrix method)": [[752, "linearmodels.system.gmm.HeteroskedasticWeightMatrix.weight_matrix"]], "homoskedasticweightmatrix (class in linearmodels.system.gmm)": [[753, "linearmodels.system.gmm.HomoskedasticWeightMatrix"]], "config (linearmodels.system.gmm.homoskedasticweightmatrix property)": [[754, "linearmodels.system.gmm.HomoskedasticWeightMatrix.config"]], "sigma() (linearmodels.system.gmm.homoskedasticweightmatrix method)": [[755, "linearmodels.system.gmm.HomoskedasticWeightMatrix.sigma"]], "weight_matrix() (linearmodels.system.gmm.homoskedasticweightmatrix method)": [[756, "linearmodels.system.gmm.HomoskedasticWeightMatrix.weight_matrix"]], "kernelweightmatrix (class in linearmodels.system.gmm)": [[757, "linearmodels.system.gmm.KernelWeightMatrix"]], "bandwidth (linearmodels.system.gmm.kernelweightmatrix property)": [[758, "linearmodels.system.gmm.KernelWeightMatrix.bandwidth"]], "config (linearmodels.system.gmm.kernelweightmatrix property)": [[759, "linearmodels.system.gmm.KernelWeightMatrix.config"]], "kernel (linearmodels.system.gmm.kernelweightmatrix property)": [[760, "linearmodels.system.gmm.KernelWeightMatrix.kernel"]], "sigma() (linearmodels.system.gmm.kernelweightmatrix method)": [[761, "linearmodels.system.gmm.KernelWeightMatrix.sigma"]], "weight_matrix() (linearmodels.system.gmm.kernelweightmatrix method)": [[762, "linearmodels.system.gmm.KernelWeightMatrix.weight_matrix"]], "iv3sls (class in linearmodels.system.model)": [[763, "linearmodels.system.model.IV3SLS"]], "add_constraints() (linearmodels.system.model.iv3sls method)": [[764, "linearmodels.system.model.IV3SLS.add_constraints"]], "constraints (linearmodels.system.model.iv3sls property)": [[765, "linearmodels.system.model.IV3SLS.constraints"]], "fit() (linearmodels.system.model.iv3sls method)": [[766, "linearmodels.system.model.IV3SLS.fit"]], "formula (linearmodels.system.model.iv3sls property)": [[767, "linearmodels.system.model.IV3SLS.formula"]], "from_formula() (linearmodels.system.model.iv3sls class method)": [[768, "linearmodels.system.model.IV3SLS.from_formula"]], "has_constant (linearmodels.system.model.iv3sls property)": [[769, "linearmodels.system.model.IV3SLS.has_constant"]], "multivariate_iv() (linearmodels.system.model.iv3sls class method)": [[770, "linearmodels.system.model.IV3SLS.multivariate_iv"]], "param_names (linearmodels.system.model.iv3sls property)": [[771, "linearmodels.system.model.IV3SLS.param_names"]], "predict() (linearmodels.system.model.iv3sls method)": [[772, "linearmodels.system.model.IV3SLS.predict"]], "reset_constraints() (linearmodels.system.model.iv3sls method)": [[773, "linearmodels.system.model.IV3SLS.reset_constraints"]], "ivsystemgmm (class in linearmodels.system.model)": [[774, "linearmodels.system.model.IVSystemGMM"]], "add_constraints() (linearmodels.system.model.ivsystemgmm method)": [[775, "linearmodels.system.model.IVSystemGMM.add_constraints"]], "constraints (linearmodels.system.model.ivsystemgmm property)": [[776, "linearmodels.system.model.IVSystemGMM.constraints"]], "fit() (linearmodels.system.model.ivsystemgmm method)": [[777, "linearmodels.system.model.IVSystemGMM.fit"]], "formula (linearmodels.system.model.ivsystemgmm property)": [[778, "linearmodels.system.model.IVSystemGMM.formula"]], "from_formula() (linearmodels.system.model.ivsystemgmm class method)": [[779, "linearmodels.system.model.IVSystemGMM.from_formula"]], "has_constant (linearmodels.system.model.ivsystemgmm property)": [[780, "linearmodels.system.model.IVSystemGMM.has_constant"]], "param_names (linearmodels.system.model.ivsystemgmm property)": [[781, "linearmodels.system.model.IVSystemGMM.param_names"]], "predict() (linearmodels.system.model.ivsystemgmm method)": [[782, "linearmodels.system.model.IVSystemGMM.predict"]], "reset_constraints() (linearmodels.system.model.ivsystemgmm method)": [[783, "linearmodels.system.model.IVSystemGMM.reset_constraints"]], "linearconstraint (class in linearmodels.system.model)": [[784, "linearmodels.system.model.LinearConstraint"]], "a (linearmodels.system.model.linearconstraint property)": [[785, "linearmodels.system.model.LinearConstraint.a"]], "q (linearmodels.system.model.linearconstraint property)": [[786, "linearmodels.system.model.LinearConstraint.q"]], "r (linearmodels.system.model.linearconstraint property)": [[787, "linearmodels.system.model.LinearConstraint.r"]], "t (linearmodels.system.model.linearconstraint property)": [[788, "linearmodels.system.model.LinearConstraint.t"]], "sur (class in linearmodels.system.model)": [[789, "linearmodels.system.model.SUR"]], "add_constraints() (linearmodels.system.model.sur method)": [[790, "linearmodels.system.model.SUR.add_constraints"]], "constraints (linearmodels.system.model.sur property)": [[791, "linearmodels.system.model.SUR.constraints"]], "fit() (linearmodels.system.model.sur method)": [[792, "linearmodels.system.model.SUR.fit"]], "formula (linearmodels.system.model.sur property)": [[793, "linearmodels.system.model.SUR.formula"]], "from_formula() (linearmodels.system.model.sur class method)": [[794, "linearmodels.system.model.SUR.from_formula"]], "has_constant (linearmodels.system.model.sur property)": [[795, "linearmodels.system.model.SUR.has_constant"]], "multivariate_ls() (linearmodels.system.model.sur class method)": [[796, "linearmodels.system.model.SUR.multivariate_ls"]], "param_names (linearmodels.system.model.sur property)": [[797, "linearmodels.system.model.SUR.param_names"]], "predict() (linearmodels.system.model.sur method)": [[798, "linearmodels.system.model.SUR.predict"]], "reset_constraints() (linearmodels.system.model.sur method)": [[799, "linearmodels.system.model.SUR.reset_constraints"]], "gmmsystemresults (class in linearmodels.system.results)": [[800, "linearmodels.system.results.GMMSystemResults"]], "breusch_pagan() (linearmodels.system.results.gmmsystemresults method)": [[801, "linearmodels.system.results.GMMSystemResults.breusch_pagan"]], "conf_int() (linearmodels.system.results.gmmsystemresults method)": [[802, "linearmodels.system.results.GMMSystemResults.conf_int"]], "cov (linearmodels.system.results.gmmsystemresults property)": [[803, "linearmodels.system.results.GMMSystemResults.cov"]], "cov_config (linearmodels.system.results.gmmsystemresults property)": [[804, "linearmodels.system.results.GMMSystemResults.cov_config"]], "cov_estimator (linearmodels.system.results.gmmsystemresults property)": [[805, "linearmodels.system.results.GMMSystemResults.cov_estimator"]], "debiased (linearmodels.system.results.gmmsystemresults property)": [[806, "linearmodels.system.results.GMMSystemResults.debiased"]], "df_model (linearmodels.system.results.gmmsystemresults property)": [[807, "linearmodels.system.results.GMMSystemResults.df_model"]], "df_resid (linearmodels.system.results.gmmsystemresults property)": [[808, "linearmodels.system.results.GMMSystemResults.df_resid"]], "equation_labels (linearmodels.system.results.gmmsystemresults property)": [[809, "linearmodels.system.results.GMMSystemResults.equation_labels"]], "equations (linearmodels.system.results.gmmsystemresults property)": [[810, "linearmodels.system.results.GMMSystemResults.equations"]], "fitted_values (linearmodels.system.results.gmmsystemresults property)": [[811, "linearmodels.system.results.GMMSystemResults.fitted_values"]], "iterations (linearmodels.system.results.gmmsystemresults property)": [[812, "linearmodels.system.results.GMMSystemResults.iterations"]], "j_stat (linearmodels.system.results.gmmsystemresults property)": [[813, "linearmodels.system.results.GMMSystemResults.j_stat"]], "likelihood_ratio() (linearmodels.system.results.gmmsystemresults method)": [[814, "linearmodels.system.results.GMMSystemResults.likelihood_ratio"]], "method (linearmodels.system.results.gmmsystemresults property)": [[815, "linearmodels.system.results.GMMSystemResults.method"]], "model (linearmodels.system.results.gmmsystemresults property)": [[816, "linearmodels.system.results.GMMSystemResults.model"]], "model_ss (linearmodels.system.results.gmmsystemresults property)": [[817, "linearmodels.system.results.GMMSystemResults.model_ss"]], "nobs (linearmodels.system.results.gmmsystemresults property)": [[818, "linearmodels.system.results.GMMSystemResults.nobs"]], "params (linearmodels.system.results.gmmsystemresults property)": [[819, "linearmodels.system.results.GMMSystemResults.params"]], "predict() (linearmodels.system.results.gmmsystemresults method)": [[820, "linearmodels.system.results.GMMSystemResults.predict"]], "pvalues (linearmodels.system.results.gmmsystemresults property)": [[821, "linearmodels.system.results.GMMSystemResults.pvalues"]], "resid_ss (linearmodels.system.results.gmmsystemresults property)": [[822, "linearmodels.system.results.GMMSystemResults.resid_ss"]], "resids (linearmodels.system.results.gmmsystemresults property)": [[823, "linearmodels.system.results.GMMSystemResults.resids"]], "rsquared (linearmodels.system.results.gmmsystemresults property)": [[824, "linearmodels.system.results.GMMSystemResults.rsquared"]], "sigma (linearmodels.system.results.gmmsystemresults property)": [[825, "linearmodels.system.results.GMMSystemResults.sigma"]], "std_errors (linearmodels.system.results.gmmsystemresults property)": [[826, "linearmodels.system.results.GMMSystemResults.std_errors"]], "summary (linearmodels.system.results.gmmsystemresults property)": [[827, "linearmodels.system.results.GMMSystemResults.summary"]], "system_rsquared (linearmodels.system.results.gmmsystemresults property)": [[828, "linearmodels.system.results.GMMSystemResults.system_rsquared"]], "total_ss (linearmodels.system.results.gmmsystemresults property)": [[829, "linearmodels.system.results.GMMSystemResults.total_ss"]], "tstats (linearmodels.system.results.gmmsystemresults property)": [[830, "linearmodels.system.results.GMMSystemResults.tstats"]], "w (linearmodels.system.results.gmmsystemresults property)": [[831, "linearmodels.system.results.GMMSystemResults.w"]], "weight_config (linearmodels.system.results.gmmsystemresults property)": [[832, "linearmodels.system.results.GMMSystemResults.weight_config"]], "weight_type (linearmodels.system.results.gmmsystemresults property)": [[833, "linearmodels.system.results.GMMSystemResults.weight_type"]], "wresids (linearmodels.system.results.gmmsystemresults property)": [[834, "linearmodels.system.results.GMMSystemResults.wresids"]], "systemresults (class in linearmodels.system.results)": [[835, "linearmodels.system.results.SystemResults"]], "breusch_pagan() (linearmodels.system.results.systemresults method)": [[836, "linearmodels.system.results.SystemResults.breusch_pagan"]], "conf_int() (linearmodels.system.results.systemresults method)": [[837, "linearmodels.system.results.SystemResults.conf_int"]], "cov (linearmodels.system.results.systemresults property)": [[838, "linearmodels.system.results.SystemResults.cov"]], "cov_config (linearmodels.system.results.systemresults property)": [[839, "linearmodels.system.results.SystemResults.cov_config"]], "cov_estimator (linearmodels.system.results.systemresults property)": [[840, "linearmodels.system.results.SystemResults.cov_estimator"]], "debiased (linearmodels.system.results.systemresults property)": [[841, "linearmodels.system.results.SystemResults.debiased"]], "df_model (linearmodels.system.results.systemresults property)": [[842, "linearmodels.system.results.SystemResults.df_model"]], "df_resid (linearmodels.system.results.systemresults property)": [[843, "linearmodels.system.results.SystemResults.df_resid"]], "equation_labels (linearmodels.system.results.systemresults property)": [[844, "linearmodels.system.results.SystemResults.equation_labels"]], "equations (linearmodels.system.results.systemresults property)": [[845, "linearmodels.system.results.SystemResults.equations"]], "fitted_values (linearmodels.system.results.systemresults property)": [[846, "linearmodels.system.results.SystemResults.fitted_values"]], "iterations (linearmodels.system.results.systemresults property)": [[847, "linearmodels.system.results.SystemResults.iterations"]], "likelihood_ratio() (linearmodels.system.results.systemresults method)": [[848, "linearmodels.system.results.SystemResults.likelihood_ratio"]], "method (linearmodels.system.results.systemresults property)": [[849, "linearmodels.system.results.SystemResults.method"]], "model (linearmodels.system.results.systemresults property)": [[850, "linearmodels.system.results.SystemResults.model"]], "model_ss (linearmodels.system.results.systemresults property)": [[851, "linearmodels.system.results.SystemResults.model_ss"]], "nobs (linearmodels.system.results.systemresults property)": [[852, "linearmodels.system.results.SystemResults.nobs"]], "params (linearmodels.system.results.systemresults property)": [[853, "linearmodels.system.results.SystemResults.params"]], "predict() (linearmodels.system.results.systemresults method)": [[854, "linearmodels.system.results.SystemResults.predict"]], "pvalues (linearmodels.system.results.systemresults property)": [[855, "linearmodels.system.results.SystemResults.pvalues"]], "resid_ss (linearmodels.system.results.systemresults property)": [[856, "linearmodels.system.results.SystemResults.resid_ss"]], "resids (linearmodels.system.results.systemresults property)": [[857, "linearmodels.system.results.SystemResults.resids"]], "rsquared (linearmodels.system.results.systemresults property)": [[858, "linearmodels.system.results.SystemResults.rsquared"]], "sigma (linearmodels.system.results.systemresults property)": [[859, "linearmodels.system.results.SystemResults.sigma"]], "std_errors (linearmodels.system.results.systemresults property)": [[860, "linearmodels.system.results.SystemResults.std_errors"]], "summary (linearmodels.system.results.systemresults property)": [[861, "linearmodels.system.results.SystemResults.summary"]], "system_rsquared (linearmodels.system.results.systemresults property)": [[862, "linearmodels.system.results.SystemResults.system_rsquared"]], "total_ss (linearmodels.system.results.systemresults property)": [[863, "linearmodels.system.results.SystemResults.total_ss"]], "tstats (linearmodels.system.results.systemresults property)": [[864, "linearmodels.system.results.SystemResults.tstats"]], "wresids (linearmodels.system.results.systemresults property)": [[865, "linearmodels.system.results.SystemResults.wresids"]], "linearmodels.utility": [[866, "module-linearmodels.utility"]], "cov_cluster() (in module linearmodels.shared.covariance)": [[867, "linearmodels.shared.covariance.cov_cluster"]], "cov_kernel() (in module linearmodels.shared.covariance)": [[868, "linearmodels.shared.covariance.cov_kernel"]], "group_debias_coefficient() (in module linearmodels.shared.covariance)": [[869, "linearmodels.shared.covariance.group_debias_coefficient"]], "invalidteststatistic (class in linearmodels.shared.hypotheses)": [[870, "linearmodels.shared.hypotheses.InvalidTestStatistic"]], "critical_values (linearmodels.shared.hypotheses.invalidteststatistic property)": [[871, "linearmodels.shared.hypotheses.InvalidTestStatistic.critical_values"]], "null (linearmodels.shared.hypotheses.invalidteststatistic property)": [[872, "linearmodels.shared.hypotheses.InvalidTestStatistic.null"]], "pval (linearmodels.shared.hypotheses.invalidteststatistic property)": [[873, "linearmodels.shared.hypotheses.InvalidTestStatistic.pval"]], "stat (linearmodels.shared.hypotheses.invalidteststatistic property)": [[874, "linearmodels.shared.hypotheses.InvalidTestStatistic.stat"]], "waldteststatistic (class in linearmodels.shared.hypotheses)": [[875, "linearmodels.shared.hypotheses.WaldTestStatistic"]], "critical_values (linearmodels.shared.hypotheses.waldteststatistic property)": [[876, "linearmodels.shared.hypotheses.WaldTestStatistic.critical_values"]], "null (linearmodels.shared.hypotheses.waldteststatistic property)": [[877, "linearmodels.shared.hypotheses.WaldTestStatistic.null"]], "pval (linearmodels.shared.hypotheses.waldteststatistic property)": [[878, "linearmodels.shared.hypotheses.WaldTestStatistic.pval"]], "stat (linearmodels.shared.hypotheses.waldteststatistic property)": [[879, "linearmodels.shared.hypotheses.WaldTestStatistic.stat"]], "attrdict (class in linearmodels.shared.utility)": [[880, "linearmodels.shared.utility.AttrDict"]], "clear() (linearmodels.shared.utility.attrdict method)": [[881, "linearmodels.shared.utility.AttrDict.clear"]], "copy() (linearmodels.shared.utility.attrdict method)": [[882, "linearmodels.shared.utility.AttrDict.copy"]], "get() (linearmodels.shared.utility.attrdict method)": [[883, "linearmodels.shared.utility.AttrDict.get"]], "items() (linearmodels.shared.utility.attrdict method)": [[884, "linearmodels.shared.utility.AttrDict.items"]], "keys() (linearmodels.shared.utility.attrdict method)": [[885, "linearmodels.shared.utility.AttrDict.keys"]], "pop() (linearmodels.shared.utility.attrdict method)": [[886, "linearmodels.shared.utility.AttrDict.pop"]], "popitem() (linearmodels.shared.utility.attrdict method)": [[887, "linearmodels.shared.utility.AttrDict.popitem"]], "setdefault() (linearmodels.shared.utility.attrdict method)": [[888, "linearmodels.shared.utility.AttrDict.setdefault"]], "update() (linearmodels.shared.utility.attrdict method)": [[889, "linearmodels.shared.utility.AttrDict.update"]], "values() (linearmodels.shared.utility.attrdict method)": [[890, "linearmodels.shared.utility.AttrDict.values"]]}, "docurls": ["asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.config.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.cov.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.inv_jacobian.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.jacobian.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.s.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.HeteroskedasticCovariance.square.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.KernelCovariance.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.KernelCovariance.bandwidth.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.KernelCovariance.config.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.KernelCovariance.cov.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.KernelCovariance.inv_jacobian.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.KernelCovariance.jacobian.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.KernelCovariance.kernel.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.KernelCovariance.s.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.covariance.KernelCovariance.square.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.model.LinearFactorModel.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.model.LinearFactorModel.fit.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.model.LinearFactorModel.formula.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.model.LinearFactorModel.from_formula.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.model.LinearFactorModelGMM.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.model.LinearFactorModelGMM.fit.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.model.LinearFactorModelGMM.formula.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.model.LinearFactorModelGMM.from_formula.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.model.TradedFactorModel.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.model.TradedFactorModel.fit.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.model.TradedFactorModel.formula.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.model.TradedFactorModel.from_formula.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.alphas.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.betas.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.cov.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.cov_estimator.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.full_summary.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.iterations.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.j_statistic.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.name.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.nobs.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.params.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.pvalues.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.residual_ss.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.risk_premia.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.risk_premia_se.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.risk_premia_tstats.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.rsquared.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.std_errors.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.summary.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.total_ss.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.GMMFactorModelResults.tstats.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.alphas.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.betas.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.cov.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.cov_estimator.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.full_summary.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.j_statistic.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.name.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.nobs.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.params.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.pvalues.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.residual_ss.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.risk_premia.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.risk_premia_se.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.risk_premia_tstats.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.rsquared.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.std_errors.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.summary.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.total_ss.html", "asset-pricing/asset-pricing/linearmodels.asset_pricing.results.LinearFactorModelResults.tstats.html", "asset-pricing/examples/examples.html", "asset-pricing/examples/formulas.html", "asset-pricing/index.html", "asset-pricing/introduction.html", "asset-pricing/mathematical-formula.html", "asset-pricing/reference.html", "changes.html", "changes/3.0-2.0-1.0.html", "changes/4.0.html", "changes/5.0.html", "changes/6.0.html", "compatibility.html", "compatibility/linearmodels.compat.statsmodels.Summary.html", "compatibility/linearmodels.compat.statsmodels.Summary.add_extra_txt.html", "compatibility/linearmodels.compat.statsmodels.Summary.add_table_2cols.html", "compatibility/linearmodels.compat.statsmodels.Summary.add_table_params.html", "compatibility/linearmodels.compat.statsmodels.Summary.as_csv.html", "compatibility/linearmodels.compat.statsmodels.Summary.as_html.html", "compatibility/linearmodels.compat.statsmodels.Summary.as_latex.html", "compatibility/linearmodels.compat.statsmodels.Summary.as_text.html", "contributing.html", "index.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLS.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLS.absorbed_dependent.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLS.absorbed_exog.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLS.dependent.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLS.exog.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLS.fit.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLS.has_constant.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLS.instruments.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLS.resids.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLS.weights.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLS.wresids.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.absorbed_effects.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.absorbed_rsquared.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.conf_int.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.cov.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.cov_config.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.cov_estimator.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.cov_type.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.debiased.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.df_absorbed.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.df_model.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.df_resid.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.f_statistic.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.fitted_values.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.has_constant.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.idiosyncratic.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.method.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.model_ss.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.nobs.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.params.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.pvalues.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.resid_ss.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.resids.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.rsquared.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.rsquared_adj.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.s2.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.std_errors.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.summary.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.total_ss.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.tstats.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.wald_test.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingLSResults.wresids.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingRegressor.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingRegressor.approx_rank.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingRegressor.has_constant.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingRegressor.hash.html", "iv/absorbing/linearmodels.iv.absorbing.AbsorbingRegressor.regressors.html", "iv/absorbing/linearmodels.iv.absorbing.Interaction.html", "iv/absorbing/linearmodels.iv.absorbing.Interaction.cat.html", "iv/absorbing/linearmodels.iv.absorbing.Interaction.cont.html", "iv/absorbing/linearmodels.iv.absorbing.Interaction.drop.html", "iv/absorbing/linearmodels.iv.absorbing.Interaction.from_frame.html", "iv/absorbing/linearmodels.iv.absorbing.Interaction.hash.html", "iv/absorbing/linearmodels.iv.absorbing.Interaction.isnull.html", "iv/absorbing/linearmodels.iv.absorbing.Interaction.nobs.html", "iv/absorbing/linearmodels.iv.absorbing.Interaction.sparse.html", "iv/examples/absorbing-regression.html", "iv/examples/advanced-examples.html", "iv/examples/basic-examples.html", "iv/examples/using-formulas.html", "iv/index.html", "iv/introduction.html", "iv/iv/linearmodels.iv.covariance.ClusteredCovariance.html", "iv/iv/linearmodels.iv.covariance.ClusteredCovariance.config.html", "iv/iv/linearmodels.iv.covariance.ClusteredCovariance.cov.html", "iv/iv/linearmodels.iv.covariance.ClusteredCovariance.debiased.html", "iv/iv/linearmodels.iv.covariance.ClusteredCovariance.s.html", "iv/iv/linearmodels.iv.covariance.ClusteredCovariance.s2.html", "iv/iv/linearmodels.iv.covariance.HeteroskedasticCovariance.html", "iv/iv/linearmodels.iv.covariance.HeteroskedasticCovariance.config.html", "iv/iv/linearmodels.iv.covariance.HeteroskedasticCovariance.cov.html", "iv/iv/linearmodels.iv.covariance.HeteroskedasticCovariance.debiased.html", "iv/iv/linearmodels.iv.covariance.HeteroskedasticCovariance.s.html", "iv/iv/linearmodels.iv.covariance.HeteroskedasticCovariance.s2.html", "iv/iv/linearmodels.iv.covariance.HomoskedasticCovariance.html", "iv/iv/linearmodels.iv.covariance.HomoskedasticCovariance.config.html", "iv/iv/linearmodels.iv.covariance.HomoskedasticCovariance.cov.html", "iv/iv/linearmodels.iv.covariance.HomoskedasticCovariance.debiased.html", "iv/iv/linearmodels.iv.covariance.HomoskedasticCovariance.s.html", "iv/iv/linearmodels.iv.covariance.HomoskedasticCovariance.s2.html", "iv/iv/linearmodels.iv.covariance.KernelCovariance.html", "iv/iv/linearmodels.iv.covariance.KernelCovariance.config.html", "iv/iv/linearmodels.iv.covariance.KernelCovariance.cov.html", "iv/iv/linearmodels.iv.covariance.KernelCovariance.debiased.html", "iv/iv/linearmodels.iv.covariance.KernelCovariance.s.html", "iv/iv/linearmodels.iv.covariance.KernelCovariance.s2.html", "iv/iv/linearmodels.iv.covariance.kernel_optimal_bandwidth.html", "iv/iv/linearmodels.iv.covariance.kernel_weight_bartlett.html", "iv/iv/linearmodels.iv.covariance.kernel_weight_parzen.html", "iv/iv/linearmodels.iv.covariance.kernel_weight_quadratic_spectral.html", "iv/iv/linearmodels.iv.data.IVData.html", "iv/iv/linearmodels.iv.data.IVData.cols.html", "iv/iv/linearmodels.iv.data.IVData.drop.html", "iv/iv/linearmodels.iv.data.IVData.isnull.html", "iv/iv/linearmodels.iv.data.IVData.labels.html", "iv/iv/linearmodels.iv.data.IVData.ndarray.html", "iv/iv/linearmodels.iv.data.IVData.ndim.html", "iv/iv/linearmodels.iv.data.IVData.pandas.html", "iv/iv/linearmodels.iv.data.IVData.rows.html", "iv/iv/linearmodels.iv.data.IVData.shape.html", "iv/iv/linearmodels.iv.gmm.HeteroskedasticWeightMatrix.html", "iv/iv/linearmodels.iv.gmm.HeteroskedasticWeightMatrix.config.html", "iv/iv/linearmodels.iv.gmm.HeteroskedasticWeightMatrix.weight_matrix.html", "iv/iv/linearmodels.iv.gmm.HomoskedasticWeightMatrix.html", "iv/iv/linearmodels.iv.gmm.HomoskedasticWeightMatrix.config.html", "iv/iv/linearmodels.iv.gmm.HomoskedasticWeightMatrix.weight_matrix.html", "iv/iv/linearmodels.iv.gmm.IVGMMCovariance.html", "iv/iv/linearmodels.iv.gmm.IVGMMCovariance.config.html", "iv/iv/linearmodels.iv.gmm.IVGMMCovariance.cov.html", "iv/iv/linearmodels.iv.gmm.IVGMMCovariance.debiased.html", "iv/iv/linearmodels.iv.gmm.IVGMMCovariance.s.html", "iv/iv/linearmodels.iv.gmm.IVGMMCovariance.s2.html", "iv/iv/linearmodels.iv.gmm.KernelWeightMatrix.html", "iv/iv/linearmodels.iv.gmm.KernelWeightMatrix.bandwidth.html", "iv/iv/linearmodels.iv.gmm.KernelWeightMatrix.config.html", "iv/iv/linearmodels.iv.gmm.KernelWeightMatrix.weight_matrix.html", "iv/iv/linearmodels.iv.gmm.OneWayClusteredWeightMatrix.html", "iv/iv/linearmodels.iv.gmm.OneWayClusteredWeightMatrix.config.html", "iv/iv/linearmodels.iv.gmm.OneWayClusteredWeightMatrix.weight_matrix.html", "iv/iv/linearmodels.iv.model.IV2SLS.html", "iv/iv/linearmodels.iv.model.IV2SLS.estimate_parameters.html", "iv/iv/linearmodels.iv.model.IV2SLS.fit.html", "iv/iv/linearmodels.iv.model.IV2SLS.formula.html", "iv/iv/linearmodels.iv.model.IV2SLS.from_formula.html", "iv/iv/linearmodels.iv.model.IV2SLS.has_constant.html", "iv/iv/linearmodels.iv.model.IV2SLS.isnull.html", "iv/iv/linearmodels.iv.model.IV2SLS.notnull.html", "iv/iv/linearmodels.iv.model.IV2SLS.predict.html", "iv/iv/linearmodels.iv.model.IV2SLS.resids.html", "iv/iv/linearmodels.iv.model.IV2SLS.wresids.html", "iv/iv/linearmodels.iv.model.IVGMM.html", "iv/iv/linearmodels.iv.model.IVGMM.estimate_parameters.html", "iv/iv/linearmodels.iv.model.IVGMM.fit.html", "iv/iv/linearmodels.iv.model.IVGMM.formula.html", "iv/iv/linearmodels.iv.model.IVGMM.from_formula.html", "iv/iv/linearmodels.iv.model.IVGMM.has_constant.html", "iv/iv/linearmodels.iv.model.IVGMM.isnull.html", "iv/iv/linearmodels.iv.model.IVGMM.notnull.html", "iv/iv/linearmodels.iv.model.IVGMM.predict.html", "iv/iv/linearmodels.iv.model.IVGMM.resids.html", "iv/iv/linearmodels.iv.model.IVGMM.wresids.html", "iv/iv/linearmodels.iv.model.IVGMMCUE.html", "iv/iv/linearmodels.iv.model.IVGMMCUE.estimate_parameters.html", "iv/iv/linearmodels.iv.model.IVGMMCUE.fit.html", "iv/iv/linearmodels.iv.model.IVGMMCUE.formula.html", "iv/iv/linearmodels.iv.model.IVGMMCUE.from_formula.html", "iv/iv/linearmodels.iv.model.IVGMMCUE.has_constant.html", "iv/iv/linearmodels.iv.model.IVGMMCUE.isnull.html", "iv/iv/linearmodels.iv.model.IVGMMCUE.j.html", "iv/iv/linearmodels.iv.model.IVGMMCUE.notnull.html", "iv/iv/linearmodels.iv.model.IVGMMCUE.predict.html", "iv/iv/linearmodels.iv.model.IVGMMCUE.resids.html", "iv/iv/linearmodels.iv.model.IVGMMCUE.wresids.html", "iv/iv/linearmodels.iv.model.IVLIML.html", "iv/iv/linearmodels.iv.model.IVLIML.estimate_parameters.html", "iv/iv/linearmodels.iv.model.IVLIML.fit.html", "iv/iv/linearmodels.iv.model.IVLIML.formula.html", "iv/iv/linearmodels.iv.model.IVLIML.from_formula.html", "iv/iv/linearmodels.iv.model.IVLIML.has_constant.html", "iv/iv/linearmodels.iv.model.IVLIML.isnull.html", "iv/iv/linearmodels.iv.model.IVLIML.notnull.html", "iv/iv/linearmodels.iv.model.IVLIML.predict.html", "iv/iv/linearmodels.iv.model.IVLIML.resids.html", "iv/iv/linearmodels.iv.model.IVLIML.wresids.html", "iv/iv/linearmodels.iv.model._OLS.html", "iv/iv/linearmodels.iv.model._OLS.estimate_parameters.html", "iv/iv/linearmodels.iv.model._OLS.fit.html", "iv/iv/linearmodels.iv.model._OLS.formula.html", "iv/iv/linearmodels.iv.model._OLS.from_formula.html", "iv/iv/linearmodels.iv.model._OLS.has_constant.html", "iv/iv/linearmodels.iv.model._OLS.isnull.html", "iv/iv/linearmodels.iv.model._OLS.notnull.html", "iv/iv/linearmodels.iv.model._OLS.predict.html", "iv/iv/linearmodels.iv.model._OLS.resids.html", "iv/iv/linearmodels.iv.model._OLS.wresids.html", "iv/iv/linearmodels.iv.results.FirstStageResults.html", "iv/iv/linearmodels.iv.results.FirstStageResults.diagnostics.html", "iv/iv/linearmodels.iv.results.FirstStageResults.individual.html", "iv/iv/linearmodels.iv.results.FirstStageResults.summary.html", "iv/iv/linearmodels.iv.results.IVGMMResults.html", "iv/iv/linearmodels.iv.results.IVGMMResults.c_stat.html", "iv/iv/linearmodels.iv.results.IVGMMResults.conf_int.html", "iv/iv/linearmodels.iv.results.IVGMMResults.cov.html", "iv/iv/linearmodels.iv.results.IVGMMResults.cov_config.html", "iv/iv/linearmodels.iv.results.IVGMMResults.cov_estimator.html", "iv/iv/linearmodels.iv.results.IVGMMResults.cov_type.html", "iv/iv/linearmodels.iv.results.IVGMMResults.debiased.html", "iv/iv/linearmodels.iv.results.IVGMMResults.df_model.html", "iv/iv/linearmodels.iv.results.IVGMMResults.df_resid.html", "iv/iv/linearmodels.iv.results.IVGMMResults.f_statistic.html", "iv/iv/linearmodels.iv.results.IVGMMResults.first_stage.html", "iv/iv/linearmodels.iv.results.IVGMMResults.fitted_values.html", "iv/iv/linearmodels.iv.results.IVGMMResults.has_constant.html", "iv/iv/linearmodels.iv.results.IVGMMResults.idiosyncratic.html", "iv/iv/linearmodels.iv.results.IVGMMResults.iterations.html", "iv/iv/linearmodels.iv.results.IVGMMResults.j_stat.html", "iv/iv/linearmodels.iv.results.IVGMMResults.kappa.html", "iv/iv/linearmodels.iv.results.IVGMMResults.method.html", "iv/iv/linearmodels.iv.results.IVGMMResults.model_ss.html", "iv/iv/linearmodels.iv.results.IVGMMResults.nobs.html", "iv/iv/linearmodels.iv.results.IVGMMResults.params.html", "iv/iv/linearmodels.iv.results.IVGMMResults.predict.html", "iv/iv/linearmodels.iv.results.IVGMMResults.pvalues.html", "iv/iv/linearmodels.iv.results.IVGMMResults.resid_ss.html", "iv/iv/linearmodels.iv.results.IVGMMResults.resids.html", "iv/iv/linearmodels.iv.results.IVGMMResults.rsquared.html", "iv/iv/linearmodels.iv.results.IVGMMResults.rsquared_adj.html", "iv/iv/linearmodels.iv.results.IVGMMResults.s2.html", "iv/iv/linearmodels.iv.results.IVGMMResults.std_errors.html", "iv/iv/linearmodels.iv.results.IVGMMResults.summary.html", "iv/iv/linearmodels.iv.results.IVGMMResults.total_ss.html", "iv/iv/linearmodels.iv.results.IVGMMResults.tstats.html", "iv/iv/linearmodels.iv.results.IVGMMResults.wald_test.html", "iv/iv/linearmodels.iv.results.IVGMMResults.weight_config.html", "iv/iv/linearmodels.iv.results.IVGMMResults.weight_matrix.html", "iv/iv/linearmodels.iv.results.IVGMMResults.weight_type.html", "iv/iv/linearmodels.iv.results.IVGMMResults.wresids.html", "iv/iv/linearmodels.iv.results.IVModelComparison.html", "iv/iv/linearmodels.iv.results.IVModelComparison.cov_estimator.html", "iv/iv/linearmodels.iv.results.IVModelComparison.estimator_method.html", "iv/iv/linearmodels.iv.results.IVModelComparison.f_statistic.html", "iv/iv/linearmodels.iv.results.IVModelComparison.nobs.html", "iv/iv/linearmodels.iv.results.IVModelComparison.params.html", "iv/iv/linearmodels.iv.results.IVModelComparison.pvalues.html", "iv/iv/linearmodels.iv.results.IVModelComparison.rsquared.html", "iv/iv/linearmodels.iv.results.IVModelComparison.rsquared_adj.html", "iv/iv/linearmodels.iv.results.IVModelComparison.std_errors.html", "iv/iv/linearmodels.iv.results.IVModelComparison.summary.html", "iv/iv/linearmodels.iv.results.IVModelComparison.tstats.html", "iv/iv/linearmodels.iv.results.IVResults.html", "iv/iv/linearmodels.iv.results.IVResults.anderson_rubin.html", "iv/iv/linearmodels.iv.results.IVResults.basmann.html", "iv/iv/linearmodels.iv.results.IVResults.basmann_f.html", "iv/iv/linearmodels.iv.results.IVResults.conf_int.html", "iv/iv/linearmodels.iv.results.IVResults.cov.html", "iv/iv/linearmodels.iv.results.IVResults.cov_config.html", "iv/iv/linearmodels.iv.results.IVResults.cov_estimator.html", "iv/iv/linearmodels.iv.results.IVResults.cov_type.html", "iv/iv/linearmodels.iv.results.IVResults.debiased.html", "iv/iv/linearmodels.iv.results.IVResults.df_model.html", "iv/iv/linearmodels.iv.results.IVResults.df_resid.html", "iv/iv/linearmodels.iv.results.IVResults.durbin.html", "iv/iv/linearmodels.iv.results.IVResults.f_statistic.html", "iv/iv/linearmodels.iv.results.IVResults.first_stage.html", "iv/iv/linearmodels.iv.results.IVResults.fitted_values.html", "iv/iv/linearmodels.iv.results.IVResults.has_constant.html", "iv/iv/linearmodels.iv.results.IVResults.idiosyncratic.html", "iv/iv/linearmodels.iv.results.IVResults.kappa.html", "iv/iv/linearmodels.iv.results.IVResults.method.html", "iv/iv/linearmodels.iv.results.IVResults.model_ss.html", "iv/iv/linearmodels.iv.results.IVResults.nobs.html", "iv/iv/linearmodels.iv.results.IVResults.params.html", "iv/iv/linearmodels.iv.results.IVResults.predict.html", "iv/iv/linearmodels.iv.results.IVResults.pvalues.html", "iv/iv/linearmodels.iv.results.IVResults.resid_ss.html", "iv/iv/linearmodels.iv.results.IVResults.resids.html", "iv/iv/linearmodels.iv.results.IVResults.rsquared.html", "iv/iv/linearmodels.iv.results.IVResults.rsquared_adj.html", "iv/iv/linearmodels.iv.results.IVResults.s2.html", "iv/iv/linearmodels.iv.results.IVResults.sargan.html", "iv/iv/linearmodels.iv.results.IVResults.std_errors.html", "iv/iv/linearmodels.iv.results.IVResults.summary.html", "iv/iv/linearmodels.iv.results.IVResults.total_ss.html", "iv/iv/linearmodels.iv.results.IVResults.tstats.html", "iv/iv/linearmodels.iv.results.IVResults.wald_test.html", "iv/iv/linearmodels.iv.results.IVResults.wooldridge_overid.html", "iv/iv/linearmodels.iv.results.IVResults.wooldridge_regression.html", "iv/iv/linearmodels.iv.results.IVResults.wooldridge_score.html", "iv/iv/linearmodels.iv.results.IVResults.wresids.html", "iv/iv/linearmodels.iv.results.IVResults.wu_hausman.html", "iv/iv/linearmodels.iv.results.OLSResults.html", "iv/iv/linearmodels.iv.results.OLSResults.conf_int.html", "iv/iv/linearmodels.iv.results.OLSResults.cov.html", "iv/iv/linearmodels.iv.results.OLSResults.cov_config.html", "iv/iv/linearmodels.iv.results.OLSResults.cov_estimator.html", "iv/iv/linearmodels.iv.results.OLSResults.cov_type.html", "iv/iv/linearmodels.iv.results.OLSResults.debiased.html", "iv/iv/linearmodels.iv.results.OLSResults.df_model.html", "iv/iv/linearmodels.iv.results.OLSResults.df_resid.html", "iv/iv/linearmodels.iv.results.OLSResults.f_statistic.html", "iv/iv/linearmodels.iv.results.OLSResults.fitted_values.html", "iv/iv/linearmodels.iv.results.OLSResults.has_constant.html", "iv/iv/linearmodels.iv.results.OLSResults.idiosyncratic.html", "iv/iv/linearmodels.iv.results.OLSResults.kappa.html", "iv/iv/linearmodels.iv.results.OLSResults.method.html", "iv/iv/linearmodels.iv.results.OLSResults.model_ss.html", "iv/iv/linearmodels.iv.results.OLSResults.nobs.html", "iv/iv/linearmodels.iv.results.OLSResults.params.html", "iv/iv/linearmodels.iv.results.OLSResults.predict.html", "iv/iv/linearmodels.iv.results.OLSResults.pvalues.html", "iv/iv/linearmodels.iv.results.OLSResults.resid_ss.html", "iv/iv/linearmodels.iv.results.OLSResults.resids.html", "iv/iv/linearmodels.iv.results.OLSResults.rsquared.html", "iv/iv/linearmodels.iv.results.OLSResults.rsquared_adj.html", "iv/iv/linearmodels.iv.results.OLSResults.s2.html", "iv/iv/linearmodels.iv.results.OLSResults.std_errors.html", "iv/iv/linearmodels.iv.results.OLSResults.summary.html", "iv/iv/linearmodels.iv.results.OLSResults.total_ss.html", "iv/iv/linearmodels.iv.results.OLSResults.tstats.html", "iv/iv/linearmodels.iv.results.OLSResults.wald_test.html", "iv/iv/linearmodels.iv.results.OLSResults.wresids.html", "iv/iv/linearmodels.iv.results.compare.html", "iv/mathematical-formula.html", "iv/reference.html", "panel/examples/data-formats.html", "panel/examples/examples.html", "panel/examples/using-formulas.html", "panel/faq.html", "panel/index.html", "panel/introduction.html", "panel/mathematical-formula.html", "panel/pandas.html", "panel/panel/linearmodels.panel.covariance.ACCovariance.html", "panel/panel/linearmodels.panel.covariance.ACCovariance.ALLOWED_KWARGS.html", "panel/panel/linearmodels.panel.covariance.ACCovariance.DEFAULT_KERNEL.html", "panel/panel/linearmodels.panel.covariance.ACCovariance.cov.html", "panel/panel/linearmodels.panel.covariance.ACCovariance.deferred_cov.html", "panel/panel/linearmodels.panel.covariance.ACCovariance.eps.html", "panel/panel/linearmodels.panel.covariance.ACCovariance.name.html", "panel/panel/linearmodels.panel.covariance.ACCovariance.s2.html", "panel/panel/linearmodels.panel.covariance.ClusteredCovariance.html", "panel/panel/linearmodels.panel.covariance.ClusteredCovariance.ALLOWED_KWARGS.html", "panel/panel/linearmodels.panel.covariance.ClusteredCovariance.DEFAULT_KERNEL.html", "panel/panel/linearmodels.panel.covariance.ClusteredCovariance.cov.html", "panel/panel/linearmodels.panel.covariance.ClusteredCovariance.deferred_cov.html", "panel/panel/linearmodels.panel.covariance.ClusteredCovariance.eps.html", "panel/panel/linearmodels.panel.covariance.ClusteredCovariance.name.html", "panel/panel/linearmodels.panel.covariance.ClusteredCovariance.s2.html", "panel/panel/linearmodels.panel.covariance.DriscollKraay.html", "panel/panel/linearmodels.panel.covariance.DriscollKraay.ALLOWED_KWARGS.html", "panel/panel/linearmodels.panel.covariance.DriscollKraay.DEFAULT_KERNEL.html", "panel/panel/linearmodels.panel.covariance.DriscollKraay.cov.html", "panel/panel/linearmodels.panel.covariance.DriscollKraay.deferred_cov.html", "panel/panel/linearmodels.panel.covariance.DriscollKraay.eps.html", "panel/panel/linearmodels.panel.covariance.DriscollKraay.name.html", "panel/panel/linearmodels.panel.covariance.DriscollKraay.s2.html", "panel/panel/linearmodels.panel.covariance.FamaMacBethCovariance.html", "panel/panel/linearmodels.panel.covariance.FamaMacBethCovariance.ALLOWED_KWARGS.html", "panel/panel/linearmodels.panel.covariance.FamaMacBethCovariance.DEFAULT_KERNEL.html", "panel/panel/linearmodels.panel.covariance.FamaMacBethCovariance.all_params.html", "panel/panel/linearmodels.panel.covariance.FamaMacBethCovariance.bandwidth.html", "panel/panel/linearmodels.panel.covariance.FamaMacBethCovariance.cov.html", "panel/panel/linearmodels.panel.covariance.FamaMacBethCovariance.deferred_cov.html", "panel/panel/linearmodels.panel.covariance.FamaMacBethCovariance.eps.html", "panel/panel/linearmodels.panel.covariance.FamaMacBethCovariance.name.html", "panel/panel/linearmodels.panel.covariance.FamaMacBethCovariance.s2.html", "panel/panel/linearmodels.panel.covariance.HeteroskedasticCovariance.html", "panel/panel/linearmodels.panel.covariance.HeteroskedasticCovariance.ALLOWED_KWARGS.html", "panel/panel/linearmodels.panel.covariance.HeteroskedasticCovariance.DEFAULT_KERNEL.html", "panel/panel/linearmodels.panel.covariance.HeteroskedasticCovariance.cov.html", "panel/panel/linearmodels.panel.covariance.HeteroskedasticCovariance.deferred_cov.html", "panel/panel/linearmodels.panel.covariance.HeteroskedasticCovariance.eps.html", "panel/panel/linearmodels.panel.covariance.HeteroskedasticCovariance.name.html", "panel/panel/linearmodels.panel.covariance.HeteroskedasticCovariance.s2.html", "panel/panel/linearmodels.panel.covariance.HomoskedasticCovariance.html", "panel/panel/linearmodels.panel.covariance.HomoskedasticCovariance.ALLOWED_KWARGS.html", "panel/panel/linearmodels.panel.covariance.HomoskedasticCovariance.DEFAULT_KERNEL.html", "panel/panel/linearmodels.panel.covariance.HomoskedasticCovariance.cov.html", "panel/panel/linearmodels.panel.covariance.HomoskedasticCovariance.deferred_cov.html", "panel/panel/linearmodels.panel.covariance.HomoskedasticCovariance.eps.html", "panel/panel/linearmodels.panel.covariance.HomoskedasticCovariance.name.html", "panel/panel/linearmodels.panel.covariance.HomoskedasticCovariance.s2.html", "panel/panel/linearmodels.panel.data.PanelData.html", "panel/panel/linearmodels.panel.data.PanelData.copy.html", "panel/panel/linearmodels.panel.data.PanelData.count.html", "panel/panel/linearmodels.panel.data.PanelData.dataframe.html", "panel/panel/linearmodels.panel.data.PanelData.demean.html", "panel/panel/linearmodels.panel.data.PanelData.drop.html", "panel/panel/linearmodels.panel.data.PanelData.dummies.html", "panel/panel/linearmodels.panel.data.PanelData.entities.html", "panel/panel/linearmodels.panel.data.PanelData.entity_ids.html", "panel/panel/linearmodels.panel.data.PanelData.first_difference.html", "panel/panel/linearmodels.panel.data.PanelData.general_demean.html", "panel/panel/linearmodels.panel.data.PanelData.index.html", "panel/panel/linearmodels.panel.data.PanelData.isnull.html", "panel/panel/linearmodels.panel.data.PanelData.mean.html", "panel/panel/linearmodels.panel.data.PanelData.ndim.html", "panel/panel/linearmodels.panel.data.PanelData.nentity.html", "panel/panel/linearmodels.panel.data.PanelData.nobs.html", "panel/panel/linearmodels.panel.data.PanelData.nvar.html", "panel/panel/linearmodels.panel.data.PanelData.panel.html", "panel/panel/linearmodels.panel.data.PanelData.shape.html", "panel/panel/linearmodels.panel.data.PanelData.time.html", "panel/panel/linearmodels.panel.data.PanelData.time_ids.html", "panel/panel/linearmodels.panel.data.PanelData.values2d.html", "panel/panel/linearmodels.panel.data.PanelData.values3d.html", "panel/panel/linearmodels.panel.data.PanelData.vars.html", "panel/panel/linearmodels.panel.data._Panel.html", "panel/panel/linearmodels.panel.data._Panel.from_array.html", "panel/panel/linearmodels.panel.data._Panel.items.html", "panel/panel/linearmodels.panel.data._Panel.major_axis.html", "panel/panel/linearmodels.panel.data._Panel.minor_axis.html", "panel/panel/linearmodels.panel.data._Panel.shape.html", "panel/panel/linearmodels.panel.data._Panel.to_frame.html", "panel/panel/linearmodels.panel.data._Panel.values.html", "panel/panel/linearmodels.panel.model.BetweenOLS.html", "panel/panel/linearmodels.panel.model.BetweenOLS.fit.html", "panel/panel/linearmodels.panel.model.BetweenOLS.formula.html", "panel/panel/linearmodels.panel.model.BetweenOLS.from_formula.html", "panel/panel/linearmodels.panel.model.BetweenOLS.has_constant.html", "panel/panel/linearmodels.panel.model.BetweenOLS.not_null.html", "panel/panel/linearmodels.panel.model.BetweenOLS.predict.html", "panel/panel/linearmodels.panel.model.BetweenOLS.reformat_clusters.html", "panel/panel/linearmodels.panel.model.FamaMacBeth.html", "panel/panel/linearmodels.panel.model.FamaMacBeth.fit.html", "panel/panel/linearmodels.panel.model.FamaMacBeth.formula.html", "panel/panel/linearmodels.panel.model.FamaMacBeth.from_formula.html", "panel/panel/linearmodels.panel.model.FamaMacBeth.has_constant.html", "panel/panel/linearmodels.panel.model.FamaMacBeth.not_null.html", "panel/panel/linearmodels.panel.model.FamaMacBeth.predict.html", "panel/panel/linearmodels.panel.model.FamaMacBeth.reformat_clusters.html", "panel/panel/linearmodels.panel.model.FirstDifferenceOLS.html", "panel/panel/linearmodels.panel.model.FirstDifferenceOLS.fit.html", "panel/panel/linearmodels.panel.model.FirstDifferenceOLS.formula.html", "panel/panel/linearmodels.panel.model.FirstDifferenceOLS.from_formula.html", "panel/panel/linearmodels.panel.model.FirstDifferenceOLS.has_constant.html", "panel/panel/linearmodels.panel.model.FirstDifferenceOLS.not_null.html", "panel/panel/linearmodels.panel.model.FirstDifferenceOLS.predict.html", "panel/panel/linearmodels.panel.model.FirstDifferenceOLS.reformat_clusters.html", "panel/panel/linearmodels.panel.model.PanelOLS.html", "panel/panel/linearmodels.panel.model.PanelOLS.entity_effects.html", "panel/panel/linearmodels.panel.model.PanelOLS.fit.html", "panel/panel/linearmodels.panel.model.PanelOLS.formula.html", "panel/panel/linearmodels.panel.model.PanelOLS.from_formula.html", "panel/panel/linearmodels.panel.model.PanelOLS.has_constant.html", "panel/panel/linearmodels.panel.model.PanelOLS.not_null.html", "panel/panel/linearmodels.panel.model.PanelOLS.other_effects.html", "panel/panel/linearmodels.panel.model.PanelOLS.predict.html", "panel/panel/linearmodels.panel.model.PanelOLS.reformat_clusters.html", "panel/panel/linearmodels.panel.model.PanelOLS.time_effects.html", "panel/panel/linearmodels.panel.model.PooledOLS.html", "panel/panel/linearmodels.panel.model.PooledOLS.fit.html", "panel/panel/linearmodels.panel.model.PooledOLS.formula.html", "panel/panel/linearmodels.panel.model.PooledOLS.from_formula.html", "panel/panel/linearmodels.panel.model.PooledOLS.has_constant.html", "panel/panel/linearmodels.panel.model.PooledOLS.not_null.html", "panel/panel/linearmodels.panel.model.PooledOLS.predict.html", "panel/panel/linearmodels.panel.model.PooledOLS.reformat_clusters.html", "panel/panel/linearmodels.panel.model.RandomEffects.html", "panel/panel/linearmodels.panel.model.RandomEffects.fit.html", "panel/panel/linearmodels.panel.model.RandomEffects.formula.html", "panel/panel/linearmodels.panel.model.RandomEffects.from_formula.html", "panel/panel/linearmodels.panel.model.RandomEffects.has_constant.html", "panel/panel/linearmodels.panel.model.RandomEffects.not_null.html", "panel/panel/linearmodels.panel.model.RandomEffects.predict.html", "panel/panel/linearmodels.panel.model.RandomEffects.reformat_clusters.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.all_params.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.avg_adj_rsquared.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.avg_rsquared.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.conf_int.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.corr_squared_between.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.corr_squared_overall.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.corr_squared_within.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.cov.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.df_model.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.df_resid.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.entity_info.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.estimated_effects.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.f_statistic.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.f_statistic_robust.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.fitted_values.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.idiosyncratic.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.loglik.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.model_ss.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.name.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.nobs.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.params.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.predict.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.pvalues.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.resid_ss.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.resids.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.rsquared.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.rsquared_between.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.rsquared_overall.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.rsquared_within.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.s2.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.std_errors.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.summary.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.time_info.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.total_ss.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.tstats.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.wald_test.html", "panel/panel/linearmodels.panel.results.FamaMacBethResults.wresids.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.conf_int.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.corr_squared_between.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.corr_squared_overall.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.corr_squared_within.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.cov.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.df_model.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.df_resid.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.entity_info.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.estimated_effects.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.f_pooled.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.f_statistic.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.f_statistic_robust.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.fitted_values.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.idiosyncratic.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.included_effects.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.loglik.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.model_ss.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.name.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.nobs.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.other_info.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.params.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.predict.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.pvalues.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.resid_ss.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.resids.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.rsquared.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.rsquared_between.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.rsquared_inclusive.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.rsquared_overall.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.rsquared_within.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.s2.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.std_errors.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.summary.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.time_info.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.total_ss.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.tstats.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.variance_decomposition.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.wald_test.html", "panel/panel/linearmodels.panel.results.PanelEffectsResults.wresids.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.cov_estimator.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.estimator_method.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.f_statistic.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.nobs.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.params.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.pvalues.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.rsquared.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.rsquared_between.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.rsquared_overall.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.rsquared_within.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.std_errors.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.summary.html", "panel/panel/linearmodels.panel.results.PanelModelComparison.tstats.html", "panel/panel/linearmodels.panel.results.PanelResults.html", "panel/panel/linearmodels.panel.results.PanelResults.conf_int.html", "panel/panel/linearmodels.panel.results.PanelResults.corr_squared_between.html", "panel/panel/linearmodels.panel.results.PanelResults.corr_squared_overall.html", "panel/panel/linearmodels.panel.results.PanelResults.corr_squared_within.html", "panel/panel/linearmodels.panel.results.PanelResults.cov.html", "panel/panel/linearmodels.panel.results.PanelResults.df_model.html", "panel/panel/linearmodels.panel.results.PanelResults.df_resid.html", "panel/panel/linearmodels.panel.results.PanelResults.entity_info.html", "panel/panel/linearmodels.panel.results.PanelResults.estimated_effects.html", "panel/panel/linearmodels.panel.results.PanelResults.f_statistic.html", "panel/panel/linearmodels.panel.results.PanelResults.f_statistic_robust.html", "panel/panel/linearmodels.panel.results.PanelResults.fitted_values.html", "panel/panel/linearmodels.panel.results.PanelResults.idiosyncratic.html", "panel/panel/linearmodels.panel.results.PanelResults.loglik.html", "panel/panel/linearmodels.panel.results.PanelResults.model_ss.html", "panel/panel/linearmodels.panel.results.PanelResults.name.html", "panel/panel/linearmodels.panel.results.PanelResults.nobs.html", "panel/panel/linearmodels.panel.results.PanelResults.params.html", "panel/panel/linearmodels.panel.results.PanelResults.predict.html", "panel/panel/linearmodels.panel.results.PanelResults.pvalues.html", "panel/panel/linearmodels.panel.results.PanelResults.resid_ss.html", "panel/panel/linearmodels.panel.results.PanelResults.resids.html", "panel/panel/linearmodels.panel.results.PanelResults.rsquared.html", "panel/panel/linearmodels.panel.results.PanelResults.rsquared_between.html", "panel/panel/linearmodels.panel.results.PanelResults.rsquared_overall.html", "panel/panel/linearmodels.panel.results.PanelResults.rsquared_within.html", "panel/panel/linearmodels.panel.results.PanelResults.s2.html", "panel/panel/linearmodels.panel.results.PanelResults.std_errors.html", "panel/panel/linearmodels.panel.results.PanelResults.summary.html", "panel/panel/linearmodels.panel.results.PanelResults.time_info.html", "panel/panel/linearmodels.panel.results.PanelResults.total_ss.html", "panel/panel/linearmodels.panel.results.PanelResults.tstats.html", "panel/panel/linearmodels.panel.results.PanelResults.wald_test.html", "panel/panel/linearmodels.panel.results.PanelResults.wresids.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.conf_int.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.corr_squared_between.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.corr_squared_overall.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.corr_squared_within.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.cov.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.df_model.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.df_resid.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.entity_info.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.estimated_effects.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.f_statistic.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.f_statistic_robust.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.fitted_values.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.idiosyncratic.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.loglik.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.model_ss.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.name.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.nobs.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.params.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.predict.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.pvalues.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.resid_ss.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.resids.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.rsquared.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.rsquared_between.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.rsquared_overall.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.rsquared_within.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.s2.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.std_errors.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.summary.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.theta.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.time_info.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.total_ss.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.tstats.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.variance_decomposition.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.wald_test.html", "panel/panel/linearmodels.panel.results.RandomEffectsResults.wresids.html", "panel/panel/linearmodels.panel.results.compare.html", "panel/panel/linearmodels.panel.utility.PanelModelData.html", "panel/panel/linearmodels.panel.utility.PanelModelData.clusters.html", "panel/panel/linearmodels.panel.utility.PanelModelData.count.html", "panel/panel/linearmodels.panel.utility.PanelModelData.data.html", "panel/panel/linearmodels.panel.utility.PanelModelData.index.html", "panel/panel/linearmodels.panel.utility.PanelModelData.other_effects.html", "panel/panel/linearmodels.panel.utility.PanelModelData.weights.html", "panel/panel/linearmodels.panel.utility.generate_panel_data.html", "panel/reference.html", "plan.html", "references.html", "system/examples/examples.html", "system/examples/formulas.html", "system/examples/three-stage-ls.html", "system/index.html", "system/mathematical-formula.html", "system/reference.html", "system/system/linearmodels.system.covariance.ClusteredCovariance.html", "system/system/linearmodels.system.covariance.ClusteredCovariance.cov.html", "system/system/linearmodels.system.covariance.ClusteredCovariance.cov_config.html", "system/system/linearmodels.system.covariance.ClusteredCovariance.sigma.html", "system/system/linearmodels.system.covariance.GMMHeteroskedasticCovariance.html", "system/system/linearmodels.system.covariance.GMMHeteroskedasticCovariance.cov.html", "system/system/linearmodels.system.covariance.GMMHeteroskedasticCovariance.cov_config.html", "system/system/linearmodels.system.covariance.GMMHomoskedasticCovariance.html", "system/system/linearmodels.system.covariance.GMMHomoskedasticCovariance.cov.html", "system/system/linearmodels.system.covariance.GMMHomoskedasticCovariance.cov_config.html", "system/system/linearmodels.system.covariance.GMMKernelCovariance.html", "system/system/linearmodels.system.covariance.GMMKernelCovariance.bandwidth.html", "system/system/linearmodels.system.covariance.GMMKernelCovariance.cov.html", "system/system/linearmodels.system.covariance.GMMKernelCovariance.cov_config.html", "system/system/linearmodels.system.covariance.GMMKernelCovariance.kernel.html", "system/system/linearmodels.system.covariance.HeteroskedasticCovariance.html", "system/system/linearmodels.system.covariance.HeteroskedasticCovariance.cov.html", "system/system/linearmodels.system.covariance.HeteroskedasticCovariance.cov_config.html", "system/system/linearmodels.system.covariance.HeteroskedasticCovariance.sigma.html", "system/system/linearmodels.system.covariance.HomoskedasticCovariance.html", "system/system/linearmodels.system.covariance.HomoskedasticCovariance.cov.html", "system/system/linearmodels.system.covariance.HomoskedasticCovariance.cov_config.html", "system/system/linearmodels.system.covariance.HomoskedasticCovariance.sigma.html", "system/system/linearmodels.system.covariance.KernelCovariance.html", "system/system/linearmodels.system.covariance.KernelCovariance.bandwidth.html", "system/system/linearmodels.system.covariance.KernelCovariance.cov.html", "system/system/linearmodels.system.covariance.KernelCovariance.cov_config.html", "system/system/linearmodels.system.covariance.KernelCovariance.kernel.html", "system/system/linearmodels.system.covariance.KernelCovariance.sigma.html", "system/system/linearmodels.system.gmm.HeteroskedasticWeightMatrix.html", "system/system/linearmodels.system.gmm.HeteroskedasticWeightMatrix.config.html", "system/system/linearmodels.system.gmm.HeteroskedasticWeightMatrix.sigma.html", "system/system/linearmodels.system.gmm.HeteroskedasticWeightMatrix.weight_matrix.html", "system/system/linearmodels.system.gmm.HomoskedasticWeightMatrix.html", "system/system/linearmodels.system.gmm.HomoskedasticWeightMatrix.config.html", "system/system/linearmodels.system.gmm.HomoskedasticWeightMatrix.sigma.html", "system/system/linearmodels.system.gmm.HomoskedasticWeightMatrix.weight_matrix.html", "system/system/linearmodels.system.gmm.KernelWeightMatrix.html", "system/system/linearmodels.system.gmm.KernelWeightMatrix.bandwidth.html", "system/system/linearmodels.system.gmm.KernelWeightMatrix.config.html", "system/system/linearmodels.system.gmm.KernelWeightMatrix.kernel.html", "system/system/linearmodels.system.gmm.KernelWeightMatrix.sigma.html", "system/system/linearmodels.system.gmm.KernelWeightMatrix.weight_matrix.html", "system/system/linearmodels.system.model.IV3SLS.html", "system/system/linearmodels.system.model.IV3SLS.add_constraints.html", "system/system/linearmodels.system.model.IV3SLS.constraints.html", "system/system/linearmodels.system.model.IV3SLS.fit.html", "system/system/linearmodels.system.model.IV3SLS.formula.html", "system/system/linearmodels.system.model.IV3SLS.from_formula.html", "system/system/linearmodels.system.model.IV3SLS.has_constant.html", "system/system/linearmodels.system.model.IV3SLS.multivariate_iv.html", "system/system/linearmodels.system.model.IV3SLS.param_names.html", "system/system/linearmodels.system.model.IV3SLS.predict.html", "system/system/linearmodels.system.model.IV3SLS.reset_constraints.html", "system/system/linearmodels.system.model.IVSystemGMM.html", "system/system/linearmodels.system.model.IVSystemGMM.add_constraints.html", "system/system/linearmodels.system.model.IVSystemGMM.constraints.html", "system/system/linearmodels.system.model.IVSystemGMM.fit.html", "system/system/linearmodels.system.model.IVSystemGMM.formula.html", "system/system/linearmodels.system.model.IVSystemGMM.from_formula.html", "system/system/linearmodels.system.model.IVSystemGMM.has_constant.html", "system/system/linearmodels.system.model.IVSystemGMM.param_names.html", "system/system/linearmodels.system.model.IVSystemGMM.predict.html", "system/system/linearmodels.system.model.IVSystemGMM.reset_constraints.html", "system/system/linearmodels.system.model.LinearConstraint.html", "system/system/linearmodels.system.model.LinearConstraint.a.html", "system/system/linearmodels.system.model.LinearConstraint.q.html", "system/system/linearmodels.system.model.LinearConstraint.r.html", "system/system/linearmodels.system.model.LinearConstraint.t.html", "system/system/linearmodels.system.model.SUR.html", "system/system/linearmodels.system.model.SUR.add_constraints.html", "system/system/linearmodels.system.model.SUR.constraints.html", "system/system/linearmodels.system.model.SUR.fit.html", "system/system/linearmodels.system.model.SUR.formula.html", "system/system/linearmodels.system.model.SUR.from_formula.html", "system/system/linearmodels.system.model.SUR.has_constant.html", "system/system/linearmodels.system.model.SUR.multivariate_ls.html", "system/system/linearmodels.system.model.SUR.param_names.html", "system/system/linearmodels.system.model.SUR.predict.html", "system/system/linearmodels.system.model.SUR.reset_constraints.html", "system/system/linearmodels.system.results.GMMSystemResults.html", "system/system/linearmodels.system.results.GMMSystemResults.breusch_pagan.html", "system/system/linearmodels.system.results.GMMSystemResults.conf_int.html", "system/system/linearmodels.system.results.GMMSystemResults.cov.html", "system/system/linearmodels.system.results.GMMSystemResults.cov_config.html", "system/system/linearmodels.system.results.GMMSystemResults.cov_estimator.html", "system/system/linearmodels.system.results.GMMSystemResults.debiased.html", "system/system/linearmodels.system.results.GMMSystemResults.df_model.html", "system/system/linearmodels.system.results.GMMSystemResults.df_resid.html", "system/system/linearmodels.system.results.GMMSystemResults.equation_labels.html", "system/system/linearmodels.system.results.GMMSystemResults.equations.html", "system/system/linearmodels.system.results.GMMSystemResults.fitted_values.html", "system/system/linearmodels.system.results.GMMSystemResults.iterations.html", "system/system/linearmodels.system.results.GMMSystemResults.j_stat.html", "system/system/linearmodels.system.results.GMMSystemResults.likelihood_ratio.html", "system/system/linearmodels.system.results.GMMSystemResults.method.html", "system/system/linearmodels.system.results.GMMSystemResults.model.html", "system/system/linearmodels.system.results.GMMSystemResults.model_ss.html", "system/system/linearmodels.system.results.GMMSystemResults.nobs.html", "system/system/linearmodels.system.results.GMMSystemResults.params.html", "system/system/linearmodels.system.results.GMMSystemResults.predict.html", "system/system/linearmodels.system.results.GMMSystemResults.pvalues.html", "system/system/linearmodels.system.results.GMMSystemResults.resid_ss.html", "system/system/linearmodels.system.results.GMMSystemResults.resids.html", "system/system/linearmodels.system.results.GMMSystemResults.rsquared.html", "system/system/linearmodels.system.results.GMMSystemResults.sigma.html", "system/system/linearmodels.system.results.GMMSystemResults.std_errors.html", "system/system/linearmodels.system.results.GMMSystemResults.summary.html", "system/system/linearmodels.system.results.GMMSystemResults.system_rsquared.html", "system/system/linearmodels.system.results.GMMSystemResults.total_ss.html", "system/system/linearmodels.system.results.GMMSystemResults.tstats.html", "system/system/linearmodels.system.results.GMMSystemResults.w.html", "system/system/linearmodels.system.results.GMMSystemResults.weight_config.html", "system/system/linearmodels.system.results.GMMSystemResults.weight_type.html", "system/system/linearmodels.system.results.GMMSystemResults.wresids.html", "system/system/linearmodels.system.results.SystemResults.html", "system/system/linearmodels.system.results.SystemResults.breusch_pagan.html", "system/system/linearmodels.system.results.SystemResults.conf_int.html", "system/system/linearmodels.system.results.SystemResults.cov.html", "system/system/linearmodels.system.results.SystemResults.cov_config.html", "system/system/linearmodels.system.results.SystemResults.cov_estimator.html", "system/system/linearmodels.system.results.SystemResults.debiased.html", "system/system/linearmodels.system.results.SystemResults.df_model.html", "system/system/linearmodels.system.results.SystemResults.df_resid.html", "system/system/linearmodels.system.results.SystemResults.equation_labels.html", "system/system/linearmodels.system.results.SystemResults.equations.html", "system/system/linearmodels.system.results.SystemResults.fitted_values.html", "system/system/linearmodels.system.results.SystemResults.iterations.html", "system/system/linearmodels.system.results.SystemResults.likelihood_ratio.html", "system/system/linearmodels.system.results.SystemResults.method.html", "system/system/linearmodels.system.results.SystemResults.model.html", "system/system/linearmodels.system.results.SystemResults.model_ss.html", "system/system/linearmodels.system.results.SystemResults.nobs.html", "system/system/linearmodels.system.results.SystemResults.params.html", "system/system/linearmodels.system.results.SystemResults.predict.html", "system/system/linearmodels.system.results.SystemResults.pvalues.html", "system/system/linearmodels.system.results.SystemResults.resid_ss.html", "system/system/linearmodels.system.results.SystemResults.resids.html", "system/system/linearmodels.system.results.SystemResults.rsquared.html", "system/system/linearmodels.system.results.SystemResults.sigma.html", "system/system/linearmodels.system.results.SystemResults.std_errors.html", "system/system/linearmodels.system.results.SystemResults.summary.html", "system/system/linearmodels.system.results.SystemResults.system_rsquared.html", "system/system/linearmodels.system.results.SystemResults.total_ss.html", "system/system/linearmodels.system.results.SystemResults.tstats.html", "system/system/linearmodels.system.results.SystemResults.wresids.html", "utility.html", "utility/linearmodels.shared.covariance.cov_cluster.html", "utility/linearmodels.shared.covariance.cov_kernel.html", "utility/linearmodels.shared.covariance.group_debias_coefficient.html", "utility/linearmodels.shared.hypotheses.InvalidTestStatistic.html", "utility/linearmodels.shared.hypotheses.InvalidTestStatistic.critical_values.html", "utility/linearmodels.shared.hypotheses.InvalidTestStatistic.null.html", "utility/linearmodels.shared.hypotheses.InvalidTestStatistic.pval.html", "utility/linearmodels.shared.hypotheses.InvalidTestStatistic.stat.html", "utility/linearmodels.shared.hypotheses.WaldTestStatistic.html", "utility/linearmodels.shared.hypotheses.WaldTestStatistic.critical_values.html", "utility/linearmodels.shared.hypotheses.WaldTestStatistic.null.html", "utility/linearmodels.shared.hypotheses.WaldTestStatistic.pval.html", "utility/linearmodels.shared.hypotheses.WaldTestStatistic.stat.html", "utility/linearmodels.shared.utility.AttrDict.html", "utility/linearmodels.shared.utility.AttrDict.clear.html", "utility/linearmodels.shared.utility.AttrDict.copy.html", "utility/linearmodels.shared.utility.AttrDict.get.html", "utility/linearmodels.shared.utility.AttrDict.items.html", "utility/linearmodels.shared.utility.AttrDict.keys.html", "utility/linearmodels.shared.utility.AttrDict.pop.html", "utility/linearmodels.shared.utility.AttrDict.popitem.html", "utility/linearmodels.shared.utility.AttrDict.setdefault.html", "utility/linearmodels.shared.utility.AttrDict.update.html", "utility/linearmodels.shared.utility.AttrDict.values.html"]})